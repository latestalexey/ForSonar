Перем ТекущаяВкладка Экспорт;

Процедура УстановитьТипЗначенияКолонки(Колонка,Тип1С)
	
	ПолеФормы	= Колонка.ЭлементУправления;
	ТипПоля		= ПолучитьТипЗначенияОбъекта(Тип1С);
	
	Если ТипПоля = Неопределено Тогда
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
	Иначе	
		
		ПолеФормы.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипыЗначенийПолей()
	
	УстановитьТипЗначенияКолонки(ЭлементыФормы.ТаблицаЮрФизЛиц.Колонки.ЮрФизЛицо,		"ЮрФизЛицоСвое");
	
	УстановитьТипЗначенияКолонки(ЭлементыФормы.ТаблицаТочекДоставки.Колонки.ТочкаДоставки,	"ТочкаДоставкиСвоя");
	
КонецПроцедуры

Процедура ОбновитьСписокЮрЛиц()
	
	ТаблицаЮрФизЛиц.Очистить();
	
	СписокЮрЛиц = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
	
	Для каждого Стр ИЗ СписокЮрЛиц Цикл
			
		НоваяСтрока = ТаблицаЮрФизЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСписокТочекДоставки()
	
	ТаблицаТочекДоставки.Очистить();
	
	СписокТочекДоставки = ПолучитьСписокЭлементовСправочника("ТочкиДоставкиСвои");
		
	Для каждого Стр ИЗ СписокТочекДоставки Цикл
			
		НоваяСтрока = ТаблицаТочекДоставки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	GLN					= ПолучитьКонстантуEDI("GLN_Основной");
	
	МыПоставщик			= НастройкиМодуля.МыПоставщик;
	МыТорговаяСеть		= НастройкиМодуля.МыТорговаяСеть;
	
	Если МыТорговаяСеть = Истина Тогда
		КтоМы = "ТорговаяСеть";
	Иначе
		КтоМы = "Поставщик";
	КонецЕсли;
	
	УправлениеВидимостью();
	
	ОбновитьСписокЮрЛиц();
    ОбновитьСписокТочекДоставки();
	
	УстановитьТипыЗначенийПолей();

	//+синонимы
	
	ТабСинонимов = Новый ТаблицаЗначений;
	
	ТипПоляЮрФизЛицоСвое		= ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое");
	
	ТабСинонимов.Колонки.Добавить("ЮрФизЛицо",Новый ОписаниеТипов(ТипПоляЮрФизЛицоСвое));
	ТабСинонимов.Колонки.Добавить("GLN",Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаЮрФизЛица Из ТаблицаЮрФизЛиц Цикл
		
		СинонимыОднойСтрокой = ПолучитьЗначениеСвойстваОбъектаEDI(СтрокаЮрФизЛица.ЮрФизЛицо, "GLN_Организации_Синонимы");
		
		МассивСинонимов = EDI_РазложитьСтрокуВМассивСлов(СинонимыОднойСтрокой,",");
		Для Каждого Синоним Из МассивСинонимов Цикл
			НовСтрока = ТабСинонимов.Добавить();
			НовСтрока.ЮрФизЛицо = СтрокаЮрФизЛица.ЮрФизЛицо;
			НовСтрока.GLN = Синоним;
		КонецЦикла;
		
	КонецЦикла;	
	
	СинонимыОрганизации = ТабСинонимов;
	УстановитьТипЗначенияКолонки(ЭлементыФормы.СинонимыОрганизации.Колонки.ЮрФизЛицо,		"ЮрФизЛицоСвое");
	//-синонимы
	
	ПриОткрытииФормы(ЭтаФорма);
	
	Если ЗначениеЗаполнено(ТекущаяВкладка) Тогда
		ЭлементыФормы.ПанельСоответствий.ТекущаяСтраница = ЭлементыФормы.ПанельСоответствий.Страницы[ТекущаяВкладка];
	КонецЕсли;
	
	Оповестить("КонтурEDI_АктивизироватьФормуОшибок","Открытие",ЭтаФорма);
	
	// Автотесты
	Если ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда

		ПодключитьОбработчикОжидания("ЗаписатьНастройкиАвтотестирования",0.1,Истина);
		
	КонецЕсли;
	СтандартнаяОбработка=Истина;
    ОбработкаСобытияПодключаемогоМодуля("ПриОткрытииФормыСтруктурыКомпании",СтандартнаяОбработка, Новый Структура("Форма", ЭтаФорма));

КонецПроцедуры

Процедура ЗаписатьНастройкиАвтотестирования()
	      
	СтруктураПараметров = ПараметрыАвтотестирования.Настройки.СтруктураКомпании;
	
	GLN = СтруктураПараметров.GLN;
	
	МыПоставщик			= СтруктураПараметров.Поставщик;
	МыТорговаяСеть		= СтруктураПараметров.Покупатель;
	
	Для Каждого Стр ИЗ СтруктураПараметров.ЮрЛица Цикл
		
		НоваяСтрока = ТаблицаЮрФизЛиц.Добавить();
		НоваяСтрока.ЮрФизЛицо = Справочники.Организации.НайтиПоКоду(Стр.Организация);
		НоваяСтрока.GLN = Стр.GLN;
		
	КонецЦикла;
	
	СохранитьИзменения();
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

Процедура УдалитьТекущуюСтроку(ЭлементТаблицы,Таблица)
	
	ТекСтрока = ЭлементТаблицы.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		Таблица.Удалить(ТекСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЮрФизЛицКнопкаДобавить(Кнопка)
	
	ТаблицаЮрФизЛиц.Добавить();
	
КонецПроцедуры

Процедура КоманднаяПанельЮрФизЛицКнопкаУдалить(Кнопка)
	
	УдалитьТекущуюСтроку(ЭлементыФормы.ТаблицаЮрФизЛиц,ТаблицаЮрФизЛиц);

КонецПроцедуры

Процедура ТаблицаЮрФизЛицПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	ТекущаяСтрока = ЭлементыФормы.ТаблицаЮрФизЛиц.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЮрФизЛицо) Тогда
			ТекущаяСтрока.ЮрФизЛицо = ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСвое");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаТочекДоставкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаТочекДоставки.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТочкаДоставки) Тогда
			Если МыТорговаяСеть и МыПоставщик Тогда
				//выбери тип пожалуйста 
			ИначеЕсли МыТорговаяСеть Тогда
				ТекущаяСтрока.ТочкаДоставки = ПолучитьПустуюСсылкуОбъекта("ТочкаДоставкиСвоя");
			ИначеЕсли ПолучитьПустуюСсылкуОбъекта("Грузоотправитель")<>неопределено Тогда 
				ТекущаяСтрока.ТочкаДоставки = ПолучитьПустуюСсылкуОбъекта("Грузоотправитель");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТочекДоставкиКнопкаДобавить(Кнопка)
	
	НоваяСтрока = ТаблицаТочекДоставки.Добавить();
	
КонецПроцедуры

Процедура КоманднаяПанельТочекДоставкиКнопкаУдалить(Кнопка)
	
	УдалитьТекущуюСтроку(ЭлементыФормы.ТаблицаТочекДоставки,ТаблицаТочекДоставки);
	
КонецПроцедуры

Процедура СохранитьИзменения()
	
	УстановитьКонстантуEDI("GLN_Основной",	GLN);
	
	УстановитьКонстантуEDI("МыПоставщик",	МыПоставщик);
	УстановитьКонстантуEDI("МыТорговаяСеть",	МыТорговаяСеть);
	
	СохранитьСписокЭлементовСправочника("ЮрФизЛицаСвои",		ТаблицаЮрФизЛиц);
	
	Если МыТорговаяСеть ИЛИ ЭлементыФормы.ПанельСоответствий.Страницы.СтраницаТочкиДоставки.Видимость = Истина Тогда  //видимость - признак принудительного использования грузоотправителей
    	СохранитьСписокЭлементовСправочника("ТочкиДоставкиСвои",	ТаблицаТочекДоставки);
	КонецЕсли;
	
	
	//предварительно удалим все предыдущие синонимы
	Если ВнешнееХранилище Тогда
		НаборЗаписей = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьНаборЗаписей();
	КонецЕсли;
	НаборЗаписей.Отбор.Свойство.Установить("GLN_Организации_Синонимы");
	НаборЗаписей.Записать();
	
	//и запишем новые
	_ЮрФизЛица = СинонимыОрганизации.Скопировать(,"ЮрфизЛицо");
	_ЮрФизЛица.Свернуть("ЮрфизЛицо");
	Для Каждого СтрокаЮрФизЛица Из _ЮрФизЛица Цикл
		СтрокиСинонимов = СинонимыОрганизации.НайтиСтроки(Новый Структура("ЮрФизЛицо",СтрокаЮрФизЛица.ЮрФизЛицо));
		СинонимыОднойСтрокой = "";
		Для Каждого СтрокаСинонимов Из СтрокиСинонимов Цикл
			СинонимыОднойСтрокой = ?(СинонимыОднойСтрокой="","",СинонимыОднойСтрокой+",")+СтрокаСинонимов.GLN;
		КонецЦикла;
		УстановитьЗначениеСвойстваОбъекта(СтрокаЮрФизЛица.ЮрФизЛицо, "GLN_Организации_Синонимы", СинонимыОднойСтрокой);
	КонецЦикла;
	
	Попытка
		НастройкиМодуля = ПолучитьНастройкиМодуля();//обновим кэш, вдруг галочку поменяли
		ОбновитьТаблицуТиповЗначенияОбъектов();//от того, поставщик мы или покупатель, будут зависеть и типы документов
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

Функция ПроверитьЗначенияФормы()
	
	// 1. инициализируем таблицу вывода ошибок
	ТаблицаОшибок = ИнициализироватьТаблицуОшибок();
	
	// 2. передать структуру для проверки
	Если МыПоставщик Тогда
		ПроверитьПолеФормы(ТаблицаОшибок, GLN,	 "GLN",	Истина, "GLN");
	Иначе
		ПроверитьПолеФормы(ТаблицаОшибок, GLN,	 "GLN",	 , "GLN");
	КонецЕсли;
	
	// юр лица
	
	ТабПроверки = ТаблицаЮрФизЛиц.Скопировать();
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ЮрФизЛицо", "Юр\физ лицо");
	СписокПолей.Добавить("GLN","GLN");
	
	НайтиДублиВТаблице(ТаблицаОшибок,ТабПроверки, "ЮрФизЛицо", "Юр. лица", "Юр\физ лицо");
	НайтиДублиВТаблице(ТаблицаОшибок,ТабПроверки, "GLN", 		"Юр. лица", "GLN");
	
	сч = 0;
	
	Для каждого Стр Из ТабПроверки Цикл
		
		сч = сч + 1;
		
		Если ЗначениеЗаполнено(Стр.GLN) ИЛИ ЗначениеЗаполнено(Стр.ЮрФизЛицо) Тогда
		
	 		ПроверитьПолеФормы(ТаблицаОшибок, Стр.GLN,			"GLN", Истина, "GLN", 		"ТаблицаЮрФизЛиц",сч,				,"Юр. лица");
	 		ПроверитьПолеФормы(ТаблицаОшибок, Стр.ЮрФизЛицо,		 , Истина, "ЮрФизЛицо", "ТаблицаЮрФизЛиц",сч,"Юр\физ лицо"	,"Юр. лица");
		
		КонецЕсли;
		
	КонецЦикла;
	
	// точки доставки
	
	ТабПроверки = ТаблицаТочекДоставки.Скопировать();
	
	//НайтиДублиВТаблице(ТаблицаОшибок, ТабПроверки, "GLN",				"Точки доставки", "GLN");
	НайтиДублиВТаблице(ТаблицаОшибок, ТабПроверки, "ТочкаДоставки",	"Точки доставки", "Точка доставки");
	
	сч = 0;
	
	Для каждого Стр Из ТабПроверки Цикл
		
		сч = сч + 1;
		
		Если ЗначениеЗаполнено(Стр.GLN) ИЛИ ЗначениеЗаполнено(Стр.ТочкаДоставки) Тогда
			
			ПроверитьПолеФормы(ТаблицаОшибок, Стр.GLN,				"GLN", Истина, "GLN", 			"ТаблицаТочекДоставки",сч,					,"Точки доставки");
	 		ПроверитьПолеФормы(ТаблицаОшибок, Стр.ТочкаДоставки,		 , Истина, "ТочкаДоставки", "ТаблицаТочекДоставки",сч,"Точка доставки"	,"Точки доставки");
			
		КонецЕсли;
			
	КонецЦикла;
	
	// доп. проверки
	
	Если МыТорговаяСеть Тогда
		
		Если НЕ ЗначениеЗаполнено(GLN) Тогда
			
			Если ТаблицаТочекДоставки.Количество() = 0 Тогда
				
				ТекстОшибки = "В случае, когда не указан основной код GLN, список точек доставки должен быть обязательно заполнен.";
				ЗафиксироватьОшибку(ТаблицаОшибок,"GLN","ТаблицаТочекДоставки",,ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	//проверим синонимы
	Для Каждого СтрокаСинонима Из СинонимыОрганизации Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСинонима.GLN) Тогда
			
			ЗафиксироватьОшибку(ТаблицаОшибок,"GLN","СинонимыОрганизации",,"Не заполнены все GLN на закладке ""Синонимы""");
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаСинонима.ЮрФизЛицо) Тогда
			
			ЗафиксироватьОшибку(ТаблицаОшибок,"ЮрФизЛицо","СинонимыОрганизации",,"Не заполнены все юр\физ.лица на закладке ""Синонимы""");
			
		ИначеЕсли ТаблицаЮрФизЛиц.Найти(СтрокаСинонима.ЮрФизЛицо,"ЮрФизЛицо")=Неопределено Тогда
			
			ЗафиксироватьОшибку(ТаблицаОшибок,"ЮрФизЛицо","СинонимыОрганизации",,"Юр\физ.лицо "+СтрокаСинонима.ЮрФизЛицо+" на закладке ""Синонимы"" отсутствует в структуре компании");
			
		ИначеЕсли ТаблицаЮрФизЛиц.Найти(СтрокаСинонима.GLN,"GLN")<>Неопределено Тогда
			
			ЮрФизЛицоДубль = ТаблицаЮрФизЛиц.Найти(СтрокаСинонима.GLN,"GLN").ЮрФизЛицо;
			ЗафиксироватьОшибку(ТаблицаОшибок,"GLN","СинонимыОрганизации",,"Синоним "+СтрокаСинонима.GLN+" уже указан в качестве основного GLN для юр\физ.лица "+ЮрФизЛицоДубль);
			
		ИначеЕсли СинонимыОрганизации.НайтиСтроки(Новый Структура("GLN",СтрокаСинонима.GLN)).Количество()>1 Тогда
			
			ЗафиксироватьОшибку(ТаблицаОшибок,"GLN","СинонимыОрганизации",,"Синоним "+СтрокаСинонима.GLN+" встречается несколько раз");
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		ТекстЗаголовка = "При заполнении структуры компании найдены ошибки.";
			
		ОткрытьФормуВыводаОшибок(ТекстЗаголовка,ТаблицаОшибок,ЭтаФорма);
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
	// 3. обработать результат
	
КонецФункции

Функция ОсновныеДействияФормыОсновныеДействияФормыВыполнить(Кнопка) Экспорт
	
	Если НЕ ПроверитьЗначенияФормы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Если НЕ ПроверитьЮрЛиц() Тогда
	//	Предупреждение("Неверно заполнен список юридических лиц!");
	//	Возврат Ложь;
	//КонецЕсли;
	//Если НЕ ПроверитьТочкиДоставки() Тогда
	//	Предупреждение("Неверно заполнен список точек доставки!");
	//	Возврат Ложь;
	//КонецЕсли;
	
	СохранитьИзменения();
	
	Оповестить("КонтурEDI_НастроитьФорму");
	
	ЭтаФорма.Закрыть();
	
КонецФункции

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
КонецПроцедуры

// Проверки полей
Функция мНайтиДублиВТаблице(ТаблицаПроверки,Поле,ИмяТаблицы,ИмяПоля)
	
	Таблица = ТаблицаПроверки.Скопировать();
	
	ЕстьОшибки = Ложь;
	
	Таблица.Колонки.Добавить("Признак");
	Таблица.ЗаполнитьЗначения(1,"Признак");
	
	Таблица.Свернуть(Поле,"Признак");
	
	Для Каждого Стр Из Таблица Цикл
		
		Если Стр.Признак>1 Тогда
			Сообщить("В таблице " + ИмяТаблицы + ", "+ИмяПоля+": """+СокрЛП(Стр[Поле])+""" встречается несколько раз ("+Строка(Стр.Признак)+")!",СтатусСообщения.Внимание);
			ЕстьОшибки = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ЕстьПустыеЗначенияВТаблице(ТабПроверки,СписокПолей,ИмяТаблицы)
	
	ЕстьОшибки = Ложь;
	
	сч = 0;
	
	Для Каждого Стр Из ТабПроверки Цикл
		сч = сч+1;
		Для Каждого Поле Из СписокПолей Цикл
			Если НЕ ЗначениеЗаполнено(Стр[Поле.Значение]) Тогда
				Сообщить("В таблице " + ИмяТаблицы + ", в строке "+Строка(сч)+" не заполнено поле """+Поле.Представление+"""",СтатусСообщения.Внимание); 
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ЕстьОшибкиВGLN(ТабПроверки,ИмяТаблицы)
	
	ЕстьОшибки = Ложь;
	
	сч = 0;
	
	Для Каждого Стр Из ТабПроверки Цикл
		сч = сч+1;
		Если НЕ ТолькоЦифрыВСтроке_КонтурEDI(Стр.GLN) Тогда
			Сообщить("В таблице " + ИмяТаблицы + ", в строке "+Строка(сч)+" GLN """+Стр.GLN+""" должен содержать только цифры!",СтатусСообщения.Внимание); 
			ЕстьОшибки = Истина;
		Иначе
			Если НЕ СтрДлина(Стр.GLN) = 13 Тогда
				Сообщить("В таблице " + ИмяТаблицы + ", в строке "+Строка(сч)+" GLN """+Стр.GLN+""" должен состоять из 13 символов!",СтатусСообщения.Внимание); 
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Функция ПроверитьЮрЛиц() Экспорт
	
	ТабПроверки = ТаблицаЮрФизЛиц.Скопировать();
	
	ВсеХорошо = Истина;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ЮрФизЛицо", "Юр\физ лицо");
	СписокПолей.Добавить("GLN","GLN");
	
	Если ЕстьПустыеЗначенияВТаблице(ТабПроверки, СписокПолей, "Юр. лица") Тогда
		ВсеХорошо = Ложь;
	КонецЕсли;
	
	Если мНайтиДублиВТаблице(ТабПроверки, "ЮрФизЛицо", "Юр. лица", "Юр\физ лицо") Тогда
		ВсеХорошо = Ложь;
	КонецЕсли;
	
	Если ВсеХорошо Тогда
		Если мНайтиДублиВТаблице(ТабПроверки, "GLN", "Юр. лица", "GLN") Тогда
			ВсеХорошо = Ложь;
		КонецЕсли;
		Если ЕстьОшибкиВGLN(ТабПроверки,"Юр. лица") Тогда
			
			ВсеХорошо = Ложь;
			
		КонецЕсли;
	КонецЕсли;

	
	Возврат ВсеХорошо;
	
КонецФункции

Функция ПроверитьТочкиДоставки() Экспорт
	
	ТабПроверки = ТаблицаТочекДоставки.Скопировать();
	
	ВсеХорошо = Истина;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("ТочкаДоставки", "Точка доставки");
	СписокПолей.Добавить("GLN","GLN");
	
	Если ЕстьПустыеЗначенияВТаблице(ТабПроверки, СписокПолей, "Точки доставки") Тогда
		ВсеХорошо = Ложь;
	КонецЕсли;
	
	Если мНайтиДублиВТаблице(ТабПроверки, "ТочкаДоставки", "Точки доставки", "Точка доставки") Тогда
		ВсеХорошо = Ложь;
	КонецЕсли;
	
	Если ВсеХорошо Тогда
		
		Если мНайтиДублиВТаблице(ТабПроверки, "GLN", "Точки доставки", "GLN") Тогда
			ВсеХорошо = Ложь;
		КонецЕсли;
		Если ЕстьОшибкиВGLN(ТабПроверки,"Точки доставки") Тогда
			ВсеХорошо = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВсеХорошо;

КонецФункции

Процедура УправлениеВидимостью()
	
	ЭлементыФормы.ПанельСоответствий.Страницы.СтраницаТочкиДоставки.Видимость = ?(МыТорговаяСеть,Истина,Ложь);
	
КонецПроцедуры

Процедура ТаблицаЮрФизЛицПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	
КонецПроцедуры

Процедура ТаблицаЮрФизЛицВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка.Имя = "ОрганизацияAPIПредставление" Тогда
		ТекСтрока = ЭлементыФормы.ТаблицаЮрФизЛиц.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			
			ВыбратьЭлементСправочника(ТекСтрока.ОрганизацияAPI,"НашиОрганизации",,СтандартнаяОбработка);
			ТекСтрока.ОрганизацияAPIПредставление = ПолучитьПредставлениеЭлементаСправочника(ТекСтрока.ОрганизацияAPI);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТаблицаЮрФизЛицПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТаблицаЮрФизЛицПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры



