
//обработчики

Процедура ПриОткрытии()
	
	ЗаполнитьДанныеРасширения();
	
	Если Не События.Количество() = 0 Тогда
		ТекущееСобытие = События[0].Имя;
		ЭлементыФормы.Код.УстановитьТекст(События[0].Код);
	КонецЕсли;
	
	ЭтаФорма.Обновить();
	
	УстановитьДоступность();
		
КонецПроцедуры

Процедура КоманднаяПанельСобытияДобавить(Кнопка)
	
	РезультатДобавления = ДобавитьНовоеСобытие();
	Если Не РезультатДобавления.Успешно Тогда
		Если РезультатДобавления.ПовторноеДобавление Тогда
			НовоеСобытие = События.Найти(РезультатДобавления.ИмяСобытия,"Имя");
			Если Не НовоеСобытие = Неопределено Тогда
				ЭлементыФормы.События.ТекущаяСтрока = НовоеСобытие;
			КонецЕсли;
		КонецЕсли;
	Иначе
		НовоеСобытие = События.Найти(РезультатДобавления.ИмяСобытия,"Имя");
		Если Не НовоеСобытие = Неопределено Тогда
			ЭлементыФормы.События.ТекущаяСтрока = НовоеСобытие;
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

Процедура КоманднаяПанельСобытияУдалить(Кнопка)
	
	УдалитьСобытие();
	
КонецПроцедуры

Процедура КоманднаяПанельСобытияИсходныйКод(Кнопка)
	
	ОткрытьЛистингИсходногоКода(); 				
	
КонецПроцедуры

Процедура СобытияПриАктивизацииСтроки(Элемент)
	
	СохранитьКодТекущегоСобытия();
	
	//показываем код активизированного события
	ТекущаяСтрока = ЭлементыФормы.События.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущееСобытие = ТекущаяСтрока.Имя;
	ЭлементыФормы.Код.УстановитьТекст(ТекущаяСтрока.Код);
	
	УстановитьДоступность();	
	                 	
КонецПроцедуры

Процедура НадписьОРасширенииНажатие(Элемент)
	
	ПоказатьСвойства();
	
КонецПроцедуры

Процедура СобытияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(БиблиотекаКартинок.ПользовательскиеПоляКомпоновкиДанных);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаписатьИЗакрыть(Кнопка)
	
	СохранитьКодТекущегоСобытия();
	
	РезультатСохранения = СохранитьРасширение(ЭтаФорма,Ложь);
	Если Не РезультатСохранения.Успешно Тогда
		Если Не РезультатСохранения.ТаблицаОшибокПроверки.Количество() = 0 Тогда 		//не прошли проверку
			Для Каждого СтрокаОшибки Из РезультатСохранения.ТаблицаОшибокПроверки Цикл
				ВывестиПредупреждение_КонтурEDI(СтрокаОшибки.ОписаниеОшибки);
			КонецЦикла;
		Иначе	                                                                 		//не удалось записать в базу
			ВывестиПредупреждение_КонтурEDI(РезультатСохранения.ОписаниеОшибки);
		КонецЕсли;
		
	Иначе                                                                        		//запись прошла успешно
		ИдентификаторНовогоРасширения = РезультатСохранения.Идентификатор;
		ЭтаФорма.Закрыть(ИдентификаторНовогоРасширения);
	КонецЕсли;
  	
КонецПроцедуры


//функционал

Процедура УстановитьДоступность()
	
	Если События.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельСобытия.Кнопки.Удалить.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельСобытия.Кнопки.ИсходныйКод.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельСобытия.Кнопки.Удалить.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельСобытия.Кнопки.ИсходныйКод.Доступность = Истина;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.События.ТекущаяСтрока;
		
	//доступность наименование
	Если Не РасширениеСсылка = Неопределено Тогда
		ЭлементыФормы.Наименование.Доступность = Ложь;
	КонецЕсли;
		
	//доступность кнопки листинга исходного кода
	Если Не ТекущаяСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.ИсходныйКод) Тогда
			ЭлементыФормы.КоманднаяПанельСобытия.Кнопки.ИсходныйКод.Доступность = Истина;	
		Иначе
			ЭлементыФормы.КоманднаяПанельСобытия.Кнопки.ИсходныйКод.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура СохранитьКодТекущегоСобытия()
	
	//пытаемся сохранить код текущего события
	СтрокаСобытия = События.Найти(ТекущееСобытие,"Имя");
	Если Не СтрокаСобытия = Неопределено Тогда
		СтрокаСобытия.Код = ЭлементыФормы.Код.ПолучитьТекст();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРасширения()
	
	Если Не РасширениеСсылка = Неопределено Тогда
        	
		ЭлементРасширение = ПолучитьЭлементСправочника("Расширения",РасширениеСсылка);
		Наименование 	  = ЭлементРасширение.Наименование;
		
		ЗаполнитьСобытия();
		ЗаполнитьОписание();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСобытия()
	
	ЭлементРасширение = ПолучитьЭлементСправочника("Расширения",РасширениеСсылка);
	Реквизиты 		  = ЭлементРасширение.ДополнительныеРеквизиты;
	
	//добавляем исполняемый код событий
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизита","ИсполняемыйКод");
	РеквизитыСобытий = Реквизиты.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Реквизит Из РеквизитыСобытий Цикл
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Имя = Реквизит.Значение;
		НовоеСобытие.Код = Реквизит.ЗначениеСтрока;		
	КонецЦикла;
	
	//добавляем исходный исполняемый код событий
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизита","ИсходныйИсполняемыйКод");
	РеквизитыИсходныхСобытий = Реквизиты.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Реквизит Из РеквизитыИсходныхСобытий Цикл
		ИмяИсходногоСобытия = Реквизит.Значение;
		СтрокаСобытие = События.Найти(ИмяИсходногоСобытия,"Имя");
		Если Не СтрокаСобытие = Неопределено Тогда
			СтрокаСобытие.ИсходныйКод = Реквизит.ЗначениеСтрока;		
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьОписание()
	
	ЭлементРасширение = ПолучитьЭлементСправочника("Расширения",РасширениеСсылка);
				
	Реквизиты = ЭлементРасширение.ДополнительныеРеквизиты;
	
	РеквизитОписаниеПолное = Реквизиты.Найти("ОписаниеПолное","ИмяРеквизита");
	Если Не РеквизитОписаниеПолное = Неопределено Тогда
		ТекстОписания = РеквизитОписаниеПолное.ЗначениеСтрока;
	КонецЕсли;
	
	ТекстОписания = СтрЗаменить(ТекстОписания,"¶","");
	ТекстОписания = СокрЛП(ТекстОписания);
	
	ОписаниеПолное = ТекстОписания;	
	
КонецПроцедуры

Процедура ПоказатьСвойства()
	
	Если РасширениеСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ПоказатьСвойстваРасширения(ТабДокумент,РасширениеСсылка);

	ТабДокумент.ОтображатьСетку=Ложь;
	ТабДокумент.ТолькоПросмотр=Истина;
	ОбластьЗаголовка=ТабДокумент.Область("R2");
	ОбластьЗаголовка.Шрифт = Новый Шрифт(,14,);
	
	ТабДокумент.Показать();

КонецПроцедуры

//вынесено в МО
Функция Удалить_СохранитьРасширение()
	
	РезультатСохранения = Новый Структура("Успешно,ОписаниеОшибкиСохранения,ТаблицаОшибокПроверки,Идентификатор",Ложь,"","");
	
	РезультатПроверки = ПроверитьКорректностьДанныхРасширения(Этаформа,Ложь);
	Если Не РезультатПроверки.Успешно Тогда
		РезультатСохранения.ТаблицаОшибокПроверки = РезультатПроверки.ТаблицаОшибок;
		Возврат РезультатСохранения;
	КонецЕсли;
	
	ТаблицаДанныеРасширения = ИнициализироватьТаблицуДополнительныхРеквизитовРасширения();
	
	ИдентификаторРасширения = Неопределено;
	
	Если РасширениеСсылка = Неопределено Тогда
		
		//добавляем данные нового события
		Идентификатор = ТаблицаДанныеРасширения.Добавить();
		Идентификатор.ИмяРеквизита 				= "Идентификатор";
		Идентификатор.Значение 					= Формат(ТекущаяДата(),"ДФ=ггггММддЧЧммсс");;
		НаименованиеРасширения = ТаблицаДанныеРасширения.Добавить();
		НаименованиеРасширения.ИмяРеквизита 	= "Наименование";
		НаименованиеРасширения.Значение 		= Наименование;
		ВерсияРасширения = ТаблицаДанныеРасширения.Добавить();
		ВерсияРасширения.ИмяРеквизита 			= "ВерсияРасширения";
		ВерсияРасширения.Значение 				= "0.0";
		РекомендуемаяВерсияМодуля = ТаблицаДанныеРасширения.Добавить();
		РекомендуемаяВерсияМодуля.ИмяРеквизита 	= "РекомендуемаяВерсияМодуля";
		РекомендуемаяВерсияМодуля.Значение 		= "0.00.000.00";
		Обязательный = ТаблицаДанныеРасширения.Добавить();
		Обязательный.ИмяРеквизита 				= "Обязательный";
		Обязательный.Значение 					= Ложь;
		Интерфейс = ТаблицаДанныеРасширения.Добавить();
		Интерфейс.ИмяРеквизита 					= "Интерфейс";
		Интерфейс.Значение 						= Ложь;
		ПорядокВыполнения = ТаблицаДанныеРасширения.Добавить();
		ПорядокВыполнения.ИмяРеквизита 			= "ПорядокВыполнения";
		ПорядокВыполнения.Значение 				= ПолучитьСледующийПорядокВыполненияРасширения();
		Использование = ТаблицаДанныеРасширения.Добавить();
		Использование.ИмяРеквизита 				= "Использование";
		Использование.Значение 					= Истина;
		
		ИдентификаторРасширения	= Идентификатор.Значение;
		
	КонецЕсли;
	
	//добавляем даные обработчиков событий
	Для Каждого Событие Из События Цикл
		НовыйРеквизит = ТаблицаДанныеРасширения.Добавить();
		НовыйРеквизит.ИмяРеквизита 		= "ИсполняемыйКод";
		НовыйРеквизит.Значение 			= Событие.Имя;
		НовыйРеквизит.ЗначениеСтрока 	= Событие.Код;
	КонецЦикла;
	
	//добавляем данные описания
	НовыйРеквизит = ТаблицаДанныеРасширения.Добавить();
	НовыйРеквизит.ИмяРеквизита 		= "ОписаниеПолное";
	НовыйРеквизит.ЗначениеСтрока 	= ОписаниеПолное;
	
	СохранитьЭлементСправочника("Расширения",РасширениеСсылка,ТаблицаДанныеРасширения);
	Если РасширениеСсылка = Неопределено Тогда
		РезультатСохранения.ОписаниеОшибкиСохранения = "Не удалось записать расширение в базу данных.";
		Возврат РезультатСохранения;
	КонецЕсли;
		
	РезультатСохранения.Успешно 		= Истина;
	РезультатСохранения.Идентификатор	= ИдентификаторРасширения;
	
	Возврат РезультатСохранения;
	
КонецФункции

//вынесено в МО
Функция Удалить_ПроверитьКорректностьДанных()
			
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ОписаниеОшибки");
	
	РезультатПроверки = Новый Структура("Успешно,ТаблицаОшибок",Ложь,ТаблицаОшибок);
		
	//наличие наименование
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не заполнено поле ""Наименование"".";
		РезультатПроверки.Успешно = Ложь;
		ЭлементыФормы.Наименование.ЦветФонаПоля = WebЦвета.СветлоРозовый;
	Иначе
		ЭлементыФормы.Наименование.ЦветФонаПоля = WebЦвета.Белый;
	КонецЕсли;
	
	//наличие обработчиков
	Если События.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Расширение не содержит ни одного события.";
		РезультатПроверки.Успешно = Ложь;
		ЭлементыФормы.События.ЦветФонаПоля = WebЦвета.СветлоРозовый;
	Иначе
		ЭлементыФормы.События.ЦветФонаПоля = WebЦвета.Белый;
	КонецЕсли;
	
	//наличие описания
	Если Не ЗначениеЗаполнено(ОписаниеПолное) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не заполнено поле ""Описание"".";
		РезультатПроверки.Успешно = Ложь;
		ЭлементыФормы.ОписаниеПолное.ЦветФонаПоля = WebЦвета.СветлоРозовый;
	Иначе
		ЭлементыФормы.ОписаниеПолное.ЦветФонаПоля = WebЦвета.Белый;
	КонецЕсли;
	
	Если ТаблицаОшибок.Количество() = 0 Тогда
		РезультатПроверки.Успешно = Истина;
	Иначе
		РезультатПроверки.ТаблицаОшибок = ТаблицаОшибок;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ДобавитьНовоеСобытие()
	
	РезультатДобавления = Новый Структура("Успешно,ПовторноеДобавление,ОписаниеОшибки,ИмяСобытия",Ложь,Ложь,"","");
	
	//получаем события и просим пользователя выбрать
	ТаблицаСобытий = ПолучитьОписаниеСобытийПодключаемогоМодуляРасширений();
	ТаблицаВыбора  = ТаблицаСобытий.Скопировать(,"Имя,Описание");
	
	ВыбранноеСобытие = ТаблицаВыбора.ВыбратьСтроку("Выберите событие...");
	Если ВыбранноеСобытие = Неопределено Тогда
		РезультатДобавления.Успешно = Ложь;
		Возврат РезультатДобавления;	
	КонецЕсли;
	
	//проверяем на присутствие
	ДобавленноеРанееСобытие = События.Найти(ВыбранноеСобытие.Имя,"Имя");
	Если Не ДобавленноеРанееСобытие = Неопределено Тогда
		РезультатДобавления.Успешно = Ложь;
		РезультатДобавления.ПовторноеДобавление = Истина;
		РезультатДобавления.ИмяСобытия = ВыбранноеСобытие.Имя;
		Возврат РезультатДобавления;	
	КонецЕсли;
	
	//добавляем в список
	СтрокаСобытия = ТаблицаСобытий.Найти(ВыбранноеСобытие.Имя,"Имя");
	Если Не СтрокаСобытия = Неопределено Тогда
		НовоеСобытие = События.Добавить();
		НовоеСобытие.Имя = СтрокаСобытия.Имя;
		НовоеСобытие.Код = СформироватьКомментарийСобытия(СтрокаСобытия);
	КонецЕсли;
	
	РезультатДобавления.Успешно = Истина;
	РезультатДобавления.ИмяСобытия = НовоеСобытие.Имя;
			
	Возврат РезультатДобавления; 
	
КонецФункции

Функция СформироватьКомментарийСобытия(СтрокаОписания)
	
	_ОписаниеСобытия = СтрокаОписания.Описание;
	_ОписаниеСобытия = СтрЗаменить(_ОписаниеСобытия,Символы.ПС,Символы.ПС + "// " + Символы.Таб);
	
	Комментарий = "";
	Комментарий = Комментарий + "// " + "Описание:" + Символы.ПС;
	Комментарий = Комментарий + "// " + Символы.Таб + _ОписаниеСобытия + "." + Символы.ПС;
	Комментарий = Комментарий + "// " + Символы.ПС;
	Комментарий = Комментарий + "// " + "Параметры:" + Символы.ПС;
	
	Для Каждого Параметр Из СтрокаОписания.Параметры Цикл
		
		_ОписаниеПараметра = Параметр.Значение.Описание;
		_ОписаниеПараметра = СтрЗаменить(_ОписаниеПараметра,Символы.ПС,Символы.ПС + "// " + Символы.Таб);
		
		Комментарий = Комментарий + "// " + Символы.Таб + Параметр.Значение.Представление + " - " + Параметр.Значение.Тип + " - " + _ОписаниеПараметра + "." + Символы.ПС;
		
	КонецЦикла;
	
	Если СтрокаОписания.СтандартнаяОбработкаEDI = Истина Тогда
		Комментарий = Комментарий + "// " + Символы.Таб + "СтандартнаяОбработкаEDI" + + " - " + "Булево" + " - " + "флаг стандартной обработки" + "." + Символы.ПС;
	КонецЕсли;
	
	Если СтрокаОписания.ВозвращаемоеЗначение.Наличие = Истина Тогда
		
		_ОписаниеВозврата = СтрокаОписания.ВозвращаемоеЗначение.Описание;
		_ОписаниеВозврата = СтрЗаменить(_ОписаниеВозврата,Символы.ПС,Символы.ПС + "// " + Символы.Таб);
		
		Комментарий = Комментарий + "// " + Символы.ПС;
		Комментарий = Комментарий + "// " + "Возвращаемое значение:" + Символы.ПС;
		Комментарий = Комментарий + "// " + Символы.Таб + СтрокаОписания.ВозвращаемоеЗначение.Тип + Символы.ПС;
		Комментарий = Комментарий + "// " + Символы.Таб + _ОписаниеВозврата + Символы.ПС;
		
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

Процедура УдалитьСобытие()
	
	ТекущаяСтрока = ЭлементыФормы.События.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаИндекс = События.Индекс(ТекущаяСтрока);
	
	//удаляем
	События.Удалить(ТекущаяСтрока);
	ЭлементыФормы.События.ОбновитьСтроки();	
	
	//позиционируем: остаемся в этой же строке или поднимаемся на строку выше
	Количество = События.Количество();
	Если Не Количество = 0 Тогда
		Если Количество > ТекущаяСтрокаИндекс Тогда
			ЭлементыФормы.События.ТекущаяСтрока = События.Получить(ТекущаяСтрокаИндекс);
		Иначе
			ЭлементыФормы.События.ТекущаяСтрока = События.Получить(ТекущаяСтрокаИндекс-1);
		КонецЕсли;
	Иначе
		ЭлементыФормы.Код.УстановитьТекст("");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОткрытьЛистингИсходногоКода()
	
	ТекущаяСтрока = ЭлементыФормы.События.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Очистить();
	ТекстовыйДокумент.УстановитьТекст(ТекущаяСтрока.ИсходныйКод);
	ТекстовыйДокумент.ТолькоПросмотр = Истина;
	ТекстовыйДокумент.Показать("Исходный код обработчика события """ + ТекущаяСтрока.Имя + """");
	
КонецПроцедуры

Процедура СобытияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура СобытияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ЭкспортНажатие(Элемент)
	Если СокрЛП(Наименование)="" тогда
		Предупреждение("Сначала укажите имя расширения");
		возврат;
	КонецЕсли;
	
	//выбрать имя файла 
	ДФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДФ.Фильтр="xml|*.xml";
	ДФ.ПолноеИмяФайла="Расширение "+Наименование+".xml";
	Если ДФ.Выбрать() Тогда
		//Сформировать файл и записать
		СформироватьФайлыРасширения(ДФ);
		Предупреждение("Расширение успешно сохранено во внешнем файле");
	КонецЕсли;	
	
КонецПроцедуры

Процедура СформироватьФайлыРасширения(ДФ)
	idРасширения="";
	ВведенныйИдентификатор=ВвестиСтроку(idРасширения,"ВведитеНазвание-идентификатор латиницей без пробелов!",,Ложь);
	idРасширения=СтрЗаменить(idРасширения," ","");
	
	Если idРасширения="" Тогда idРасширения=Строка(Новый УникальныйИдентификатор); КонецЕсли;
	
	ПолноеИмяФайла=ДФ.ПолноеИмяФайла;
	Каталог= ДФ.Каталог+Наименование+"\";
	
	КаталогНаДиске = Новый Файл(Каталог);
	Если КаталогНаДиске.Существует() Тогда
		//ок
	Иначе       
		СоздатьКаталог(Каталог);
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////	
	//Файл с заголовками
	//////////////////////////////////////////////////////////////////////////////////////////////////////	
	
    ПолноеИмяФайла=Каталог+"\content.xml";
	//Файл
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку();
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
	//корень сообщения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("extension");
	ЗаписьХМЛ.ЗаписатьАтрибут("id",idРасширения);
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"name",Наименование);	
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"version","0.01");
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"moduleVersion",ПолучитьНомерРелиза_КонтурEDI());
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"compulsory","false");
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"interface","false");
	ЗаписатьЭлементХМЛ_СКавычками(ЗаписьХМЛ,"description",ОписаниеПолное);
	
	//События
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("events");
	Для Каждого СобытиеРасширения из События Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("event");
		ЗаписатьЭлементХМЛ_СКавычками(ЗаписьХМЛ,"Name",СобытиеРасширения.Имя);
		ЗаписатьЭлементХМЛ_СКавычками(ЗаписьХМЛ,"Code",СобытиеРасширения.Код);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); //События
	
	
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ТекстСообщения = ЗаписьХМЛ.Закрыть();
	
	//вычистить лишнее на переходный период
	//ТекстСообщения = СтрЗаменить(ТекстСообщения," xmlns="""+xmlПространствоИменСообщений()+""" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""","");
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстСообщения);
	ТД.Записать(ПолноеИмяФайла,"UTF-8");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////	
	//Файл с заголовками
	//////////////////////////////////////////////////////////////////////////////////////////////////////	

	ПолноеИмяФайла=Каталог+"\list fragment "+Наименование;

	ЗаписьХМЛ = Новый ЗаписьXML;
	
	//ЗаписьХМЛ.ОткрытьФайл(ПутьКФайлу);
	ЗаписьХМЛ.УстановитьСтроку();
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
	//корень сообщения
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("extension");
	ЗаписьХМЛ.ЗаписатьАтрибут("id",idРасширения);
	ЗаписатьЭлементХМЛ_СКавычками(ЗаписьХМЛ,"name",Наименование);	
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"outdated","false");
	
	//оф-уф	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ApplicationTypes");
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"ApplicationType","ОФ");	
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"ApplicationType","УФ");	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); //оф-уф
	
	//сети
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Nets");
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); //оф-уф
	
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"version","0.01");
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"moduleVersion",ПолучитьНомерРелиза_КонтурEDI());
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"compulsory","false");
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"interface","false");
	ЗаписатьЭлементХМЛ_СКавычками(ЗаписьХМЛ,"description",ОписаниеПолное);
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ТекстСообщения = ЗаписьХМЛ.Закрыть();
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстСообщения);
	ТД.Записать(ПолноеИмяФайла,"UTF-8");
	
	ЗапуститьПриложение(Каталог);
КонецПроцедуры

Функция ЗаписатьЭлементХМЛ_СКавычками(ЗаписьХМЛ,ИмяЭлемента,Значение) Экспорт
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	   		ЗаписьХМЛ.ЗаписатьТекст(Значение);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	КонецЕсли;
	
КонецФункции
