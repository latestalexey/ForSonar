Перем мИмяФайлаСписокРелизов; //имя локального файла со списком и описанием релизов. Заполняется при нажатии кнопки "Проверить наличие и возможность обновлений"
//Перем КаталогОбновленийНаСервере;

/////////////////////////////////////////////////////
//////////////////////	интерфейс	//////////////////////
/////////////////////////////////////////////////////

Процедура Инициализация() Экспорт
КонецПроцедуры	

Процедура ПриОткрытии()
	ПриОткрытииФормы(ЭтаФорма);
	
	Инициализация();
	ОбновитьФорму();
	
	//ПроверитьНаличиеИВозможностьОбновленияНажатие("");
	
КонецПроцедуры

Процедура КнопкаСправкаНажатие(Элемент)
//	ОткрытьСправку("v8config://3a5d6f3f-2893-4e55-84c4-a742c5029ac8/mdobject/id5e0e1364-a904-48e0-a797-4e3a788c5093/038b5c85-fb1c-4082-9c4c-e69f8928bf3a");
	ЭтаФорма.ОткрытьСправкуФормы();
КонецПроцедуры

//обновление видимости реквизитов
Процедура ОбновитьФорму()
	
	НомерУстановленногоРелиза=ПолучитьНомерРелиза_КонтурEDI();
	
	ЕстьПодключаемыйМодуль=?(ИспользуетсяПодключаемыйМодуль=Истина,"Да","Нет");
	 
	МодульИзменен="???";
	
	//определим, откуда была запущена обработка
	СсылкаАвтообновления=ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления();
	
	Попытка
		ИмяФайлаОбработки=ЭтотОбъект.ИспользуемоеИмяФайла;
	Исключение
		ВывестиПредупреждение_КонтурEDI("Возможно, обработка встроена в конфигурацию.");
	КонецПопытки;	
	
	Если СсылкаАвтообновления=Неопределено Тогда
		Если ИмяФайлаОбработки="" Тогда
			//видимо, обработка запущена прямо из конфигурации
			РежимИспользования="Обработка в составе конфигурации";
			Автообновление="Невозможно";
			ЭлементыФормы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
			
		ИначеЕсли Найти(ИмяФайлаОбработки,КаталогВременныхФайлов())=0 Тогда
			//обработка запущена не из временного каталога
			РежимИспользования="Файл внешней обработки";
			Автообновление="Невозможно";
			ЭлементыФормы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
			
		ИначеЕсли Истина Тогда // не мФайлСуществует(ИмяФайлаОбработки) Тогда
			//обработка запущена из временного каталога, и файл уже удален
			РежимИспользования="Обработка в справочнике внешних обработок";
			Автообновление="Не настроено";
			ЭлементыФормы.НастроитьАвтоматическоеОбновление.Видимость=Истина;
			
		Иначе
			//маловероятный вариант: обработка запущена из временного каталога, но файл еще существует
			РежимИспользования="Не определен";
			Автообновление="Невозможно";
			ЭлементыФормы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
			
		КонецЕсли;
	Иначе
		//у нас есть ссылка на модуль в справочнике "Внешние обработки", который мы можем обновлять автоматом
		Если ИмяФайлаОбработки="" Тогда
			//видимо, обработка запущена прямо из конфигурации
			РежимИспользования="Обработка в составе конфигурации";
			Автообновление="Невозможно";
			ЭлементыФормы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
			
		ИначеЕсли Найти(ИмяФайлаОбработки,КаталогВременныхФайлов())=0 Тогда
			//обработка была запущена не из временного каталога, т.е. у нас модуль сохранен во "внешних обработках", но запустили мы его из внешнего файла
			РежимИспользования="Файл внешней обработки";
			Автообновление="Невозможно";
			ЭлементыФормы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
			
		ИначеЕсли Истина Тогда // не мФайлСуществует(ИмяФайлаОбработки) Тогда
			//обработка запущена из временного каталога, и файл уже удален. Значит, все-таки из справочника "Внешние обработки" запускали
			РежимИспользования="Обработка в справочнике внешних обработок";
			Автообновление="Настроено";
			ЭлементыФормы.НастроитьАвтоматическоеОбновление.Видимость=Истина;
			
		Иначе
			//маловероятный вариант: обработка запущена из временного каталога, но файл еще существует
			РежимИспользования="Не определен";
			Автообновление="Невозможно";
			ЭлементыФормы.НастроитьАвтоматическоеОбновление.Видимость=Ложь;
			
		КонецЕсли;
		
	КонецЕсли;	
	//и выведем страницу с предыдущим релизом, если он был сохранен 
	ВывестиСтраницуПредыдущихРелизов();
	
КонецПроцедуры	

Процедура ПроверитьНаличиеИВозможностьОбновленияНажатие(Элемент)
	
	мИмяФайлаСписокРелизов=Неопределено;
	//1. Подгрузить с сервера XML со списком релизов
	Если Не ЗагрузитьФайлВерсийВЛокальныйКаталог(мИмяФайлаСписокРелизов) Тогда
		Возврат;
	КонецЕсли;	
	
	//2. Проверить полученный XML, заполнить табличку версий
	РазобратьФайлВерсий(мИмяФайлаСписокРелизов,СписокВерсий);
	
	ЭлементыФормы.Панель1.Страницы.ВсеВерсии.Видимость = Истина;//если сюда дошли, значит, файл загружен
	
	//Если НомерАктуальногоРелиза=НомерУстановленногоРелиза Тогда
	//	Предупреждение("Вы используете самый свежий релиз!");
	//КонецЕсли;
	
	//2.5. Предложим пользователю указать обработку в справочнике, если она еще не указана
	Если РежимИспользования="Обработка в справочнике внешних обработок"
			И Автообновление="Не настроено"	
	Тогда
		НастроитьАвтоматическоеОбновлениеНажатие("");
		ОбновитьФорму();
	КонецЕсли;
	
	//3. Проверить, не является ли наш модуль кастомным
	Если РежимИспользования="Обработка в справочнике внешних обработок"
			И Автообновление="Настроено"	Тогда
		//посчитаем КС того, что было записано в справочник "Внешние обработки"	
		СсылкаАвтообновления=ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления();
		Если ЗначениеЗаполнено(СсылкаАвтообновления) Тогда
			//для этого сохраним обработку на диск
			Времфайл=ПолучитьИмяВременногоФайла("epf");
			СсылкаАвтообновления.ХранилищеВнешнейОбработки.Получить().Записать(Времфайл);
			МД5=ПолучитьКонтрольнуюСуммуФайла(Времфайл);
			УдалитьФайлы(Времфайл);
		Иначе
			МД5="";
		КонецЕсли;	
			
	ИначеЕсли РежимИспользования="Файл внешней обработки" Тогда
		//посчитаем КС того, что лежит на диске
		МД5=ПолучитьКонтрольнуюСуммуФайла(ЭтотОбъект.ИспользуемоеИмяФайла);
	Иначе 
		//в этом случае непонятно, откуда считать КС
		МД5="";
	КонецЕсли;		
	
	
	Если МД5="" Тогда
		Предупреждение("Для текущего релиза невозможно проверить модифицированность файла обработки. 
		|Обновление не гарантирует работоспособность нового модуля.
		|Перед обновлением обязательно сохраните старый модуль!");
	ИначеЕсли МД5<>ПолучитьКонтрольнуюСуммуРелизаССервера(НомерУстановленногоРелиза,СписокВерсий) Тогда
		МодульИзменен="Да";
		Сообщить("Контрольные суммы не совпадают, возможно, текущая версия модуля была изменена. Автоматическое обновление невозможно");
		ЭлементыФормы.МодульИзменен.ЦветФона=WebЦвета.Красный;
	Иначе
		МодульИзменен="Нет";
		ЭлементыФормы.МодульИзменен.ЦветФона=WebЦвета.Зеленый;
	КонецЕсли;	
	
	Если (Автообновление="Настроено" 
		И РежимИспользования="Обработка в справочнике внешних обработок" 
		И МодульИзменен="Нет")//будем обновлять только типовые модули, 
	Тогда
		ЭлементыФормы.КоманднаяПанельСписокРелизов.Кнопки.Установить.Доступность=Истина;
		ЭлементыФормы.КоманднаяПанельПредыдущиеРелизы.Кнопки.ОткатитьНаВыбранный.Доступность=Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельСписокРелизов.Кнопки.Установить.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанельПредыдущиеРелизы.Кнопки.ОткатитьНаВыбранный.Доступность=Ложь;
	КонецЕсли;
	
	
	//4. Пробежимся по списку сетей и выясним, требует ли какая-либо из наших сетей обновления модуля
	//или обновления структуры сетей!!! И как это сделать?
	РезультатПроверки=ПроверитьНеобходимостьОбновлений(Ложь);
	
	ПолеСообщений=РезультатПроверки.Сообщения;
	
	//5. Это для отката на предыдущие версии, при необходимости.
//	ВывестиСтраницуПредыдущихРелизов();//оставим здесь, так быстрее	
	
	//ИмяВремФайлаОписания=ПолучитьИмяВременногоФайла("mxl");
	//ПолучитьСоединениеДляОбновлений().Получить(КаталогОбновленийНаСервере+"verinfo.mxl", ИмяВремФайлаОписания);
	//ЭлементыФормы.ОписаниеАктуальнойВерсии.Прочитать(ИмяВремФайлаОписания);
	//УдалитьФайлы(ИмяВремФайлаОписания);
	
КонецПроцедуры

Процедура ИсторияТекущейВерсииНажатие(Элемент)
	ПолучитьФорму("ФормаСервис_НовоеВРелизе",ЭтаФорма).Открыть();
КонецПроцедуры

Процедура НастроитьАвтоматическоеОбновлениеНажатие(Элемент)
	СсылкаАвтообновления=ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления();
	Запрос=Новый Запрос(
	"ВЫБРАТЬ
	|	ВнешниеОбработки.Ссылка, ВнешниеОбработки.Наименование
	|ИЗ
	|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|ГДЕ
	|	ВнешниеОбработки.ВидОбработки = Значение(Перечисление.ВидыДополнительныхВнешнихОбработок.Обработка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВнешниеОбработки.Наименование"
	);
	ВыбЗапроса=Запрос.Выполнить().Выбрать();
	Сз=Новый СписокЗначений;
	
	ТекЭл=СЗ.Добавить(Неопределено,"<Отключить>");
	
	Пока ВыбЗапроса.Следующий() Цикл
		СЗ.Добавить(ВыбЗапроса.Ссылка,ВыбЗапроса.Наименование);
	КонецЦикла;
	
	Для Каждого Эл Из СЗ Цикл
		Если Эл.Значение=СсылкаАвтообновления Тогда
			ТекЭл=Эл;
		КонецЕсли;	
	КонецЦикла;	
	
	ВыбранныйЭлемент=СЗ.ВыбратьЭлемент("Выберите из справочника внешнюю обработку, 
		|которая будет обновляться автоматически при появлении новой версии",ТекЭл);
	Если ВыбранныйЭлемент<>Неопределено Тогда 
		//дадим еще один шанс отказаться, вдруг мышка сорвалась
		ТекстВопроса=?(ВыбранныйЭлемент.Значение=Неопределено,
		"Отключить автообновление модуля?",
		"Установить автообновление для обработки """+ВыбранныйЭлемент.Представление+""" ?"
		);
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да
			Тогда возврат 
		КонецЕсли;	
		
		СсылкаАвтообновления=ВыбранныйЭлемент.Значение;
		Если ПодготовитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления(СсылкаАвтообновления) Тогда
			Предупреждение(
			?(ВыбранныйЭлемент.Значение=Неопределено,
			"Автообновление модуля отключено",
			"Автоматическое обновление настроено для обработки "+ВыбранныйЭлемент.Представление)
			);
			ОбновитьФорму();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


/////////////////страница "Все версии"////////////////////////

Процедура СписокВерсийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.НомерРелиза=НомерУстановленногоРелиза Тогда
		ОформлениеСтроки.Шрифт=Новый Шрифт(,,Истина);
	//ИначеЕсли ДанныеСтроки.НомерРелиза=НомерАктуальногоРелиза Тогда
	//	ОформлениеСтроки.ЦветТекста=WebЦвета.Красный;
	КонецЕсли;	
КонецПроцедуры

//!!!
//автоматически заменяет текущий релиз на выбранный, с возможностью отката на предыдущую версию
Процедура КоманднаяПанельСписокРелизовУстановить(Кнопка)
	// Вставить содержимое обработчика.
	//здесь будет ядреный алгоритм установки обновления в базу и сохранения предыдущей версии для отката
	
	ТекСтрока=ЭлементыФормы.СписокВерсий.ТекущаяСтрока;
	Если ТекСтрока=Неопределено Тогда Возврат КонецЕсли;
	
	Если (Автообновление="Настроено" 
		И РежимИспользования="Обработка в справочнике внешних обработок" 
		И МодульИзменен="Нет")//будем обновлять только типовые модули, 
		//ответственность за обновление измененных - на пользователе
//		или истина //отладка
		Тогда
		
		//1. Сохраним текущую версию модуля
		СсылкаАвтообновления=ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления();
		Если ЗначениеЗаполнено(СсылкаАвтообновления) Тогда
			//для этого сохраним обработку на диск
			Времфайл=ПолучитьИмяВременногоФайла("epf");
			СсылкаАвтообновления.ХранилищеВнешнейОбработки.Получить().Записать(Времфайл);
			Если Не СохранитьФайлВБазу(Времфайл,"КонтурEDI.ПредыдущийМодуль."+ТекущаяДата()) Тогда
				Предупреждение("Не удалось сохранить файл текущего модуля в базу");
			Иначе
				ОбновитьФорму();//выведем страницу прошлого релиза
			КонецЕсли;	
			УдалитьФайлы(Времфайл);
			
			//2. Получим новый файл с сервера
			ВремФайл=ПолучитьИмяВременногоФайла("epf");
			Если Не	ПолучитьФайлHTTP(
				ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
				КаталогОбновленийНаСервере+СтрЗаменить(ТекСтрока.ИмяФайла,"\","/"), 
				Времфайл) Тогда
				Предупреждение("Не удалось загрузить новый релиз с сервера");
				Возврат;
			КонецЕсли;	
			//3. Запишем его в справочник "Внешние обработки" с комментарием.
			
			
			СпрОбъект=СсылкаАвтообновления.ПолучитьОбъект();
			СпрОбъект.ХранилищеВнешнейОбработки=Новый ХранилищеЗначения(Новый ДвоичныеДанные(Времфайл));
			Попытка
				СпрОбъект.Записать();
				ОбновитьФорму();
				Предупреждение("Модуль обновлен. Перезапустите его");
			Исключение
				Предупреждение("Не удалось записать новый релиз в справочник ""Внешние обработки""");
			КонецПопытки;	
			УдалитьФайлы(Времфайл);
			
		КонецЕсли;		
		
	ИначеЕсли Автообновление="Невозможно"  Тогда
		Предупреждение("Автоматическая установка новой версии модуля невозможна!");
		
	Иначе
		//	ИначеЕсли Автообновление="Возможно" Тогда
		Предупреждение("Автоматическая установка новой версии модуля не настроена!");
	КонецЕсли;	
КонецПроцедуры

//сохраняет выбранный релиз в каталог на диске, дальше пользователь сам будет его обновлять
//в этом случае предыдущая версия не сохраняется, поэтому пользователь должен сам откатывать старые версии
Процедура КоманднаяПанельСписокРелизовЗагрузить(Кнопка)
	ВыбраннаяСтрока=ЭлементыФормы.СписокВерсий.ТекущаяСтрока;
	Если ВыбраннаяСтрока=Неопределено Тогда Возврат КонецЕсли;
	ДФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДФ.Фильтр="Внешняя обработка (*.epf)|*.epf";
	ДФ.ПолноеИмяФайла=ПолучитьИмяФайлаБезКаталога(ВыбраннаяСтрока.ИмяФайла);
	ВремФайл=ПолучитьИмяВременногоФайла("epf");//сначала сохраним во врем.файл, т.к. в папку назначения может не быть доступа на запись
	Если ДФ.Выбрать() Тогда
		Состояние("Загрузка файла с сервера");
		Если Не	ПолучитьФайлHTTP(
			ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
			КаталогОбновленийНаСервере+СтрЗаменить(ВыбраннаяСтрока.ИмяФайла,"\","/"), 
			ВремФайл) 
		Тогда
			Предупреждение("Невозможно получить свежий релиз с сервера. Проверьте подключение к сети.");
		Иначе	
			Попытка//вдруг нет прав на запись
				КопироватьФайл(ВремФайл,ДФ.ПолноеИмяФайла);
				Предупреждение("Файл успешно сохранен по адресу: "+ДФ.ПолноеИмяФайла);
			Исключение
				Предупреждение("Не удалось сохранить файл по адресу: "+ДФ.ПолноеИмяФайла+"
					|Возможно, каталог не доступен для записи или отсутствует.");
				УдалитьФайлы(ВремФайл);
			КонецПопытки;	
			
		КонецЕсли;
	КонецЕсли;	
	Состояние("");	
КонецПроцедуры


/////////////////страница "Предыдущие версии"///////////////////

//смотрит, есть ли в базе сохраненные старые версии
//если да, то выводит страницу с их описанием и возможностью откатиться
//если нет, то не выводит
//надо переписать на список версий с возможностью удаления
Процедура ВывестиСтраницуПредыдущихРелизов()
	СписокСохраненныхВерсий=ПолучитьСписокСохраненныхФайловПредыдущихВерсий();
	Если СписокСохраненныхВерсий.Количество()=0 Тогда
		ЭлементыФормы.Панель1.Страницы.ПредыдущиеВерсии.Видимость=Ложь;
	Иначе
		СписокПредыдущихРелизов.Очистить();
		ЭлементыФормы.Панель1.Страницы.ПредыдущиеВерсии.Видимость=Истина;
		Для Каждого Эл из СписокСохраненныхВерсий Цикл
			Нов=СписокПредыдущихРелизов.Добавить();
			Нов.Ссылка=Эл.Значение;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

//!!!
//будет работать только при автообновлении, заменяет во внешних обработках на указанный релиз и закрывает обработку
//тут будет едреный алгоритм
Процедура КоманднаяПанельПредыдущиеРелизыОткатитьнаВыбранный(Кнопка)
	
//	 Экспорт
	ТекСтрока=ЭлементыФормы.СписокПредыдущихРелизов.ТекущаяСтрока;
	Если ТекСтрока=Неопределено Тогда Возврат КонецЕсли;
	
	Если (Автообновление="Настроено" 
		И РежимИспользования="Обработка в справочнике внешних обработок")
		или истина //отладка
		Тогда
		
		СсылкаАвтообновления=ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления();
		Если ЗначениеЗаполнено(СсылкаАвтообновления) Тогда
			
			ДД=ПолучитьФайлИзБазы(ТекСтрока.Ссылка.Наименование);
			СпрОбъект=СсылкаАвтообновления.ПолучитьОбъект();
			СпрОбъект.ХранилищеВнешнейОбработки=Новый ХранилищеЗначения(ДД);
			Попытка
				СпрОбъект.Записать();
				Предупреждение("Восстановлен предыдущий релиз модуля. Перезапустите его");
			Исключение
				Предупреждение("Не удалось записать новый релиз в справочник ""Внешние обработки""");
			КонецПопытки;	
		КонецЕсли;		
		
	ИначеЕсли Автообновление="Невозможно"  Тогда
		Предупреждение("Откат на предыдущую версию невозможен");
		
	Иначе
		//	ИначеЕсли Автообновление="Возможно" Тогда
		Предупреждение("Откат на предыдущую версию не настроен");
	КонецЕсли;		
	
КонецПроцедуры

//удаляет старый релиз
Процедура КоманднаяПанельПредыдущиеРелизыУдалить(Кнопка)
	ТекСтрока=ЭлементыФормы.СписокПредыдущихРелизов.ТекущаяСтрока;
	Если ТекСтрока<>Неопределено Тогда
		Если Вопрос("Удалить сохраненную версию модуля : "+ТекСтрока.Ссылка+"?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			//собственно удаление
			Попытка
				МассивУдаления=Новый Массив;
				МассивУдаления.Добавить(ТекСтрока.Ссылка);
				УстановитьМонопольныйРежим(Истина);
				УдалитьОбъекты(МассивУдаления,Истина);
				УстановитьМонопольныйРежим(Ложь);
				Предупреждение("Предыдущая версия удалена");
			Исключение
				Предупреждение("Не удалось удалить");
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;	
	ОбновитьФорму();
КонецПроцедуры

//сохраняет выбранную предыдущую версию в файл
Процедура КоманднаяПанельПредыдущиеРелизыВыгрузитьВФайл(Кнопка)
	ТекСтрока=ЭлементыФормы.СписокПредыдущихРелизов.ТекущаяСтрока;
	Если ТекСтрока<>Неопределено Тогда
		СохраненныйФайл=ПолучитьФайлИзБазы(ТекСтрока.Ссылка.Наименование);//костылик
		Если СохраненныйФайл<>Неопределено Тогда
			ДФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ДФ.Фильтр="Внешняя обработка (*.epf)|*.epf";
			Если ДФ.Выбрать() Тогда
				СохраненныйФайл.Записать(ДФ.ПолноеИмяФайла);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

/////////////////////////////////////////////////////
//////////////////////	логика	//////////////////////
/////////////////////////////////////////////////////

//получает контрольную сумму файла MD5
//будет ли работать под Linux в вайне - не известно, надо проверить
Функция Удалить_ПолучитьКонтрольнуюСуммуФайла(Знач ПолноеИмяФайлаДляПроверки) Экспорт
	Каталог=КаталогВременныхФайлов();
	ИмяФайлаУтилиты=Каталог+"KonturEDI_md5sum.exe";
	ИмяФайлаКС=Каталог+"KonturEDI_MD5.txt";
	ИмяБатФайла="KonturEDI_getmd5.bat";

	КраткоеИмяФайла=ПолучитьИмяФайлаБезКаталога(ПолноеИмяФайлаДляПроверки);
	//теперь получим сам каталог без имени файла
	КаталогОбработки=Лев(ПолноеИмяФайлаДляПроверки,СтрДлина(ПолноеИмяФайлаДляПроверки)-СтрДлина(КраткоеИмяФайла));
	
	КоманднаяСтрока = """"+ИмяФайлаУтилиты+""" "
			+""""+ КраткоеИмяФайла+""""
			+">"""+ ИмяФайлаКС+""""
			;
			
	ПолучитьМакет("md5sum").Записать(ИмяФайлаУтилиты);
	
	МД5="";
	Попытка
		Бат=Новый ТекстовыйДокумент;
		Бат.УстановитьТекст(КоманднаяСтрока);
		Бат.Записать(Каталог+ИмяБатФайла,КодировкаТекста.OEM);
		
		КомандаСистемы(Каталог+ИмяБатФайла,КаталогОбработки);
		//в этот момент окно системы сворачивается, альтернативные варианты:
		//1 - Использование DLL - но их надо подключать через regsvr32
		//2 - собственный алгоритм расчета MD5, что очень долго
		
		ТД=Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайлаКС);
		МД5=Лев(ТД.ПолучитьТекст(),32);
	Исключение	
	КонецПопытки;
	
	Если МД5="" Тогда
		Предупреждение("Расчет контрольной суммы невозможен")
	КонецЕсли;	

	УдалитьФайлы(ИмяФайлаУтилиты);
	УдалитьФайлы(ИмяБатФайла);
	УдалитьФайлы(ИмяФайлаКС);
	
	Возврат МД5;
КонецФункции	

//ищет в ТаблицаРелизов релиз с заданным номером и возвращает его контрольную сумму
//на момент вызова функции с сервера должен уже быть загружен файл version.xml и разобран в таблицу СписокРелизов
Функция Удалить_ПолучитьКонтрольнуюСуммуРелизаССервера(НомерРелиза) Экспорт
	СтрокаТекущейВерсии=СписокВерсий.Найти(НомерУстановленногоРелиза,"НомерРелиза");
	Если СтрокаТекущейВерсии=Неопределено Тогда
		Возврат "";
	Иначе	
		Возврат СтрокаТекущейВерсии.КонтрольнаяСумма;
	КонецЕсли;	
КонецФункции	

//убирает из полного пути каталог, оставляет только конечное имя файла
Функция Удалить_ПолучитьИмяФайлаБезКаталога(знач ПолноеИмяФайла)
	//получим имя файла обработки без каталога
	КраткоеИмяФайла=ПолноеИмяФайла;
	ПозСлэша=0;
	Пока истина Цикл
		ПозСлэша=Найти(КраткоеИмяФайла,"\");
		Если ПозСлэша=0 Тогда Прервать; КонецЕсли;
		КраткоеИмяФайла=Сред(КраткоеИмяФайла,ПозСлэша+1);
	КонецЦикла;
	Возврат КраткоеИмяФайла;
	//в конце концов получили имя файла без каталога
КонецФункции	

//будем проверять список сетей, закачанных с http
//а проверку actual.txt будем запускать в отдельной процедуре - допустим, "ПроверитьДоступностьОбновлений"
//параметр КраткаяПроверка сравнивает поле dateUpd в списке сетей (list.xml) с глобальной переменной
//ДатаПоследнегоОбновления. Вызывается с этим параметром только при запуске модуля, 
//при ручном открытии этой формы будет вызываться полная проверка
Функция ПроверитьНеобходимостьОбновлений(КраткаяПроверка=Ложь) Экспорт
	
	СтруктураВозврата			=	Новый Структура("НеобходимоОбновление,Сообщения,НадоОбновлятьТочкиДоставки,НадоОбновлятьМодуль",Ложь,"",Ложь,Ложь);//по умолчанию вернем инфу о том, что обновляться не надо
	СтрокаСообщений				=	"";//закинем сюда все рекомендации по обновлению
	
	Если КраткаяПроверка Тогда
		АвтоматическаяПроверкаОбновлений=ПолучитьКонстантуEDI("АвтоматическаяПроверкаОбновлений");
		Если АвтоматическаяПроверкаОбновлений=Ложь Тогда
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ПротоколОбмена_КонтурEDI =  ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI");
		Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда
			//при работе с каталогом в момент запуска краткой проверки предполагаем, что у нас нет интернета. 
			//А при нажатии кнопки проверки из открытой формы проверка будет идти полностью
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЕсли;	
	
	ПараметрыДиалога = ПроверитьОбновлениеТочекДоставки(Истина);
	
	Если ПараметрыДиалога.ТаблицаСообщений.Количество()>0 Тогда
		
		ФормаДиалог = ПолучитьФорму("УниверсальныйДиалог");
		
		ФормаДиалог.Заголовок = ПараметрыДиалога.Заголовок;
		ФормаДиалог.ТекстЗаголовка = ПараметрыДиалога.ТекстЗаголовка;
		ФормаДиалог.ТаблицаСообщений = ПараметрыДиалога.ТаблицаСообщений;
		ФормаДиалог.Открыть();
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

//забирает с сервера файлик version.xml и кидает его в локальный каталог по адресу мИмяФайлаСписокРелизов
Функция Удалить_ЗагрузитьФайлВерсийВЛокальныйКаталог()
	
	//на время отладки грузим с локального каталога
	Если мИмяФайлаСписокРелизов=Неопределено Тогда
		мИмяФайлаСписокРелизов=ПолучитьИмяВременногоФайла("xml");
		Если Не	ПолучитьФайлHTTP(
			ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
			КаталогОбновленийНаСервере+"verlist.xml", 
			мИмяФайлаСписокРелизов)
		Тогда
			Предупреждение("Невозможно получить список версий с сервера. Проверьте Ваше подключение к Интернет.");
			мИмяФайлаСписокРелизов=Неопределено;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции	
                       
//парсит файл version.xml и пишет его содержимое в СписокРелизов
Процедура Удалить_РазобратьФайлВерсий()
	Чтение=Новый ЧтениеXML;
	Чтение.ОткрытьФайл(мИмяФайлаСписокРелизов);
	
	СписокВерсий.Очистить();
	НомерАктуальногоРелиза="";
	ДатаАктуальногоРелиза="";
	
	ДОМ=Новый ПостроительDOM;
	Док=Дом.Прочитать(Чтение);
	
	//Пока Чтение.Прочитать() Цикл
	//	Если ВРЕГ(Чтение.Имя)="ACTUAL" 
	//		И Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
	//		НомерАктуальногоРелиза=Чтение.ПолучитьАтрибут(0);
	//	ИначеЕсли ВРЕГ(Чтение.Имя)="VALUETABLE" Тогда
	//		ТаблицаВерсий=СериализаторXDTO.ПрочитатьXML(Чтение);
	//		Для Каждого Стр Из ТаблицаВерсий Цикл
	//			Нов=СписокВерсий.Добавить();
	//			ЗаполнитьЗначенияСвойств(Нов,Стр);
	//		КонецЦикла;
	//	КонецЕсли;	
	//КонецЦикла;
	
	Для Каждого СтрокаВерсии из Док.ДочерниеУзлы[0].ДочерниеУзлы Цикл
		Нов=СписокВерсий.Добавить();
		Для Каждого Атрибут Из СтрокаВерсии.Атрибуты Цикл
			ИмяУзла=НРег(Атрибут.ИмяУзла);
			Если ИмяУзла="version" Тогда
				Нов.НомерРелиза=Атрибут.ЗначениеУзла;
			ИначеЕсли ИмяУзла="md5" Тогда
				Нов.КонтрольнаяСумма=Атрибут.ЗначениеУзла;
			ИначеЕсли ИмяУзла="filename" Тогда
				Нов.ИмяФайла=Атрибут.ЗначениеУзла;
			ИначеЕсли ИмяУзла="date" Тогда
				Нов.ДатаВыхода=_ДатаВремя1С(Атрибут.ЗначениеУзла);
			ИначеЕсли ИмяУзла="descriprion" Тогда
				Нов.Описание=Атрибут.ЗначениеУзла;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	
	Чтение.Закрыть();
	
КонецПроцедуры	

//проверяет существование указанного файла
Функция мФайлСуществует(ИмяФайла) Экспорт
	Ф=Новый Файл(ИмяФайла);
	Возврат ф.Существует();
КонецФункции	

Процедура ЗабытьСообщенияНажатие(Элемент)
	Если Вопрос("Не напоминать больше о данных изменениях при запуске модуля?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УстановитьГлобальноеСвойство("ДатаПоследнегоОбновления",ТекущаяДата());
		Закрыть();
	КонецЕсли;	
КонецПроцедуры

Процедура ЗакрытьНажатие(Элемент)
	Закрыть();
КонецПроцедуры


//получает из наших "констант" строку, которую пытается преобразовать в ссылку на справочник "Внешние обработки"
Функция Удалить_ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления()
	
	//TODO переделать на ИмяКонфигурации1С
	Синоним = Метаданные.Синоним;
	
	Если Найти(Синоним,"ТКПТ")>0 Тогда
		
		Возврат Неопределено;
		
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		
		Возврат Неопределено; //в УТ 10.2 нет внешних обработок	
		
	Иначе	//УТ, КА, УПП, .... надо проверить все конфиги!!!
		УИДСтрокой=ПолучитьКонстантуEDI("СсылкаНаМодуль");
		Если не ЗначениеЗаполнено(УИДСтрокой) Тогда Возврат Неопределено КонецЕсли;
		Попытка
			УИД=Новый УникальныйИдентификатор(УИДСтрокой);
			Ссылка=Справочники.ВнешниеОбработки.ПолучитьСсылку(УИД);
			Если Ссылка.Пустая() Тогда
				Возврат Неопределено;
			Иначе
				Возврат Ссылка;
			КонецЕсли;	
		Исключение
			//наш УИД пустой, или ссылается на удаленный элемент справочника
			Возврат Неопределено;
		КонецПопытки;	
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

//пишет в "наши константы" свойство "СсылкаНаМодуль" - строковое представление ссылки на справочник "Внешние обработки"
Функция ПодготовитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления(Ссылка)
	Синоним = Метаданные.Синоним;
	
	Если Найти(Синоним,"ТКПТ")>0 Тогда
		//что с ней делать?
		
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		Возврат Ложь; //в УТ 10.2 нет внешних обработок	
		
	Иначе
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			УИДСтрокой="";//очистим ссылку
		Иначе
			УИДСтрокой=Строка(Ссылка.УникальныйИдентификатор());
		КонецЕсли;	
		УстановитьГлобальноеСвойство("СсылкаНаМодуль",УИДСтрокой);
		Возврат Истина;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСписокСохраненныхФайловПредыдущихВерсий()

	Синоним = Метаданные.Синоним;
	Список=Новый СписокЗначений;
	МаскаИмени="КонтурEDI.ПредыдущийМодуль.";
	
	Если Найти(Синоним,"ТКПТ")>0 Тогда
		//что с ней делать?
		
		
	ИначеЕсли Найти(Синоним,"Бухгалтерия предприятия")>0 или 
		      Найти(Синоним,"Бухгалтерия сельскохозяйственного предприятия")>0 или
			  ПолучитьКонстантуEDI("ИмяКонфигурации1С") = "БП" Тогда
		Запрос=Новый Запрос(
		"ВЫБРАТЬ Разрешенные 
		|	СохраненныеНастройки.Ссылка,
		|	СохраненныеНастройки.Наименование
		|ИЗ
		|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = Значение(Перечисление.ТипыНастроек.)
		|	И СохраненныеНастройки.Наименование ПОДОБНО &Наименование
		|Упорядочить по СохраненныеНастройки.Наименование убыв"
		);
		Запрос.УстановитьПараметр("Наименование",МаскаИмени+"%");
		Выб=Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			Список.Добавить(Выб.Ссылка,Сред(Выб.Наименование,СтрДлина(МаскаИмени)+1));
		КонецЦикла;	
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		//в УТ 10.2 нет внешних обработок, поэтому предполагаем, что для УТ 10.2 автообновление не используется
		//соответственно, и откат на предыдущую версию не поддерживаем
		
	ИначеЕсли Метаданные.Справочники.Найти("ХранилищеДополнительнойИнформации")<>Неопределено Тогда
		Запрос=Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.Наименование
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.)
		|	И ХранилищеДополнительнойИнформации.Наименование ПОДОБНО &Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХранилищеДополнительнойИнформации.Наименование убыв"
		);
		Запрос.УстановитьПараметр("Наименование",МаскаИмени+"%");
		Выб=Запрос.Выполнить().Выбрать();
		Пока Выб.Следующий() Цикл
			Список.Добавить(Выб.Ссылка,Сред(Выб.Наименование,СтрДлина(МаскаИмени)+1));
		КонецЦикла;	
	КонецЕсли;	
	
	Возврат Список;
	
КонецФункции	

КаталогОбновленийНаСервере="/1c/KonturEDI_82/releases/";