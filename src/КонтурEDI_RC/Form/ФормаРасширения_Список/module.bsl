
//обработчики

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ТолькоПодходящие=Истина;	
	ЗаполнитьДанныеОРасширениях();	
	ПозиционироватьНаСтроку();
	
КонецПроцедуры
                               
Процедура СписокРасширенияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено или Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//установка / обновление расширения
	Если (Колонка.Имя = "Установить") И 
		 (ВыбраннаяСтрока[Колонка.Имя] = "установить" или ВыбраннаяСтрока[Колонка.Имя] = "обновить") Тогда
		ТекущийИдентификаторРасширения = ВыбраннаяСтрока.Идентификатор; 
		РезультатУстановки = УстановитьРасширение(ВыбраннаяСтрока.Наименование,ВыбраннаяСтрока.Идентификатор,ВыбраннаяСтрока.Интерфейс,ВыбраннаяСтрока.Ссылка);
		Если Не РезультатУстановки.Успешно Тогда
			ВывестиПредупреждение_КонтурEDI(РезультатУстановки.ОписаниеОшибки);
		Иначе
			ЗаполнитьДанныеОРасширениях();	
			ПозиционироватьНаСтроку(ТекущийИдентификаторРасширения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры
 

//функционал

Процедура ПозиционироватьНаСтроку(Идентификатор = "")
	
	СтрокаТекущегоРасширения = СписокРасширения.Строки.Найти(Идентификатор,"Идентификатор",Истина);
	Если Не СтрокаТекущегоРасширения = Неопределено Тогда
		ЭлементыФормы.СписокРасширения.ТекущаяСтрока = СтрокаТекущегоРасширения;
	КонецЕсли;
	ЭлементыФормы.СписокРасширения.ТекущаяКолонка = ЭлементыФормы.СписокРасширения.Колонки.Наименование;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОРасширениях()
	
	РезультатДанныеОРасширениях = ПолучитьДанныеОРасширенияхССервера(ТолькоПодходящие,ТолькоРекомендованные);
	Если Не РезультатДанныеОРасширениях.Успешно Тогда
		ВывестиПредупреждение_КонтурEDI("Не удалось получить данные о расширениях: """ + РезультатДанныеОРасширениях.ОписаниеОшибки + """.");
		Отказ = Истина;
	КонецЕсли;
	
	ОтобразитьДанныеОРасширениях(РезультатДанныеОРасширениях.ДанныеОРасширениях);	
	РазвернутьРасширения();
КонецПроцедуры

Процедура ОтобразитьДанныеОРасширениях(ДанныеОРасширениях)
	
	//СписокРасширения.Очистить();
	СписокРасширения = СписокРасширения;
	СписокРасширения.Строки.Очистить();
	
	//СОздатьПапки	
	ТипыРасширений=ДанныеОРасширениях.Скопировать(,"ТипРасширения");
	ТипыРасширений.Свернуть("ТипРасширения");
	ТипыРасширений.Сортировать("ТипРасширения");
	Для Каждого СтрокаТипа Из ТипыРасширений Цикл
		ГруппаТипа = СписокРасширения.Строки.Добавить();
		ГруПпаТипа.Наименование = СтрокаТипа.ТипРасширения;
		СтрокиЭтогоТипа = ДанныеОРасширениях.НайтиСтроки(Новый Структура("ТипРасширения",СтрокаТипа.ТипРасширения));
		Для Каждого СтрокаЭтогоТипа Из СтрокиЭтогоТипа Цикл
			НоваяСтрокаРасширения = ГруппаТипа.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасширения,СтрокаЭтогоТипа);
		КонецЦикла;
		
	КонецЦикла;
	СписокРасширения.Строки.Сортировать("ТипРасширения");
	
	//СписокРасширения = ДанныеОРасширениях;	       
	//ЗначениеВРеквизитФормы(ДанныеОРасширениях,"СписокРасширения");
	
КонецПроцедуры

Процедура РазвернутьРасширения()

	Для Каждого Стр ИЗ СписокРасширения.Строки Цикл
		ЭлементыФормы.СписокРасширения.Развернуть(Стр,Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьРасширения()
	
Функция Удал_ПолучитьДанныеОРасширенияхССервера()
			
	РезультатПолученияДанных = Новый Структура("Успешно,ОписаниеОшибки,ДанныеОРасширениях",Ложь,"",Неопределено);
	
	//загружаем файл-список расширений
	МассивИменФайлов = Новый Массив;
	МассивИменФайлов.Добавить("list.xml");
	РезультатЗагрузки = ЗагрузитьФайлыРасширенийВЛокальныйКаталог(МассивИменФайлов);
	Если Не РезультатЗагрузки.Успешно Тогда
		РезультатПолученияДанных.ОписаниеОшибки = РезультатЗагрузки.ОписаниеОшибки;
		Возврат РезультатПолученияДанных;
	ИначеЕсли РезультатЗагрузки.МассивЗагруженныхФайлов.Количество() = 0 Тогда
		РезультатПолученияДанных.ОписаниеОшибки = "Не получен файл списка доступных расширений.";
		Возврат РезультатПолученияДанных;
	КонецЕсли;
	ИмяФайлаСписка = РезультатЗагрузки.МассивЗагруженныхФайлов[0];
	
	//читаем файл-список расширений
	РезультатЧтения = ПрочитатьФайлДанныхРасширений(ИмяФайлаСписка);
	Если Не РезультатЧтения.Успешно Тогда
		РезультатПолученияДанных.ОписаниеОшибки = РезультатЧтения.ОписаниеОшибки;
		Возврат РезультатПолученияДанных;
	КонецЕсли;
	ДанныеСписка = РезультатЧтения.ДанныеЧтения;
	
	//удаляем файл-список расширений
	ФайлСписка = Новый Файл(ИмяФайлаСписка);
	Попытка
		УдалитьФайлы(ФайлСписка.Путь,ФайлСписка.Имя);
	Исключение
	КонецПопытки;
	ФайлСписка = Неопределено;
		
	//ковертируем данные объекта XDTO в таблицу значений
	РезультатКонвертации = КонвертироватьДанныеСпискаРасширений(ДанныеСписка);
	Если Не РезультатКонвертации.Успешно Тогда
		РезультатПолученияДанных.ОписаниеОшибки = РезультатКонвертации.ОписаниеОшибки;
		Возврат РезультатПолученияДанных;
	КонецЕсли;
	ТаблицаДанныеСписка = РезультатКонвертации.ТаблицаДанныеОРасширениях;
	
	//добавим ТаблицуДанныхСписка дополнительные колонки
	Удал_ДополнитьТаблицуДанныхСпискаКолонками(ТаблицаДанныеСписка);
			
	//получаем данные об установленных расширениях
	ИсключитьКастомныеРасширения = Истина;
	ТаблицаУстановленныеРасширения = ПолучитьДанныеОбУстановленныхРасширениях(ИсключитьКастомныеРасширения);
		
	//дополним данные списка расширений информацией об установленных расширениях
	Удал_ДополнитьДанныеСпискаРасширений(ТаблицаДанныеСписка, ТаблицаУстановленныеРасширения);
	
	//дополнить данные списка информацией о загрузке/обновлении
	УстановитьДанныеДействий(ТаблицаДанныеСписка);
	
	//отсортируем: сначала новые, потом установленные, затем кастомные и по наименованию
	ТаблицаДанныеСписка.Сортировать("Наименование");
	
	РезультатПолученияДанных.Успешно = Истина;
	РезультатПолученияДанных.ДанныеОРасширениях = ТаблицаДанныеСписка;
	
	Возврат РезультатПолученияДанных;
			
КонецФункции

Процедура Удал_ДополнитьТаблицуДанныхСпискаКолонками(ТаблицаДанныеСписка)

	ТаблицаДанныеСписка.Колонки.Добавить("Установить",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("Использование",					Новый ОписаниеТипов("Булево"));
	ТаблицаДанныеСписка.Колонки.Добавить("Удаление",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекВерсияРасширения",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекРекомендуемаяВерсияМодуля",	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекОписаниеПолное",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекОбязательный",					Новый ОписаниеТипов("Булево"));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекИнтерфейс",					Новый ОписаниеТипов("Булево"));
	Если ВнешнееХранилище Тогда
		ТаблицаДанныеСписка.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(80, ДопустимаяДлина.Переменная)));
	Иначе
		ТаблицаДанныеСписка.Колонки.Добавить("Ссылка",						Справочники.ТипВсеСсылки());	
	КонецЕсли;
	ТаблицаДанныеСписка.Колонки.Добавить("Настройка",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)));	
	
КонецПроцедуры

Процедура Удал_ДополнитьДанныеСпискаРасширений(ТаблицаДанныеСписка, ТаблицаУстановленныеРасширения)
	
	ТаблицаУстановленныеРасширения.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));	
	
	//дополняем информацию по установленным расширениям
	Для Каждого СтрокаСписка Из ТаблицаДанныеСписка Цикл
		
		СтрокаУстановлено = ТаблицаУстановленныеРасширения.Найти(СтрокаСписка.Идентификатор, "Идентификатор");
		Если СтрокаУстановлено = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка.Использование 	= СтрокаУстановлено.Использование;
		СтрокаСписка.Ссылка 		= СтрокаУстановлено.Ссылка;
		СтрокаСписка.Настройка		= СтрокаУстановлено.Настройка;
		Для Каждого КолонкаСписка Из ТаблицаДанныеСписка.Колонки Цикл
			Если Лев(КолонкаСписка.Имя,3) = "Тек" Тогда
				СтрокаСписка[КолонкаСписка.Имя] = СтрокаУстановлено[СтрЗаменить(КолонкаСписка.Имя,"Тек","")];	
			КонецЕсли;
		КонецЦикла;
		
		СтрокаУстановлено.Обработан = Истина;
		
	КонецЦикла;
	
	//дополняем информацию по расширениям, созданным самостоятельно
	Для Каждого СтрокаУстановлено Из ТаблицаУстановленныеРасширения Цикл
		
		Если СтрокаУстановлено.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка = ТаблицаДанныеСписка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСписка,СтрокаУстановлено);
		
		Для Каждого КолонкаСписка Из ТаблицаДанныеСписка.Колонки Цикл
			Если Лев(КолонкаСписка.Имя,3) = "Тек" Тогда
				СтрокаСписка[КолонкаСписка.Имя] = СтрокаУстановлено[СтрЗаменить(КолонкаСписка.Имя,"Тек","")];	
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьДанныеДействий(ТаблицаДанныеСписка)
	
	Для Каждого СтрокаСписка Из ТаблицаДанныеСписка Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписка.ТекВерсияРасширения) Тогда
			СтрокаСписка.Установить = "установить";
		ИначеЕсли ЗначениеЗаполнено(СтрокаСписка.ТекВерсияРасширения) И СтрокаСписка.ТекВерсияРасширения = "0.0" Тогда
        	СтрокаСписка.Установить = "подключен";
		ИначеЕсли СтрокаСписка.ВерсияРасширения > СтрокаСписка.ТекВерсияРасширения Тогда
			СтрокаСписка.Установить = "обновить";
		Иначе
			СтрокаСписка.Установить = "подключен";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СписокРасширенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Установить = "установить" Тогда
		ОформлениеСтроки.Ячейки.Установить.Гиперссылка = Истина;
		ОформлениеСтроки.Ячейки.Установить.ЦветТекста = WebЦвета.Синий;
	ИначеЕсли ДанныеСтроки.Установить = "обновить" Тогда
		ОформлениеСтроки.Ячейки.Установить.Гиперссылка = Истина;
		ОформлениеСтроки.Ячейки.Установить.ЦветТекста = WebЦвета.НасыщенноНебесноГолубой;
	ИначеЕсли ДанныеСтроки.Установить = "подключен" Тогда
		ОформлениеСтроки.Ячейки.Установить.Гиперссылка = Ложь;
		ОформлениеСтроки.Ячейки.Установить.ЦветТекста = WebЦвета.Зеленый;
	КонецЕсли;
	
	Если ДанныеСтроки.Обязательный = Истина Тогда
		ОформлениеСтроки.Ячейки.Наименование.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.Установить.Шрифт = Новый Шрифт(,,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокРасширенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура СписокРасширенияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТолькоПодходящиеПриИзменении(Элемент)
	ЗаполнитьДанныеОРасширениях();
КонецПроцедуры








