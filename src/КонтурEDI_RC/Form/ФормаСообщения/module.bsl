Перем НастройкаФормы Экспорт;
Перем Сообщение Экспорт;
Перем СообщениеАлко;
Перем МетаданныеСообщения;
Перем КтоМы;
Перем НастройкаСсылокИсправленияОшибок;
Перем Параметры Экспорт;
Перем ОбязательныйКодТовараПокупателя;
Перем ОтправкаТолькоALCRPT;
Перем ОбязательныйСФвDESADV;
Перем ОтправлятьДанныеОбУпаковках;
Перем ТаблицаСобытияТребующиеРегистрации;

// Инициализация формы

Функция ПолучитьКартинку(ИсточникКартинки,ИмяКартинки)
	
	Если ИсточникКартинки = "ЭлементФормы" Тогда
		НайденныйЭлемент = ЭлементыФормы.Найти(ИмяКартинки);
		Если НЕ НайденныйЭлемент = Неопределено Тогда
			
			Возврат НайденныйЭлемент.Картинка;
			
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Процедура ПолучитьПрикрепленныеСообщения()
	
	ТаблицаПрикрепленныхСообщений.Очистить();
	
	ОтправкаТолькоALCRPT = Ложь;
	
	Накладная = Неопределено;
	Если Найти("\DESADV\INVOIC\",Сообщение.ТипСообщения) > 0 Тогда
		Если Сообщение.ТипСообщения = "DESADV" И ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ОтправлятьALCRPT") = Истина Тогда
			 Накладная = Сообщение.Документ1С;
		ИначеЕсли Сообщение.ТипСообщения = "INVOIC" И ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ОтправлятьALCRPTсINVOIC") = Истина Тогда
			 Накладная = ПолучитьНакладнуюСчетаФактуры(Сообщение.Документ1С);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Накладная) Тогда // Нужно отправить ALCRPT
		
		ЭлементыФормы.Панель.Страницы.СтраницаАлкоголь.Видимость = Истина;
		
		АлкоТовары.Очистить();
		
		СообщениеАлко = ПодготовитьИсходящееСообщение("ALCRPT",Накладная);
		
		Для каждого Стр Из СообщениеАлко.Товары Цикл
			
			НоваяСтрока = АлкоТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			
			НоваяСтрока.АлкоЛицензияПоставщика	= ПолучитьПредставлениеАлкоЛицензии(Стр.АлкоЛицензияПоставщика); 
			НоваяСтрока.АлкоСертификатПродукции = ПолучитьПредставлениеАлкоЛицензии(Стр.АлкоСертификатПродукции); 
			
		КонецЦикла;
		
		НомерТТН	= СообщениеАлко.ТранспортнаяНакладнаяEDI.Номер;
		ДатаТТН		= СообщениеАлко.ТранспортнаяНакладнаяEDI.Дата;
		
		Если Сообщение.ТипСообщения = "DESADV" Тогда
			СтатусDESADV = ПолучитьСтатусСообщения(, Накладная, "DESADV");
			Если СтатусDESADV = "ALCRPT ожидает исправления ошибок" Тогда
				ОтправкаТолькоALCRPT = Истина;
				КнопкаОтправки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("ОтправитьУведомлениеОбОтгрузке");
				Если НЕ КнопкаОтправки = Неопределено Тогда
					КнопкаОтправки.Текст = "Переотправить ALCRPT";
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПрикрепленныхСообщений.Добавить();
		НоваяСтрока.СообщениеПредставление = "Данные об алкогольной продукции (ALCRPT)";
		НоваяСтрока.Документ = Сообщение.ДокументСсылка;
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "DESADV" Тогда
		
		Если ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ОтправлятьINVOICсDESADV") = Истина Тогда
			
			СчетФактура = ПолучитьСчетФактуруНакладной(Сообщение.Документ1С);
			
			Если ЗначениеЗаполнено(СчетФактура) Тогда
				СообщениеСФ = ПодготовитьИсходящееСообщение("INVOIC",СчетФактура);
				
				НоваяСтрока = ТаблицаПрикрепленныхСообщений.Добавить();
				НоваяСтрока.СообщениеПредставление = "Счет-фактура (INVOIC)";
				НоваяСтрока.Документ = СчетФактура;
				
			Иначе
				
				НоваяСтрока = ТаблицаПрикрепленныхСообщений.Добавить();
				НоваяСтрока.СообщениеПредставление = "Счет-фактура (INVOIC)";
				НоваяСтрока.Документ = СчетФактура;
				НоваяСтрока.Примечание = "Не найден счет-фактура!";
				НоваяСтрока.ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЕсли
		
	КонецЕсли;
	
	Если ТаблицаПрикрепленныхСообщений.Количество()=0 Тогда
		
		ЭлементыФормы.ПанельДопИнформации.ТекущаяСтраница = ЭлементыФормы.ПанельДопИнформации.Страницы.СтраницаНаименований;
		
	Иначе
		
		ЭлементыФормы.ПанельДопИнформации.ТекущаяСтраница = ЭлементыФормы.ПанельДопИнформации.Страницы.СтраницаПрикрепленныхСообщений;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоляНаФорме() Экспорт
	
	Если НЕ Сообщение = Неопределено Тогда
		
		Документ1С			= Сообщение.Документ1С;
		
		ПолучитьПрикрепленныеСообщения();
		
		НадписьЗаголовок = ЭлементыФормы.НадписьОткрытьДокумент;
		
		Если ЗначениеЗаполнено(Документ1С) Тогда
			НадписьЗаголовок.Заголовок = СокрЛП(Документ1С);
			НадписьЗаголовок.Гиперссылка = Истина;
			НадписьЗаголовок.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
		Иначе
			Если Сообщение.ТипСообщения = "ORDERS" Тогда
				НадписьЗаголовок.Заголовок = "не создан";
			Иначе
				НадписьЗаголовок.Заголовок = "не привязан";
			КонецЕсли;
			НадписьЗаголовок.Гиперссылка = Ложь;
			НадписьЗаголовок.ЦветТекста = ЭлементыФормы.НадписьЮрФизЛицоСвое.ЦветТекста;
		КонецЕсли;
		
		ДокументНомер		= Сообщение.ДокументEDI.Номер;
		ДокументДата		= Сообщение.ДокументEDI.Дата;
		
		ПродавецEDI			= Сообщение.ПродавецEDI.GLN;
		ПокупательEDI		= Сообщение.ПокупательEDI.GLN;
		ГрузоотправительEDI = Сообщение.ГрузоотправительEDI.GLN;
		ГрузополучательEDI	= Сообщение.ГрузополучательEDI.GLN;
		ВалютаEDI			= Сообщение.ВалютаEDI;
		
		ОтправительEDI	= Сообщение.ОтправительEDI.GLN;
		ПолучательEDI	= Сообщение.ПолучательEDI.GLN;
		
		Продавец1С			= Сообщение.Продавец1С;
		Покупатель1С		= Сообщение.Покупатель1С;
		Грузополучатель1С	= Сообщение.Грузополучатель1С;
		Грузоотправитель1С  = Сообщение.Грузоотправитель1С;
		
		ЭлементыФормы.НадписьПримечание.Видимость = Ложь;
		
		ТекНомерСерииЗаказов = "";
		Если Сообщение.Свойство("НомерСерииЗаказов",ТекНомерСерииЗаказов) Тогда
			Если ЗначениеЗаполнено(ТекНомерСерииЗаказов) Тогда
				ЭлементыФормы.НадписьПримечание.Заголовок = "№ серии заказов: " + СокрЛП(ТекНомерСерииЗаказов);
				ЭлементыФормы.НадписьПримечание.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Сообщение.Свойство("Комментарий") Тогда
			ТипПоставки = ТипПоставкиСообщения(Сообщение);
			Комментарий = ""+Сообщение.Комментарий + ?(ТипПоставки = "",""," Тип поставки: "+ТипПоставки);
		КонецЕсли;
		
		Если Сообщение.Свойство("ПромоНомер") Тогда
			ПромоНомер	= Сообщение.ПромоНомер;
		КонецЕсли;
		
		Если Сообщение.Свойство("Контракт") Тогда
			КонтрактНомер	= Сообщение.Контракт.Номер;
			КонтрактДата	= Сообщение.Контракт.Дата;
			Если Не ЗначениеЗаполнено(КонтрактНомер) и не ЗначениеЗаполнено(КонтрактДата) Тогда
				НастройкаФормы.НевидимыеПоля.Добавить("Контракт");;	
			КонецЕсли;
		КонецЕсли;
		
		// представления юр\физ лиц
		Если ЭтоОбратнаяОтгрузка(Сообщение.ТипСообщения) Тогда
			Если КтоМы = "Поставщик" Тогда
				ЭлементыФормы.ПредставлениеЮрФизЛицоСвое.Заголовок		= ПолучитьПредставлениеЮрФизЛица(Сообщение.ПокупательEDI, Сообщение.Покупатель1С);
				ЭлементыФормы.ПредставлениеЮрФизЛицоСтороннее.Заголовок = ПолучитьПредставлениеЮрФизЛица(Сообщение.ПродавецEDI, Сообщение.Продавец1С);
			Иначе
				ЭлементыФормы.ПредставлениеЮрФизЛицоСвое.Заголовок		= ПолучитьПредставлениеЮрФизЛица(Сообщение.ПродавецEDI, Сообщение.Продавец1С);
				ЭлементыФормы.ПредставлениеЮрФизЛицоСтороннее.Заголовок = ПолучитьПредставлениеЮрФизЛица(Сообщение.ПокупательEDI, Сообщение.Покупатель1С);
			КонецЕсли;
		Иначе
			Если КтоМы = "Поставщик" Тогда
				ЭлементыФормы.ПредставлениеЮрФизЛицоСвое.Заголовок		= ПолучитьПредставлениеЮрФизЛица(Сообщение.ПродавецEDI, Сообщение.Продавец1С);
				ЭлементыФормы.ПредставлениеЮрФизЛицоСтороннее.Заголовок = ПолучитьПредставлениеЮрФизЛица(Сообщение.ПокупательEDI, Сообщение.Покупатель1С);
			Иначе
				ЭлементыФормы.ПредставлениеЮрФизЛицоСвое.Заголовок		= ПолучитьПредставлениеЮрФизЛица(Сообщение.ПокупательEDI, Сообщение.Покупатель1С);
				ЭлементыФормы.ПредставлениеЮрФизЛицоСтороннее.Заголовок = ПолучитьПредставлениеЮрФизЛица(Сообщение.ПродавецEDI, Сообщение.Продавец1С);
			КонецЕсли;
		КонецЕсли;
		
		ЭлементыФормы.ПредставлениеГрузополучатель.Заголовок	= ПолучитьПредставлениеЮрФизЛица(Сообщение.ГрузополучательEDI,	Сообщение.Грузополучатель1С,	Истина);
		ЭлементыФормы.ПредставлениеГрузоотправитель.Заголовок	= ПолучитьПредставлениеЮрФизЛица(Сообщение.ГрузоотправительEDI,	Сообщение.Грузоотправитель1С);
	
		Если ЭлементыФормы.ПредставлениеЮрФизЛицоСвое.Заголовок = "не указан" Тогда
			ЭлементыФормы.ПредставлениеЮрФизЛицоСвое.Заголовок = "не указана";
			ЭлементыФормы.ДействиеЮрФизЛицоСвое.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ДействиеЮрФизЛицоСвое.Видимость = Истина;
		КонецЕсли;
		Если ЭлементыФормы.ПредставлениеЮрФизЛицоСтороннее.Заголовок = "не указан" Тогда
			ЭлементыФормы.ДействиеЮрФизЛицоСтороннее.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ДействиеЮрФизЛицоСтороннее.Видимость = Истина;
		КонецЕсли;
		Если ЭлементыФормы.ПредставлениеГрузоотправитель.Заголовок = "не указан" Тогда
			ЭлементыФормы.ДействиеГрузоотправитель.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ДействиеГрузоотправитель.Видимость = Истина;
		КонецЕсли;
		Если ЭлементыФормы.ПредставлениеГрузополучатель.Заголовок = "не указан" Тогда
			ЭлементыФормы.ДействиеГрузополучатель.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ДействиеГрузополучатель.Видимость = Истина;
		КонецЕсли;
		
		//+для АТАК
		Если Сообщение.ТипСообщения = "INVOIC" И Сообщение.Свойство("ДатаПоставкиФактическая") Тогда
			ЭлементыФормы.ПредставлениеДатыПоставки.Заголовок		= ПолучитьПредставлениеДатыПоставки(Сообщение.ДатаПоставкиФактическая)	
		//-
		Иначе
			ЭлементыФормы.ПредставлениеДатыПоставки.Заголовок		= ПолучитьПредставлениеДатыПоставки(Сообщение.ДатаПоставки);
			Если Сообщение.ТипСообщения = "ORDRSP" Тогда
				Результат = ПроверитьИзменениеДатыПоставки();
				Если Результат.Изменение Тогда
					ЭлементыФормы.ПредставлениеДатыПоставки.ЦветФона = WebЦвета.Лимонный;
				Иначе
					ЭлементыФормы.ПредставлениеДатыПоставки.ЦветФона = WebЦвета.Белый;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Отправитель1С		= Сообщение.Отправитель1С;
		Получатель1С		= Сообщение.Получатель1С;
		
		Отправитель1СПредставление = ПолучитьПредставлениеЭлементаСправочника(Отправитель1С);
		Получатель1СПредставление = ПолучитьПредставлениеЭлементаСправочника(Получатель1С);
		
		Валюта1С			= Сообщение.Валюта1С;
		
		Если Не ЗначениеЗаполнено(Сообщение.Договор) Тогда
			Сообщение.Договор = ПолучитьДоговорКонтрагентаДляСообщения(Сообщение,ОпределитьКемМыЯвляемся(Сообщение));
		КонецЕсли;
		
		Договор				= Сообщение.Договор;
		
		Статус				= Сообщение.Статус;
		
		Заказ1С				= Сообщение.Заказ1С;
		Накладная1С			= Сообщение.Накладная1С;
		Приемка1С			= Сообщение.Приемка1С;
		Если Сообщение.Свойство("СчетФактура1С") Тогда
			СчетФактура1С		= Сообщение.СчетФактура1С;
		КонецЕсли;
		
		Если Сообщение.Свойство("ОбратныйЗаказEDI") Тогда
			ОбратныйЗаказНомер  = Сообщение.ОбратныйЗаказEDI.Номер;
		КонецЕсли;
		
		ЗаказНомер			= Сообщение.ЗаказEDI.Номер;
		ЗаказДата			= Сообщение.ЗаказEDI.Дата;
		НакладнаяНомер		= Сообщение.НакладнаяEDI.Номер;
		НакладнаяДата		= Сообщение.НакладнаяEDI.Дата;
		ПриемкаНомер		= Сообщение.ПриемкаEDI.Номер;
		ПриемкаДата			= Сообщение.ПриемкаEDI.Дата;
		Если Сообщение.Свойство("СчетФактураEDI") Тогда
			СчетФактураНомер	= Сообщение.СчетФактураEDI.Номер;
			СчетФактураДата		= Сообщение.СчетФактураEDI.Дата;
		КонецЕсли;
		
		//+для Магнита
		Если Сообщение.Свойство("ДатаВывозаОтПоставщика") И ЗначениеЗаполнено(Сообщение.ДатаВывозаОтПоставщика) Тогда
			ДатаВывозаОтПоставщика	= Сообщение.ДатаВывозаОтПоставщика;
		КонецЕсли;
		//-
		
		Если (Сообщение.ТипСообщения = "INVOIC") ИЛИ (Сообщение.ТипСообщения = "COINVOIC") Тогда
			
			Если Сообщение.Свойство("Исправление") Тогда
				
				Исправление = Сообщение.Исправление;
				НомерИсправления = Сообщение.НомерИсправления;
				
				ЭлементыФормы.ПанельСтатусИсправление.ТекущаяСтраница = ЭлементыФормы.ПанельСтатусИсправление.Страницы.СтраницаИсправление;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если Сообщение.ТипСообщения = "COINVOIC" Тогда
			
			СуммаВсегоУвеличение		= Сообщение.СуммаВсегоУвеличение;
			СуммаВсегоНДСУвеличение		= Сообщение.СуммаВсегоНДСУвеличение;
			СуммаВсегоБезНДСУвеличение	= Сообщение.СуммаВсегоБезНДСУвеличение;
			
			СуммаВсегоУменьшение		= Сообщение.СуммаВсегоУменьшение;
			СуммаВсегоНДСУменьшение		= Сообщение.СуммаВсегоНДСУменьшение;
			СуммаВсегоБезНДСУменьшение	= Сообщение.СуммаВсегоБезНДСУменьшение;
			
			ЭлементыФормы.ПанельСумм.ТекущаяСтраница = ЭлементыФормы.ПанельСумм.Страницы.СтраницаПлюсМинус;
			
		Иначе
			
			СуммаВсего			= Сообщение.СуммаВсего;
			СуммаВсегоНДС		= Сообщение.СуммаВсегоНДС;
			СуммаВсегоБезНДС	= Сообщение.СуммаВсегоБезНДС;
			
		КонецЕсли;
		
		КоличествоСтрок		= Сообщение.Товары.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			НадписьТовары = "Товары";
		Иначе
			НадписьТовары = "Товары ("+КоличествоСтрок+")";
		КонецЕсли;
		
		ЭлементыФормы.Панель.Страницы.Товары.Заголовок = НадписьТовары;
		
		ПустаяСсылкаНоменклатуры				= ПолучитьПустуюСсылкуОбъекта("Номенклатура");
		ПустаяСсылкаХарактеристикиНоменклатуры	= ПолучитьПустуюСсылкуОбъекта("ХарактеристикаНоменклатуры");
		ПустаяСсылкаЕдиницыИзмерения			= ПолучитьПустуюСсылкуОбъекта("ЕдиницаИзмерения");
        ПустаяСсылкаСтавкиНДС					= ПолучитьПустуюСсылкуОбъекта("СтавкаНДС");
		ПустаяСсылкаСтрана						= ПолучитьПустуюСсылкуОбъекта("Страна");
		ПустаяСсылкаНомерГТД					= ПолучитьПустуюСсылкуОбъекта("НомерГТД");
		
		Товары.Очистить();
		ТоварныеПозиции.Очистить();
		НомСтр = 1;
				
		ПробоватьСчитатьУпаковки = Ложь;
		ПоказыватьКоличествоУпаковок = Ложь;
		ПоказыватьКоличествоВОдномМесте = Ложь;
		ЕстьКонечныйГрузополучательВТоварах=Ложь;
		Если Сообщение.ТипСообщения = "ORDERS" Тогда
			Если НЕ Сообщение.Товары.Колонки.Найти("КоличествоВОдномМесте")=Неопределено Тогда
				ПробоватьСчитатьУпаковки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ОтправлятьДанныеОбУпаковках 		= Ложь;
		Если КтоМы = "Поставщик" Тогда
			Если Сообщение.Направление = "Исходящее" Тогда
				Если ЗначениеЗаполнено(Сообщение.Получатель1С) Тогда
					ОбязательныйКодТовараПокупателя = (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОбязательныйКодТовараТорговойСети") = Истина);
					Если Сообщение.ТипСообщения = "DESADV" Тогда
						ОбязательныйСФвDESADV 				= (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОбязательныйСФвDESADV") = Истина);
						ОтправлятьДанныеОбУпаковках 		= (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С, "ОтправлятьДанныеОбУпаковках") = Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Стр Из Сообщение.Товары Цикл
			
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			НоваяСтрока.НомерСтроки = НомСтр;
			НомСтр = НомСтр + 1;
			
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				НоваяСтрока.Номенклатура = ПустаяСсылкаНоменклатуры;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				НоваяСтрока.ХарактеристикаНоменклатуры = ПустаяСсылкаХарактеристикиНоменклатуры;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = ПустаяСсылкаЕдиницыИзмерения;
			КонецЕсли;
			Если НЕ Сообщение.ТипСообщения = "COINVOIC" Тогда
				Если НЕ ЗначениеЗаполнено(Стр.СтавкаНДС1С) Тогда
					НоваяСтрока.СтавкаНДС1С = ПустаяСсылкаСтавкиНДС;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.Страна1С) Тогда
				НоваяСтрока.Страна1С = ПустаяСсылкаСтрана;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.НомерГТД1С) Тогда
				НоваяСтрока.НомерГТД1С = ПустаяСсылкаНомерГТД;
			КонецЕсли;
			
			Если ПробоватьСчитатьУпаковки Тогда
				
				Если НоваяСтрока.КодЕдиницыИзмеренияEDI = "CT" Тогда
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				Иначе
					Если ЗначениеЗаполнено(НоваяСтрока.КоличествоВОдномМесте) И ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество/НоваяСтрока.КоличествоВОдномМесте;
					КонецЕсли;						
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.КоличествоУпаковок) Тогда
					ПоказыватьКоличествоУпаковок = Истина;
				КонецЕсли;					
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоваяСтрока.КоличествоВОдномМесте) Тогда
				ПоказыватьКоличествоВОдномМесте = Истина;
			КонецЕсли;
			
			ДобавитьТоварнуюПозицию(НоваяСтрока);
			Если Сообщение.ТипСообщения = "ORDERS" И Сообщение.Товары.Колонки.Найти("КонечныйГрузополучательGLN")<>Неопределено и Значениезаполнено(Стр.КонечныйГрузополучательGLN) Тогда
				НоваяСтрока.КонечныйГрузополучательПредставление = Стр.КонечныйГрузополучательGLN;
				ЕстьКонечныйГрузополучательВТоварах=Истина;
			иначе
				НоваяСтрока.КонечныйГрузополучательПредставление = "";
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьКонечныйГрузополучательВТоварах Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КонечныйГрузополучательПредставление");
		КонецЕсли;
		Если НЕ ПоказыватьКоличествоВОдномМесте Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КоличествоВОдномМесте");
		КонецЕсли;
		Если НЕ ПоказыватьКоличествоУпаковок Тогда
			НастройкаФормы.НевидимыеКолонки.Добавить("КоличествоУпаковок");
		КонецЕсли;
		
		КоличествоВсего	= Товары.Итог("Количество");
		
		Если СуммаВсего = 0 Тогда
			СуммаВсего = Товары.Итог("СуммаСНДС");
		КонецЕсли;
		Если СуммаВсегоБезНДС = 0 Тогда
			СуммаВсегоБезНДС = Товары.Итог("СуммаБезНДС");
		КонецЕсли;
		Если СуммаВсегоНДС = 0 Тогда
			СуммаВсегоНДС = Товары.Итог("СуммаНДС");
		КонецЕсли;	
		
		Если Сообщение.ТипСообщения = "ORDERS" 
			И Сообщение.Направление = "Входящее" Тогда
			ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьТоварнуюГруппуТаблицыТоваров",,Новый Структура("Сообщение,Товары",Сообщение,Товары));//попробуем так.
		Иначе
			НастройкаФормы.НевидимыеКолонки.Добавить("ТоварнаяГруппа");
			//еще можно скрывать, если товарные группы не используются или если все товары вошли в одну группу.
		КонецЕсли;
		
		//если партнер может отправлять данные об упаковках и сообщение содержит данные по упаковкам
		//тогда заполняем данные о распределении товаров в упаковках
		//иначе очищаем данные об упаковках
		Если ОтправлятьДанныеОбУпаковках И Сообщение.Свойство("ТранспортныеУпаковки") Тогда
			ТранспортныеУпаковки = Сообщение.ТранспортныеУпаковки.Скопировать();
			ОбновитьДанныеРазмещения();
		Иначе
			ТранспортныеУпаковки.Строки.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипПоля1С(ИмяПоля)
	
	СтрокаМетаданных = МетаданныеСообщения.Найти(ИмяПоля,"ИмяПоля");
	
	Если НЕ СтрокаМетаданных = Неопределено Тогда
		
		Тип1С = СтрокаМетаданных.Тип1С;
		Если ЗначениеЗаполнено(Тип1С) Тогда
			
			Если СтрокаМетаданных.Принадлежность = "1С" ИЛИ СтрокаМетаданных.Принадлежность = "=" Тогда
				ИмяНаФорме = ИмяПоля;
			Иначе
				ИмяНаФорме = ИмяПоля+"1С";
			КонецЕсли;
			
			ПолеФормы	= ЭлементыФормы[ИмяНаФорме];
			ТипПоля		= ПолучитьТипЗначенияОбъекта(Тип1С);
			
			Если ТипПоля = Неопределено ИЛИ (ВнешнееХранилище И Найти(ТипПоля,"КонтурEDI_")>0) Тогда
				//Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
			Иначе	
				
				ЭлементыФормы[ИмяНаФорме].ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
				                     
				Если НЕ ЗначениеЗаполнено(Сообщение[ИмяНаФорме]) Тогда
					
					ЭтаФорма[ИмяНаФорме] = ПолучитьПустуюСсылкуОбъекта(Тип1С);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьТипКолонки1С(ИмяПоля)
	
	СвойстваПоля = ПолучитьСвойстваПоля(ИмяПоля,МетаданныеСообщения);
	
	Если ЗначениеЗаполнено(СвойстваПоля.ИмяНаФорме1С) И ЗначениеЗаполнено(СвойстваПоля.Тип1С) Тогда
		
		ПолеФормы	= ЭлементыФормы.Товары.Колонки[СвойстваПоля.ИмяНаФорме1С].ЭлементУправления;
		ТипПоля		= ПолучитьТипЗначенияОбъекта(СвойстваПоля.Тип1С);
		
		Если ТипПоля = Неопределено Тогда
			
			//Сообщить("Не задан тип объекта 1С для поля с типом "+СвойстваПоля.Тип1С);
			
		Иначе	
			
			ПолеФормы.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипыПолей1С()
	
	УстановитьТипПоля1С("Документ");
	
	УстановитьТипПоля1С("Продавец");
	УстановитьТипПоля1С("Покупатель");
	УстановитьТипПоля1С("Грузоотправитель");
	УстановитьТипПоля1С("Грузополучатель");
	
	Если НЕ ИмяКонфигурации1С = "Розница" Тогда
	
		УстановитьТипПоля1С("Договор");
		УстановитьТипПоля1С("Валюта");
		
		УстановитьТипКолонки1С("НомерГТД");
	
	КонецЕсли;
		
	УстановитьТипПоля1С("Отправитель");
	УстановитьТипПоля1С("Получатель");
	УстановитьТипПоля1С("Заказ");
	УстановитьТипПоля1С("Накладная");
	УстановитьТипПоля1С("Приемка");
	
	УстановитьТипКолонки1С("Номенклатура");
	УстановитьТипКолонки1С("ХарактеристикаНоменклатуры");
	УстановитьТипКолонки1С("ЕдиницаИзмерения");
	УстановитьТипКолонки1С("СтавкаНДС");
	УстановитьТипКолонки1С("Страна");
	
КонецПроцедуры

Процедура СделатьНевидимымЭлементФормы(ИмяЭлементаФормы)
	
	НайденныйЭлемент = ЭлементыФормы.Найти(ИмяЭлементаФормы);
	Если НЕ НайденныйЭлемент = Неопределено Тогда
		
		НайденныйЭлемент.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	НевидимыеПоля = НастройкаФормы.НевидимыеПоля;
	
	Для Каждого Стр ИЗ НевидимыеПоля Цикл
		
		ИмяПоля = Стр.Значение;
		
		// пробуем всевозможные варианты
		СделатьНевидимымЭлементФормы("Надпись"+ИмяПоля);
		СделатьНевидимымЭлементФормы("НадписьНомер"	+ ИмяПоля);
		СделатьНевидимымЭлементФормы("НадписьДата"	+ ИмяПоля);
		СделатьНевидимымЭлементФормы(ИмяПоля);
		СделатьНевидимымЭлементФормы(ИмяПоля+"1С");
		СделатьНевидимымЭлементФормы(ИмяПоля+"EDI");
		СделатьНевидимымЭлементФормы(ИмяПоля+"Номер");
		СделатьНевидимымЭлементФормы(ИмяПоля+"Дата");
		
	КонецЦикла;
	
	НевидимыеКолонки = НастройкаФормы.НевидимыеКолонки;
	
	Для Каждого Колонка ИЗ ЭлементыФормы.Товары.Колонки Цикл
		
		НайденнаяКолонка = НевидимыеКолонки.НайтиПоЗначению(Колонка.Имя);
		
		Если НайденнаяКолонка = Неопределено Тогда
			Колонка.Видимость	= Истина;
			Колонка.Доступность = Истина;
		Иначе
			Колонка.Видимость	= Ложь;
			Колонка.Доступность	= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЭлементыФормы.Заказ1С.Видимость И НЕ ЭлементыФормы.Накладная1С.Видимость И НЕ ЭлементыФормы.Приемка1С.Видимость И НЕ ЭлементыФормы.СчетФактура1С.Видимость Тогда
		ЭлементыФормы.РамкаСвязанныеДокументы.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбязательныйКодТовараПокупателя = Истина Тогда
		КолонкаКода = ЭлементыФормы.Товары.Колонки.КодТовараПокупателя;
		КолонкаКода.Видимость = Истина;
		КолонкаКода.ТолькоПросмотр = Ложь;
		КолонкаКода.Доступность = Истина;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ORDERS" И Сообщение.Направление = "Входящее" Тогда
		ЭлементыФормы.Товары.Колонки.НеЗагружать.Видимость = Истина;
	Иначе
		ЭлементыФормы.Товары.Колонки.НеЗагружать.Видимость = Ложь;
	КонецЕсли;
	
	Если (Сообщение.ТипСообщения = "DESADV" И Сообщение.Направление = "Исходящее")
		 ИЛИ (Сообщение.ТипСообщения = "ORDRSP" И Сообщение.Направление = "Исходящее")
		 ИЛИ (Сообщение.ТипСообщения = "PORDERS" И Сообщение.Направление = "Исходящее")
	Тогда
		ЭлементыФормы.ДействиеДатаПоставки.Видимость = Истина;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "INVOIC" Тогда
		
		Если НЕ ЗначениеЗаполнено(ДатаПоставки) Тогда
			ЭлементыФормы.ДействиеДатаПоставки.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидимостьАртикула = ВосстановитьЗначение("ТоварыАртикулВидимость");
	ЭлементыФормы.Товары.Колонки.Артикул.Видимость = (ВидимостьАртикула = Истина);
	
	ВидимостьКодаНоменклатуры = ВосстановитьЗначение("ТоварыНоменклатураКодВидимость");
	ЭлементыФормы.Товары.Колонки.НоменклатураКод.Видимость = (ВидимостьКодаНоменклатуры=Истина);
		
	ВидимостьНаименованиеНоменклатурыПолное = ВосстановитьЗначение("ТоварыНаименованиеНоменклатурыПолноеВидимость");
	ЭлементыФормы.Товары.Колонки.НаименованиеНоменклатурыПолное.Видимость = (ВидимостьНаименованиеНоменклатурыПолное = Истина);
	
	Если Сообщение.ТипСообщения = "ORDERS" И Сообщение.Направление = "Входящее" Тогда
		Если Сообщение.Свойство("ОбратныйЗаказEDI") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказEDI.Номер) Тогда
            ЭлементыФормы.Товары.Колонки.НеЗагружать.Доступность = Ложь;
			ЭлементыФормы.Товары.Колонки.НеЗагружать.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
			
	//+Для Магнита
	Если Не (Сообщение.Свойство("ДатаВывозаОтПоставщика")
		и ЗначениеЗаполнено(Сообщение.ДатаВывозаОтПоставщика))
	Тогда
		ЭлементыФормы.ДатаВывозаОтПоставщика.Видимость = Ложь;
		ЭлементыФормы.НадписьДатаВывоза.Видимость = Ложь;
	КонецЕсли;
	Если Сообщение.ТипСообщения <> "ORDRSP" Тогда 
//		ЭлементыФормы.ДатаВывозаОтПоставщика.ТолькоПросмотр = Истина;
		ЭлементыФормы.ДатаВывозаОтПоставщика.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ДатаВывозаОтПоставщика.КнопкаВыбора = Истина;
	КонецЕсли;
	//-
	
	//устанавливаем видимой закладку "Данные об упаковках"
	//если у партнера установлена соответствующая настройка и в сообщении есть раздел для хранения данных об упаковках
	СообщениеМожетСодержатьДанныеОбУпаковках = Сообщение.Свойство("ТранспортныеУпаковки");
	ЭлементыФормы.Панель.Страницы.ТранспортныеУпаковки.Видимость = (ОтправлятьДанныеОбУпаковках = Истина) И СообщениеМожетСодержатьДанныеОбУпаковках;
	
КонецПроцедуры

Процедура УстановитьДоступностьПолей()
	
	// пока опускаем грузоотправителя
	ЭлементыФормы.Грузоотправитель1С.ТолькоПросмотр = Истина;
	
	ТолькоПросмотрПолей1С = НастройкаФормы.ТолькоПросмотрПолей1С;
	
	//Если НастройкаФормы.ТолькоПросмотрПолей1С Тогда
	
	ЭлементыФормы.Документ1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	
	ЭлементыФормы.Покупатель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Продавец1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Грузоотправитель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Грузополучатель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Договор.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Валюта1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	
	ЭлементыФормы.Заказ1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Накладная1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Приемка1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.СчетФактура1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	//ЭлементыФормы.ДатаВывозаОтПоставщика.ТолькоПросмотр = ТолькоПросмотрПолей1С;//+Для Магнита
	
	ЭлементыФормы.Отправитель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Получатель1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	
	ЭлементыФормы.Товары.Колонки.Номенклатура.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Товары.Колонки.ХарактеристикаНоменклатуры.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Товары.Колонки.ЕдиницаИзмерения.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Товары.Колонки.СтавкаНДС1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Товары.Колонки.Страна1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	ЭлементыФормы.Товары.Колонки.НомерГТД1С.ТолькоПросмотр = ТолькоПросмотрПолей1С;
	
	//КонецЕсли;
	
	ТолькоПросмотрПолейEDI = НастройкаФормы.ТолькоПросмотрПолейEDI;
	
	ЭлементыФормы.ПокупательEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.ПродавецEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.ГрузоотправительEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.ГрузополучательEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	ЭлементыФормы.ВалютаEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	ЭлементыФормы.ОбратныйЗаказНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.ЗаказНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.ЗаказДата.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.НакладнаяНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.НакладнаяДата.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.ПриемкаНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.ПриемкаДата.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.СчетФактураНомер.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.СчетФактураДата.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	ЭлементыФормы.ОтправительEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.ПолучательEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	ЭлементыФормы.Товары.Колонки.GTIN.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	Если ОбязательныйКодТовараПокупателя = Истина Тогда
		ЭлементыФормы.Товары.Колонки.КодТовараПокупателя.ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы.Товары.Колонки.КодТовараПокупателя.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	КонецЕсли;
	ЭлементыФормы.Товары.Колонки.КодТовараПоставщика.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.Товары.Колонки.Наименование.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.Товары.Колонки.КодЕдиницыИзмеренияEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	ЭлементыФормы.Товары.Колонки.СтавкаНДСEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.Товары.Колонки.СтранаEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	ЭлементыФормы.Товары.Колонки.НомерГТДEDI.ТолькоПросмотр = ТолькоПросмотрПолейEDI;
	
	//КонецЕсли;
	
	ЭлементыФормы.Товары.Колонки.Количество.ТолькоПросмотр = Истина;
	ЭлементыФормы.Товары.Колонки.ЦенаСНДС.ТолькоПросмотр = Истина;
	ЭлементыФормы.Товары.Колонки.ЦенаБезНДС.ТолькоПросмотр = Истина;
	ЭлементыФормы.Товары.Колонки.СуммаСНДС.ТолькоПросмотр = Истина;
	ЭлементыФормы.Товары.Колонки.СуммаБезНДС.ТолькоПросмотр = Истина;
	ЭлементыФормы.Товары.Колонки.СуммаНДС.ТолькоПросмотр = Истина;
	
	Если ТолькоПросмотрСообщения Тогда 
		ЭлементыФормы.ТоварныеПозиции.Колонки.НомерСтроки.Доступность					= Ложь;
		ЭлементыФормы.ТоварныеПозиции.Колонки.Номенклатура.Доступность					= Ложь;
		ЭлементыФормы.ТоварныеПозиции.Колонки.ХарактеристикаНоменклатуры.Доступность	= Ложь;
		ЭлементыФормы.ТоварныеПозиции.Колонки.ЕдиницаИзмерения.Доступность				= Ложь;
		ЭлементыФормы.ТоварныеПозиции.Колонки.Количество.Доступность					= Ложь;
		ЭлементыФормы.ТранспортныеУпаковки.Колонки.СоставУпаковки.Доступность			= Ложь;
		ЭлементыФормы.ТранспортныеУпаковки.Колонки.Количество.Доступность				= Ложь;
		ЭлементыФормы.КоманднаяПанельТоварныеПозиции.Доступность	 					= Ложь;
		ЭлементыФормы.КоманднаяПанельТранспортныеУпаковки.Доступность	 				= Ложь;
		ЭлементыФормы.КнопкаПеренестиВправо.Доступность 								= Ложь;
		ЭлементыФормы.КнопкаПеренестиВсеВправо.Доступность 								= Ложь;
		ЭлементыФормы.КнопкаПеренестиВлево.Доступность 									= Ложь;
		ЭлементыФормы.КнопкаПеренестиВсеВлево.Доступность 								= Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКнопки(НастройкаКнопок)
	
	КнопкиСписка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
	
	СписокКнопокНаУдаление = Новый СписокЗначений;
	
	// удалить кнопки, кроме "Закрыть"
	Для Каждого Кнопка ИЗ КнопкиСписка Цикл
		Если НЕ Кнопка.Имя = "ОсновныеДействияФормыЗакрыть" Тогда
			СписокКнопокНаУдаление.Добавить(Кнопка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КнопкаНаУдаление Из СписокКнопокНаУдаление Цикл
		КнопкиСписка.Удалить(КнопкаНаУдаление.Значение);
	КонецЦикла;
	
	
	// 1. Основные действия ("ПринятьЗаказПокупателя", "ОтправитьУведомлениеОПриемке" и т.д.)
	
	ДействиеКнопки = Новый Действие("КнопкаДействияФормыНажатие");
	
	СчетчикРазделителей = 0;
	
	КоличествоКнопокДо = КнопкиСписка.Количество();
	
	ПоследнийРазделитель = Ложь;
	
	КоличествоДобавленныхКнопок = 0;
	
	Если НЕ ТолькоПросмотрСообщения Тогда
		
		Для Каждого ОписаниеКнопки Из НастройкаКнопок Цикл
			// НастройкаКнопок - ТаблицаЗначений, описывающая основные действия формы
			// "Дополнительные действия" будут дальше, начиная с "КнопкаДополнительныеДействияФормыНажатие"
			
			КоличествоДобавленныхКнопок=КоличествоДобавленныхКнопок+1;
			
			ПоследнийРазделитель = Ложь;
		
			Если ОписаниеКнопки.ВидКнопки = "Кнопка" Тогда
				
				Если Сообщение.ТипСообщения = "ORDRSP"
					И Сообщение.Статус = "Отклонен"
					И ОписаниеКнопки.Имя = "ПоказатьРасхожденияЗаказаПокупателя" Тогда
					
					// Для отклоненных заказов расхождения не показываем
					Продолжить;
					
				КонецЕсли;
				
				Если Сообщение.ТипСообщения = "ORDERS"
					И (Сообщение.Свойство("ОбратныйЗаказ1С") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказ1С))
					И ОписаниеКнопки.Имя = "СоздатьЗаказ" Тогда
					
					// Если текущее сообщение - ORDERS, пришедшее в ответ на PORDERS, то поменяем название кнопки
					ОписаниеКнопки.Представление = "Загрузить входящий заказ";
					
				КонецЕсли;
				
				НоваяКнопка = КнопкиСписка.Добавить(ОписаниеКнопки.Имя,	ТипКнопкиКоманднойПанели.Действие,	ОписаниеКнопки.Представление, ДействиеКнопки);
				
				НоваяКнопка.Картинка	= ПолучитьКартинку(ОписаниеКнопки.ИсточникКартинки,ОписаниеКнопки.ИмяКартинки);
				НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				
				Если ОписаниеКнопки.КнопкаПоУмолчанию Тогда
					НоваяКнопка.КнопкаПоУмолчанию = Истина;
				КонецЕсли;
				
				// Проверим, не был ли заказ отклонен, и отключим возможность создания документа по данному ORDERS
				_СообщениеСсылка = Сообщение.СообщениеСсылка;
				Если ВнешнееХранилище 
					И ТипЗнч(_СообщениеСсылка)<>Тип("COMОбъект")
					И ЗначениеЗаполнено(_СообщениеСсылка)
					Тогда
					_СообщениеСсылка = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(_СообщениеСсылка);
				КонецЕсли;
				
				Если (ВнешнееХранилище И СоединениеСХранилищем.ЗначениеЗаполнено(_СообщениеСсылка))
					Или (Не ВнешнееХранилище И ЗначениеЗаполнено(_СообщениеСсылка))
				Тогда
//						_СообщениеСсылка = ?(ВнешнееХранилище,СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Сообщение.СообщениеСсылка),Сообщение.СообщениеСсылка);
					Если _СообщениеСсылка.ОтклоненоОтправителем
						И ОписаниеКнопки.Имя = "СоздатьЗаказ" Тогда
						НоваяКнопка.Доступность = Ложь;
						НоваяКнопка.Текст = "Заказ отклонен отправителем";
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли ОписаниеКнопки.ВидКнопки = "Разделитель" Тогда
				
				СчетчикРазделителей = СчетчикРазделителей+1;
				
				НоваяКнопка = КнопкиСписка.Добавить("Разделитель"+Формат(СчетчикРазделителей,"ЧГ=0"));
				
				ПоследнийРазделитель = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КоличествоДобавленныхКнопок>0 Тогда
		Если ПоследнийРазделитель = Ложь Тогда
			СчетчикРазделителей = СчетчикРазделителей+1;
			НоваяКнопка = КнопкиСписка.Добавить("Разделитель"+СокрЛП(СчетчикРазделителей));
		КонецЕсли;
	КонецЕсли;
	
	
	//2. Теперь создадим "Дополнительные действия". Они видны даже в том случае, если сообщение открыто только на просмотр.
	Если Истина Тогда//НЕ КнопкиДобавлены Тогда
		
		ДействиеКнопки = Новый Действие("КнопкаДополнительныеДействияФормыНажатие");
		
		ПодменюДействия = КнопкиСписка.Добавить("Действия",	ТипКнопкиКоманднойПанели.Подменю,	" Действия ");
		КнопкиПодменю = ПодменюДействия.Кнопки;	
		
		Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда
			
			Если Сообщение.Направление = "Входящее" Тогда
				
				СкопироватьКнопкуДополнительныхДействий("ОтвязатьДокумент");
				
				Если Сообщение.ТипСообщения = "ORDERS" Тогда
					СкопироватьКнопкуДополнительныхДействий("ПерезаполнитьДокумент");
				КонецЕсли;
				
			КонецЕсли;	
			
		Иначе
			
			Если Сообщение.ТипСообщения = "ORDERS"
				Или Сообщение.ТипСообщения = "DESADV"
				Или Сообщение.ТипСообщения = "INVOIC" Тогда
				
				Если Сообщение.Направление = "Входящее" Тогда
					СкопироватьКнопкуДополнительныхДействий("ПривязатьСообщение");
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"ORDRSP")=Истина 
			И ((Сообщение.ТипСообщения = "ORDERS" 
			И Сообщение.Направление = "Входящее" 
			И Сообщение.СтатусСсылки <> "Отклонен") 
			ИЛИ (Сообщение.ТипСообщения = "ORDRSP" 
			И Сообщение.Направление = "Исходящее" 
			И Сообщение.Статус <> "Отклонен")) Тогда
			
			СкопироватьКнопкуДополнительныхДействий("ОтклонитьЗаказПолностью");
			
		КонецЕсли; 
		
		Если (Сообщение.ТипСообщения = "ORDERS" или Сообщение.ТипСообщения = "PORDERS")
			И Сообщение.Направление = "Входящее"
			Тогда
			
			СкопироватьКнопкуДополнительныхДействий("ПрекратитьОбработкуЗаказа");
			
		КонецЕсли;
		
		Если Сообщение.Направление = "Исходящее"
			И Сообщение.Свойство("ПереотправляемоеСообщениеСсылка")
			И (ПолучитьСтатусСообщения(Сообщение.ПереотправляемоеСообщениеСсылка) = "Ожидает исправления ошибок"
			ИЛИ ПолучитьСтатусСообщения(Сообщение.ПереотправляемоеСообщениеСсылка) = "Доставлен с уточнением") 
			Тогда
			
			Если Сообщение.Свойство("Архив") И Сообщение.Архив = Истина Тогда
				//Не добавляем кнопку
            Иначе
				СкопироватьКнопкуДополнительныхДействий("ПрекратитьОбработкуСообщения");
			КонецЕсли;
			
		КонецЕсли;
		
		Если КнопкиПодменю.Количество()>0 Тогда
			НоваяКнопка = КнопкиПодменю.Добавить("Разделитель");
		КонецЕсли;
		
		СкопироватьКнопкуДополнительныхДействий("ОткрытьФайл");
		
		Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда
			СкопироватьКнопкуДополнительныхДействий("НайтиСвязанныеСообщения");
		КонецЕсли;
		
		НоваяКнопка = КнопкиПодменю.Добавить("Разделитель1");
		
		Если ЗначениеЗаполнено(Сообщение.СообщениеСсылка) Тогда
			
			Если Сообщение.Направление = "Исходящее" Тогда
				
				Если Найти("\ORDRSP\DESADV\INVOIC\COINVOIC\" , "\"+Сообщение.ТипСообщения+"\")>0 Тогда
					СкопироватьКнопкуДополнительныхДействий("ПереотправитьСообщение");
				КонецЕсли;
				
				Если Найти("\DESADV\INVOIC\" , "\"+Сообщение.ТипСообщения+"\")>0 Тогда
					
					Если ЗначениеЗаполнено(Сообщение.Получатель1С) Тогда
						
						ПоказыватьКнопкуПереотправкиАлко = Ложь;
						
						Если Сообщение.ТипСообщения = "DESADV" И ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ОтправлятьALCRPT") = Истина Тогда
							ПоказыватьКнопкуПереотправкиАлко = Истина;
						ИначеЕсли Сообщение.ТипСообщения = "INVOIC" И ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ОтправлятьALCRPTсINVOIC") = Истина Тогда
							ПоказыватьКнопкуПереотправкиАлко = Истина;
						КонецЕсли;
						
						Если ПоказыватьКнопкуПереотправкиАлко Тогда
							СкопироватьКнопкуДополнительныхДействий("ПереотправитьALCRPT");
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
						
			КонецЕсли;
		
			СкопироватьКнопкуДополнительныхДействий("УдалитьСообщение");
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоКнопокПосле = КнопкиСписка.Количество();
	
	Для н = 1 по КоличествоКнопокДо Цикл
		
		КнопкиСписка.Сдвинуть(КнопкиСписка[0],КоличествоКнопокПосле-1);
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует кнопку ИмяКнопки с командной панели "ОсновныеДействияФормыИсточникКнопок" в командную панель "ОсновныеДействияФормы".
// Сделано из-за отсутствия свойства "Видимость" у кнопок командной панели в обычных формах.
// Действует аналогично процедура "СкопироватьКнопкуЕще" в форме "ОсновнойИнтерфейс"
Процедура СкопироватьКнопкуДополнительныхДействий(ИмяКнопки)
	
	// Сначала надо убедиться, что подменю ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Действия уже созданы.
	Если ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("Действия")=Неопределено Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Добавить("Действия", ТипКнопкиКоманднойПанели.Подменю, " Действия ");
	КонецЕсли;
	
	Источник = ЭлементыФормы.ОсновныеДействияФормыИсточникКнопок.Кнопки.Действия.Кнопки.Найти(ИмяКнопки);
	
	Нов = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Действия.Кнопки.Добавить(Источник.Имя, Источник.ТипКнопки,Источник.Текст, Источник.Действие);
	Нов.Картинка = Источник.Картинка;
	Нов.СочетаниеКлавиш = Источник.СочетаниеКлавиш;
	Нов.Доступность = Истина;
	
КонецПроцедуры


// Поиск ошибок и их вывод

Процедура ОчиститьПометкиПолей()
	
	ЭлементыФормы.ПометкаПродавец1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаПродавецEDI.Видимость = Ложь;
	ЭлементыФормы.ПометкаПокупатель1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаПокупательEDI.Видимость = Ложь;
	
	ЭлементыФормы.ПометкаГрузоотправитель1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаГрузоотправительEDI.Видимость = Ложь;
	ЭлементыФормы.ПометкаГрузополучатель1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаГрузополучательEDI.Видимость = Ложь;
	
	ЭлементыФормы.ПометкаВалюта1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаВалютаEDI.Видимость = Ложь;
	
	ЭлементыФормы.ПометкаСтатус.Видимость = Ложь;
	ЭлементыФормы.ПометкаКомментарий.Видимость = Ложь;
	
	ЭлементыФормы.ПометкаДатаВремяПоставки.Видимость = Ложь;
	ЭлементыФормы.ПометкаДоговор.Видимость = Ложь;
	
	ЭлементыФормы.ПометкаЗаказ1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаЗаказEDI.Видимость = Ложь;
	ЭлементыФормы.ПометкаНакладная1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаНакладнаяEDI.Видимость = Ложь;
	ЭлементыФормы.ПометкаПриемка1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаПриемкаEDI.Видимость= Ложь;
	ЭлементыФормы.ПометкаСчетФактура1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаСчетФактураEDI.Видимость= Ложь;
	
	ЭлементыФормы.ПометкаОтправитель1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаОтправительEDI.Видимость = Ложь;
	ЭлементыФормы.ПометкаПолучатель1С.Видимость = Ложь;
	ЭлементыФормы.ПометкаПолучательEDI.Видимость = Ложь;
	
	ЭлементыФормы.ПометкаСуммаВсего.Видимость = Ложь;
	ЭлементыФормы.ПометкаСуммаВсегоБезНДС.Видимость = Ложь;
	ЭлементыФормы.ПометкаСуммаВсегоНДС.Видимость = Ложь;
	
	ЭлементыФормы.ПометкаДатаОтгрузки.Видимость = Ложь;
	
КонецПроцедуры

Процедура ЗакрытьПанельОшибок()
	
	ЭлементыФормы.ПанельОшибок.Свертка = РежимСверткиЭлементаУправления.Право;
	
КонецПроцедуры

Процедура ОткрытьПанельОшибок()
	
	ЭлементыФормы.ПанельОшибок.Свертка = РежимСверткиЭлементаУправления.Нет;
	
КонецПроцедуры

Процедура СделатьАктивнымПоле(ИмяПоля,ИмяТабличнойЧасти,НомерСтроки)
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		ТабличнаяЧасть = ЭлементыФормы[ИмяТабличнойЧасти];
		
		ЭтаФорма.ТекущийЭлемент = ТабличнаяЧасть;
		
		Если НЕ НомерСтроки = 0 Тогда
			
			ТабличнаяЧасть.ТекущаяКолонка	= ТабличнаяЧасть.Колонки[ИмяПоля];
			ТабличнаяЧасть.ТекущаяСтрока	= Товары[НомерСтроки-1];
			
		КонецЕсли;
		
	Иначе	
		
		Если ЗначениеЗаполнено(ИмяПоля) Тогда
			
			Если Найти(ИмяПоля,"Грузоотправитель") > 0 Тогда
				
				ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДействиеГрузоотправитель;
				
			ИначеЕсли Найти(ИмяПоля,"Грузополучатель") > 0 Тогда
				
				ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДействиеГрузополучатель;
				
			ИначеЕсли Найти(ИмяПоля,"Продавец") > 0 Тогда
				
				Если КтоМы = "Поставщик" Тогда
					ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДействиеЮрФизЛицоСвое;
				Иначе
					ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДействиеЮрФизЛицоСтороннее;
				КонецЕсли;
				
			ИначеЕсли Найти(ИмяПоля,"Покупатель") > 0 Тогда
				
				Если КтоМы = "Поставщик" Тогда
					ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДействиеЮрФизЛицоСтороннее;
				Иначе
					ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДействиеЮрФизЛицоСвое;
				КонецЕсли;
				
			ИначеЕсли Найти(ИмяПоля,"ЗаказEDI") > 0 Тогда
				
				
			ИначеЕсли Найти(ИмяПоля,"СчетФактураEDI") > 0 Тогда
				
				ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.СчетФактура1С;
				
			Иначе
				
				НайденноеПоле = ЭлементыФормы.Найти(ИмяПоля);
				Если НЕ НайденноеПоле = Неопределено Тогда
					ЭтаФорма.ТекущийЭлемент = НайденноеПоле;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеОбязательныхПолей()
	
	Для Каждого Стр Из НастройкаФормы.ОбязательныеПоля Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.ИмяТабличнойЧасти) Тогда
			
			Если ЗначениеЗаполнено(ЭтаФорма[Стр.ИмяПоля]) Тогда
				
				ПометкаПоля = ЭлементыФормы["Пометка"+Стр.ИмяПоля];
				
				Если Не ПометкаПоля = Неопределено Тогда
					ПометкаПоля.Картинка = ЭлементыФормы.КартинкаГалочкаМаленькая.Картинка;
					ПометкаПоля.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			ЭлементыФормы[Стр.ИмяПоля].АвтоОтметкаНезаполненного = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура УстановитьДействиеЮрФизЛица(ИмяПоля,Текст,ЕстьОшибки = Ложь)
	
	Надпись = ЭлементыФормы["Действие"+ИмяПоля];	
	Надпись.Заголовок = Текст;
	Если ЕстьОшибки Тогда
		Надпись.ЦветТекста = WebЦвета.Коричневый;
	Иначе
		Надпись.ЦветТекста = WebЦвета.СинийСоСтальнымОттенком;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеПолей() Экспорт  //возможен вызов из ПМ
	
	ОчиститьПометкиПолей();
	
	ТаблицаОшибок.Очистить();
	
	ЕстьОшибкиВПрикрепленных = Ложь;
	
	// смотрим на статусное сообщение
	Если Сообщение.Направление = "Исходящее" Тогда
		
		СтатусноеСообщениеОбОшибке = ПрочитатьСообщение(,Сообщение.ДокументСсылка,Сообщение.ТипСообщения);
		
		Если НЕ СтатусноеСообщениеОбОшибке = Неопределено Тогда
			
			СтатусноеСообщениеОбъект = ПолучитьОбъектСообщения(СтатусноеСообщениеОбОшибке.СообщениеСсылка);
			ТекстОшибки = СтатусноеСообщениеОбъект.ОписаниеОшибки;
			
			Если СтрДлина(ТекстОшибки) > 0 Тогда
				Если Найти(ТекстОшибки,Символы.ПС)>0 Тогда
					Пока Найти(ТекстОшибки,Символы.ПС)>0 Цикл
						НоваяСтрока = ТаблицаОшибок.Добавить();
						НоваяСтрока.ТекстОшибки = Лев(ТекстОшибки, Найти(ТекстОшибки,Символы.ПС)-1);
					    ТекстОшибки = Сред(ТекстОшибки, Найти(ТекстОшибки,Символы.ПС)+1);
					КонецЦикла;
					Если СтрДлина(ТекстОшибки)>0 Тогда
						НоваяСтрока = ТаблицаОшибок.Добавить();
						НоваяСтрока.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
				Иначе
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ТекстОшибки = ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// попробуем прочитать статус уточнения из Диадока
		Если Сообщение.ТипСообщения = "INVOIC" Тогда
			
			Состояние("Проверка статусов документа в Диадоке...");
			
			boxId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "boxId"));
			messageId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "messageId"));
			invoiceId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "invoiceId"));
			torg12Id = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "torg12Id"));
			
			Если ЗначениеЗаполнено(boxId) И ЗначениеЗаполнено(messageId) И (ЗначениеЗаполнено(invoiceId) или ЗначениеЗаполнено(torg12Id)) Тогда
				Если УстановитьСоединениеСДиадокомПоУмолчанию(Ложь) Тогда
					
					ОрганизацияПолучена = Ложь;
					Попытка
						ИДОрганизации = СтрЗаменить(boxId,"-","")+"@diadoc.ru";
						ОрганизацияДД = РаботаССерверомДиадок.Соединение.GetOrganizationById(ИДОрганизации);
						ОрганизацияПолучена = Истина;
					Исключение
					КонецПопытки;
					
					Если ОрганизацияПолучена Тогда
					
						ТОРГ12Получен = Ложь;
						Если ЗначениеЗаполнено(torg12Id) Тогда
							Попытка
								ДокументДД_ТОРГ12 = ОрганизацияДД.GetDocumentById(messageId+torg12Id);
								ТОРГ12Получен = Истина;
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						ЭСФПолучен = Ложь;
						Если ЗначениеЗаполнено(invoiceId) Тогда
							Попытка
								ДокументДД_ЭСФ = ОрганизацияДД.GetDocumentById(messageId+invoiceId);
								ЭСФПолучен = Истина;
							Исключение
							КонецПопытки;
						КонецЕсли;
						
						Если ТОРГ12Получен И ДокументДД_ТОРГ12.Status = "OutboundRecipientSignatureRequestRejected" Тогда // если отказано в подписании накладной
							КомментарийОтказаВПодписи = ДокументДД_ТОРГ12.GetRejectionComment();
							НоваяСтрока = ТаблицаОшибок.Добавить();
							НоваяСтрока.ТекстОшибки = "Отказ в подписи накладной: " + КомментарийОтказаВПодписи;
							НоваяСтрока.Действие 	= "Открыть накладную в Диадоке";
							НоваяСтрока.ИмяПоля		= "СтатусДиадок";
						КонецЕсли;
						
						Если ЭСФПолучен И ДокументДД_ЭСФ.AmendmentRequested = Истина Тогда // если запрошено уточнение
							КомментарийУточнения = ДокументДД_ЭСФ.GetAmendmentRequestedComment();
							НоваяСтрока = ТаблицаОшибок.Добавить();
							НоваяСтрока.ТекстОшибки = "Запрос на уточнение счета-фактуры: " + КомментарийУточнения;
							НоваяСтрока.Действие 	= "Открыть счет-фактуру в Диадоке";
							НоваяСтрока.ИмяПоля		= "СтатусДиадок";
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе	
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ТекстОшибки = "Не удалось подключиться к Диадоку для отображения комментария от торговой сети";
				КонецЕсли;
			КонецЕсли;
			
			Состояние("");	
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СообщениеАлко) Тогда
			
			СтатусноеСообщениеОбОшибке = ПрочитатьСообщение(,СообщениеАлко.ДокументСсылка,СообщениеАлко.ТипСообщения);
			
			Если НЕ СтатусноеСообщениеОбОшибке = Неопределено Тогда
				
				ТекстОшибки = СтатусноеСообщениеОбОшибке.СообщениеСсылка.ОписаниеОшибки;
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = ТекстОшибки;
				
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Стр ИЗ ТаблицаПрикрепленныхСообщений Цикл
			
			Если ЗначениеЗаполнено(Стр.Примечание) Тогда
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "В прикрепленных сообщениях были найдены ошибки: "+СокрЛП(Стр.Примечание);
				ЕстьОшибкиВПрикрепленных = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	//
	
	// проверка алко полей
	ЕстьАлкоОшибки = Ложь;
	Если ЗначениеЗаполнено(СообщениеАлко) Тогда
		
		Если СообщениеАлко.СодержитОшибки = Истина Тогда
			ЕстьАлкоОшибки=Истина;	
			РезультатПроверки = ПроверитьПоляСообщения(СообщениеАлко,Неопределено);
			Для Каждого Стр Из РезультатПроверки.СписокОшибок Цикл
				
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
				
			КонецЦикла;
		КонецЕсли
		//проверки перенесены в МО.ПроверитьПоляСообщения

	КонецЕсли;
	//
	
	//sscc
	ЕстьОшибкиУпаковок = Ложь;
	Если ОтправлятьДанныеОбУпаковках 
		 И Не ТранспортныеУпаковки.Строки.Количество() = 0 Тогда
		//Будем полагать, что если размещение товаров по упаковкам не начали, 
		//значит, в этом не было необходимости, несмотря на возможность размещения.
		//проверяем полное размещение товара по упаковкам
		Если Не ТоварныеПозиции.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ТекстОшибки = "Не все товарные позиции размещены по упаковкам.";
			ЕстьОшибкиУпаковок = Истина;	
		КонецЕсли;
		//проверим наличие "пустых" упаковок
		Для Каждого Упаковка Из ТранспортныеУпаковки.Строки Цикл
			Если Упаковка.Строки.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "В упаковку " + Упаковка.СоставУпаковки + " не размещен ни один товар.";
				ЕстьОшибкиУпаковок = Истина;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//
	
	ПроверитьЗаполнениеОбязательныхПолей();
	
	Эталон = ПолучитьСтруктуруСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	ДополнитьСтруктуруСообщенияИзЭталона(Сообщение,Эталон);
	
	КопияСообщения = ПолучитьКопиюСообщения(Сообщение);
	
	Если Сообщение.Направление = "Входящее" Тогда
		
		ПеренестиПоля1СвСообщение(КопияСообщения);
		
		Если ОпределитьКемМыЯвляемся(Сообщение) = "Поставщик"
			И Сообщение.СтатусСсылки = "ВходящийНеПрошелВалидацию" Тогда
			СообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
			ОшибкиВалидации = ПолучитьОшибкиВалидацииИзОбъектаСообщения(СообщениеОбъект);
			Для Каждого ОшибкаВалидации Из ОшибкиВалидации Цикл
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ИмяПоля = "ОшибкаВалидации";
				НоваяСтрока.ТекстОшибки = ОшибкаВалидации.Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Подробнее");
	УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Подробнее");
	УстановитьДействиеЮрФизЛица("Грузоотправитель",		"Подробнее");
	УстановитьДействиеЮрФизЛица("Грузополучатель",		"Подробнее");
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ОбязательныйКодТовараПокупателя",?(ОбязательныйКодТовараПокупателя = Истина,Истина,Ложь));
	ПараметрыПроверки.Вставить("ОбязательныйСФвDESADV",?(ОбязательныйСФвDESADV = Истина,Истина,Ложь));
	
	РезультатПроверки = ПроверитьПоляСообщения(КопияСообщения,ПараметрыПроверки);
	
	Если НЕ РезультатПроверки.Успешно Тогда
		
		Для Каждого Стр Из РезультатПроверки.СписокОшибок Цикл
				
			НоваяСтрока = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			
			НайденнаяСтрока = НастройкаСсылокИсправленияОшибок.Найти(Стр.ИмяПоля,"ИмяПоля");
			Если Не НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока.Действие = НайденнаяСтрока.ТекстСсылки;
			КонецЕсли;
			
			Если Сообщение.ТипСообщения = "ORDRSP" Тогда
				Если Стр.ИмяПоля = "GTIN" Тогда
					НоваяСтрока.Действие = "";
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Стр.ИмяТабличнойЧасти) Тогда
			
				ПометкаПоля = ЭлементыФормы.Найти("Пометка"+Стр.ИмяПоля);
				
				Если Не ПометкаПоля = Неопределено Тогда
					ПометкаПоля.Картинка	= ЭлементыФормы.КартинкаОшибка.Картинка;
					ПометкаПоля.Видимость	= Истина;
				КонецЕсли;
				
			Иначе
				
				Если НЕ Стр.ИмяПоля = Стр.ИмяТабличнойЧасти И Стр.ИмяТабличнойЧасти = "Товары" Тогда
					
					ТекКолонка = ЭлементыФормы[Стр.ИмяТабличнойЧасти].Колонки.Найти(Стр.ИмяПоля); 
					
					Если НЕ ТекКолонка = Неопределено Тогда
						Если ТекКолонка.Видимость = Ложь Тогда
							
							ТекКолонка.Видимость	= Истина;
							ТекКолонка.Доступность	= Истина;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Стр.ИмяПоля = "Продавец1С" Тогда
				
				Если КтоМы = "Поставщик" Тогда
					УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Установить соответствие", Истина);
				Иначе
					УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Установить соответствие", Истина);
				КонецЕсли;
				
			ИначеЕсли Стр.ИмяПоля = "ПродавецEDI" Тогда
				
				Если КтоМы = "Поставщик" Тогда
					УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Исправить ошибки", Истина);
				Иначе
					УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Исправить ошибки", Истина);
				КонецЕсли;
				
			ИначеЕсли Стр.ИмяПоля = "Покупатель1С" Тогда
				
				Если КтоМы = "Поставщик" Тогда
					УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Установить соответствие", Истина);
				Иначе
					УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Установить соответствие", Истина);
				КонецЕсли;
				
			ИначеЕсли Стр.ИмяПоля = "ПокупательEDI" Тогда
				
				Если КтоМы = "Поставщик" Тогда
					УстановитьДействиеЮрФизЛица("ЮрФизЛицоСтороннее",	"Исправить ошибки", Истина);
				Иначе
					УстановитьДействиеЮрФизЛица("ЮрФизЛицоСвое",		"Исправить ошибки", Истина);
				КонецЕсли;
				
			ИначеЕсли Стр.ИмяПоля = "ГрузополучательEDI" Тогда	
				
				УстановитьДействиеЮрФизЛица("Грузополучатель",	"Исправить ошибки", Истина);
				
			ИначеЕсли Стр.ИмяПоля = "ГрузоотправительEDI" Тогда	
				
				УстановитьДействиеЮрФизЛица("Грузоотправитель",	"Исправить ошибки", Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаОшибок.Количество()=0 Тогда
		ЗакрытьПанельОшибок();
	Иначе
		ОткрытьПанельОшибок();
	КонецЕсли;
	
	РезультатПроверки.Успешно = РезультатПроверки.Успешно И НЕ ЕстьАлкоОшибки И НЕ ЕстьОшибкиУпаковок И НЕ ЕстьОшибкиВПрикрепленных;
	
	Если НЕ РезультатПроверки.Успешно Тогда
		Если Сообщение.Направление = "Исходящее" Тогда
			ВывестиПанельИнформации("В сообщении найдены ошибки, их необходимо исправить перед отправкой.","Плохо");
		Иначе
			ВывестиПанельИнформации("Для загрузки сообщения необходимо проставить соответствия.","Плохо");
		КонецЕсли;
	Иначе
		Если Сообщение.Направление = "Исходящее" Тогда
			Если Не ТаблицаОшибок.Количество() = 0 Тогда
				ВывестиПанельИнформации("В сообщении найдены ошибки, их необходимо исправить перед отправкой.");		
			Иначе
				ВывестиПанельИнформации("Поздравляем! Все ошибки исправлены, теперь можно отправить сообщение.","Хорошо");
			КонецЕсли;
		Иначе
			ВывестиПанельИнформации("Поздравляем! Все соответствия проставлены, теперь можно загрузить сообщение.","Хорошо");
		КонецЕсли;
	КонецЕсли;
	
	КопияСообщения = Неопределено;
	
	Возврат РезультатПроверки.Успешно;
	
КонецФункции

//

Процедура ПеренестиПоля1СвСообщение(ТекСообщение)
	
	ТекСообщение.Продавец1С 		= Продавец1С;
	ТекСообщение.Покупатель1С 		= Покупатель1С;
	ТекСообщение.Грузоотправитель1С = Грузоотправитель1С;
	ТекСообщение.Грузополучатель1С	= Грузополучатель1С;
	ТекСообщение.Валюта1С			= Валюта1С;
	
	ТекСообщение.Отправитель1С		= Отправитель1С;
	ТекСообщение.Получатель1С		= Получатель1С;
	
	сч = 0;
	
	Для каждого Стр Из Товары Цикл
		
		ТекСтрокаТоваров = ТекСообщение.Товары[сч];
		ЗаполнитьЗначенияСвойств(ТекСтрокаТоваров,Стр);
		
		сч = сч+1;
		
	КонецЦикла;
	
	ТекСообщение.Партнер = ?(ТекСообщение.Направление = "Входящее",Отправитель1С,Получатель1С);
	
КонецПроцедуры

Процедура ПроизвестиПервоначальноеЗаполнениеПолейНаФорме() Экспорт
	
	ОбязательныйКодТовараПокупателя = Ложь;
	
	КтоМы = ОпределитьКемМыЯвляемся(Сообщение);
	
	НастройкаФормы = ПолучитьНастройкиФормыСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	НастройкаСсылокИсправленияОшибок = ПолучитьНастройкуВыводаСсылокНаОбъектыСообщения();

	МетаданныеСообщения = ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	
	ЭлементыФормы.НадписьЗаголовок.Заголовок = НастройкаФормы.Заголовок;
	ЭтаФорма.Заголовок = НастройкаФормы.Заголовок+" ("+СокрЛП(Сообщение.ТипСообщения)+") ";
	Если Сообщение.Свойство("ДатаСоздания")	И ЗначениеЗаполнено(Сообщение.ДатаСоздания) Тогда
		Если Сообщение.Направление = "Входящее" Тогда
			//Для входящих выводим на форму время в формате МСК(UTC+3), для этого добавим 3 часа к UTC.
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "Дата отправки (МСК): " + (Сообщение.ДатаСоздания + 60*60*3);
		ИначеЕсли Сообщение.Направление = "Исходящее" И Сообщение.Свойство("Архив") И Сообщение.Архив Тогда
			//Для исходящих выводим местное время создания сообщения
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "Дата создания: " + Сообщение.ДатаСоздания;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьКнопки(НастройкаФормы.КнопкиКоманднойПанели);
	
	Если ТолькоПросмотрСообщения Тогда
		НастройкаФормы.ТолькоПросмотрПолей1С = Истина;
		НастройкаФормы.ТолькоПросмотрПолейEDI = Истина;
		ТолькоПросмотр = Истина;
	КонецЕсли;
		
	Если Сообщение.Направление = "Входящее" Тогда
		КонвертироватьСообщениеEDIв1С(Сообщение);
	КонецЕсли;
	
	ЭлементыФормы.Товары.Колонки.Комментарий.Видимость = (Сообщение.ТипСообщения = "ORDRSP");
	ЭлементыФормы.Товары.Колонки.Комментарий.ТолькоПросмотр = Не (Сообщение.ТипСообщения = "ORDRSP");
	
	ЗаполнитьПоляНаФорме();
	УстановитьТипыПолей1С();
	УстановитьВидимость();
	УстановитьДоступностьПолей();

	НетОшибок = Истина;
	
	ПриОткрытииФормыСообщения(Сообщение,ЭтаФорма);	
	
	Если НастройкаФормы.ПроверятьПоляПриОткрытииФормы Тогда
		
		НетОшибок = ПроверитьЗаполнениеПолей();
		
	КонецЕсли;
	
	Если Сообщение.Направление = "Входящее" Тогда
		ЭлементыФормы.Товары.Колонки.Номенклатура.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если НетОшибок Тогда
		
		Если Сообщение.Направление = "Исходящее" Тогда
			
			Если КтоМы = "Поставщик" Тогда
				ВывестиПанельИнформации("В этой форме вы можете проверить данные, которые будут отправлены в торговую сеть.");
			Иначе
				ВывестиПанельИнформации("В этой форме вы можете проверить данные, которые будут отправлены поставщику.");
			КонецЕсли;
			
		Иначе
			
			Если КтоМы = "Поставщик" Тогда
				ВывестиПанельИнформации("В этой форме вы можете проверить данные, которые вам отправила торговая сеть.");
			Иначе
				ВывестиПанельИнформации("В этой форме вы можете проверить данные, которые вам отправил поставщик.");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
                 
	Если ТаблицаОшибок.Количество() = 0 Тогда
		ЗакрытьПанельОшибок();
	Иначе
		ОткрытьПанельОшибок();
	КонецЕсли;
	
	//заполним список версий, если он есть
	НарисоватьКнопкиВерсийЗаказов();
	
КонецПроцедуры

Процедура НарисоватьКнопкиВерсийЗаказов()
	
	//1. Получить все похожие сообщения - ИЗ МОДУЛЯ ИНТЕГРАЦИИ. 
	//По партнеру, номеру заказа, дате (+- месяц, например)
	//формат: таблица - ссылка, дата, номер (на всякий случай)
	//последнее сообщение должно быть актуальным
	//и пронумеровать их
	
	//2. Создать кнопки версий
	//каждая кнопка должна открывать нужное сообщение
	//причем остальные кнопки должны быть доступны только в актуальном сообщении! Т.е. создавать документы можно только из актуального
	//и если документы уже были созданы в каком-то старом сообщении, то их надо переподцепить к новому
	//тоже через МОДУЛЬ ИНТЕГРАЦИИ
	
	Если Сообщение.Направление = "Входящее"
		И Сообщение.ТипСообщения = "ORDERS"	Тогда
		//условие на тип сообщения - ?
		Дубли=ПолучитьДублирующиеСообщения(Сообщение.СообщениеСсылка);
		Если Дубли<>Неопределено 
			И Дубли.Количество()>1 
		Тогда
		
		    ЕстьДокумент1С = Ложь;
			Для Каждого Стр Из Дубли Цикл
				Если ЗначениеЗаполнено(Стр.Документ1С) Тогда
					ЕстьДокумент1С = Истина;
				КонецЕсли;	
			КонецЦикла;	
		
			ГлавнаяКнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("СоздатьЗаказ");
			
			Если ГлавнаяКнопка <> Неопределено Тогда
				//Если ЗначениеЗаполнено(Документ1С) Тогда//документ привязан к текущему сообщению
					//надо главную кнопку переименовать в "Перезаполнить заказ" и обработать ее соответственно
				//	ГлавнаяКнопка.Текст = "Перезаполнить заказ";
				//ИначеЕсли ЕстьДокумент1С Тогда //документ уже создан, но привязан к какой-то другой версии заказа
					ГлавнаяКнопка.Текст = "Выбрать текущую версию";
				//КонецЕсли;	
			КонецЕсли;
			
			КнопкаСписокВерсий=ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("СписокВерсий");
			//удалим прежние кнопки
			Если КнопкаСписокВерсий<>Неопределено Тогда
				СписокКнопокНаУдаление=Новый Массив;
				Для Каждого Эл Из КнопкаСписокВерсий.Кнопки Цикл
					СписокКнопокНаУдаление.Добавить(Эл);
				КонецЦикла;	
				Для Каждого КнопкаНаУдаление Из СписокКнопокНаУдаление Цикл
					КнопкаСписокВерсий.Кнопки.Удалить(КнопкаНаУдаление);
				КонецЦикла;
				ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(КнопкаСписокВерсий);
			КонецЕсли;	
			
			ДействиеКнопки=Новый Действие("КнопкаКоманднаяПанельВерсииНажатие");
		    КнопкаСписокВерсий	= ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Вставить(0,	"СписокВерсий"					, 	ТипКнопкиКоманднойПанели.Подменю);
			
			Для Каждого Стр Из Дубли Цикл
				//добавить кнопку
				ГУИДСообщения=СтрЗаменить(Стр.УникальныйИдентификатор,"-","_");
				_ИмяКнопки = "Версия "+Стр.Номерстроки+" ("+Стр.ДатаДокумента+")"+?(Лев(Стр.ТипСообщения,1)="#"," (архив)","");
				Нов=КнопкаСписокВерсий.Кнопки.Добавить("Версия_"+ГУИДСообщения,	ТипКнопкиКоманднойПанели.Действие,	_ИмяКнопки, ДействиеКнопки);
				Если Стр.Ссылка=Сообщение.СообщениеСсылка Тогда
					Нов.Картинка=БиблиотекаКартинок.СформироватьОтчет;
					Нов.Отображение=ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				КонецЕсли;	
			КонецЦикла;
			
			//Добавим кнопку показать расхождения в версиях
			ДействиеКнопки=Новый Действие("КнопкаКоманднаяПанельВерсииНажатие");
			Нов=КнопкаСписокВерсий.Кнопки.Добавить("СравнитьВерсии",	ТипКнопкиКоманднойПанели.Действие,	"Сравнить версии", ДействиеКнопки);
			Если Стр.Ссылка=Сообщение.СообщениеСсылка Тогда
				Нов.Картинка=БиблиотекаКартинок.Отчет;
				Нов.Отображение=ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПроизвестиПервоначальноеЗаполнениеПолейНаФорме();

	ПриОткрытииФормы(ЭтаФорма);

	// Автотестирование
	
	Если ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		
		ПодключитьОбработчикОжидания("ЗапуститьАвтотесты",0.1,Истина);
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ЗапуститьАвтотесты()
	
	Для Каждого Действие ИЗ ПараметрыАвтотестирования.ВыполняемыеДействия Цикл
		
		Если Действие.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(Действие.ФормаОбработки) = "ФормаСообщения" Тогда
			
			Выполнить(Действие.ВыполняемыйКод);
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиПанельИнформации(Текст,Вид = Неопределено)
	
	// Возможные виды:
	//	- Хорошо
	//	- Плохо
	//	- Нейтрально
	
	Если Вид = "Хорошо" Тогда
		
		ЭлементыФормы.ПанельИнформации.ЦветФона		= WebЦвета.Роса;
		ЭлементыФормы.ПанельИнформации.ЦветРамки	= WebЦвета.ЗеленыйЛес;
		
		ЭлементыФормы.ИконкаПанелиИнформации.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаГалочка");
		
	ИначеЕсли Вид = "Плохо" Тогда
		
		ЭлементыФормы.ПанельИнформации.ЦветФона		= WebЦвета.ТусклоРозовый;
		ЭлементыФормы.ПанельИнформации.ЦветРамки	= WebЦвета.Шоколадный;
		
		ЭлементыФормы.ИконкаПанелиИнформации.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаИсправитьОшибки");
		
	Иначе	
		
		ЭлементыФормы.ПанельИнформации.ЦветФона		= WebЦвета.СлоноваяКость;
		ЭлементыФормы.ПанельИнформации.ЦветРамки	= WebЦвета.РыжеватоКоричневый;
		
		ЭлементыФормы.ИконкаПанелиИнформации.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаИнформация");
		
	КонецЕсли;
		
	ЭлементыФормы.НадписьИнформация.Заголовок = СокрЛП(Текст);
				 
КонецПроцедуры

Процедура ОткрытьФормуКонтрагента(ИмяПоля)
	
	КопияСообщения = ПолучитьКопиюСообщения(Сообщение);
	КопияСообщения[ИмяПоля+"1С"] = ЭтаФорма[ИмяПоля+"1С"];
	
	Форма = ПолучитьФорму("ФормаКонтрагента");
	Форма.Сообщение			= КопияСообщения;
	Форма.ИмяПоляСообщения 	= ИмяПоля;
	
	Если Форма.ОткрытьМодально() = Истина Тогда
		
		ЭтаФорма[ИмяПоля+"1С"] = Форма.ЮрФизЛицо1С;
		
		Если Сообщение.Направление = "Исходящее" Тогда
			
			Сообщение[ИмяПоля+"EDI"] = Форма.ЮрФизЛицо;
			
		Иначе
			Сообщение[ИмяПоля+"1С"] = Форма.ЮрФизЛицо1С;
		КонецЕсли;
		
		ПроверитьЗаполнениеПолей();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоставщикEDIОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуКонтрагента("Продавец");
	
КонецПроцедуры

Процедура ПокупательEDIОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуКонтрагента("Покупатель");

КонецПроцедуры

Процедура ГрузоотправительEDIОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуКонтрагента("Грузоотправитель");
	
КонецПроцедуры

Процедура ГрузополучательEDIОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуКонтрагента("Грузополучатель");
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Сообщение = Неопределено Тогда
		ВывестиПредупреждение_КонтурEDI("В форму не передано сообщение!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчики

//Акцепторы существуют для того чтобы передать управление далее в подключаемый модуль
Процедура АкцепторСобытий3Параметра(Элемент=Неопределено,Параметр2=Неопределено,Параметр3=Неопределено)
	
	СтандартнаяОбработкаEDI = Истина;                                                                                                                                
    ОбработкаСобытияПодключаемогоМодуля("КнопкаФормыСообщенияНажатие",СтандартнаяОбработкаEDI,Новый Структура("ИмяКнопки,Сообщение,Параметры,Форма,Элемент,Параметр2,Параметр3",Элемент.Имя,Сообщение,Параметры,ЭтаФорма,Элемент,Параметр2,Параметр3));
	

КонецПроцедуры
Процедура АкцепторСобытий2Параметра(Элемент=Неопределено,Параметр2=Неопределено)
	
	СтандартнаяОбработкаEDI = Истина;                                                                                                                                
    ОбработкаСобытияПодключаемогоМодуля("КнопкаФормыСообщенияНажатие",СтандартнаяОбработкаEDI,Новый Структура("ИмяКнопки,Сообщение,Параметры,Форма,Элемент,Параметр2",Элемент.Имя,Сообщение,Параметры,ЭтаФорма,Элемент,Параметр2));
	
КонецПроцедуры
Процедура АкцепторСобытий1Параметр(Элемент=Неопределено)
	
	СтандартнаяОбработкаEDI = Истина;                                                                                                                                
    ОбработкаСобытияПодключаемогоМодуля("КнопкаФормыСообщенияНажатие",СтандартнаяОбработкаEDI,Новый Структура("ИмяКнопки,Сообщение,Параметры,Форма,Элемент",Элемент.Имя,Сообщение,Параметры,ЭтаФорма,Элемент));
	
КонецПроцедуры


Процедура КнопкаДополнительныеДействияФормыНажатие(Элемент)
	
	Если Элемент.Имя = "ОтвязатьДокумент" Тогда
		
		Если НЕ ЭтоПоследнееСообщениеВЦепочке(Сообщение.СообщениеСсылка,Сообщение.ДокументСсылка) Тогда
			ВывестиПредупреждение_КонтурEDI("Можно отвязывать только последнее сообщение в цепочке!");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
			Если Вопрос("Сообщение будет отвязано от документа "+СокрЛП(Сообщение.Документ1С)+". Продолжить?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет,"EDI.Контур") = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
		ОтвязатьСообщениеОтДокумента(Сообщение,Сообщение.ДокументСсылка);
		
		ТолькоПросмотрСообщения = Ложь;
		
		Сообщение.ДокументСсылка	= Неопределено;
		Сообщение.Документ1С		= Неопределено;
		
		Если Сообщение.ТипСообщения = "RECADV" Тогда
			Сообщение.Накладная1С = Неопределено;
		КонецЕсли;
		
		ПроизвестиПервоначальноеЗаполнениеПолейНаФорме();
		
	ИначеЕсли Элемент.Имя = "ПривязатьСообщение" Тогда
		
		// проверка, что документ не занят
			
		СтрокаМетаданных = МетаданныеСообщения.Найти("Документ","ИмяПоля");
		Если НЕ СтрокаМетаданных = Неопределено Тогда
			Тип1С = СтрокаМетаданных.Тип1С;
			СсылкаДокумента = ПолучитьПустуюСсылкуОбъекта(Тип1С);
			
			//выбираем документ с отбором
			Отбор = Новый Структура("Организация,Контрагент", Сообщение.Продавец1С, Сообщение.Покупатель1С);
			СсылкаДокумента = ВыбратьДокументСОтбором(СсылкаДокумента, Отбор);
				
			Если ЗначениеЗаполнено(СсылкаДокумента) Тогда
				Если НЕ НайтиСообщениеДокумента(СсылкаДокумента,Сообщение.ТипСообщения) = Неопределено Тогда
					ВывестиПредупреждение_КонтурEDI("К данному документу уже привязано другое сообщение "+Сообщение.ТипСообщения);
					Возврат;
				КонецЕсли;
				
				СвязатьСообщениеСДокументом(Сообщение,СсылкаДокумента);
				
				ТолькоПросмотрСообщения = Истина;
				
				Сообщение.ДокументСсылка	= СсылкаДокумента;
				Сообщение.Документ1С		= СсылкаДокумента;
				
				ПроизвестиПервоначальноеЗаполнениеПолейНаФорме();
				
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли Элемент.Имя = "ПерезаполнитьДокумент" Тогда
		
		ПерезаполнитьДокумент1С();
		
	ИначеЕсли Элемент.Имя = "УдалитьСообщение" Тогда
		
		Если НЕ ЭтоПоследнееСообщениеВЦепочке(Сообщение.СообщениеСсылка,Сообщение.ДокументСсылка) Тогда
			ВывестиПредупреждение_КонтурEDI("Можно удалять только последнее сообщение в цепочке!");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
			
			ВерныйПароль = Ложь;
			ТекПароль = "";
			Если ВвестиСтроку(ТекПароль,"Введите пароль") Тогда
				Если СокрЛП(ТекПароль) = СокрЛП(ПараметрыПользователяEDI.Пароль) ИЛИ СокрЛП(ТекПароль) = "******" Тогда
					ВерныйПароль = Истина;
				КонецЕсли;
			Иначе
				Возврат;	
			КонецЕсли;
			
			Если НЕ ВерныйПароль Тогда
				ВывестиПредупреждение_КонтурEDI("Указан неверный пароль!");
				Возврат;
			КонецЕсли;
			
			Если Вопрос("Текущее сообщение будет навсегда удалено из 1С. Продолжить?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет,"EDI.Контур") = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сообщение.ДокументСсылка) Тогда
			Сообщение.ДокументСсылка = Сообщение.Документ1С;
		КонецЕсли;
		
		УдалитьСообщение(Сообщение);
		
		//Оповестить("КонтурEDI_УдаленоСообщение");
		
		ЭтаФорма.Закрыть();
		
	ИначеЕсли Элемент.Имя = "ОткрытьФайл" Тогда
		
		РезультатКонвертации = КонвертироватьИсходящееСообщениеПоНовому(Сообщение);
		ЗапуститьПриложение(РезультатКонвертации.ПутьКФайлу);
		
	ИначеЕсли Элемент.Имя = "НайтиСвязанныеСообщения" Тогда
		
		ФормаСвязанныхСообщений = ПолучитьФорму("ФормаСервис_СвязанныеСообщения");
		ФормаСвязанныхСообщений.ДокументСсылка = Сообщение.Документ1С;
		ФормаСвязанныхСообщений.СообщениеСсылка = Сообщение.СообщениеСсылка;
		ФормаСвязанныхСообщений.ОткрытьМодально();
		
	ИначеЕсли Элемент.Имя = "ПрекратитьОбработкуЗаказа" Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
			Если Вопрос("Обработка заказа будет прекращена. Продолжить?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПрекратитьОбработкуЗаказа(Сообщение.СообщениеСсылка);
		ЭтаФорма.Закрыть();
		
	ИначеЕсли Элемент.Имя = "ОтклонитьЗаказПолностью" Тогда
		
		Если Сообщение.ТипСообщения = "ORDERS" Тогда
			ВходящийЗаказСсылка = Сообщение.СообщениеСсылка;
		ИначеЕсли Сообщение.ТипСообщения = "ORDRSP" Тогда
			ВходящийЗаказСсылка = НайтиСообщениеДокумента(Сообщение.Документ1С, "ORDERS", "Входящее");
		КонецЕсли;
		
		Параметры = Новый Структура();
		Параметры.Вставить("Статус", "Отклонить");
		Параметры.Вставить("ВходящийЗаказ", ВходящийЗаказСсылка);
		
		СообщениеORDRSP = ПодготовитьИсходящееСообщение("ORDRSP", Сообщение.Документ1С, Параметры);
		
		ПереотправляемоеСообщениеСсылка = НайтиСообщениеДокумента(Сообщение.Документ1С, "ORDRSP", "Исходящее");
		Если ПереотправляемоеСообщениеСсылка <> Неопределено Тогда
			СообщениеORDRSP.Вставить("ПереотправляемоеСообщениеСсылка",	ПереотправляемоеСообщениеСсылка);
		КонецЕсли;
		
		ФормаСообщения = ПолучитьФорму("ФормаСообщения", ЭтаФорма);
		ФормаСообщения.Сообщение = СообщениеORDRSP;
		ФормаСообщения.Параметры = Параметры;
		ФормаСообщения.ОткрытьМодально();
		
		ЭтаФорма.Закрыть();
	
	ИначеЕсли Элемент.Имя = "ПрекратитьОбработкуСообщения" Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
			Если Вопрос("Сообщение будет помечено как успешно доставленное. Продолжить?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСтатусСообщения(Сообщение.ПереотправляемоеСообщениеСсылка, , , "ИсходящийДоставлен"); // условие на наличие этого свойства есть в процедуре СоздатьКнопки()
		ЭтаФорма.Закрыть();
		
	ИначеЕсли Элемент.Имя = "ПереотправитьСообщение" Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("Действие", 			"Переотправка");
		Параметры.Вставить("ИсходноеСообщение", Сообщение);
		
		НовоеСообщение = ПодготовитьИсходящееСообщение(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
		НовоеСообщение.Вставить("ПереотправляемоеСообщениеСсылка",Сообщение.СообщениеСсылка);
		
		ФормаСообщения = ПолучитьФорму("ФормаСообщения",,Новый УникальныйИдентификатор());
		ФормаСообщения.Сообщение = НовоеСообщение;
		ФормаСообщения.ОткрытьМодально();
		
		ЭтаФорма.Закрыть();

	ИначеЕсли Элемент.Имя = "ПереотправитьALCRPT" Тогда
		
		Накладная = Неопределено;
		
		Если Сообщение.ТипСообщения = "DESADV" Тогда
			Накладная = Сообщение.Документ1С;
		ИначеЕсли Сообщение.ТипСообщения = "INVOIC" Тогда
			Накладная = ПолучитьНакладнуюСчетаФактуры(Сообщение.Документ1С);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Накладная) Тогда
			УстановитьЗначениеСвойстваОбъекта(Накладная, "НужноОтправитьALCRPT",	Истина);
			ВывестиПредупреждение_КонтурEDI("Теперь выполните обмен");
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаДействияФормыНажатие(Элемент)
	
	СвойстваКнопки = НастройкаФормы.КнопкиКоманднойПанели.Найти(Элемент.Имя,"Имя");
	
	Если НЕ СвойстваКнопки = Неопределено Тогда
		
		Если СвойстваКнопки.ПроверятьПоля Тогда
			Если НЕ ПроверитьЗаполнениеПолей() Тогда
				
				ОткрытьПанельОшибок();
				
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваКнопки.СохранятьСоответствия Тогда
			
			ПеренестиПоля1СвСообщение(Сообщение);
			//УстановитьСоответствияПолейEDIи1С(Сообщение);
			
		КонецЕсли;
		
		Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
			Параметры = Новый Структура();
		КонецЕсли;
		
		Если Сообщение.ТипСообщения = "ORDRSP" Тогда
			
			сч = 0;
			
			Для каждого Стр Из Товары Цикл
				
				СтрокаСообщения = Сообщение.Товары.Получить(сч);
				СтрокаСообщения.Комментарий = Стр.Комментарий;
				
				сч=сч+1;
				
			КонецЦикла;
				
		КонецЕсли;
		
		Параметры.Вставить("ОтправитьСообщениеИзФормы",	Истина);
		Параметры.Вставить("Сообщение",					Сообщение);
		Параметры.Вставить("Объект",					ЭтотОбъект);
		Параметры.Вставить("ОтправкаТолькоALCRPT",		ОтправкаТолькоALCRPT);
		Параметры.Вставить("ИзмененныеРеквизиты",		ПодготовитьСтруктуруИзмененныхРеквизитов());
		
		Если Элемент.Имя="СоздатьЗаказ" 
			И Элемент.Текст = "Перезаполнить заказ" Тогда//название было подменено, значит, у нас пришла новая версия заказа, и ее надо перезаполнить
			
			Если ПерезаполнитьДокумент1С() Тогда
				
				ЭтаФорма.Закрыть();
				Оповестить("КонтурEDI_ОбновитьЖурналСообщений");
				Возврат;
			КонецЕсли;	//ПерезаполнитьДокумент1С
			
		ИначеЕсли ОтправлятьДанныеОбУпаковках Тогда
			
			Параметры.Вставить("ДанныеФормыТранспортныеУпаковки", ЭлементыФормы.ТранспортныеУпаковки.Значение);	//для сравнения данных сообщения и формы
			Если Элемент.Имя = "Сохранить" или                                          	
				 Элемент.Имя = "ОтправитьУведомлениеОбОтгрузке" Тогда
				ПронумероватьУпаковкиСквознымПорядковымНомером(); 												//нумеруем паллеты с номера 2 (т.к. есть родительская по формату)
				ПромаркироватьУпаковкиSSCCКодом(); 																//присваиваем SSCC-коды
				ПроименоватьУпаковки();																			//присваиваем имена паллетам (с SSCC-кодом) 
				УстановитьНомерПоследнейУпаковки();																//сохраняем последний SSCC-код 				   				
				Сообщение.ТранспортныеУпаковки = ТранспортныеУпаковки.Скопировать(); 							//сохраняем упаковки с структуру  				
			КонецЕсли;																//SSCC-кода юр.лица и фиксируем код заключительной упаковки сообщения, как последний
			
		ИначеЕсли Элемент.Имя="СоздатьЗаказ" 
			И Элемент.Текст = "Выбрать текущую версию" Тогда//название было подменено, значит, у нас пришла новая версия заказа, и ее надо перезаполнить
			
			ПеренестиПоля1СвСообщение(Сообщение);
			//УстановитьСоответствияПолейEDIи1С(Сообщение);
			//теперь надо сохранить сообщение в базу
			СохранитьСообщение(Сообщение);
			
			
			//тут сначала надо сохранить сообщение
			ПерепривязатьСообщенияИнтерактивно();
			
			//теперь перезаполним заказ без вопросов
			//нет, нам надо именно здесь выбрать: либо перезаполняем заказ, либо оставляем как есть.
			
			СЗ = Новый СписокЗначений;
			СЗ.Добавить("Перезаполнить заказ");
			СЗ.Добавить("Игнорировать новую версию");
			
			Если ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
				_Ответ = СЗ[0];
			Иначе
				_Ответ = СЗ.ВыбратьЭлемент("Укажите действие с выбранной версией");
			КонецЕсли;	
				
			Если _Ответ = Неопределено Тогда
				//оставляем сообщение в статусе "НоваяВерсия"
				Возврат;
			ИначеЕсли _Ответ.Значение="Перезаполнить заказ" Тогда
				//в этот момент документ/документы уже должны быть привязаны к текущему сообщению, открытому в окне
				Элемент.Текст = "Перезаполнить заказ";
				КнопкаДействияФормыНажатие(Элемент);
			ИначеЕсли _Ответ.Значение = "Игнорировать новую версию" Тогда
				ВиртуальныеORDERS = ПолучитьВиртуальныеСвязанныеORDERS(Сообщение.ДокументСсылка);
				Для Каждого Стр Из ВиртуальныеORDERS Цикл
					УстановитьСтатусСообщения(Стр.ORDERS,Стр.Документ,"ORDERS","ВходящийЗагружен");
				КонецЦикла;	
				Закрыть();
			КонецЕсли;				
			
			Оповестить("КонтурEDI_ОбновитьЖурналСообщений");
			Возврат;
		КонецЕсли;	//СоздатьЗаказ
		
		//расх
		СтандартнаяОбработкаEDI = Истина;
	    РезультатДействия = ОбработкаСобытияПодключаемогоМодуля("КнопкаФормыСообщенияНажатие",СтандартнаяОбработкаEDI,Новый Структура("ИмяКнопки,Сообщение,Параметры,Форма",Элемент.Имя,Сообщение,Параметры,ЭтаФорма));
	    Если СтандартнаяОбработкаEDI Тогда
			РезультатДействия = Новый Структура();
			РезультатДействия.Вставить("СозданДокумент",Ложь);
			РезультатДействия.Вставить("ЗакрытьФорму",Ложь);
		    Если Элемент.Имя = "ПоказатьРасхожденияЗаказаПокупателя" Тогда
				Параметры = Новый Структура;
				Параметры.Вставить("ВидРасхождения", 	"РасхожденияЗаказа");
				Параметры.Вставить("Заказ",				Сообщение.Документ1С);
				Параметры.Вставить("Параметры",			Параметры);
				ФормаПросмотра = ПолучитьФорму("ФормаСервис_ПросмотрРасхождений");
				ФормаПросмотра.Параметры = Параметры;
				ФормаПросмотра.Открыть();						
			Иначе
				РезультатДействия = КнопкаФормыСообщенияНажатие(Элемент.Имя,Сообщение,Параметры);
			КонецЕсли;
	    КонецЕсли;
		
		Если РезультатДействия.СозданДокумент Тогда
			Документ1С = РезультатДействия.СсылкаНаДокумент;
		КонецЕсли;
		
		Если РезультатДействия.Свойство("СообщениеСохранено") И РезультатДействия.СообщениеСохранено Тогда
			ОтразитьСобытияВЖурналеРегистрации();
			ВывестиПредупреждение_КонтурEDI("Сообщение успешно сохранено.");
		КонецЕсли;
		
		Если РезультатДействия.ЗакрытьФорму Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
		
	КонецЕсли;                 
	
КонецПроцедуры

// Обработчики формы

Процедура ТоварыХарактеристикаНоменклатурыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
    ДействиеФормыНачалоВыбора("ФормаИсходящегоДокумента",ЭлементыФормы,Элемент,"ХарактеристикаНоменклатуры",СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
    ДействиеФормыНачалоВыбора("ФормаИсходящегоДокумента",ЭлементыФормы,Элемент,"ЕдиницаИзмерения",СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТаблицаОшибокПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаОшибок.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		СделатьАктивнымПоле(ТекущаяСтрока.ИмяПоля,ТекущаяСтрока.ИмяТабличнойЧасти,ТекущаяСтрока.НомерСтроки);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ЦветХорошо = Новый Цвет(220,250,220);
	ЦветПлохо  = WebЦвета.ТусклоРозовый;
		
	Если ТаблицаОшибок.Количество()>0 Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ИмяТабличнойЧасти","Товары");
		
		НайденныеСтроки = НастройкаФормы.ОбязательныеПоля.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Стр ИЗ НайденныеСтроки Цикл
			
			Если ЗначениеЗаполнено(ДанныеСтроки[Стр.ИмяПоля]) Тогда
				
				ОформлениеСтроки.Ячейки[Стр.ИмяПоля].ЦветФона = ЦветХорошо;
				
			Иначе
				
				ОформлениеСтроки.Ячейки[Стр.ИмяПоля].ЦветФона = ЦветПлохо;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ORDERS" И Сообщение.Направление = "Входящее" Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
			
			Если НЕ (Сообщение.Свойство("ОбратныйЗаказEDI") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказEDI.Номер)) Тогда
				Если ДанныеСтроки.НеЗагружать Тогда
					
					ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,,,,,Истина);
					
					ОформлениеСтроки.Ячейки.НеЗагружать.УстановитьТекст("Загружать");
					ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр = Истина;
					ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр = Истина;
					ОформлениеСтроки.Ячейки.Номенклатура.УстановитьТекст("Товар не будет добавлен в заказ!");
					ОформлениеСтроки.Ячейки.Номенклатура.ЦветФона = ЦветПлохо;
					
					ОформлениеСтроки.Ячейки.НеЗагружать.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,,,,,Ложь);
					
				Иначе
					ОформлениеСтроки.Ячейки.НеЗагружать.УстановитьТекст("Не загружать");
				КонецЕсли;	
			КонецЕсли;
		
		Иначе
			ОформлениеСтроки.Ячейки.НеЗагружать.УстановитьТекст("");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ORDRSP" И Сообщение.Направление = "Исходящее" Тогда
		Если ДанныеСтроки.Статус = "Уточнен" Тогда
			ОформлениеСтроки.Ячейки.Статус.ЦветФона = WebЦвета.Лимонный;
		ИначеЕсли ДанныеСтроки.Статус = "Отклонен" Тогда
			ОформлениеСтроки.Ячейки.Статус.ЦветФона = ЦветПлохо;
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.Направление = "Исходящее" Тогда
			
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
			ОформлениеСтроки.Ячейки.Номенклатура.УстановитьТекст(ДанныеСтроки.Наименование);
		КонецЕсли;
			
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "COINVOIC" Тогда
		
		СтруктураКолонок = Новый Структура("Количество,ЦенаБезНДС,ЦенаСНДС,СуммаНДС,СуммаБезНДС,СуммаСНДС");
		Для Каждого Эл ИЗ СтруктураКолонок Цикл
			Если НЕ ДанныеСтроки[Эл.Ключ+"До"]=ДанныеСтроки[Эл.Ключ+"После"] Тогда
				ОформлениеСтроки.Ячейки[Эл.Ключ+"После"].ЦветФона = WebЦвета.Лимонный;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	//заполним код, артикул, наименование номенклатуры
	ТипНоменклатура = ПолучитьТипЗначенияОбъекта("Номенклатура",,Истина);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	спр.Ссылка как Ссылка,
	|	спр.Код как Код,
	|	спр.НаименованиеПолное как НаименованиеПолное,
	|	спр.Артикул КАК Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК спр
	|ГДЕ
	|	спр.Ссылка В(&МассивТоваров)"
	);
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Справочник.Номенклатура","Справочник."+ТипНоменклатура);
	
	Если Метаданные.Справочники[ТипНоменклатура].Реквизиты.Найти("Артикул")=Неопределено Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"спр.Артикул","""""");
	КонецЕсли;
	
	Если Метаданные.Справочники[ТипНоменклатура].Реквизиты.Найти("НаименованиеПолное")=Неопределено Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"спр.НаименованиеПолное","спр.Наименование");
	КонецЕсли;
	
	МассивТоваров = Новый Массив;
	Для каждого Стр Из ОформленияСтрок Цикл
		Если ЗначениеЗаполнено(Стр.ДанныеСтроки.Номенклатура) Тогда
			МассивТоваров.Добавить(Стр.ДанныеСтроки.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивТоваров",МассивТоваров);
	ТабЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		СтрокаЗапроса = ТабЗапроса.Найти(ОформлениеСтроки.ДанныеСтроки.Номенклатура);
		Если СтрокаЗапроса<>Неопределено Тогда
			ОформлениеСтроки.Ячейки.Артикул.УстановитьТекст(СтрокаЗапроса.Артикул);
			ОформлениеСтроки.Ячейки.НоменклатураКод.УстановитьТекст(СтрокаЗапроса.Код);
			ОформлениеСтроки.Ячейки.НаименованиеНоменклатурыПолное.УстановитьТекст(СтрокаЗапроса.НаименованиеПолное);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура Грузополучатель1СНачалоВыбора(Элемент, СтандартнаяОбработка)

	СвойстваПоля = ПолучитьСвойстваПоля("Грузополучатель",МетаданныеСообщения);
	
	Если Сообщение.Направление = "Входящее" Тогда
		
		ВыбратьЭлементСправочника(Грузополучатель1С,СвойстваПоля.Тип1С,Отправитель1С,СтандартнаяОбработка);
	
	ИначеЕсли Сообщение.Направление = "Исходящее" Тогда
	
		ВыбратьЭлементСправочника(Грузополучатель1С,СвойстваПоля.Тип1С,Получатель1С,СтандартнаяОбработка);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура Отправитель1СНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Сообщение.Направление = "Входящее" Тогда
		
		ВыбратьЭлементСправочника(Отправитель1С,"Партнер",,СтандартнаяОбработка);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура Грузополучатель1СОткрытие(Элемент, СтандартнаяОбработка)
	
	СвойстваПоля = ПолучитьСвойстваПоля("Грузополучатель",МетаданныеСообщения);
	
	ОткрытьФормуЭлементаСправочника(СвойстваПоля.Тип1С,Грузополучатель1С,СтандартнаяОбработка);
	
	ЭтаФорма.Обновить();
	
КонецПроцедуры

Процедура Отправитель1СОткрытие(Элемент, СтандартнаяОбработка)
	
	СвойстваПоля = ПолучитьСвойстваПоля("Отправитель",МетаданныеСообщения);
	
	ОткрытьФормуЭлементаСправочника(СвойстваПоля.Тип1С,Отправитель1С,СтандартнаяОбработка);
	
	ЭтаФорма.Обновить();
	
КонецПроцедуры

Процедура Покупатель1СПриИзменении(Элемент)
	
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура Продавец1СПриИзменении(Элемент)
	
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура Грузоотправитель1СПриИзменении(Элемент)
	
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура Грузополучатель1СПриИзменении(Элемент)
	
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура ДоговорПриИзменении(Элемент)
	
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура Валюта1СПриИзменении(Элемент)
	
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура Отправитель1СПриИзменении(Элемент)
		
	ПроверитьЗаполнениеПолей();
	//+ВХ
	Отправитель1СПредставление = ПолучитьПредставлениеЭлементаСправочника(Отправитель1С);
	//-ВХ

КонецПроцедуры

Процедура Получатель1СПриИзменении(Элемент)
		
	ПроверитьЗаполнениеПолей();
	//+ВХ
	Получатель1СПредставление = ПолучитьПредставлениеЭлементаСправочника(Получатель1С);
	//-ВХ

КонецПроцедуры

Процедура Заказ1СПриИзменении(Элемент)
		
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура Заказ1СНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//ограничиваем форму выбора по Организации и Контрагенту
	Если СтандартнаяОбработка Тогда
		Отбор = Новый Структура("Организация,Контрагент", Сообщение.Продавец1С, Сообщение.Покупатель1С);
		СтандартнаяОбработка = Ложь;
		Заказ1С = ВыбратьДокументСОтбором(Элемент.Значение, Отбор);		
		Заказ1СПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура Накладная1СПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Накладная1С) Тогда
		
		РезультатПроверкиНакладной = ПриПопыткеИзмененияНакладнойВСообщении(Сообщение,Накладная1С);
		
		Если НЕ РезультатПроверкиНакладной.Успешно Тогда
			
			ВывестиПредупреждение_КонтурEDI(РезультатПроверкиНакладной.ТекстОшибки);
			Накладная1С = Неопределено;
			Сообщение.Накладная1С = Неопределено;

			УстановитьТипПоля1С("Накладная");
			
			Возврат;	
		КонецЕсли;
		
	КонецЕсли;
	
	Сообщение.Накладная1С = Накладная1С;
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура Накладная1СНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияПодключаемогоМодуля("НачалоВыбораПоляФормыСообщения",СтандартнаяОбработка,
			Новый Структура("Сообщение,ЭлементФормы",
			Сообщение,Элемент));
			
	//ограничиваем форму выбора по Организации и Контрагенту
	Если СтандартнаяОбработка Тогда
		Отбор = Новый Структура("Организация,Контрагент", Сообщение.Продавец1С, Сообщение.Покупатель1С);
		СтандартнаяОбработка = Ложь;
		Накладная1С = ВыбратьДокументСОтбором(Элемент.Значение, Отбор);		
		Накладная1СПриИзменении(Элемент);
	КонецЕсли;	
	
КонецПроцедуры

Процедура Приемка1СПриИзменении(Элемент)
		
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
	ТекСтрока.ЕдиницаИзмерения = ПолучитьПустуюСсылкуОбъекта("ЕдиницаИзмерения");
	
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
		
	ПроверитьЗаполнениеПолей();

КонецПроцедуры

Процедура ДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураВладельца = Новый Структура();
	СтруктураВладельца.Вставить("Покупатель",Покупатель1С);
	СтруктураВладельца.Вставить("Продавец",Продавец1С);
	
	ВыбратьЭлементСправочника(Договор,"Договор",СтруктураВладельца,СтандартнаяОбработка);
	
	Сообщение.Договор = Договор;
	
КонецПроцедуры

Процедура ПометкаНажатие(Элемент)
	
	ИмяПометки = Элемент.Имя;
	
	ИмяПоля = СтрЗаменить(ИмяПометки,"Пометка","");
	
	НайденнаяСтрока = ТаблицаОшибок.Найти(ИмяПоля,"ИмяПоля");
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		ЭлементыФормы.ТаблицаОшибок.ТекущаяСтрока = НайденнаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеЮрФизЛицоСвоеНажатие(Элемент)
	
	Если ЭтоОбратнаяОтгрузка(Сообщение.ТипСообщения) Тогда
		Если КтоМы = "Поставщик" Тогда
			ОткрытьФормуКонтрагента("Покупатель");
		Иначе
			ОткрытьФормуКонтрагента("Продавец");
		КонецЕсли;
	Иначе
		Если КтоМы = "Поставщик" Тогда
			ОткрытьФормуКонтрагента("Продавец");
		Иначе
			ОткрытьФормуКонтрагента("Покупатель");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействиеЮрФизЛицоСтороннееНажатие(Элемент)
	
	Если ЭтоОбратнаяОтгрузка(Сообщение.ТипСообщения) Тогда
		Если КтоМы = "Поставщик" Тогда
			ОткрытьФормуКонтрагента("Продавец");
		Иначе
			ОткрытьФормуКонтрагента("Покупатель");
		КонецЕсли;
	Иначе
		Если КтоМы = "Поставщик" Тогда
			ОткрытьФормуКонтрагента("Покупатель");
		Иначе
			ОткрытьФормуКонтрагента("Продавец");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ДействиеГрузополучательНажатие(Элемент)
	
	ОткрытьФормуКонтрагента("Грузополучатель");

КонецПроцедуры

Процедура ДействиеГрузоотправительНажатие(Элемент)
	
	ОткрытьФормуКонтрагента("Грузоотправитель");
	
КонецПроцедуры

Процедура ПерезаполнитьИсходящееСообщение()
	
	Параметры = Новый Структура("ИзмененныеРеквизиты", ПодготовитьСтруктуруИзмененныхРеквизитов());
	
	ПереотправляемоеСообщениеСсылка = Неопределено;
	Сообщение.Свойство("ПереотправляемоеСообщениеСсылка",ПереотправляемоеСообщениеСсылка);
	
	Сообщение = ПодготовитьИсходящееСообщение(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
	
	Если ПереотправляемоеСообщениеСсылка<>Неопределено Тогда
		Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",ПереотправляемоеСообщениеСсылка);
	КонецЕсли;
	
	ПолучитьПрикрепленныеСообщения();
	
	ЗаполнитьПоляНаФорме();

	НетОшибок = ПроверитьЗаполнениеПолей();
	
	Если НетОшибок И ТаблицаОшибок.Количество() = 0 Тогда
		
		ЗакрытьПанельОшибок();
		
		Если КтоМы = "Поставщик" Тогда
			ВывестиПанельИнформации("В этой форме вы можете проверить данные, которые будут отправлены в торговую сеть.");
		Иначе
			ВывестиПанельИнформации("В этой форме вы можете проверить данные, которые будут отправлены поставщику.");
		КонецЕсли;
		
	Иначе

		ОткрытьПанельОшибок();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаКоманднаяПанельВерсииНажатие(Элемент)
	
	Если Лев(Элемент.Имя,6)="Версия" Тогда
		//откроем карточку выбранной версии
		ГУИДСообщения=СтрЗаменить(Сред(Элемент.Имя,8),"_","-");
		//сюда мы сможем зайти только при использовании своих объектов
		
		Если ВнешнееХранилище Тогда
			_СообщениеСсылка=СоединениеСХранилищем.Справочники.КонтурEDI_Сообщения.ПолучитьСсылку(СоединениеСХранилищем.NewObject("УникальныйИдентификатор",ГУИДСообщения));
			_СообщениеСсылка = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(_СообщениеСсылка);
		Иначе
			_СообщениеСсылка=Справочники.КонтурEDI_Сообщения.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДСообщения));
		КонецЕсли;
		
		_Сообщение = ПрочитатьСообщение(_СообщениеСсылка,,Сообщение.ТипСообщения,"Входящее");
		
		Если ЗначениеЗаполнено(_Сообщение) Тогда
			
			КонвертироватьСообщениеEDIв1С(_Сообщение);
			
			_Сообщение.СообщениеСсылка = _СообщениеСсылка;
			Сообщение=_Сообщение;
			Если ВнешнееХранилище Тогда
				Если ЗначениеЗаполнено(_Сообщение.ДокументСсылка) Тогда
					Сообщение.Документ1С=_Сообщение.ДокументСсылка;
				Иначе
					Сообщение.Документ1С=Неопределено;
				КонецЕсли;
			Иначе
				Сообщение.Документ1С=_СообщениеСсылка.Документ;
			КонецЕсли;	
			
			ПриОткрытии();
			
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя="СравнитьВерсии" Тогда
		
		Если ВнешнееХранилище Тогда
			_СообщениеСсылка=СоединениеСХранилищем.Справочники.КонтурEDI_Сообщения.ПолучитьСсылку(СоединениеСХранилищем.NewObject("УникальныйИдентификатор",ГУИДСообщения));
			_СообщениеСсылка = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(_СообщениеСсылка);
		Иначе
			_СообщениеСсылка=Сообщение.СообщениеСсылка;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("ВидРасхождения", 	"РасхожденияВерсийЗаказа");
		Параметры.Вставить("Заказ",				_СообщениеСсылка);
		Параметры.Вставить("Параметры",			Неопределено);
		ФормаПросмотра = ПолучитьФорму("ФормаСервис_ПросмотрРасхождений",ЭтаФорма);
		ФормаПросмотра.Параметры = Параметры;
		ФормаПросмотра.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры	

// формат даты поставки

Функция ПолучитьДеньНедели_КонтурEDI(ДатаПоставки)
	
	НомерДняНедели = ДеньНедели(ДатаПоставки);
	
	Если НомерДняНедели = 1 Тогда
		Возврат "понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "суббота";
	ИначеЕсли НомерДняНедели = 7 Тогда
		Возврат "воскресенье";
	КонецЕсли;
	
	Возврат "";
		
КонецФункции

Функция ПолучитьТекстРазностиЧасовМинут(КоличествоСекунд)
	
	Часов = Цел(КоличествоСекунд/3600);
	Минут = Цел((КоличествоСекунд-Часов*3600)/60);
	
	Если Часов = 0 Тогда
		Если Минут = 0 Тогда
			Минут = 1;
		КонецЕсли;
		Возврат СокрЛП(Минут)+" мин.";
	Иначе
		Если Минут = 0 Тогда
			Возврат СокрЛП(Часов)+" час.";
		Иначе
			Возврат СокрЛП(Часов)+" час. "+СокрЛП(Минут)+" мин.";
		КонецЕсли;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстРазностиДней(КоличествоДней)
	
	Стр = ЧислоПрописью(КоличествоДней,"НД = Ложь","день,дня,дней,м");
	
	Если Найти(Стр,"день") Тогда
		Стр = "день";
	ИначеЕсли Найти(Стр,"дней") Тогда	
		Стр = "дней";
	ИначеЕсли Найти(Стр,"дня") Тогда
		Стр = "дня";
	Иначе
		Стр = "дней";
	КонецЕсли;
	
	Возврат СокрЛП(КоличествоДней)+" "+Стр;
	
КонецФункции

Функция ПолучитьПредставлениеДатыПоставки(ДатаПоставки)

	Если НЕ ЗначениеЗаполнено(ДатаПоставки) Тогда
		Возврат "не указана";
	КонецЕсли;
	
	Если ДатаПоставки = НачалоДня(ДатаПоставки) Тогда
		ТекстДаты = Формат(ДатаПоставки,"ДФ=dd.MM.yyyy")+" г.";
	Иначе
		ТекстДаты = Формат(ДатаПоставки,"ДФ=dd.MM.yyyy") + " г. в " + Формат(ДатаПоставки,"ДФ=HH:mm");
	КонецЕсли;
	
	ИмяДняНедели = ПолучитьДеньНедели_КонтурEDI(ДатаПоставки);
	
	ТекДата = ТекущаяДата();
	
	НачалоДатыПоставки	= НачалоДня(ДатаПоставки);
	НачалоТекущейДаты	= НачалоДня(ТекДата);
	
	ИмяРазности = "";
	
	Если НачалоДатыПоставки = НачалоТекущейДаты Тогда
		Если ДатаПоставки = НачалоДатыПоставки Тогда
			ИмяРазности = "сегодня";
		ИначеЕсли ДатаПоставки<ТекДата Тогда	
			ТекстРазности = ПолучитьТекстРазностиЧасовМинут(ТекДата-ДатаПоставки);
			ИмяРазности = "сегодня "+ТекстРазности + " назад";
		ИначеЕсли ДатаПоставки>ТекДата Тогда	
			ТекстРазности = ПолучитьТекстРазностиЧасовМинут(ДатаПоставки-ТекДата);
			ИмяРазности = "сегодня через "+ТекстРазности;
		Иначе
			ИмяРазности = "сейчас";
		КонецЕсли;
	ИначеЕсли НачалоДатыПоставки > НачалоТекущейДаты Тогда
		
		РазностьДат = Цел((НачалоДатыПоставки-НачалоТекущейДаты)/(3600*24));
		
		Если РазностьДат = 1 Тогда
			ИмяРазности = "завтра";
		ИначеЕсли РазностьДат = 2 Тогда
			ИмяРазности = "послезавтра";
		Иначе
			ИмяРазности = "через "+ПолучитьТекстРазностиДней(РазностьДат-1);
		КонецЕсли;                      
		
	Иначе
		
		РазностьДат = Цел((НачалоТекущейДаты-НачалоДатыПоставки)/(3600*24));
		
		Если РазностьДат = 1 Тогда
			ИмяРазности = "вчера";
		ИначеЕсли РазностьДат = 2 Тогда
			ИмяРазности = "позавчера";
		Иначе
			ИмяРазности = ПолучитьТекстРазностиДней(РазностьДат-1) + " назад";
		КонецЕсли;                      
		
	КонецЕсли;

	Возврат ТекстДаты+" ("+ИмяДняНедели+", "+ИмяРазности+")";
	
КонецФункции


Процедура ТаблицаОшибокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Действие" Тогда
		
		НайденнаяСтрока = НастройкаСсылокИсправленияОшибок.Найти(ВыбраннаяСтрока.ИмяПоля, "ИмяПоля");
		
		Если Не НайденнаяСтрока = Неопределено Тогда
			
			КопияСообщения = ПолучитьКопиюСообщения(Сообщение);
			
			ВыполнитьДействиеДляИсправлениеОшибкиСообщения(КопияСообщения,ВыбраннаяСтрока.ИмяПоля,НайденнаяСтрока.ТипСсылки,ВыбраннаяСтрока.НомерСтроки,ВыбраннаяСтрока.ТекстОшибки);
			
			Если Сообщение.Направление = "Исходящее" Тогда
				ПерезаполнитьИсходящееСообщение();
			Иначе
				Если ВыбраннаяСтрока.ИмяПоля = "Грузополучатель1С"
					Или ВыбраннаяСтрока.ИмяПоля = "Покупатель1С"
					Тогда
					
					Сообщение[ВыбраннаяСтрока.ИмяПоля] = КопияСообщения[ВыбраннаяСтрока.ИмяПоля];
					ЭтаФорма[ВыбраннаяСтрока.ИмяПоля] = Сообщение[ВыбраннаяСтрока.ИмяПоля];
					
					ПроверитьЗаполнениеПолей();
					
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьОткрытьДокументНажатие(Элемент)
	
	СсылкаСуществующегоСообщения=Сообщение.СообщениеСсылка; 
	//если мы провалимся в документ из карточки существующего сообщения то не следует пересобирать текущее сообщение при изменениях 
	//связанного с ним документа т.к. сообщение уже отправлено/готово к отправке
	//в любом случае важно не потерять Сообщение.СообщениеСсылка т.к. иначе если пользователь нажмет Переотправить - усё упадет
	Если Сообщение.Направление = "Исходящее" И НЕ ЗначениеЗаполнено(СсылкаСуществующегоСообщения) Тогда
		
		Документ1С.ПолучитьФорму().ОткрытьМодально();
		ПерезаполнитьИсходящееСообщение();
		
	Иначе                
		
		Документ1С.ПолучитьФорму().Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонтурEDI_Автотестирование" Тогда
		
		Если Параметр.ИмяФормы = "ФормаСообщения" Тогда
			Выполнить(Параметр.Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыКодТовараПокупателяПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		
		ТоварыСообщения = Сообщение.Товары;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура",	ТекСтрока.Номенклатура);
		
		НайденныеСтроки = Сообщение.Товары.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из НайденныеСтроки Цикл
			Стр.КодТовараПокупателя = ТекСтрока.КодТовараПокупателя;
		КонецЦикла;
		
		НайденныеСтроки = Товары.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из НайденныеСтроки Цикл
			Стр.КодТовараПокупателя = ТекСтрока.КодТовараПокупателя;
		КонецЦикла;
		
		ПроверитьЗаполнениеПолей();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Сообщение.Направление = "Входящее" Тогда
		Если Колонка.Имя = "Номенклатура" ИЛИ Колонка.Имя = "ЕдиницаИзмерения" ИЛИ Колонка.Имя = "ХарактеристикаНоменклатуры" Тогда
			
			СоответствиеТоваров = СоответствиеТоваров_НайтиНоменклатуру(ВыбраннаяСтрока.GTIN,ВыбраннаяСтрока.КодТовараПокупателя,Отправитель1С);

			СписокВыбора = Новый СписокЗначений;
			Для Каждого Стр Из СоответствиеТоваров Цикл
				
				СтруктураТовара = Новый Структура();
				
				СтруктураТовара.Вставить("Номенклатура",				Стр.Номенклатура);
				СтруктураТовара.Вставить("ХарактеристикаНоменклатуры",	Стр.ХарактеристикаНоменклатуры);
				СтруктураТовара.Вставить("ЕдиницаИзмерения",			Стр.ЕдиницаИзмерения);
				СтруктураТовара.Вставить("КоэффициентEDIВ1С",			Стр.КоэффициентEDIВ1С);
				
				Представление = СокрЛП(Стр.Номенклатура);
				Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
					Представление = Представление+", "+СокрЛП(Стр.ХарактеристикаНоменклатуры);
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
					Представление = Представление + ", " + СокрЛП(Стр.ЕдиницаИзмерения);
				КонецЕсли;
				
				СписокВыбора.Добавить(СтруктураТовара,Представление);
				
			КонецЦикла;
			
			СписокВыбора.Добавить("Настроить соответствие товаров",,,ПолучитьКартинкуEDI("ЭлементФормы","КартинкаПодписатьИОтправить"));
			
			ВыбранноеЗначение = ВыбратьИзМеню(СписокВыбора,Элемент);
			
			Если ВыбранноеЗначение = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если ВыбранноеЗначение.Значение = "Настроить соответствие товаров" Тогда
				
				ФормаНоменклатуры = ПолучитьФорму("ФормаНоменклатура_Элемент");
				
				ФормаНоменклатуры.Партнер			= Отправитель1С;
				ФормаНоменклатуры.GTIN				= ВыбраннаяСтрока.GTIN;
				ФормаНоменклатуры.Наименование		= ВыбраннаяСтрока.Наименование;
				
				Если Сообщение.ТипСообщения = "RETDES" Тогда
					ФормаНоменклатуры.КодТовараПартнера = ВыбраннаяСтрока.КодТовараПоставщика; //supplier code & buyer code поменяны местами EDI_An-354
				ИначеЕсли НастройкиМодуля.МыПоставщик Тогда // TODO слабое место, а если мы дистриб?
					ФормаНоменклатуры.КодТовараПартнера = ВыбраннаяСтрока.КодТовараПокупателя;
					ФормаНоменклатуры.КодТовараВнутренний = ВыбраннаяСтрока.КодТовараПоставщика;
				ИначеЕсли НастройкиМодуля.МыТорговаяСеть  Тогда
					ФормаНоменклатуры.КодТовараПартнера = ВыбраннаяСтрока.КодТовараПоставщика;
				КонецЕсли;	
				
				ФормаНоменклатуры.ОткрытьМодально();
				
				Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.Номенклатура) Тогда
					
					Если Сообщение.ТипСообщения = "RETDES" Тогда //supplier code & buyer code поменяны местами EDI_An-354
						СоответствиеТоваров = СоответствиеТоваров_НайтиНоменклатуру(ВыбраннаяСтрока.GTIN,ВыбраннаяСтрока.КодТовараПоставщика,Отправитель1С);
					Иначе
						СоответствиеТоваров = СоответствиеТоваров_НайтиНоменклатуру(ВыбраннаяСтрока.GTIN,ВыбраннаяСтрока.КодТовараПокупателя,Отправитель1С);
					КонецЕсли;
					
					Для каждого Стр Из СоответствиеТоваров Цикл
						Если Стр.Основной Тогда
							
							ЗаполнитьЗначенияСвойств(ВыбраннаяСтрока,Стр,"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КоэффициентEDIВ1С");
							ПроверитьЗаполнениеПолей();

							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
					
			Иначе // выбрали конкретный товар из списка
				
				ЗаполнитьЗначенияСвойств(ВыбраннаяСтрока,ВыбранноеЗначение.Значение,"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КоэффициентEDIВ1С");
				ПроверитьЗаполнениеПолей();

			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			//перезаполнить товарную группу
			ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьТоварнуюГруппуТаблицыТоваров",,Новый Структура("Сообщение,Товары",Сообщение,Товары));
			
		КонецЕсли;
	КонецЕсли;
	
	Если Колонка.Имя = "НеЗагружать" Тогда
		
		//на будущее - стоит прятать эту колонку от пользователя, если все соответствия найдены
		Если Не ЗначениеЗаполнено(ВыбраннаяСтрока.Номенклатура) Тогда
			ВыбраннаяСтрока.НеЗагружать = НЕ ВыбраннаяСтрока.НеЗагружать;
			ПроверитьЗаполнениеПолей();
		КонецЕсли;


	КонецЕсли;
	
КонецПроцедуры
   
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТребуетсяСохранениеДанных = ПроверитьНеобходимостьСохраненияДанных();
	
	Если ТребуетсяСохранениеДанных = "Отмена" Тогда
		ТребуетсяСохранениеДанных = "Не требуется";
		Отказ = Истина;
	ИначеЕсли ТребуетсяСохранениеДанных = "Требуется" Тогда 
		ЭлементФормыСохранить = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Найти("Сохранить");
		Если Не ЭлементФормыСохранить = Неопределено Тогда
			КнопкаДействияФормыНажатие(ЭлементФормыСохранить);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьНеобходимостьСохраненияДанных(ТекстВопроса = "")
	
	ТребуетсяСохранениеДанных = "Не требуется";
	
	//проверка на несохраненные значения SSCC
	
	ДанныеПоSSCCИзменились  = Ложь;
	
	Если Сообщение.ТипСообщения = "DESADV" И Сообщение.Свойство("ТранспортныеУпаковки") И ЗначениеЗаполнено(Сообщение.ТранспортныеУпаковки) Тогда
		ДанныеСообщения = Сообщение.ТранспортныеУпаковки;
		ДанныеФормы 	= ЭлементыФормы.ТранспортныеУпаковки.Значение;
		Если ДанныеСообщения.Строки.Количество() <> ДанныеФормы.Строки.Количество() Тогда
			ДанныеПоSSCCИзменились = Истина;
		КонецЕсли;
		Если Не ДанныеПоSSCCИзменились Тогда
			НомерУпаковки = 0;
			Для Каждого УпаковкаСообщения Из ДанныеСообщения.Строки Цикл
				УпаковкаФормы = ДанныеФормы.Строки.Получить(НомерУпаковки);
				Если УпаковкаСообщения.Строки.Количество() <> УпаковкаФормы.Строки.Количество() Тогда
					ДанныеПоSSCCИзменились = Истина;
					Прервать;
				КонецЕсли;
				Если УпаковкаСообщения.SSCC <> УпаковкаФормы.SSCC Тогда
					ДанныеПоSSCCИзменились = Истина;
					Прервать;
				КонецЕсли;	
				НомерТовара   = 0;
				Для Каждого ТоварСообщения Из УпаковкаСообщения.Строки Цикл
					ТоварФормы = УпаковкаФормы.Строки.Получить(НомерТовара);
					Если ТоварСообщения.НомерСтроки <> ТоварФормы.НомерСтроки Тогда
						ДанныеПоSSCCИзменились = Истина;
						Прервать;
					КонецЕсли;
					НомерТовара = НомерТовара + 1;
				КонецЦикла;
				НомерУпаковки = НомерУпаковки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//какие-то другие проверки на несохраненные значения
	//...
	
	Если ДанныеПоSSCCИзменились Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, 		"Сохранить");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, 		"Не сохранять");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, 	"Отмена");
		
		Текст = ?(ЗначениеЗаполнено(ТекстВопроса), ТекстВопроса, "Сохранить изменения в сообщении?");
		Ответ = Вопрос(Текст, СписокКнопок, , КодВозвратаДиалога.Отмена, "Контур.EDI");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТребуетсяСохранениеДанных = "Требуется";
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			ТребуетсяСохранениеДанных = "Не требуется";
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			ТребуетсяСохранениеДанных = "Отмена";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяСохранениеДанных;
	
КонецФункции

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТоварыАртикулВидимость",ЭлементыФормы.Товары.Колонки.Артикул.Видимость);
	СохранитьЗначение("ТоварыНоменклатураКодВидимость",ЭлементыФормы.Товары.Колонки.НоменклатураКод.Видимость);
	СохранитьЗначение("ТоварыНаименованиеНоменклатурыПолноеВидимость",ЭлементыФормы.Товары.Колонки.НаименованиеНоменклатурыПолное.Видимость);
	
КонецПроцедуры

Процедура Получатель1СНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДействиеДатаПоставкиНажатие(Элемент)
	
	//+для АТАК
	Если Сообщение.ТипСообщения = "INVOIC" И Сообщение.Свойство("ДатаПоставкиФактическая") Тогда
		ВыбраннаяДата = Дата(1,1,1);
		Если ВвестиДату(ВыбраннаяДата,"Укажите фактическую дату поставки",ЧастиДаты.ДатаВремя) Тогда //время тоже может быть важно
			ДатаПоставкиФактическая = ВыбраннаяДата;
			Сообщение.ДатаПоставкиФактическая = ВыбраннаяДата;
			ЭлементыФормы.ПредставлениеДатыПоставки.Заголовок = ПолучитьПредставлениеДатыПоставки(Сообщение.ДатаПоставкиФактическая);
		КонецЕсли;
	Иначе
	//-
		
		ВыбраннаяДата = ДокументДата;
		Если ЗначениеЗаполнено(НакладнаяДата) Тогда
			ВыбраннаяДата = НакладнаяДата;
		ИначеЕсли ЗначениеЗаполнено(ПриемкаДата) Тогда
			ВыбраннаяДата = ПриемкаДата;
		КонецЕсли;

		Если ВвестиДату(ВыбраннаяДата,"Укажите дату поставки",ЧастиДаты.ДатаВремя) Тогда //время тоже может быть важно
			
			Если Сообщение.ТипСообщения = "ORDRSP" И Не ВыбраннаяДата = Сообщение.ДатаПоставки Тогда
				ДополнитьТаблицуИзмененныхРеквизитов("ДатаПоставки", ВыбраннаяДата);
				ПерезаполнитьИсходящееСообщение();
			Иначе	
				ДатаПоставки = ВыбраннаяДата;
				Сообщение.ДатаПоставки = ВыбраннаяДата;
				ЭлементыФормы.ПредставлениеДатыПоставки.Заголовок = ПолучитьПредставлениеДатыПоставки(Сообщение.ДатаПоставки);
			КонецЕсли;
			
		КонецЕсли;
		
	//+для АТАК
	КонецЕсли;
	//-
		
КонецПроцедуры

//+Для Магнита
Процедура ДатаВывозаОтПоставщикаПриИзменении(Элемент)
	Если Сообщение.Свойство("ДатаВывозаОтПоставщика") И ЗначениеЗаполнено(ДатаВывозаОтПоставщика) Тогда
		Сообщение.ДатаВывозаОтПоставщика = ДатаВывозаОтПоставщика;
	КонецЕсли;	
КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ПодсказкаНоменклатуры = "не выбрана строка";
	ПодсказкаНаименования = "не выбрана строка";
	
	ТекСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			ПодсказкаНоменклатуры = СокрЛП(ТекСтрока.Номенклатура);
		Иначе
			ПодсказкаНоменклатуры = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Наименование) Тогда
			ПодсказкаНаименования = СокрЛП(ТекСтрока.Наименование);
		Иначе
			ПодсказкаНаименования = "";
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.НадписьПодсказкаНоменклатура.Заголовок			= ПодсказкаНоменклатуры;
	ЭлементыФормы.НадписьПодсказкаНаименованиеПартнера.Заголовок	= ПодсказкаНаименования;
	
КонецПроцедуры

Процедура ТаблицаПрикрепленныхСообщенийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЕстьОшибки Тогда
		
		ОформлениеСтроки.Ячейки.Примечание.ЦветФона = WebЦвета.СветлоРозовый;
		
	КонецЕсли;
	
КонецПроцедуры

//пробегает по таблице значений Дубли и смотрит, были ли созданы по этим сообщениям документы
//если такой документ был создан, и в единственном экземпляре, то функция перепривяжет его к последнему сообщению
//а все остальные пометит как уже загруженные. В списке документов все равно будет светиться только одно из них
Функция ПерепривязатьСообщенияИнтерактивно()
	
	//вызвать магическую заполнялку
	МагическиОбработатьДублиORDERS(Сообщение,"НоваяВерсия");
	
	_Сообщение = ПрочитатьСообщение(Сообщение.СообщениеСсылка,,Сообщение.ТипСообщения,"Входящее");
	
	Если ЗначениеЗаполнено(_Сообщение) Тогда
		
		_ТекущиеТовары = Товары.Скопировать();

		Сообщение=_Сообщение;//копия сообщения

		Сообщение.Документ1С=Сообщение.ДокументСсылка;
		
		ПриОткрытии();
		
		//костыль - до полной переработки данной формы

		Товары = _ТекущиеТовары;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПерезаполнитьДокумент1С()
	
	ПервоначальнаяЗагрузкаСообщения = Ложь;
	//в случае, если документов несколько, то мы можем только пометить на удаление старые, и создать вместо них новые.
	
	Если ЗначениеЗаполнено(Документ1С) Тогда
		ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(Документ1С);
		Если ТабВиртуальныхСообщений.Количество()>1 Тогда
			
			ТекстВопроса = "Следующие документы будут помечены на удаление:";
			Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
				ТекстВопроса = ТекстВопроса+Символы.ПС+Стр.Документ;
			КонецЦикла;	
			ТекстВопроса = ТекстВопроса+Символы.ПС+"Вместо них будут созданы новые документы. Продолжить?";
			
			Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет,"EDI.Контур") = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			Иначе
				НачатьТранзакцию_КонтурEDI();
				//как будем с этим жить?
				//обязательно надо учесть, что текущее сообщение тоже будет удалено.
				Попытка
					Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
						Стр.Документ.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
						СообщениеОбъект_ORDERS = ПолучитьОбъектСообщения(Стр.ORDERS);
						Если Стр.ЭтоТекущийДокумент Тогда
							СообщениеОбъект_ORDERS.Документ = Неопределено;
							//статус?
							СохранитьОбъектСообщения(СообщениеОбъект_ORDERS);
						Иначе
							СообщениеОбъект_ORDERS.Удалить();
						КонецЕсли;
						
						//заодно уберем ORDRSP, чтобы его переотправить потом с новыми данными
						Если ЗначениеЗаполнено(Стр.ORDRSP) Тогда
							СообщениеОбъект_ORDRSP = ПолучитьОбъектСообщения(Стр.ORDRSP);
							СообщениеОбъект_ORDRSP.Удалить();
						КонецЕсли;
						
					КонецЦикла;	
					Документ1С = Неопределено;
					Сообщение.Документ1С = Неопределено;
					Сообщение.ДокументСсылка = Неопределено;
					
					ПервоначальнаяЗагрузкаСообщения = Истина;//костыль
					
					
					ЗафиксироватьТранзакцию_КонтурEDI();
				Исключение
					ОтменитьТранзакцию_КонтурEDI();
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;	
	Иначе
		ПервоначальнаяЗагрузкаСообщения = Истина;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда
			Если Вопрос("Документ "+СокрЛП(Сообщение.Документ1С)+" будет перезаполнен. Продолжить?",РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Нет,"EDI.Контур") = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ПеренестиПоля1СвСообщение(Сообщение);
	
	Если НЕ ЗначениеЗаполнено(Сообщение.ДокументСсылка) Тогда
		Сообщение.ДокументСсылка = Сообщение.Документ1С;
	КонецЕсли;
	
	Результат = ПринятьВходящееСообщение(Сообщение,ПервоначальнаяЗагрузкаСообщения);
	
	Если Результат.Успешно Тогда
		
		Если Сообщение.ТипСообщения = "ORDERS" Тогда
			//костыль для версионности ORDERS
			УстановитьСтатусСообщения(Сообщение.СообщениеСсылка,Сообщение.ДокументСсылка,Сообщение.ТипСообщения,"ВходящийЗагружен");
		КонецЕсли;
		
		Возврат Истина;
	Иначе
		ВывестиПредупреждение_КонтурEDI("Не удалось перезаполнить документ!");
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции	

Функция ВыбратьДокументСОтбором(Значение, Отбор)
	
	ВыбранноеЗначение = Неопределено;
	
	Если Не ТипЗнч(Значение) = Тип("Неопределено") Тогда
				
		ФормаВыбора = Документы[Метаданные.НайтиПоТипу(ТипЗнч(Значение)).Имя].ПолучитьФормуВыбора();
		Для Каждого Элемент Из Отбор Цикл
			ЭлементОтбораФормы = ФормаВыбора.Отбор.Найти(Элемент.Ключ);
			Если Не ЭлементОтбораФормы = Неопределено Тогда
				Если ТипЗнч(ЭлементОтбораФормы.Значение) = ТипЗнч(Элемент.Значение) и ЗначениеЗаполнено(Элемент.Значение) Тогда
					ЭлементОтбораФормы.Значение			= Элемент.Значение;
					ЭлементОтбораФормы.Использование 	= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
		
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		ВыбранноеЗначение = Документы[Метаданные.НайтиПоТипу(ТипЗнч(Значение)).Имя].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВыбранноеЗначение;
	
КонецФункции

Процедура ДополнитьТаблицуИзмененныхРеквизитов(Наименование, Значение)

	//проверим сушествует ли таблица
	Если ТаблицаИзмененныхРеквизитов.Колонки.Количество() = 0 Тогда
		ТаблицаИзмененныхРеквизитов.Колонки.Добавить("Наименование");
		ТаблицаИзмененныхРеквизитов.Колонки.Добавить("Значение");
	КонецЕсли;
	
	//проверим наличие добавляемого реквизита в таблице
	НайденнаяСтрока = ТаблицаИзмененныхРеквизитов.Найти(Наименование, "Наименование");
	Если НайденнаяСтрока = Неопределено Тогда
		НовыйРеквизит = ТаблицаИзмененныхРеквизитов.Добавить();
		НовыйРеквизит.Наименование  = Наименование;
		НовыйРеквизит.Значение		= Значение;		
	Иначе
		НайденнаяСтрока.Значение	= Значение;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьСтруктуруИзмененныхРеквизитов()
	
	ИзмененныеРеквизиты = Новый Структура;
	
	Для Каждого Реквизит Из ТаблицаИзмененныхРеквизитов Цикл
		ИзмененныеРеквизиты.Вставить(Реквизит.Наименование, Реквизит.Значение); 
	КонецЦикла;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции

Функция ПроверитьИзменениеДатыПоставки()
	
	РезультатПроверки = Новый Структура("Изменение", Ложь);
	
	Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Покупатель1С));
	_СтатусChangedДляИзмененнойДатыПоставкиORDRSP = ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СтатусChangedДляИзмененнойДатыПоставкиORDRSP");
	
	Если Не _СтатусChangedДляИзмененнойДатыПоставкиORDRSP = Истина Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ВходящийЗаказ = ПрочитатьСообщение(,Сообщение.Заказ1С,"ORDERS","Входящее");
	
	Если Не ЗначениеЗаполнено(ВходящийЗаказ) Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВходящийЗаказ.ДатаПоставки) И Не Сообщение.ДатаПоставки = ВходящийЗаказ.ДатаПоставки Тогда
		РезультатПроверки.Вставить("Изменение", Истина);
		РезультатПроверки.Вставить("Значение",  ВходящийЗаказ.ДатаПоставки);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

//работа с sscc ----------------------------------------------------------------------------------------------------------------

//обработчики

Процедура ТоварныеПозицииВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Значение = Новый Массив;
	Значение.Добавить(ВыбраннаяСтрока);
	
	ПараметрыПеретаскивания = Новый Структура;
	ПараметрыПеретаскивания.Вставить("Действие",			ДействиеПеретаскивания.Перемещение);
	ПараметрыПеретаскивания.Вставить("ДопустимыеДействия",	ДопустимыеДействияПеретаскивания.Копирование);
	ПараметрыПеретаскивания.Вставить("Значение",			Значение);
	
	СтрокаТранспортнойУпаковки 	= ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока;
	КолонкаТранспортнойУпаковки	= ЭлементыФормы.ТранспортныеУпаковки.ТекущаяКолонка;
	
	ТранспортныеУпаковкиПеретаскивание(ЭлементыФормы.ТранспортныеУпаковки, ПараметрыПеретаскивания, Истина, СтрокаТранспортнойУпаковки, КолонкаТранспортнойУпаковки)	
	
КонецПроцедуры

Процедура ТоварныеПозицииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	СтандартнаяОбработка = Ложь;
			                                                                                                                                                
КонецПроцедуры

Процедура ТоварныеПозицииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
		УдалитьСтрокуТранспортнойУпаковки(Строка);
	КонецЦикла;
	
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

Процедура КнопкаПеренестиВправоНажатие(Элемент)
	
	ВыделенныеСтроки = ЭлементыФормы.ТоварныеПозиции.ВыделенныеСтроки;
	КоличествоСтрок  = ВыделенныеСтроки.Количество();
	Пока Не ВыделенныеСтроки.Количество() = 0 Цикл
		ТоварныеПозицииВыбор(ЭлементыФормы.ТоварныеПозиции, ВыделенныеСтроки[0], ЭлементыФормы.ТоварныеПозиции.Колонки.Найти("НомерСтроки"), Истина);	
	КонецЦикла;
	
	//не предлагаем редактировать количество
	Если Не КоличествоСтрок = 1 Тогда
		ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока = ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПеренестиВсеВправоНажатие(Элемент)
	
	КоличествоСтрок = ТоварныеПозиции.Количество();
	Пока Не ТоварныеПозиции.Количество() = 0 Цикл
		ТоварныеПозицииВыбор(ЭлементыФормы.ТоварныеПозиции, ТоварныеПозиции[0], ЭлементыФормы.ТоварныеПозиции.Колонки.Найти("НомерСтроки"), Истина);	
	КонецЦикла;
	
	//не предлагаем редактировать количество
	Если Не КоличествоСтрок = 1 Тогда
		ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока = ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПеренестиВлевоНажатие(Элемент)
	
	ВыделенныеСтроки = ЭлементыФормы.ТранспортныеУпаковки.ВыделенныеСтроки;
	Пока Не ВыделенныеСтроки.Количество() = 0 Цикл
		УдалитьСтрокуТранспортнойУпаковки(ВыделенныеСтроки[0]);		
	КонецЦикла;
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

Процедура КнопкаПеренестиВсеВлевоНажатие(Элемент)
	
	Пока Не ТранспортныеУпаковки.Строки.Количество() = 0 Цикл
		УдалитьСтрокуТранспортнойУпаковки(ТранспортныеУпаковки.Строки[0]);	
	КонецЦикла;	
	ОбновитьДанныеРазмещения();
	
КонецПроцедуры

Процедура КоманднаяПанельТранспортныеУпаковкиДобавитьУпаковку(Кнопка)
	
	ДобавитьУпаковку();
		
КонецПроцедуры

Процедура КоманднаяПанельТранспортныеУпаковкиДобавитьВложеннуюУпаковку(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока; 
	
	Если ТекущаяСтрока = Неопределено Тогда
		ВывестиПредупреждение_КонтурEDI("Не выбрана упаковка.");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ТипУпаковки) Тогда
		ТекущаяСтрока = ТекущаяСтрока.Родитель;
	КонецЕсли;
	
	ДобавитьУпаковку(ТекущаяСтрока);
		
КонецПроцедуры

Процедура КоманднаяПанельТранспортныеУпаковкиИзменитьКоличество(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСтрока.ТипУпаковки) Тогда
		ИзменитьSSCCКодТранспортнойУпаковки(ТекСтрока);
	Иначе
		ВыделитьЯчейку(ТекСтрока);
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанельТранспортныеУпаковкиУдалитьУпаковку(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.ТранспортныеУпаковки.ВыделенныеСтроки;
	Пока Не ВыделенныеСтроки.Количество() = 0 Цикл
		УдалитьСтрокуТранспортнойУпаковки(ВыделенныеСтроки[0]);
	КонецЦикла;
	ОбновитьДанныеРазмещения();
		
КонецПроцедуры

Процедура ТранспортныеУпаковкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	
	//запрещаем перетаскивание групп
	ВнутреннееПеретаскивание = Не (ПараметрыПеретаскивания.Значение[0].Владелец().Колонки.Найти("ТипУпаковки") = Неопределено);
	Если ВнутреннееПеретаскивание Тогда
		Для Каждого Элемент Из ПараметрыПеретаскивания.Значение Цикл
			ПеретаскиваниеУпаковки = ЗначениеЗаполнено(Элемент.ТипУпаковки);
			Если ПеретаскиваниеУпаковки Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ВнутреннееПеретаскивание И ПеретаскиваниеУпаковки Тогда 
		СтандартнаяОбработка = Истина;
	КонецЕсли;

	//запрещаем перетаскивание в свою же группу
	ПеретаскиваниеВСвоюГруппу = Ложь;
	Если ВнутреннееПеретаскивание И Не Строка = Неопределено  Тогда
		Если ПараметрыПеретаскивания.Значение[0].Родитель = Строка Тогда
			ПеретаскиваниеВСвоюГруппу = Истина;	
		КонецЕсли;
	КонецЕсли;
	Если ПеретаскиваниеВСвоюГруппу Тогда 
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
	//запрещаем перетаскивание в товар своей же группы
	ПеретаскиваниеВСвойТовар = Ложь;
	Если ВнутреннееПеретаскивание И Не Строка = Неопределено  Тогда
		Для Каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
			Если Значение.Родитель = Строка.Родитель И Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
				ПеретаскиваниеВСвойТовар = Истина;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПеретаскиваниеВСвойТовар Тогда 
		СтандартнаяОбработка = Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ТранспортныеУпаковкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтрокаПриемник = Строка;
	
	//еще не добавлена ни одна упаковка
	Если ТранспортныеУпаковки.Строки.Количество() = 0 Тогда
		СтрокаПриемник = ДобавитьУпаковку();
	КонецЕсли;
	
	//пользователь разместил товарную позицию в пустое место (не попал ни в одну строку)
	Если СтрокаПриемник = Неопределено Тогда
		СтрокаПриемник = НайтиРекурсивноНижнююСтроку(ТранспортныеУпаковки.Строки);		
	КонецЕсли;
	
	//не позволим добавить товар в товар
	Если Не ЗначениеЗаполнено(СтрокаПриемник.ТипУпаковки) Тогда
		СтрокаПриемник = СтрокаПриемник.Родитель;
	КонецЕсли;
	
	МассовоеДействие = (ПараметрыПеретаскивания.Значение.Количество() > 1);
	Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
		ПеремешениеМеждуУпаковками = Не Строка.Владелец().Колонки.Найти("ТипУпаковки") = Неопределено;
		Если ПеремешениеМеждуУпаковками Тогда
			ПереместитьТоварнуюПозицию(Строка, СтрокаПриемник, МассовоеДействие);	
		Иначе
		    РазместитьТоварнуюПозицию(Строка, СтрокаПриемник, МассовоеДействие);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеРазмещения();
		
КонецПроцедуры

Процедура ТранспортныеУпаковкиПослеУдаления(Элемент)
	
	ОбновитьДанныеРазмещения();
		
КонецПроцедуры

Процедура ТранспортныеУпаковкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбновитьДанныеРазмещения();
		
КонецПроцедуры

Процедура ТранспортныеУпаковкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	НовоеКоличество = ТекущаяСтрока.Количество;
	
	//проверим не ввел ли пользователь 0
	Если НовоеКоличество = 0 Тогда
		УдалитьСтрокуТранспортнойУпаковки(ТекущаяСтрока);
		ОбновитьДанныеРазмещения();
		Возврат;
	КонецЕсли;
	
	ОбщееКоличество 		= ПолучитьОбщееКоличествоТоварныхПозиций(ТекущаяСтрока);
	РазмещенноеКоличество   = ПолучитьРазмещенноеКоличество(ТекущаяСтрока) - НовоеКоличество;
	ДоступноеКоличество		= ОбщееКоличество - РазмещенноеКоличество;
	
	Если НовоеКоличество > ДоступноеКоличество Тогда
		ТекущаяСтрока.Количество = ДоступноеКоличество;
	Иначе
		ТекущаяСтрока.Количество = НовоеКоличество;
	КонецЕсли;
	
	ОбновитьДанныеРазмещения();
		
КонецПроцедуры

Процедура ТранспортныеУпаковкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока;
	Если Колонка.Имя = "СоставУпаковки" И Колонка.Доступность Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.ТипУпаковки) Тогда
			ИзменитьSSCCКодТранспортнойУпаковки(ТекущаяСтрока);
		Иначе
			УдалитьСтрокуТранспортнойУпаковки(ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока);
			ОбновитьДанныеРазмещения();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ТранспортныеУпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТранспортныеУпаковкиПередУдалением(Элемент, Отказ)
	
	//отказываемся от стандартного удаления из-за падения платформы в некоторых случаях
	Отказ = Истина;
	
	//вместо стандартного удаления рекурсивно удаляем с нижнего уровня наверх
	ВыделенныеСтроки = ЭлементыФормы.ТранспортныеУпаковки.ВыделенныеСтроки;
	Пока Не ВыделенныеСтроки.Количество() = 0 Цикл
		УдалитьСтрокуТранспортнойУпаковки(ВыделенныеСтроки[0]);
	КонецЦикла;
	
	ОбновитьДанныеРазмещения();
		
КонецПроцедуры

Процедура НадписьПечатьПалетногоЛистаСправкаНажатие(Элемент)
	
	Справка = "Палетные листы можно напечатать после сохранения или отправки уведомления об отгрузке. 
			  |
			  |Для групповой печати необходимо:
			  |		1. Закрыть карточку сообщения - перейти в основной список модуля.
			  |		2. Выделить строки с сообщениями, по которым необходимо распечатать палетные листы.
			  |		3. В верхней панели кнопок модуля нажать ""Еще"" -> ""Распечатать палетные листы"".
			  |
			  |Для печати палетных листов из карточки сообщения необходимо добавить расширение 
			  |или включить в подключаемом модуле плагин ""Печать палетных листов"".
			  |Подробнее: Торговая сеть -> Настройки -> Данные об упаковках (SSCC).";

	ВывестиПредупреждение_КонтурEDI(Справка);
	
КонецПроцедуры

//добавление / изменение / удаление данных

Процедура ДобавитьТоварнуюПозицию(Строка)
	
	Если ОтправлятьДанныеОбУпаковках Тогда
	    НоваяСтрока = ТоварныеПозиции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.Номенклатура = Строка.Наименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
Функция ДобавитьУпаковку(Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		НоваяСтрока = ТранспортныеУпаковки.Строки.Добавить()
	Иначе
		НоваяСтрока = Родитель.Строки.Добавить();
	КонецЕсли;
	
	НоваяСтрока.ТипУпаковки		= "201";
		
	ПронумероватьУпаковкиСквознымПорядковымНомером();
	ПроименоватьУпаковки();
	
	ВыделитьСтроку(НоваяСтрока);
	
	Возврат НоваяСтрока;
		
КонецФункции

Процедура РазместитьТоварнуюПозицию(Позиция, Упаковка, МассовоеДействие = Истина)
	
	НоваяСтрока = Упаковка.Строки.Найти(Позиция.НомерСтроки,"НомерСтроки");
	
	Если НоваяСтрока = Неопределено Тогда
	    НоваяСтрока = Упаковка.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Позиция);
		НоваяСтрока.СоставУпаковки = ПолучитьРазвернутоеНаименованиеТовара(Позиция);
		НоваяСтрока.Количество = Позиция.Количество;
	Иначе
		НоваяСтрока.Количество = НоваяСтрока.Количество + Позиция.Количество; 
	КонецЕсли;
	
	Если МассовоеДействие Тогда
		ВыделитьСтроку(НоваяСтрока);
	Иначе
		ВыделитьЯчейку(НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереместитьТоварнуюПозицию(Позиция, Упаковка, МассовоеДействие = Истина)
	
	НоваяСтрока = Упаковка.Строки.Найти(Позиция.НомерСтроки,"НомерСтроки");
	
	Если НоваяСтрока = Неопределено Тогда
	    НоваяСтрока = Упаковка.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Позиция);
	Иначе
		НоваяСтрока.Количество = НоваяСтрока.Количество + Позиция.Количество;
	КонецЕсли;
	
	Если Позиция.Родитель = Неопределено Тогда
		ТранспортныеУпаковки.Строки.Удалить(Позиция);
	Иначе
		Позиция.Родитель.Строки.Удалить(Позиция);
	КонецЕсли;
		
	ВыделитьСтроку(НоваяСтрока);
			
КонецПроцедуры

Процедура ИзменитьSSCCКодТранспортнойУпаковки(Строка)
	
	SSCC  = Строка.SSCC;
	_SSCC = Строка.SSCC;
	Имя   = Строка.СоставУпаковки;
	
	//проверим, есть ли какой-то код для редактирования, если нет, тогда пусть номер присваивает функция по генерации SSCC-кодов
	Если Не ЗначениеЗаполнено(_SSCC) Тогда
		ВывестиПредупреждение_КонтурEDI("Выбранной упаковке еще не был назначен SSCC-код." + Символы.ПС + "Редактирование невоозможно.");
		Возврат;
	КонецЕсли;
	
	//попытаемся отговорить пользователя от необдуманного...
	Ответ = Вопрос("Редактировать SSCC-код упаковки
				   |
				   |""" + Имя + """?",
				   РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Контур.EDI");
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	//доносим до пользователя всю ответственность грядущего...
	Ответ = Вопрос("Самостоятельное изменение SSCC-кода может привести к проблемам в учёте и работе с сетью. 
				   |
				   |Продолжить редактирование?
				   |Изменение фиксируется в журнале регистрации.",
                   РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Контур.EDI");
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	//запрашиваем ввод нового SSCC-кода
	ЗапрашиватьНовыйКод = Истина;
	Пока ЗапрашиватьНовыйКод Цикл
		
		Если Не ВвестиСтроку(_SSCC, "Введите SSCC-код...",18) Тогда
			Возврат;		
		КонецЕсли;
		
		//сравним с тем, что было
		Если СокрЛП(SSCC) = СокрЛП(_SSCC) Тогда
			Возврат;
		КонецЕсли;
		
		РезультатВалидации = ВалидироватьSSCCКод(_SSCC);
		
		Если РезультатВалидации Тогда
			ЗапрашиватьНовыйКод = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Строка.SSCC = _SSCC;
	УстановитьСоставУпаковки(Строка);
	ДобавитьСобытиеТребующееРегистрации("DESADV №" + Сообщение.ДокументEDI.Номер + " от " + Строка(Сообщение.ДокументEDI.Дата) + ". Исходное значение: " + SSCC + " изменено на значение: " + _SSCC + ".");
	
КонецПроцедуры

Функция ДобавитьНераспределеннуюТоварнуюПозицию(Строка)
	
	НоваяСтрока = ТоварныеПозиции.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура) 
		И ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Номенклатура = НоваяСтрока.Наименование;
	КонецЕсли;

	Возврат НоваяСтрока;
	
КонецФункции

Функция УдалитьСтрокуТранспортнойУпаковки(УдаляемаяСтрока = Неопределено, ЗапроситьПодтверждение = Ложь)
	
	МожноУдалятьСтроку = Истина;
	
	Если УдаляемаяСтрока = Неопределено Тогда
		ВывестиПредупреждение_КонтурEDI("Не выбрана удаляемая строка.");
		МожноУдалятьСтроку = Ложь;
		Возврат МожноУдалятьСтроку;
	КонецЕсли;
	
	//проверим, существует ли строка, не удалена ли она уже
	ЭтоУпаковка 	 = Истина;
	СтрокаСуществует = Ложь;
	Попытка
		ЭтоУпаковка = ЗначениеЗаполнено(УдаляемаяСтрока.ТипУпаковки);
		СтрокаСуществует = Истина;
	Исключение
	КонецПопытки;
	Если Не СтрокаСуществует Тогда
		Возврат Истина;		
	КонецЕсли;
	
	Если ЗапроситьПодтверждение Тогда
		Ответ = Вопрос("Удалить выбранную " + ?(ЭтоУпаковка, "упаковку", "товарную позицию") + "?",РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Контур.EDI");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			МожноУдалятьСтроку = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МожноУдалятьСтроку Тогда
		УдалитьСтрокуРекурсивно(УдаляемаяСтрока);
	КонецЕсли;
		
	Возврат МожноУдалятьСтроку;
			
КонецФункции

Процедура УдалитьСтрокуРекурсивно(ТекущаяСтрока)
	
	//проваливаемся вложенные строки
	Количество  = ТекущаяСтрока.Строки.Количество() - 1;
	Для К = 0 По Количество Цикл
		Строка = ТекущаяСтрока.Строки[0];
		Если Не Строка.Строки.Количество() = 0 Тогда
			УдалитьСтрокуРекурсивно(Строка);
		Иначе
			//удаляем текущую строку
			Если Не Строка.Родитель = Неопределено Тогда
				ВеткаСтроки = Строка.Родитель.Строки;
			Иначе
				ВеткаСтроки = ТранспортныеУпаковки.Строки;
			КонецЕсли;
			ВеткаСтроки.Удалить(Строка);
			Продолжить;
		КонецЕсли;
    КонецЦикла;
	
	//удаляем родительскую строку
	Если Не ТекущаяСтрока.Родитель = Неопределено Тогда
		ВеткаСтроки = ТекущаяСтрока.Родитель.Строки;
	Иначе
		ВеткаСтроки = ТранспортныеУпаковки.Строки;
	КонецЕсли;
	ВеткаСтроки.Удалить(ТекущаяСтрока);
	
КонецПроцедуры

//подготовка / поиск данных

Функция НайтиРекурсивноНижнююСтроку(Строки)
	
	НижняяСтрока = Строки[Строки.Количество()-1];
	
	Если НижняяСтрока.Строки.Количество() > 0 Тогда
		НижняяСтрока = НайтиРекурсивноНижнююСтроку(НижняяСтрока.Строки);
	КонецЕсли;
	
	Возврат НижняяСтрока;
	
КонецФункции

Процедура ЗаполнитьТаблицуРазмещенныеТовары(ТаблицаРазмещенныеТовары, Строки)
	
	Для Каждого Строка Из Строки Цикл
		
		Если ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			ЗаполнитьТаблицуРазмещенныеТовары(ТаблицаРазмещенныеТовары, Строка.Строки);
		ИначеЕсли Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			НоваяСтрока = ТаблицаРазмещенныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРазмещенныеТовары.Свернуть("НомерСтроки","Количество");
	
КонецПроцедуры

Функция ИнициализироватьТаблицуРазмещенныхТоваров()
	
	ТаблицаРазмещенныеТовары = Новый ТаблицаЗначений;
	ТаблицаРазмещенныеТовары.Колонки.Добавить("НомерСтроки");
	ТаблицаРазмещенныеТовары.Колонки.Добавить("Количество");
		
	Возврат ТаблицаРазмещенныеТовары;
	
КонецФункции

Функция ПолучитьОбщееКоличествоТоварныхПозиций(Строка)
	
	Количество = 0;
	
	НайденнаяСтрока = Товары.Найти(Строка.НомерСтроки,"НомерСтроки");
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		Количество = НайденнаяСтрока.Количество;	
	КонецЕсли;
		
	Возврат Количество;
	
КонецФункции

Функция ПолучитьРазмещенноеКоличество(Строка)
	
	Количество = 0;
	
	Отбор = Новый Структура("НомерСтроки", Строка.НомерСтроки);
	
	ТаблицаРазмещенныеТовары = ИнициализироватьТаблицуРазмещенныхТоваров();
	ЗаполнитьТаблицуРазмещенныеТовары(ТаблицаРазмещенныеТовары, ТранспортныеУпаковки.Строки);
	
	НайденныеСтроки = ТаблицаРазмещенныеТовары.НайтиСтроки(Отбор);
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = НайденныеСтроки[0];
	    Количество = НайденнаяСтрока.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Функция ПолучитьТипУпаковки(КодТипа)
	
	ТипУпаковки = "Упаковка";
	
	Если КодТипа = "201" Тогда
		ТипУпаковки = "Европалета";
	КонецЕсли;
	
	Возврат ТипУпаковки;
	
КонецФункции

Функция ПолучитьРазвернутоеНаименованиеТовара(Строка)
	
	Наименование = "";
	
	Номенклатура = Строка(Строка.Номенклатура); 
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Наименование = Наименование + Номенклатура;
	КонецЕсли;
	
	ХарактеристикаНоменклатуры = Строка(Строка.ХарактеристикаНоменклатуры); 
		
	ЕдиницаИзменения = Строка(Строка.ЕдиницаИзмерения);
	
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) 
		 ИЛИ ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
		 
		Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры)
			 И ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
			Наименование = Наименование + " " + "( " + ХарактеристикаНоменклатуры + "," + " " + ЕдиницаИзменения + " )";
		Иначе
			Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
				Наименование = Наименование + " " + "( " + ХарактеристикаНоменклатуры + " )";
			ИначеЕсли ЗначениеЗаполнено(ЕдиницаИзменения) Тогда
				Наименование = Наименование + " " + "( " + ЕдиницаИзменения + " )";
			КонецЕсли;				 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

//интерфейсная обработка

Процедура ВыделитьСтроку(Строка)
	
	ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока = Строка;
	ЭлементыФормы.ТранспортныеУпаковки.ТекущаяКолонка = ЭлементыФормы.ТранспортныеУпаковки.Колонки.Найти("Количество");
	
КонецПроцедуры

Процедура ВыделитьЯчейку(Строка)
	
	ЭлементыФормы.ТранспортныеУпаковки.ТекущаяСтрока = Строка;
	ЭлементыФормы.ТранспортныеУпаковки.ТекущаяКолонка = ЭлементыФормы.ТранспортныеУпаковки.Колонки.Найти("Количество");
	ЭлементыФормы.ТранспортныеУпаковки.ИзменитьСтроку()
	
КонецПроцедуры

Процедура ОбновитьДанныеРазмещения()

	ТаблицаРазмещенныеТовары = ИнициализироватьТаблицуРазмещенныхТоваров();
	
	ЗаполнитьТаблицуРазмещенныеТовары(ТаблицаРазмещенныеТовары, ТранспортныеУпаковки.Строки);
	
	ТаблицаТовары = Товары.Скопировать(,"НомерСтроки,Номенклатура,Наименование,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Количество");
	
	Для Каждого Строка Из ТаблицаТовары Цикл
		
		КоличествоПозицийВсего		 = Строка.Количество;
		СтрокаРазмещенныхПозиций 	 = ТаблицаРазмещенныеТовары.Найти(Строка.НомерСтроки,"НомерСтроки");
		КоличествоРазмещенныхПозиций = 0;
		Если Не СтрокаРазмещенныхПозиций = Неопределено Тогда
			КоличествоРазмещенныхПозиций = СтрокаРазмещенныхПозиций.Количество;
		КонецЕсли;
		СтрокаНеразмещенныхТоваров 	 = ТоварныеПозиции.Найти(Строка.НомерСтроки,"НомерСтроки");
		
		Если КоличествоПозицийВсего = КоличествоРазмещенныхПозиций Тогда
			Если Не СтрокаНеразмещенныхТоваров = Неопределено Тогда
				ТоварныеПозиции.Удалить(СтрокаНеразмещенныхТоваров);	
			КонецЕсли;
		ИначеЕсли КоличествоРазмещенныхПозиций = 0 Тогда
			Если Не СтрокаНеразмещенныхТоваров = Неопределено Тогда
				СтрокаНеразмещенныхТоваров.Количество = КоличествоПозицийВсего;
			Иначе
				НоваяСтрока = ДобавитьНераспределеннуюТоварнуюПозицию(Строка);
				НоваяСтрока.Количество = КоличествоПозицийВсего;
			КонецЕсли;
		ИначеЕсли КоличествоПозицийВсего > КоличествоРазмещенныхПозиций Тогда
			Если Не СтрокаНеразмещенныхТоваров = Неопределено Тогда
				СтрокаНеразмещенныхТоваров.Количество = КоличествоПозицийВсего - КоличествоРазмещенныхПозиций;		
			Иначе
				НоваяСтрока = ДобавитьНераспределеннуюТоварнуюПозицию(Строка);
				НоваяСтрока.Количество = КоличествоПозицийВсего - КоличествоРазмещенныхПозиций;
			КонецЕсли;			
		КонецЕсли;
		
		
	КонецЦикла;
	
	ВычислитьКоличествоВУпаковках(ТранспортныеУпаковки.Строки);
		
	СортироватьТоварныеПозиции();
		
	ПронумероватьУпаковкиСквознымПорядковымНомером();
	ПроименоватьУпаковки();
	
КонецПроцедуры

Процедура ВычислитьКоличествоВУпаковках(Строки)
	
	Для Каждого Строка Из Строки Цикл
						
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(Строка.ТипУпаковки) И Строка.Строки.Количество() > 0 Тогда
			ВычислитьКоличествоВУпаковках(Строка.Строки);
		КонецЕсли;
		
		Строка.Количество = Строка.Строки.Итог("Количество");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СортироватьТоварныеПозиции()
	
	ТоварныеПозиции.Сортировать("НомерСтроки");	
	
КонецПроцедуры

Процедура ПронумероватьУпаковкиСквознымПорядковымНомером()
	
	//на будущее: когда появятся вложения - тогда здесь рекурсивно проваливаться вниз
	
	НомерУпаковки = 1; 
	
	Для Каждого Строка Из ТранспортныеУпаковки.Строки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.НомерУпаковки = НомерУпаковки + 1; //делаем +1 - поскольку в формате имеется корневой узел, начинаем нумеровать упаковки с 2-ки
		
		ПронумероватьТоварыУпаковки(Строка);
		
		НомерУпаковки = НомерУпаковки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПронумероватьТоварыУпаковки(Упаковка)
	
	Для Каждого Товар Из Упаковка.Строки Цикл
		
		Товар.НомерУпаковки = Упаковка.НомерУпаковки;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроименоватьУпаковки()
	
	Для Каждого Строка Из ТранспортныеУпаковки.Строки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьСоставУпаковки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСоставУпаковки(Упаковка)
	
	ТекстSSCC = ?(ЗначениеЗаполнено(Упаковка.SSCC), " (" + Упаковка.SSCC + ")", "");
	
	РасшифровкаТипУпаковки = ПолучитьТипУпаковки(Упаковка.ТипУпаковки);
	
	Упаковка.СоставУпаковки = РасшифровкаТипУпаковки + " " + "№" + Строка(Упаковка.НомерУпаковки-1) + ТекстSSCC;
	
КонецПроцедуры

Процедура ПромаркироватьУпаковкиSSCCКодом()
	
	//на будущее: когда появятся вложения - тогда здесь рекурсивно проваливаться вниз
	
	Нумератор = 1;
	
	Для Каждого Строка Из ТранспортныеУпаковки.Строки Цикл

		Если Не ЗначениеЗаполнено(Строка.ТипУпаковки) или ЗначениеЗаполнено(Строка.SSCC) Тогда //маркируем только строки упаковок, в которых не заполнен SSCC-код
			Продолжить;
		КонецЕсли;
				
		Строка.SSCC = ПолучитьSSCCКодУпаковки(Нумератор); //делаем -1 - поскольку в формате имеется корневой узел, начинаем нумеровать упаковки с 2-ки
		
		Нумератор = Нумератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры

//учет упаковок по sscc

Функция ПолучитьSSCCКодУпаковки(НомерУпаковкиТекущейОтгрузки)
	
	SSCC = "";
	Продавец = Сообщение.Продавец1С;
	GLNПродавца = Сообщение.ПродавецEDI.GLN;
			
	НомерПоследнейОтгруженнойУпаковки = ПолучитьНомерПоследнейУпаковки(Продавец);
	
	СтрокаНомерФормируемойУпаковки = СтрЗаменить( Строка(НомерПоследнейОтгруженнойУпаковки + НомерУпаковкиТекущейОтгрузки), Символы.НПП, "" );
	
	SSCC = СгенерироватьSSCC(GLNПродавца, СтрокаНомерФормируемойУпаковки); 
	
	Возврат SSCC;			
	
КонецФункции

Функция ПолучитьНомерПоследнейУпаковки(Продавец)
	
	НомерПоследнейУпаковки = 0;
	
	РезервнаяСхемаSSCC = (ПолучитьКонстантуEDI("РезервнаяСхемаSSCC")=Истина);
	ПоследнийSSCCКод = ПолучитьЗначениеСвойстваОбъектаEDI(Продавец, "ПоследнийSSCCКод");
	
	НачалоНомераУпаковки 				= ?(РезервнаяСхемаSSCC,14,11);  
	КоличествоСимволовНомераУпаковки	= ?(РезервнаяСхемаSSCC,4,7);
	
	Если ПоследнийSSCCКод = Неопределено Тогда
		НомерПоследнейУпаковки = 0;
	Иначе
		НомерПоследнейУпаковки = Число(Сред(ПоследнийSSCCКод,НачалоНомераУпаковки,КоличествоСимволовНомераУпаковки));
	КонецЕсли;
		
	Возврат НомерПоследнейУпаковки;
	
КонецФункции

Процедура УстановитьНомерПоследнейУпаковки()
	
	Продавец = Сообщение.Продавец1С;

	ПоследнийSSCCКодТекущейПоставкиЧисло  = 0;
	ПоследнийSSCCКодТекущейПоставкиСтрока = 0;
	Для Каждого Строка Из ТранспортныеУпаковки.Строки Цикл
		Если ЗначениеЗаполнено(Строка.SSCC) И Число(Строка.SSCC) > ПоследнийSSCCКодТекущейПоставкиЧисло Тогда
			ПоследнийSSCCКодТекущейПоставкиЧисло  = Число(Строка.SSCC);
			ПоследнийSSCCКодТекущейПоставкиСтрока = Строка.SSCC;
		КонецЕсли;
	КонецЦикла;
	
	ПоследнийSSCCКодВсехПоставок = ПолучитьЗначениеСвойстваОбъектаEDI(Продавец, "ПоследнийSSCCКод");
    Если ПоследнийSSCCКодВсехПоставок = Неопределено Тогда
        ПоследнийSSCCКодВсехПоставок = "0";
    КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПоследнийSSCCКодТекущейПоставкиСтрока) и Число(ПоследнийSSCCКодВсехПоставок) < ПоследнийSSCCКодТекущейПоставкиЧисло Тогда	
		УстановитьЗначениеСвойстваОбъекта(Продавец, "ПоследнийSSCCКод", ПоследнийSSCCКодТекущейПоставкиСтрока);
	КонецЕсли;
	
КонецПроцедуры

Функция СгенерироватьSSCC(GLNПродавца, НомерУпаковки)
	
	SSCC = "";
	
	РезервнаяСхемаSSCC = (ПолучитьКонстантуEDI("РезервнаяСхемаSSCC")=Истина);
	
	ПрефиксПродавца = Лев(GLNПродавца,?(РезервнаяСхемаSSCC,12,9));
	ДлинаSSCCКода 	= 17;
	СуммаЧетных 	= 0;
	СуммаНечетных 	= 0;
	
	//добиваем нулями номер паллеты
	КоличествоНулей 	= ?(РезервнаяСхемаSSCC,4,7) - СтрДлина(НомерУпаковки);
	СтрокаНомерУпаковки = "";
	Для К = 1 По КоличествоНулей Цикл
		СтрокаНомерУпаковки = СтрокаНомерУпаковки + "0";	
	КонецЦикла;
	СтрокаНомерУпаковки = СтрокаНомерУпаковки + НомерУпаковки;
	
	Шаблон = "1" + ПрефиксПродавца + СтрокаНомерУпаковки;
	
	//вычисляем контрольный разряд
	КопияШаблон = Шаблон;
	Для Позиция = 1 По ДлинаSSCCКода Цикл
		Фрагмент   	= Число( Прав( КопияШаблон, 1 ) );
		КопияШаблон = Лев( Шаблон, ДлинаSSCCКода - Позиция);
		Если (Позиция/2) = Цел(Позиция/2) Тогда
			СуммаНечетных = СуммаНечетных + Фрагмент;
		Иначе	
			СуммаЧетных = СуммаЧетных + Фрагмент;
		КонецЕсли;			
	КонецЦикла;
	КонтрольнаяСумма = Строка(СуммаЧетных*3 + СуммаНечетных);
	КонтрольныйРазряд = 10 - Число( Прав( КонтрольнаяСумма,1 ) );
	Если КонтрольныйРазряд = 10 Тогда
		КонтрольныйРазряд = 0;
	КонецЕсли;	
	SSCC = Шаблон + Строка(КонтрольныйРазряд);
	
	Возврат SSCC;	
	
КонецФункции

Функция ВалидироватьSSCCКод(SSCC)
	
	Результат = Истина;
	
	//количество символов = 18
	Если СтрДлина(SSCC) <> 18 Тогда
		Результат = Ложь;
		Сообщить("Ошибка! Неверная длина SSCC-кода.");
	КонецЕсли;
	
	//корректная часть gln и контрольное число
	GLNПродавца 	= Сообщение.ПродавецEDI.GLN;
	НомерУпаковки 	= Формат(Число(Сред(SSCC,11,7)),"ЧРГ=; ЧГ=");
	ВерныйSSCC 		= СгенерироватьSSCC(GLNПродавца, НомерУпаковки);
	Если Не ВерныйSSCC = SSCC Тогда
		Результат = Ложь;
		Сообщить("Ошибка! Введенный SSCC-код неверный.");	
	КонецЕсли;
	
	//повторяющийся в рамках данной отгрузки
	Для Каждого Упаковка Из ТранспортныеУпаковки.Строки Цикл	
		Если ЗначениеЗаполнено(Упаковка.ТипУпаковки) Тогда
			Если СокрЛП(Упаковка.SSCC) = СокрЛП(SSCC) Тогда
				Результат = Ложь;
				Сообщить("Ошибка! Введенный SSCC-код уже используется в текущей отгрузке.");
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

Процедура ДобавитьСобытиеТребующееРегистрации(ОписаниеСобытия)
	
	Если Не ЗначениеЗаполнено(ТаблицаСобытияТребующиеРегистрации) Тогда
		ТаблицаСобытияТребующиеРегистрации = Новый ТаблицаЗначений;
		ТаблицаСобытияТребующиеРегистрации.Колонки.Добавить("ОписаниеСобытия");
	КонецЕсли;
	
	НовоеСобытие = ТаблицаСобытияТребующиеРегистрации.Добавить();
	НовоеСобытие.ОписаниеСобытия = ОписаниеСобытия;
	
КонецПроцедуры

Процедура ОтразитьСобытияВЖурналеРегистрации()
	
	Если Не ЗначениеЗаполнено(ТаблицаСобытияТребующиеРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаСобытияТребующиеРегистрации Цикл
		ЗаписьЖурналаРегистрации("КонтурEDI.РедактированиеSSCCКода", УровеньЖурналаРегистрации.Информация, , , Строка.ОписаниеСобытия);	
	КонецЦикла;
	
КонецПроцедуры

