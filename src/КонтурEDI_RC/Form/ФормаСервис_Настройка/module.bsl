Перем ТекущаяВкладка Экспорт;
Перем МыТорговаяСеть, МыПоставщик;


Процедура КнопкаВыполнитьНажатие(Кнопка=Неопределено) Экспорт

	Если ЗаписатьНастройки() Тогда
	
		Оповестить("КонтурEDI_НастроитьФорму");
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Функция СобратьСтруктуруНастроек()
	
	СтруктураНастроек=Новый Структура;
	
	Если ИспользуетсяПрокси И (
		Не ЗначениеЗаполнено(ЛогинПрокси)
		И Не ЗначениеЗаполнено(ПарольПрокси)
		И Не ЗначениеЗаполнено(СерверПрокси)
		И Не ЗначениеЗаполнено(ПортПрокси)
		И Не ЗначениеЗаполнено(ТипПрокси)
		) Тогда
		Предупреждение("Не указан ни один из параметров прокси сервера!");
	КонецЕсли;	
	
	Если ПереключательFTP="Каталог" Тогда
		СтруктураНастроек.Вставить("АдресКаталогаОбменаEDI",	АдресКаталогаОбменаEDI);
	КонецЕсли;
	
	ИменаНастроек = EDI_РазложитьСтрокуВМассивСлов(
	"Сервер
	|Порт
	|ЛогинПрокси
	|ПарольПрокси
	|СерверПрокси
	|ПортПрокси
	|ПассивныйРежим
	|ИспользуетсяПрокси
	|ТипПрокси
	//|ПроводитьЗагруженныеЗаказы   //перенесено в партнера
	|ГрузополучательИзЮрФизЛицаТД
	|ОтклонятьОтветыНаЗаказСДобавленнымТоваром
	|ОткрыватьФормуОбратногоЗаказаПередЗаписью
	|ПроводитьЗагруженныеОбратныеЗаказы
	|ПодключаемыйМодульИспользоватьОтладку
	|ПодключаемыйМодульСобытиеОтладки
	|ПодключаемыйМодульСообщатьОСобытиях
	|"//параметры, названия которых совпадают с именами реквизитов формы
    +
	"СоздаваемыйДокументРСчет
	|ПодключаемыйМодульСсылка"//то, что раньше преобразовывали к гуидам (в типовых объектах)
	//+
	//"НеПоказыватьПровестиЗаказ
	//|НеПоказыватьСоздатьРеализацию"//то, что кажется уже устаревшим
	);
	Для Каждого ИмяНастройки Из ИменаНастроек Цикл
		СтруктураНастроек.Вставить(ИмяНастройки,ЭтаФорма[ИмяНастройки]);
	КонецЦикла;
	
	СтруктураНастроек.Вставить("ПротоколОбмена_КонтурEDI", 	ПереключательFTP);
	
	СтруктураНастроек.Вставить("СоздаваемыйДокументСклад",		СоздаваемыйДокументСклад);//???
	
	//СтруктураНастроек.Вставить("НеПоказыватьФормуВходящегоЗаказа", НеПоказыватьФормуВходящегоЗаказаПриЗагрузке); //перенесено в партнера
	
	СтруктураНастроек.Вставить("ЛогинСлужебныйДиадок",		ЛогинСлужебныйДиадок);//???
	СтруктураНастроек.Вставить("ПарольСлужебныйДиадок",		ПарольСлужебныйДиадок);//???
	
	Если ЗначениеЗаполнено(СоздаваемыйДокументРСчет) Тогда
		СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетВид",	СокрЛП(СоздаваемыйДокументРСчет.Метаданные().Имя));//а можно и просто ссылкой уже, пожалуй. Это для типовых объектов актуально было.
		СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетGUID", 	СокрЛП(СоздаваемыйДокументРСчет.УникальныйИдентификатор()));
	Иначе
		СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетВид",	Неопределено);
		СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетGUID", 	Неопределено);
	КонецЕсли;
		
	Если ИспользоватьПодключаемыйМодуль Тогда
		ПодключаемыйМодульТип = МестонахождениеПодключаемогоМодуля;
	Иначе
		ПодключаемыйМодульТип = "Нет";
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ПодключаемыйМодульТип",  ПодключаемыйМодульТип);
	СтруктураНастроек.Вставить("ПодключаемыйМодульПуть",	ПодключаемыйМодульПуть);
	Если ЗначениеЗаполнено(ПодключаемыйМодульСсылка) Тогда
		СтруктураНастроек.Вставить("ПодключаемыйМодульВидСправочника",	СокрЛП(ПодключаемыйМодульСсылка.Метаданные().Имя));
		СтруктураНастроек.Вставить("ПодключаемыйМодульGUID",			СокрЛП(ПодключаемыйМодульСсылка.УникальныйИдентификатор()));
	КонецЕсли;
	СтруктураНастроек.Вставить("ПодключаемыйМодульИмяОбработки", 		ПодключаемыйМодульИмяОбработки);
			
	СтруктураНастроек.Вставить("ШаблонЦепочкиДокументов_Поставщик",		ИмяШаблонаПоставщик);
	СтруктураНастроек.Вставить("ШаблонЦепочкиДокументов_Покупатель",	ИмяШаблонаПокупатель);
	
	ДобавитьСтрокиДереваВСтруктуру(ДеревоНастроек,СтруктураНастроек);
	ДобавитьСтрокиДереваВСтруктуру(ДеревоНастроекДокументовСообщений,СтруктураНастроек);//конструкторские настройки
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ЗаписатьНастройки()
	
	Если ПереключательFTP = "DialMail" Тогда
		Если Не ПроверитьВозможностьРаботыСКомпонентойDialMail() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНастроек = СобратьСтруктуруНастроек();
	
	Если НЕ ПроверитьКорректностьОбщихНастроекПередЗаписью(СтруктураНастроек) Тогда
		Возврат Ложь;//не закрывать
	КонецЕсли;	
	
	Для Каждого Эл из СтруктураНастроек Цикл
		УстановитьКонстантуEDI(Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	ФинализироватьПодключаемыеМодули();
	ИнициализироватьПодключаемыеМодули();
	
	Возврат Истина;//успешно
	
КонецФункции

Процедура ИспользуетсяПроксиПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПрокси();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// Автотесты
	Если ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда

		Параметры = ПараметрыАвтотестирования.Настройки.НастройкиМодуля;
		Если ЗначениеЗаполнено(Параметры) Тогда
			Для Каждого Стр ИЗ Параметры Цикл
				Если Стр.Настройка = "СоздаваемыйДокументСклад" Тогда
					ТекЗначение = Справочники.Склады.НайтиПоКоду(Стр.Значение);
				Иначе
					ТекЗначение = Стр.Значение;
				КонецЕсли;
				УстановитьКонстантуEDI(Стр.Настройка, ТекЗначение);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьМетаданныеХраненияРасширений = ПроверитьНаличиеМетаданныхХраненияРасширений();
	Если ЕстьМетаданныеХраненияРасширений И НастройкиМодуля.МыПоставщик = Истина Тогда
		ЗаполнитьИнформациюОРасширениях();
		ПозиционироватьНаСтрокуРасширения();
	Иначе
		ЗаблокироватьПанельРасширений();
	КонецЕсли;
	
	Сервер				= ПолучитьКонстантуEDI("Сервер");
	Порт				= ПолучитьКонстантуEDI("Порт");
	ЛогинПрокси			= ПолучитьКонстантуEDI("ЛогинПрокси");
	ПарольПрокси		= ПолучитьКонстантуEDI("ПарольПрокси");
	ЛогинFTP			= ПолучитьКонстантуEDI("ЛогинFTP");
	ПарольFTP			= ПолучитьКонстантуEDI("ПарольFTP");
	ПассивныйРежим	   	= ПолучитьКонстантуEDI("ПассивныйРежим");
	ИспользуетсяПрокси	= ПолучитьКонстантуEDI("ИспользуетсяПрокси");
	
	ЭлементыФормы.ТипПрокси.СписокВыбора = ПолучитьСписокТиповПрокси();
	ЭлементыФормы.ТипПрокси.Значение = ПолучитьКонстантуEDI("ТипПрокси");
	
	СерверПрокси		= ПолучитьКонстантуEDI("СерверПрокси");
	ПортПрокси			= ПолучитьКонстантуEDI("ПортПрокси");
	
	ЛогинСлужебныйДиадок	= ПолучитьКонстантуEDI("ЛогинСлужебныйДиадок");
	ПарольСлужебныйДиадок	= ПолучитьКонстантуEDI("ПарольСлужебныйДиадок");
	
	
	ПереключательFTP = ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI");
	
	Если Не ЗначениеЗаполнено(ПереключательFTP) Тогда
		
		//старые варианты хранения настроек
		
		ВариантРаботыDialMail = ПолучитьКонстантуEDI("ИспользоватьDialMail"); 
		ВариантРаботыФТПКаталог=ПолучитьКонстантуEDI("ЗагрузкаИзКаталогов");
		
		Если ВариантРаботыDialMail = Истина Тогда
			ПереключательFTP = "DialMail";
		ИначеЕсли ВариантРаботыФТПКаталог = Неопределено или ВариантРаботыФТПКаталог = Ложь Тогда
			ПереключательFTP = "FTP";
		Иначе
			ПереключательFTP = "Каталог";
		КонецЕсли;
		
	КонецЕсли;	
	
	Попытка
		АдресКаталогаОбменаEDI			= ПолучитьКонстантуEDI("АдресКаталогаОбменаEDI");
	Исключение;
	КонецПопытки;
	
	УстановитьВидимостьФТПКаталог();
	УстановитьВидимостьЭлементовПрокси();
	
	МыПоставщик											= НастройкиМодуля.МыПоставщик;
	МыТорговаяСеть										= НастройкиМодуля.МыТорговаяСеть;
	ГрузополучательИзЮрФизЛицаТД						= ПолучитьКонстантуEDI("ГрузополучательИзЮрФизЛицаТД");
	СоздаваемыйДокументСклад							= ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
	//НеПоказыватьФормуВходящегоЗаказаПриЗагрузке			= ПолучитьКонстантуEDI("НеПоказыватьФормуВходящегоЗаказа");
	ОтклонятьОтветыНаЗаказСДобавленнымТоваром			= ПолучитьКонстантуEDI("ОтклонятьОтветыНаЗаказСДобавленнымТоваром");
	
	НеПоказыватьПровестиЗаказ							= ПолучитьКонстантуEDI("НеПоказыватьПровестиЗаказ");
	НеПоказыватьСоздатьРеализацию						= ПолучитьКонстантуEDI("НеПоказыватьСоздатьРеализацию");
	ОткрыватьФормуОбратногоЗаказаПередЗаписью			= ПолучитьКонстантуEDI("ОткрыватьФормуОбратногоЗаказаПередЗаписью");
	ПроводитьЗагруженныеОбратныеЗаказы					= ПолучитьКонстантуEDI("ПроводитьЗагруженныеОбратныеЗаказы");
	
	//ПроводитьЗагруженныеЗаказы							= ПолучитьКонстантуEDI("ПроводитьЗагруженныеЗаказы");
	СоздаваемыйДокументРСчет							= ПолучитьСсылкуНаРСчет();
	
	ПодключаемыйМодульТип			= ПолучитьКонстантуEDI("ПодключаемыйМодульТип");
	ПодключаемыйМодульПуть			= ПолучитьКонстантуEDI("ПодключаемыйМодульПуть");
	ПодключаемыйМодульСсылка		= ПолучитьСсылкуНаПодключаемыйМодуль();
	
	СписокОбработокКонфигурации = Новый СписокЗначений;
	Для Каждого Обработка Из Метаданные.Обработки Цикл
		СписокОбработокКонфигурации.Добавить(Обработка.Имя);
	КонецЦикла;
	ЭлементыФормы.ПодключаемыйМодульИмяОбработки.СписокВыбора = СписокОбработокКонфигурации;
	ПодключаемыйМодульИмяОбработки  = ПолучитьКонстантуEDI("ПодключаемыйМодульИмяОбработки");
	ЭлементыФормы.ПодключаемыйМодульИмяОбработки.Значение = ПодключаемыйМодульИмяОбработки;
	
	ПодключаемыйМодульИспользоватьОтладку 			= (ПолучитьКонстантуEDI("ПодключаемыйМодульИспользоватьОтладку") = Истина);	
	ПодключаемыйМодульНаименованиеСобытияОтладки	= ПолучитьКонстантуEDI("ПодключаемыйМодульСобытиеОтладки");
	ПодключаемыйМодульСообщатьОСобытиях				= (ПолучитьКонстантуEDI("ПодключаемыйМодульСообщатьОСобытиях") = Истина);
	
	СписокСобытий = Новый СписокЗначений();
	СписокСобытий.Добавить(ПодключаемыйМодульНаименованиеСобытияОтладки,ПодключаемыйМодульНаименованиеСобытияОтладки);
	ЭлементыФормы.ПодключаемыйМодульСобытиеОтладки.СписокВыбора = СписокСобытий;
	ЭлементыФормы.ПодключаемыйМодульСобытиеОтладки.Значение 	= ПодключаемыйМодульНаименованиеСобытияОтладки;
	
	Если ЗначениеЗаполнено(ПодключаемыйМодульТип) И НЕ ПодключаемыйМодульТип = "Нет" Тогда
		
		ИспользоватьПодключаемыйМодуль = Истина;
		
		МестонахождениеПодключаемогоМодуля = ПодключаемыйМодульТип;
		
	Иначе
		
		МестонахождениеПодключаемогоМодуля = "Диск";
		
	КонецЕсли;
	
	УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
	
	Если Порт = 0 Тогда
		Порт = 21;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПрокси();
	
	УправлениеВидимостью();
	
	Попытка
		УстановитьТипПоля1С("СоздаваемыйДокументСклад","ТочкаДоставкиСвоя");
		
		Если НЕ ИмяКонфигурации1С = "Розница" Тогда
			УстановитьТипПоля1С("СоздаваемыйДокументРСчет","РасчетныйСчет");
		КонецЕсли;	
	Исключение
		Предупреждение("Не удалость определить типы справочника РасчетныеСчета и Склады.
		|Возможно, модуль запускается на нестандартной конфигурации.
		|Выполните настройку типов справочников и документов в подключаемом модуле.");
	КонецПопытки;	
	
	ПриОткрытииФормы(ЭтаФорма);
	
	Если ЗначениеЗаполнено(ТекущаяВкладка) Тогда
		ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы[ТекущаяВкладка];
	КонецЕсли;
	
	ЭлементыФормы.ПодсказкаСостояниеДобавленныхОбъектов.Заголовок = "Объекты добавлены в конфигурацию";
	ЭлементыФормы.ПодсказкаСостояниеДобавленныхОбъектов.ЦветТекста = WebЦвета.ТемноЗеленый;
	ЭлементыФормы.НадписьПодсказкаОбновление.Видимость=ложь;
	
	МассивНастроек=ПолучитьМассивДополнительныхНастроекИзМакета("Общие");
	СтруктураНастроек=Новый Структура;
	Для Каждого Эл Из МассивНастроек Цикл
		СтруктураНастроек.Вставить(Эл,ПолучитьКонстантуEDI(Эл));
	КонецЦикла;	
	СоздатьДеревоНастроек(ДеревоНастроек,"Общие",СтруктураНастроек);
	
	Если ПараметрыПользователяEDI.РольПользователяEDI <> "ПолныеПрава" Тогда
		//на этой странице важные настройки, которые не следует менять без понимания происходящего
		ЭлементыФормы.ПанельНастроек.Страницы.ДокументыСообщения.Видимость = Ложь;
	КонецЕсли;
	
	Если МыПоставщик=Истина Тогда
		ИмяШаблонаПоставщик = ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик");
		ЗаполнитьДеревоНастроекДокументовСообщений(ДеревоНастроекДокументовСообщений,"Поставщик");
	Иначе
		ЭлементыФормы.НадписьИмяШаблонаПоставщик.Видимость = Ложь;
		ЭлементыФормы.ИмяШаблонаПоставщик.Видимость = Ложь;
		ЭлементыФормы.НадписьПоказатьШаблонПоставщика.Видимость = Ложь;
	КонецЕсли;	
	
	Если МыТорговаяСеть=Истина Тогда
		ИмяШаблонаПокупатель = ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель");
		ЗаполнитьДеревоНастроекДокументовСообщений(ДеревоНастроекДокументовСообщений,"Покупатель");
	Иначе
		ЭлементыФормы.НадписьИмяШаблонаПокупатель.Видимость = Ложь;
		ЭлементыФормы.ИмяШаблонаПокупатель.Видимость = Ложь;
		ЭлементыФормы.НадписьПоказатьШаблонПокупателя.Видимость = Ложь;
	КонецЕсли;	
	
	//Если МыПоставщик<>Истина
	//	И МыТорговаяСеть<>Истина Тогда
	//	ЭлементыФормы.ПанельШаблоныЦепочекДокументов.ТекущаяСтраница = ЭлементыФормы.ПанельШаблоныЦепочекДокументов.Страницы.Подсказка;
	//КонецЕсли;	
	
	// Автотесты
	Если ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		
		ПодключитьОбработчикОжидания("ЗаписатьНастройкиАвтотестирования",0.1,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ОбновитьКэшИсполняемогоКодаРасширений();	
	
КонецПроцедуры

Процедура ЗаписатьНастройкиАвтотестирования()
	
	КнопкаВыполнитьНажатие();
	
КонецПроцедуры

Процедура УстановитьТипПоля1С(ИмяНаФорме,Тип1С)
	
	ПолеФормы	= ЭлементыФормы[ИмяНаФорме];
	ТипПоля		= ПолучитьТипЗначенияОбъекта(Тип1С);
			
	Если ТипПоля = Неопределено Тогда
		
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
		
	Иначе	
		
		ЭлементыФормы[ИмяНаФорме].ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма[ИмяНаФорме]) Тогда
			
			ЭтаФорма[ИмяНаФорме] = ПолучитьПустуюСсылкуОбъекта(Тип1С);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостью()
	
	//ЭлементыФормы.ПанельНастроек.Страницы.СтраницаПоставщик.Видимость	= МыПоставщик;
	//ЭлементыФормы.ПанельEDI.Страницы.СтраницаТочкиДоставки.Видимость= МыТорговаяСеть;
	
	Если ЗначениеЗаполнено(МыПоставщик) И ЗначениеЗаполнено(МыТорговаяСеть) Тогда
		
		ЭлементыФормы.ПанельНастроек.Страницы.СтраницаЗаказыПокупателей.Видимость = МыПоставщик;
//		ЭлементыФормы.ПанельНастроек.Страницы.СтраницаРеализацииТоваров.Видимость = МыПоставщик;
		ЭлементыФормы.ПанельНастроек.Страницы.СтраницаЗаказыПоставщикам.Видимость = МыТорговаяСеть;
		
	КонецЕсли;
	
	ПриУстановкеПризнакаИспользованияСвоегоСправочникаТочекДоставок();
	
	
КонецПроцедуры

Функция мПодключитьсяКFTP()
	
	ЛогинFTP	= ПараметрыПользователяEDI.Логин;
	ПарольFTP	= ПараметрыПользователяEDI.Пароль;
	
	//оставляем на случай, если FTPСоединение научится корректно работать с прокси
	//Если ИспользуетсяПрокси Тогда
	//	ПроксиСервер = Новый ИнтернетПрокси();
	//	ПроксиСервер.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
	//	ПроксиСервер.Пользователь = ЛогинПрокси;
	//	ПроксиСервер.Пароль = ПарольПрокси;
	//	ПроксиСервер.Установить("ftp",СерверПрокси,ПортПрокси);  
	//	Попытка
	//		ФТПСоединение = Новый FTPСоединение(СокрЛП(Сервер), Порт, СокрЛП(ЛогинFTP), СокрЛП(ПарольFTP), ПроксиСервер, ПассивныйРежим);
	//	Исключение
	//		Возврат Ложь;
	//	КонецПопытки;
	//Иначе
	//КонецЕсли;
	
	Если ПереключательFTP = "DialMail" 
		//или ИспользоватьDialMail  - для чего?
		Тогда
		
		Попытка
			Если КомпонентаDialMailПодключена <> Истина Тогда
				КомпонентаDialMailПодключена = ПодключитьВнешнююКомпоненту_КонтурEDI("AddIn.FTP");
			КонецЕсли;
			Если КомпонентаDialMailПодключена Тогда
				ТестовоеСоединение = Новый("Addin.FTP");
				Если ИспользуетсяПрокси Тогда
					ТестовоеСоединение.ХостПрокси 			 = СокрЛП(СерверПрокси);
					ТестовоеСоединение.ПортПрокси 			 = СокрЛП(ПортПрокси);
					ТестовоеСоединение.ИмяПользователяПрокси = СокрЛП(ЛогинПрокси);
					ТестовоеСоединение.ПарольПрокси 		 = СокрЛП(ПарольПрокси);
					ТестовоеСоединение.ИспользоватьПрокси	 = ТипПрокси;
				КонецЕсли;
				Если ТестовоеСоединение.Подключиться(СокрЛП(Сервер), Порт, СокрЛП(ЛогинFTP), СокрЛП(ПарольFTP), ПассивныйРежим) = 1 Тогда
					ТестовоеСоединение.Отключиться();
					ТестовоеСоединение = Неопределено;
				Иначе
					Возврат Ложь;	
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
				
	Иначе
	
		Попытка
			ФТПСоединение = Новый FTPСоединение(СокрЛП(Сервер), Порт, СокрЛП(ЛогинFTP), СокрЛП(ПарольFTP), , ПассивныйРежим);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Процедура КнопкаПроверитьFTPНажатие(Элемент)
	
	//Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
	//	ВывестиПредупреждение_КонтурEDI("Не выбрана учетная запись!");
	//КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Сервер) Тогда	
		ВывестиПредупреждение_КонтурEDI("Не указан FTP сервер!");
		Возврат;
	КонецЕсли;	
	
	Если мПодключитьсяКFTP() Тогда
		
		ВывестиПредупреждение_КонтурEDI("Проверка подключения прошла успешно!");
		
		ЭлементыФормы.КартинкаПроверкиПодключения.Видимость	= Истина;
		ЭлементыФормы.КартинкаПроверкиПодключения.Картинка	= ПолучитьКартинкуEDI("ЭлементФормы",	"КартинкаГалочка");
		
	Иначе
		
		ВывестиПредупреждение_КонтурEDI("Не удалось подключиться к EDI с вашим логином и паролем!
		|Возможные причины:
		| - проверьте еще раз свой логин и пароль
		| - возможно с вашего компьютера нет прямого доступа к нашему серверу
		|
		|Обратитесь к вашему системному администраторы для проверки настроек подключения.");
		
		ЭлементыФормы.КартинкаПроверкиПодключения.Видимость	= Истина;
		ЭлементыФормы.КартинкаПроверкиПодключения.Картинка	= ПолучитьКартинкуEDI("ЭлементФормы",	"КартинкаПредупреждение");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля()
	
	ЭлементыФормы.РамкаПодключаемыйМодульРасположение.Доступность = ИспользоватьПодключаемыйМодуль;
	ЭлементыФормы.РамкаОтладкаПМ.Доступность 					  = ИспользоватьПодключаемыйМодуль;
	
	ЭлементыФормы.ПереключательПуть.Доступность = ИспользоватьПодключаемыйМодуль;
	
	ЭлементыФормы.НадписьПодключаемыйМодульПуть.Доступность = ИспользоватьПодключаемыйМодуль;
	ЭлементыФормы.ПодключаемыйМодульПуть.Доступность		= ИспользоватьПодключаемыйМодуль;
	
	ЭлементыФормы.ПереключательВ1С.Доступность	= ИспользоватьПодключаемыйМодуль;
	
	ЭлементыФормы.НадписьПодключаемыйСсылка.Доступность		= ИспользоватьПодключаемыйМодуль;
	ЭлементыФормы.ПодключаемыйМодульСсылка.Доступность		= ИспользоватьПодключаемыйМодуль;

	ЭлементыФормы.ПодключаемыйМодульСсылка.АвтоОтметкаНезаполненного		= Ложь;
	
	ЭлементыФормы.ПереключательВСоставеКонфигурации.Доступность = ИспользоватьПодключаемыйМодуль;
	ЭлементыФормы.НадписьПодключаемыйИмяОбработки.Доступность = ИспользоватьПодключаемыйМодуль;
	ЭлементыФормы.ПодключаемыйМодульИмяОбработки.Доступность = ИспользоватьПодключаемыйМодуль;
	
	ЭлементыФормы.ПодключаемыйМодульИспользоватьОтладку.Доступность = ИспользоватьПодключаемыйМодуль;
	ЭлементыФормы.НадписьСобытиеОтладки.Доступность = ИспользоватьПодключаемыйМодуль;
	ЭлементыФормы.ПодключаемыйМодульСобытиеОтладки.Доступность 	= ИспользоватьПодключаемыйМодуль;
	ЭлементыФормы.ПодключаемыйМодульСообщатьОСобытиях.Доступность = ИспользоватьПодключаемыйМодуль;
			
	Если ИспользоватьПодключаемыйМодуль Тогда
		
		Если МестонахождениеПодключаемогоМодуля = "Диск" Тогда
			
			ЭлементыФормы.НадписьПодключаемыйСсылка.Доступность		= Ложь;
			ЭлементыФормы.ПодключаемыйМодульСсылка.Доступность		= Ложь;
			
			ЭлементыФормы.ПодключаемыйМодульПуть.АвтоОтметкаНезаполненного		= Истина;
			ЭлементыФормы.ПодключаемыйМодульСсылка.ОтметкаНезаполненного		= Ложь;
			ЭлементыФормы.ПодключаемыйМодульИмяОбработки.ОтметкаНезаполненного	= Ложь;
			
			ЭлементыФормы.НадписьПодключаемыйИмяОбработки.Доступность = Ложь;
			ЭлементыФормы.ПодключаемыйМодульИмяОбработки.Доступность = Ложь;
			
			ЭлементыФормы.ПодключаемыйМодульИспользоватьОтладку.Доступность = Истина;
						
		ИначеЕсли МестонахождениеПодключаемогоМодуля = "1С" Тогда
			
			ЭлементыФормы.НадписьПодключаемыйМодульПуть.Доступность = Ложь;
			ЭлементыФормы.ПодключаемыйМодульПуть.Доступность		= Ложь;

			ЭлементыФормы.ПодключаемыйМодульСсылка.АвтоОтметкаНезаполненного	= Истина;
			ЭлементыФормы.ПодключаемыйМодульПуть.ОтметкаНезаполненного			= Ложь;
			ЭлементыФормы.ПодключаемыйМодульИмяОбработки.ОтметкаНезаполненного	= Ложь;
			
			ЭлементыФормы.НадписьПодключаемыйИмяОбработки.Доступность = Ложь;
			ЭлементыФормы.ПодключаемыйМодульИмяОбработки.Доступность = Ложь;
			
			ЭлементыФормы.ПодключаемыйМодульИспользоватьОтладку.Доступность = Ложь;
						
		ИначеЕсли МестонахождениеПодключаемогоМодуля = "Конфигурация" Тогда	
			
			ЭлементыФормы.НадписьПодключаемыйСсылка.Доступность		= Ложь;
			ЭлементыФормы.ПодключаемыйМодульСсылка.Доступность		= Ложь;
			ЭлементыФормы.НадписьПодключаемыйМодульПуть.Доступность = Ложь;
						
			ЭлементыФормы.ПодключаемыйМодульПуть.Доступность		= Ложь;
			
			ЭлементыФормы.ПодключаемыйМодульИмяОбработки.АвтоОтметкаНезаполненного	= Истина;
			ЭлементыФормы.ПодключаемыйМодульСсылка.ОтметкаНезаполненного			= Ложь;
			ЭлементыФормы.ПодключаемыйМодульПуть.ОтметкаНезаполненного				= Ложь;
			
			ЭлементыФормы.ПодключаемыйМодульИспользоватьОтладку.Доступность = Ложь;
						
		КонецЕсли;
			
	КонецЕсли;
	
	Если ПодключаемыйМодульИспользоватьОтладку И ИспользоватьПодключаемыйМодуль Тогда
		ЭлементыФормы.НадписьСобытиеОтладки.Доступность 			  = Истина;
		ЭлементыФормы.ПодключаемыйМодульСобытиеОтладки.Доступность 	  = Истина;
	Иначе
		ЭлементыФормы.НадписьСобытиеОтладки.Доступность 			  = Ложь;
		ЭлементыФормы.ПодключаемыйМодульСобытиеОтладки.Доступность 	  = Ложь;
	КонецЕсли;
	Если ИспользоватьПодключаемыйМодуль Тогда
		ЭлементыФормы.ПодключаемыйМодульСообщатьОСобытиях.Доступность = Истина;
	Иначе
		ЭлементыФормы.ПодключаемыйМодульСообщатьОСобытиях.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ИспользоватьПодключаемыйМодульПриИзменении(Элемент)
	
	УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
	
КонецПроцедуры

Процедура ПереключательПутьПриИзменении(Элемент)
	
	УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
	
КонецПроцедуры

Процедура КнопкаСохранитьФайлОбновленияНажатие(Элемент)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок		= "Укажите файл, в который нужно сохранить обновление для вашей конфигурации";
	ДиалогВыбора.Фильтр			= "Файл конфигурации 1С (*.cf)|*.cf";      
	ДиалогВыбора.ПолноеИмяФайла = "КонтурEDI_upd.cf";
	
	Если ДиалогВыбора.Выбрать() Тогда      
		
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ПолучитьМакет("ОбновлениеДляХраненияДанных").Записать(ПутьКФайлу);
	
КонецПроцедуры

Процедура КартинкаСправкаНажатие(Элемент)

	Текст = "";
	
	// Заказы покупателей
	
	Если Элемент.Имя = "КартинкаСправкаСоздаватьДокументПоЗаказу" Тогда
		
		Текст  = "На основании входящего заказа будет создаваться документ выбранного типа.";

	ИначеЕсли Элемент.Имя = "КартинкаСправкаЗначенияПоУмолчанию" Тогда
		
		Текст  = "Данные значения будут подставляться автоматически во все создаваемые документы.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаИспользованиеЮрФизЛицаТД" Тогда
		
		Текст = "Если каждая точка доставки торговой сети заведена как отдельный контрагент,
		|то можно указать какое поле в заказе будет заполняться: Контрагент или Грузополучатель.
		|
		|Соответствие точки доставки и котрагента настраивается в карточке торговой сети.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаАвтоматическиСоздаватьЗаказы" Тогда
		
		Текст = "!Настройка перенесена в настройки партнера! Заказ, у которого проставлены все соответствия, будет создан в 1С автоматически.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаПроводитьЗаказы" Тогда
		
		Текст  = "!Настройка перенесена в настройки партнера! Созданный заказ 1С будет проведен автоматически.
		|
		|При одновременном использовании с настройкой выше заказы будут создаваться и проводиться полностью автоматически.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаНеПоказыватьСоздатьРеализацию" Тогда
		
		Текст  = "После завершения обработки входящего заказа кнопка для создания документа реализации не будет отображаться.";
		                                                
	// Реализации товаров			
				
	ИначеЕсли Элемент.Имя = "КартинкаСправкаНеПоказыватьНакладныеБезRECADV" Тогда
		
		Текст  = "Документы реализации товаров не будут отображаться в общем списке, 
		|пока не будут получены соответствующие уведомления о приемке (RECADV).
		|
		|Актуально при работе по короткой цепочке RECADV+INVOIC";
		
	//подключаемый модуль	
	
	ИначеЕсли Элемент.Имя = "КартинкаПроПодключаемыйМодуль" Тогда
		
		Текст  = "Подключаемый модуль - это внешняя обработка, в которой вы можете описать особенности 
		|программной логики своей конфигурации и ""подключить"" ее к нашей обработке.
		|
		|Это упростит процесс обновления модуля EDI.Контур на новые версии.";
		
	// Прочие настройки	
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаРазрешитьКодыGTINНеПоСтандарту" Тогда
		
		Текст  = "Штрихкоды товаров не будут проверяться на соответствие стандарту EAN13.
		|
		|Необходимо включать при наличии весового товара.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаЗагружатьСообщенияПоТД" Тогда
		
		Текст = "Входящие сообщения будут загружаться только для заранее выбранных точек доставки.
		|
		|Для их выбора необходимо зайти в карточку каждой точки доставки и отметить настройку ""Загружать сообщения от данной точки доставки"".";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаЗагружатьСообщенияПоНастроеннымСетям" Тогда
		
		Текст = "Входящие сообщения будут загружаться только для настроенных сетей.
		|
		|Для их выбора необходимо добавить сеть в список сетей, заполнить GLN и установить галочку ""Торговая сеть""";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаСвойСпраовчникТД" Тогда
		
		Текст = "Выбор собственного справочника точек доставки для сопоставления с точками торговой сети.
		|
		|Соотвествие точки доставки и элемента справочника настраивается в карточке точки доставки.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаНеСоздаватьЗаказыБезТД" Тогда
		
		Текст = "Заказы не будут создаваться для тех точек доставки, которым не сопоставлен элемент из справочника собственных точек.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаНеСоздаватьЗаказыБезЮФЛицаТД" Тогда
		
		Текст = "Заказы не будут создаваться для тех точек доставки, в которых не выбрано юр./физ. лицо.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаРеквизитыПартнераЗаполняютсяНаСервереПоGLN" Тогда
		
		Текст = "В исходящих сообщениях все реквизиты ваших партнеров (ИНН, адреса и т.д) будут подставляться на сервере, а не браться из данных 1С.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаРеквизитыКомпанииЗаполняютсяНаСервереПоGLN" Тогда
		
		Текст = "В исходящих сообщениях все реквизиты вашей компании (ИНН, адреса и т.д) будут подставляться на сервере, а не браться из данных 1С.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаОбновлениеДанныхВСписке" Тогда
		
		Текст = "При работе с документом его статус и требуемое действие меняются.
		|
		|Обновление всего списка позволит видеть сразу все изменения в документах. Полезно при многопользовательской работе.
		|Обновление только строки документа, который обрабатывается, повысит скорость работы модуля.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаОткрыватьЗаказПередСозданием" Тогда
		
		Текст  = "Перед созданием документа по входящему заказу будет открыта 
		|форма незаписанного документа для редактирования.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаНеПоказыватьПровестиЗаказ" Тогда
		
		Текст  = "Станет возможно подтверждать непроведенные заказы.";
		
	ИначеЕсли Элемент.Имя = "КартинкаСправкаОграничениеДнейВыводаДокументовВСписке" Тогда
		
		Текст = "Если указать параметр, то во всех списках документов будет автоматически устанавливаться отбор по датам.
		|Если этот параметр не указан, то отборы устанавливаться не будут.";
		
	КонецЕсли;
	
	ВывестиПредупреждение_КонтурEDI(Текст,,"EDI.Контур: Справка");
	
КонецПроцедуры

Процедура ПриУстановкеПризнакаИспользованияСвоегоСправочникаТочекДоставок()
	

КонецПроцедуры

Процедура АдресКаталогаОбменаEDIНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
    ДиалогОткрытияФайла.Заголовок = "Выберите каталог взамен FTP";
    Если ДиалогОткрытияФайла.Выбрать() Тогда
         АдресКаталогаОбменаEDI = ДиалогОткрытияФайла.каталог;
	 КонецЕсли;
	АдресКаталогаОбменаEDIПриИзменении(Элемент); 
КонецПроцедуры

Процедура ПодключаемыйМодульПутьНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Режим = РежимДиалогаВыбораФайла.Открытие;
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "Внешняя обработка 1С:Предприятия 8 (*.epf)|*.epf";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
    ДиалогОткрытияФайла.Заголовок = "Выберите файл подключаемого модуля";
    Если ДиалогОткрытияФайла.Выбрать() Тогда
         ПодключаемыйМодульПуть = ДиалогОткрытияФайла.ПолноеИмяФайла;
    КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимостьФТПКаталог()
	
	Если ПереключательFTP="Каталог" Тогда
		ЭлементыФормы.ПанельФТП_Каталог.ТекущаяСтраница=ЭлементыФормы.ПанельФТП_Каталог.Страницы.СтраницаКаталог;
		ЭлементыФормы.Сервер.Видимость=Ложь;
		ЭлементыФормы.НадписьСервер.Видимость=Ложь;
		ЭлементыФормы.Порт.Видимость=Ложь;
		ЭлементыФормы.НадписьПорт.Видимость=Ложь;
		//ЭлементыФормы.ПассивныйРежим.Видимость=Ложь;
		ЭлементыФормы.АдресКаталогаОбменаEDI.Видимость=Истина;
		УстановитьВидимостьЭлементовПрокси();
	ИначеЕсли ПереключательFTP="DialMail" Тогда
	    ЭлементыФормы.ПанельФТП_Каталог.ТекущаяСтраница=ЭлементыФормы.ПанельФТП_Каталог.Страницы.СтраницаФТП;
		ЭлементыФормы.Сервер.Видимость=Истина;
		ЭлементыФормы.НадписьСервер.Видимость=Истина;
		ЭлементыФормы.Порт.Видимость=Истина;
		ЭлементыФормы.НадписьПорт.Видимость=Истина;
		//ЭлементыФормы.ПассивныйРежим.Видимость=Истина;
		ЭлементыФормы.АдресКаталогаОбменаEDI.Видимость=Ложь;
		УстановитьВидимостьЭлементовПрокси();
	ИначеЕсли ПереключательFTP = "API" Тогда
		ЭлементыФормы.ПанельФТП_Каталог.ТекущаяСтраница=ЭлементыФормы.ПанельФТП_Каталог.Страницы.СтраницаAPI;
		ЭлементыФормы.Сервер.Видимость=Ложь;
		ЭлементыФормы.НадписьСервер.Видимость=Ложь;
		ЭлементыФормы.Порт.Видимость=Ложь;
		ЭлементыФормы.НадписьПорт.Видимость=Ложь;
		//ЭлементыФормы.ПассивныйРежим.Видимость=Ложь;
		ЭлементыФормы.АдресКаталогаОбменаEDI.Видимость=Ложь;
	Иначе //FTP
		ЭлементыФормы.ПанельФТП_Каталог.ТекущаяСтраница=ЭлементыФормы.ПанельФТП_Каталог.Страницы.СтраницаФТП;
		ЭлементыФормы.Сервер.Видимость=Истина;
		ЭлементыФормы.НадписьСервер.Видимость=Истина;
		ЭлементыФормы.Порт.Видимость=Истина;
		ЭлементыФормы.НадписьПорт.Видимость=Истина;
		//ЭлементыФормы.ПассивныйРежим.Видимость=Истина;
		ЭлементыФормы.АдресКаталогаОбменаEDI.Видимость=Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура АдресКаталогаОбменаEDIПриИзменении(Элемент)
	Если СокрЛП(АдресКаталогаОбменаEDI)="" тогда
		Предупреждение("Каталог не выбран");
		Возврат;
	КонецЕсли;
	Если СтрДлина(АдресКаталогаОбменаEDI)>50 тогда
		Предупреждение("Слишком длинное наименование каталога (максимум 50 символов)");
		АдресКаталогаОбменаEDI="";
		Возврат;
	КонецЕсли;
	Попытка
	й=EDIПроверитьСуществованиеКаталога(АдресКаталогаОбменаEDI);
	//вложенные каталоги
	й=EDIПроверитьСуществованиеКаталога(АдресКаталогаОбменаEDI+"\Inbox");
	й=EDIПроверитьСуществованиеКаталога(АдресКаталогаОбменаEDI+"\Outbox");
	й=EDIПроверитьСуществованиеКаталога(АдресКаталогаОбменаEDI+"\Reports");
	й=EDIПроверитьСуществованиеКаталога(АдресКаталогаОбменаEDI+"\Settings");
	й=EDIПроверитьСуществованиеКаталога(АдресКаталогаОбменаEDI+"\PARTIN");
исключение
	Предупреждение("Указан ошибочный каталог, проверьте путь и/или права на указанный каталог.");
	КонецПопытки;
КонецПроцедуры

Процедура ПереключательFTPПриИзменении(Элемент)
	
	УстановитьВидимостьФТПКаталог();
	УстановитьВидимостьЭлементовПрокси();
	
КонецПроцедуры

//процедуры обслуживания дерева настроек

Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекСтрока=ЭлементыФормы.ДеревоНастроек.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Список) Тогда
		СтандартнаяОбработка=Ложь;
		СЗ=ЗначениеИзСтрокиВнутр(ТекСтрока.Список);
		Выб=СЗ.ВыбратьЭлемент();
		Если Выб<>Неопределено Тогда
			ТекСтрока.Значение=Выб.Значение;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ДеревоНастроекПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Шрифт=Новый Шрифт(,,Истина);//жирный
	КонецЕсли;	
	
	ПолеДоступно = Истина;
	
	Если ПолеДоступно = Истина Тогда
		Если ТипЗнч(ДанныеСтроки.Значение)=Тип("Булево") Тогда
			ОформлениеСтроки.Ячейки.Значение.УстановитьФлажок(ДанныеСтроки.Значение);
			ОформлениеСтроки.Ячейки.Значение.УстановитьТекст("");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоНастроекВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка.Имя="Значение" 
		И ВыбраннаяСтрока.ЭтоГруппа Тогда
		СтандартнаяОбработка=Ложь;
	КонецЕсли;	
КонецПроцедуры

Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущаяКолонка.Имя="Значение" 
		И Элемент.ТекущаяСтрока.ЭтоГруппа Тогда
		Отказ=Истина;
	КонецЕсли;	
	
	Если Элемент.ТекущаяКолонка.Имя="Значение" 
		И ТипЗнч(Элемент.ТекущаяСтрока.Значение)=Тип("Булево") Тогда
		Элемент.ТекущаяСтрока.Значение = Не Элемент.ТекущаяСтрока.Значение;
		Отказ=Истина;
	КонецЕсли;
	
	//фиксированные списки редактировать не дадим
	Если Элемент.ТекущаяКолонка.Имя="Значение" 
		И Элемент.ТекущаяСтрока.ОписаниеТипа=Новый ОписаниеТипов("СписокЗначений") Тогда
		Отказ=Истина;
		ДеревоНастроекЗначениеНачалоВыбора(Элемент,Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоНастроекПриИзмененииФлажка(Элемент, Колонка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.Значение)=Тип("Булево") Тогда
		ТекДанные.Значение = Не ТекДанные.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаСохранитьШаблонПМНажатие(Элемент)
	ДФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДФ.Фильтр="epf|*.epf";
	ДФ.ПолноеИмяФайла="КонтурEDI_ПодключаемыйМодуль_Шаблон.epf";
	Если ДФ.Выбрать() Тогда
		ПолучитьМакет("ШаблонПодключаемогоМодуля").Записать(ДФ.ПолноеИмяФайла);
		Предупреждение("Шаблон успешно сохранен во внешнем файле");
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьСписокТиповПрокси()
	
	ТипыПрокси = Новый СписокЗначений;
	
	//ТипыПрокси.Добавить(0, "Нет прокси - прямое соединение");
	ТипыПрокси.Добавить(1, "Socks5");
	ТипыПрокси.Добавить(2, "Socks4/4a");
	ТипыПрокси.Добавить(3, "HTTP-Tunnel");
	
	Возврат ТипыПрокси;
	
КонецФункции

Функция ПроверитьВозможностьРаботыСКомпонентойDialMail()
	
	//проверим наличие и актуальность установленной компоненты
	ПользовательОтказалсяОтЗагрузкиКомпоненты = Ложь;
	КомпонентаDialMailУстановлена = Ложь;
	КомпонентаDialMailАктуальна = Ложь;
	Попытка
		Если КомпонентаDialMailПодключена <> Истина Тогда
			КомпонентаDialMailПодключена = ПодключитьВнешнююКомпоненту_КонтурEDI("AddIn.FTP");
		КонецЕсли;
		Если КомпонентаDialMailПодключена = Истина Тогда
			ТестовоеСоединение = Новый("Addin.FTP");
			КомпонентаDialMailУстановлена = Истина;
			ИнформацияОВерсии = ТестовоеСоединение.objectversionstr;
			Если Не Найти(ИнформацияОВерсии, "2.7.6") = 0 или Не Найти(ИнформацияОВерсии, "2.7.7") = 0 Тогда				
				КомпонентаDialMailАктуальна = Истина;
			КонецЕсли;
			ТестовоеСоединение = Неопределено;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//выводим вопрос пользователю о скачивании компоненты DialMail
	Если Не КомпонентаDialMailУстановлена или Не КомпонентаDialMailАктуальна Тогда
		КомпонентаDialMailЗагружена = Ложь;
		Попытка
			ФайлКомпоненты = Новый Файл(КаталогВременныхФайлов()+"DialMail.dll");
			КомпонентаDialMailЗагружена = ФайлКомпоненты.Существует();
		Исключение
		КонецПопытки;
		Если Не КомпонентаDialMailЗагружена Тогда
			ТекстВопроса = 	"Для работы в режиме ""FTP (компонента DialMail)"" необходима компонента DialMail.dll.
							|
							|В ходе проверки установлено, что компонента не установлена в системе
							|или установлена ее неактуальная версия (ниже версии 2.7.6).
							|
							|Загрузить компоненту для последующей установки?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
			//пользователь отказался качать компоненту
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ВывестиПредупреждение_КонтурEDI("Вы отказались от загрузки компоненты DialMail.
									  |
									  |Вы можете попытаться самостоятельно скачать компоненту с сайта www.dialmail.ru
									  |или обратиться к системному администратору.");
									  
				ПереключательFTP = 1;					  
				УстановитьВидимостьФТПКаталог();
				УстановитьВидимостьЭлементовПрокси();
				ПользовательОтказалсяОтЗагрузкиКомпоненты = Истина;
			КонецЕсли;
			//пользователь согласился качать компоненту
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Состояние("Загрузка компоненты DialMail.dll...");
				Если Не	ПолучитьФайлHTTP(
					ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
					"/1c/support/DialMail.dll",
					КаталогВременныхФайлов()+"DialMail.dll") 
				Тогда
					ВывестиПредупреждение_КонтурEDI(	"Не удалось загрузить компоненту DialMail.dll с сервера.
											|Вы можете попытаться самостоятельно скачать компоненту с сайта www.dialmail.ru
											|или обратиться к системному администратору.");
					ПереключательFTP = "FTP";					  
					УстановитьВидимостьФТПКаталог();
					УстановитьВидимостьЭлементовПрокси();
				Иначе
					КомпонентаDialMailЗагружена = Истина;
	            КонецЕсли;
				Состояние("");
			КонецЕсли;
		КонецЕсли;
		Если КомпонентаDialMailЗагружена Тогда
			ТекстВопроса =  "Компонента DialMail.dll расположена в каталоге текущего пользователя:
							|" + КаталогВременныхФайлов()+"DialMail.dll" + "
							|Установить компоненту?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
			//пользователь отказался попытаться установить компоненту
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ВывестиПредупреждение_КонтурEDI(	"Компонента DialMail.dll не установлена. Попробуйте запустить 1С от имени администратора.
										|
										|Компонента загружена и находится по адресу:
										|" + КаталогВременныхФайлов() + "DialMail.dll" + "
										|
										|Для установки компоненты вручную можно обратиться к системному администратору.");
				ПереключательFTP = "FTP";
				УстановитьВидимостьФТПКаталог();
				УстановитьВидимостьЭлементовПрокси();
			КонецЕсли;
					
			//пользователь согласился попытаться установить компоненту
			Если Ответ = КодВозвратаДиалога.Да Тогда
				КомандаУстановкиНеВызвалаИсключение = Ложь;
				Попытка
					ФайлРегистратор = Новый ТекстовыйДокумент;
					ФайлРегистратор.ДобавитьСтроку("regsvr32 """ + КаталогВременныхФайлов() + "DialMail.dll""");
					//ФайлРегистратор.ДобавитьСтроку("pause");
					ФайлРегистратор.Записать(КаталогВременныхФайлов() + "Registration DialMail.bat", "cp866");
					КомандаСистемы("""" + КаталогВременныхФайлов() + "Registration DialMail.bat""" + " /run /tn cmd_admin");
					КомандаУстановкиНеВызвалаИсключение = Истина;
				Исключение
				КонецПопытки;
				Если КомандаУстановкиНеВызвалаИсключение Тогда
					//проверяем зарегистрировалась ли компонента
					Попытка
						Если КомпонентаDialMailПодключена <> Истина Тогда
							КомпонентаDialMailПодключена = ПодключитьВнешнююКомпоненту_КонтурEDI("AddIn.FTP");
						КонецЕсли;
						Если КомпонентаDialMailПодключена Тогда
							ТестовоеСоединение = Новый("Addin.FTP");
							КомпонентаDialMailУстановлена = Истина;
							ИнформацияОВерсии = ТестовоеСоединение.objectversionstr;
							Если Не Найти(ИнформацияОВерсии, "2.7.6") = 0 или Не Найти(ИнформацияОВерсии, "2.7.7") = 0 Тогда				
								КомпонентаDialMailАктуальна = Истина;	
							КонецЕсли;
							ТестовоеСоединение = Неопределено;
						КонецЕсли;
					Исключение
					КонецПопытки;
					
					Если КомпонентаDialMailУстановлена и КомпонентаDialMailАктуальна Тогда
						
						ВывестиПредупреждение_КонтурEDI("Компонента DialMail.dll успешно зарегистрирована.");
						
					ИначеЕсли Не КомпонентаDialMailУстановлена Тогда
						
						СообщениеОЯрлыкеРегистрации = "";
						Попытка
							//создаем ярлык регистрации
							WshShell   	= New COMObject("WScript.Shell");
							oShellLink 	= WshShell.CreateShortcut(WshShell.SpecialFolders().Item("Desktop") + "\Registration component DialMail.lnk"); 
							oShellLink.TargetPath 		= """" + КаталогВременныхФайлов() + "Registration DialMail.bat" + """";
							oShellLink.WindowStyle 		= 1;
							oShellLink.WorkingDirectory = КаталогВременныхФайлов(); 
							oShellLink.Save();
							СообщениеОЯрлыкеРегистрации = "
														  |На вашем рабочем столе создан ярлык ""Registration component DialMail"".
														  |С его помощью вы можете самостоятельно зарегистрировать компоненту.
														  |Попробуйте запустить его от имени администратора и снова установить
														  |режим обмена ""FTP (компенента DialMail)"".
														  |";
						Исключение
						КонецПопытки;
							
						ВывестиПредупреждение_КонтурEDI(	"Была предпринята попытка зарегистрировать компоненту DialMail.dll в системе.
												|Регистрация компоненты прошла неудачно.
												|
												|Компонента загружена и находится по адресу:
												|" + КаталогВременныхФайлов() + "DialMail.dll" + "
												|"+
												?(ЗначениеЗаполнено(СообщениеОЯрлыкеРегистрации),СообщениеОЯрлыкеРегистрации,"") + " 
												|Для установки компоненты вручную можно обратиться к системному администратору.");
						ПереключательFTP = "FTP";					  
						УстановитьВидимостьФТПКаталог();
						УстановитьВидимостьЭлементовПрокси();
																
					ИначеЕсли Не КомпонентаDialMailАктуальна Тогда
						
						ВывестиПредупреждение_КонтурEDI(	"Была предпринята попытка зарегистрировать компоненту DialMail.dll в системе.
												|В настоящее время зарегистрирована не актуальная версия компоненты.
												|
												|Актуальная версия компоненты загружена и находится по адресу:
												|" + КаталогВременныхФайлов() + "DialMail.dll" + "
												|
												|Для установки компоненты вручную можно обратиться к системному администратору.");
						ПереключательFTP = "FTP";					  
						УстановитьВидимостьФТПКаталог();
						УстановитьВидимостьЭлементовПрокси();
						
					КонецЕсли;
				Иначе
					ВывестиПредупреждение_КонтурEDI(	"Регистрация компоненты прошла неудачно. Попробуйте запустить 1С от имени администратора.
											|
											|Компонента загружена и находится по адресу:
											|" + КаталогВременныхФайлов() + "DialMail.dll" + "
											|
											|Для установки компоненты вручную можно обратиться к системному администратору.");
					ПереключательFTP = "FTP";					  
					УстановитьВидимостьФТПКаталог();
					УстановитьВидимостьЭлементовПрокси();
				КонецЕсли;						
			КонецЕсли;
		Иначе
			Если Не ПользовательОтказалсяОтЗагрузкиКомпоненты Тогда
				ВывестиПредупреждение_КонтурEDI(	"Не удалось загрузить компоненту DialMail.dll с сервера.
										|Вы можете попытаться самостоятельно скачать компоненту с сайта www.dialmail.ru
										|или обратиться к системному администратору.");
				ПереключательFTP = "FTP";					  
				УстановитьВидимостьФТПКаталог();
				УстановитьВидимостьЭлементовПрокси();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КомпонентаDialMailУстановлена и КомпонентаDialMailАктуальна;
	
КонецФункции

Процедура УстановитьВидимостьЭлементовПрокси()
	
	ВидимостьЭлементов = (ПереключательFTP = "DialMail" или ПереключательFTP = "API");
	
	ЭлементыФормы.НадписьУведомлениеПрокси.Видимость = Не ВидимостьЭлементов;
	ЭлементыФормы.ИспользуетсяПрокси.Видимость 		 = ВидимостьЭлементов;
	ВидимостьЭлементов2 = ВидимостьЭлементов И (ИспользуетсяПрокси = Истина);
	
	//Если ВидимостьЭлементов И ИспользуетсяПрокси = Истина Тогда
		
		ЭлементыФормы.РамкаПараметрыПрокси.Видимость = ВидимостьЭлементов2;		
		ЭлементыФормы.НадписьСерверПрокси.Видимость  = ВидимостьЭлементов2;
		ЭлементыФормы.СерверПрокси.Видимость 		 = ВидимостьЭлементов2;
		ЭлементыФормы.НадписьПортПрокси.Видимость 	 = ВидимостьЭлементов2;
		ЭлементыФормы.ПортПрокси.Видимость 		 	 = ВидимостьЭлементов2;
		ЭлементыФормы.НадписьЛогинПрокси.Видимость 	 = ВидимостьЭлементов2;
		ЭлементыФормы.ЛогинПрокси.Видимость 		 = ВидимостьЭлементов2;
		ЭлементыФормы.НадписьПарольПрокси.Видимость  = ВидимостьЭлементов2;
		ЭлементыФормы.ПарольПрокси.Видимость 		 = ВидимостьЭлементов2;
		ЭлементыФормы.НадписьТипПрокси.Видимость	 = ВидимостьЭлементов2;
		ЭлементыФормы.ТипПрокси.Видимость			 = ВидимостьЭлементов2;
		
	//КонецЕсли;
	
КонецПроцедуры
      
Процедура ПодключаемыйМодульИмяОбработкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если СтрДлина(ВыбранноеЗначение) > 255 Тогда
		ВывестиПредупреждение_КонтурEDI("Длина имени обработки не может быть более 255 символов.");
		ВыбранноеЗначение = "";
	КонецЕсли;
	
КонецПроцедуры


Процедура КнопкаНастроитьХранениеДанныхНажатие(Элемент)
	ФРМ = ПолучитьФорму("ФормаСервис_НастройкаХраненияДанных");
	ФРМ.ОткрытьМодально();
	Если ФРМ.РезультатВыполнения = "ок" Тогда
		Закрыть();
		//Оповестить("КонтурEDI_ЗакрытьМодуль");
		ВладелецФормы.Закрыть();//закроем основное окно модуля
	КонецЕсли;	
	
КонецПроцедуры


Процедура НадписьПроверитьДоступКAPIНажатие(Элемент)
	ЗапуститьПриложение("https://edi-api.kontur.ru");
КонецПроцедуры

Процедура ПодключаемыйМодульИспользоватьОтладкуПриИзменении(Элемент)

	УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
		
КонецПроцедуры

Процедура ЗаполинтьИменаСобытийПМ()
	
	//проверим, что в текущий момент у нас проинициализирован подключаемый модуль
	ПодключаемыйМодульТип = ПолучитьКонстантуEDI("ПодключаемыйМодульТип");
	Если ПодключаемыйМодульТип = "Нет" Тогда
		Предупреждение("Подключаемый модуль не инициализирован.
					   |
					   |Для выбора события отладки переоткройте настройки.");
		Возврат;	
	КонецЕсли;
	
	//проверим, что основной модуль из внешней обработки
	ПутьМодуль = "";
	Попытка
		ПутьМодуль = ЭтотОбъект.ИспользуемоеИмяФайла;
	Исключение
	КонецПопытки;
	Если Не ЗначениеЗаполнено(ПутьМодуль) Тогда
		Предупреждение("Отладка невозможна! Для отладки необходимо использовать модуль, как файл внешней обработки.");
		Возврат;
	КонецЕсли;
	
	//проверим отсутствие атрибута файла "Только чтение"
	Файл = Новый Файл(ПутьМодуль);
	Если Файл.ПолучитьТолькоЧтение() Тогда
		Предупреждение("Поиск событий невозможен! У файла модуля установлен атрибут ""Только чтение"".
					   |
					   |Снимите это ограничение и перезапустите модуль.");
		Файл = Неопределено;
		Возврат;	
	КонецЕсли;
	
	//проверим, как подключен ПМ (нужен только файловый)
	Если Не (ПодключаемыйМодульИспользоватьОтладку = Истина И
			 ИспользоватьПодключаемыйМодуль = Истина И
			 МестонахождениеПодключаемогоМодуля = "Диск" И
			 Не Найти(ПодключаемыйМодульПуть, ".epf") = 0) Тогда
		Предупреждение("Отладка невозможна. Для отладки необходимо использовать подключаемый модуль, как файл внешней обработки.");
		Возврат;
	КонецЕсли;
	
	//проверим есть ли в ПМ компоненты по разбору *.epf
	КомпонентыUnpackДобавлены = Ложь;
	Если Не ВнешнийМодуль = Неопределено Тогда
		Попытка
			Если Не ВнешнийМодуль.Метаданные().Макеты.Найти("V8Unpack")		= Неопределено И 
				 Не ВнешнийМодуль.Метаданные().Макеты.Найти("zlib1")		= Неопределено И 
				 Не ВнешнийМодуль.Метаданные().Формы.Найти("Конструктор")	= Неопределено Тогда
				КомпонентыUnpackДобавлены = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если Не КомпонентыUnpackДобавлены Тогда
		Предупреждение("Подключаемый модуль не актуален! Попробуйте обновить подключаемый модуль.");
		Возврат;
	КонецЕсли;
	
	//пробуем распаковать модуль средствами ПМ
	ПутьКонтейнер = "";
	Попытка
		ПутьКонтейнер = РаспаковатьОбработку(ПутьМодуль);
	Исключение
	КонецПопытки;
	Если Не ЗначениеЗаполнено(ПутьКонтейнер) Тогда
		Предупреждение("Не удалось подготовить модуль к сканированию событий! Попробуйте обновить подключаемый модуль.");
		Возврат;	
	КонецЕсли;
	
	//пробуем найти имена всех событий, по которым происходит вызов ПМ
	СписокСобытий = Новый СписокЗначений;
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Наименование");
	МассивФайлов = Новый Массив;
	
	МодульОбъекта = Неопределено;
	МодулиФорм = Неопределено;
	
	Если КонтурEDI_ВерсияПлатформы()="81" Тогда
		//в 8.1 только 2 параметра функции
		Выполнить(
		"МодульОбъекта = НайтиФайлы(ПутьКонтейнер, ""text"");
		|МодулиФорм	  = НайтиФайлы(ПутьКонтейнер, ""module"");"
		);
	Иначе//8.2 и выше
		Выполнить(
		"МодульОбъекта = НайтиФайлы(ПутьКонтейнер, ""text"", 	Истина);
		|МодулиФорм	  = НайтиФайлы(ПутьКонтейнер, ""module"", Истина);"
		);
	КонецЕсли;
	
	Если МодульОбъекта.Количество() = 1 Тогда
		МассивФайлов.Добавить(МодульОбъекта[0]);		
	КонецЕсли;
	Для Каждого Элемент Из МодулиФорм Цикл
		МассивФайлов.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из МассивФайлов Цикл
		ТекстовыйФайл = Новый ТекстовыйДокумент;
		ТекстовыйФайл.Прочитать(Элемент.ПолноеИмя);
		КоличествоСтрок = ТекстовыйФайл.КоличествоСтрок();
		Для К = 1 По КоличествоСтрок Цикл
			ТекСтрока = ТекстовыйФайл.ПолучитьСтроку(К);
			НомерСимволаВызова = Найти(ТекСтрока, "ОбработкаСобытияПодключаемогоМодуля(""");
			НомерКомментария   = Найти(ТекСтрока, "//");
			Если Не НомерКомментария = 0 И НомерКомментария < НомерСимволаВызова Тогда
				Продолжить;
			КонецЕсли;				
			Если Не НомерСимволаВызова = 0 Тогда
				СтрокаВызоваПМ = Прав(ТекСтрока, СтрДлина(ТекСтрока)-НомерСимволаВызова-36);
				СтрокаВызоваПМ = Лев(СтрокаВызоваПМ, Найти(СтрокаВызоваПМ,"""")-1);
				Если ЗначениеЗаполнено(СтрокаВызоваПМ) Тогда
					НовоеСобытие = ТаблицаСобытий.Добавить();
					НовоеСобытие.Наименование = СтрокаВызоваПМ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТаблицаСобытий.Свернуть("Наименование");
	ТаблицаСобытий.Сортировать("Наименование");
	Для Каждого Строка Из ТаблицаСобытий Цикл
		СписокСобытий.Добавить(Строка.Наименование);		
	КонецЦикла;
		
	ЭлементыФормы.ПодключаемыйМодульСобытиеОтладки.СписокВыбора = СписокСобытий;
	
	ОчиститьКаталогРаспаковки(КаталогВременныхФайлов()+"unpack\");
	
КонецПроцедуры

Функция РаспаковатьОбработку(ПолноеИмяФайла, ПодкаталогОбработки = "KonturEDI")
	
	Файл = Новый Файл(ПолноеИмяФайла);
	ИмяФайла = Файл.Имя;
	Файл = Неопределено;
	
	//копируем основной модуль во временную папку
	ПапкаРазбораМодуля 	= КаталогВременныхФайлов() + "unpack\";
	Попытка
		СоздатьКаталог( Лев(ПапкаРазбораМодуля,СтрДлина(ПапкаРазбораМодуля)-1) );
	Исключение
		_Ошибка = ОписаниеОшибки();
		Предупреждение("Не удалось создать корневую папку распаковки модулей: " + _Ошибка);
		Возврат "";
	КонецПопытки;
		
	ПутьРазбираемогоОсновногоМодуля = ПапкаРазбораМодуля + ИмяФайла;
	Попытка
		КопироватьФайл(ПолноеИмяФайла, ПутьРазбираемогоОсновногоМодуля);
	Исключение
		_Ошибка = ОписаниеОшибки();
		Предупреждение("Не удалось разобрать основной модуль по причине: " + _Ошибка);
		Возврат "";	
	КонецПопытки;
	
	//копируем компоненту во временную папку
	ПутьКомпоненты = ПапкаРазбораМодуля + "V8Unpack.exe";
	ПутьБиблиотеки = ПапкаРазбораМодуля + "zlib1.dll";
	ВнешнийМодуль.ПолучитьМакет("V8Unpack").Записать(ПутьКомпоненты);
	ВнешнийМодуль.ПолучитьМакет("zlib1").Записать(ПутьБиблиотеки);	
	
	ПапкаКонтейнер = ПапкаРазбораМодуля + ПодкаталогОбработки;
	СоздатьКаталог(ПапкаКонтейнер);
	
	Попытка
		ВыполнитьКомандуСистемы("V8Unpack.exe" + " -PARSE """ + ПутьРазбираемогоОсновногоМодуля + """ """ + ПапкаКонтейнер + """", ПапкаРазбораМодуля);
	Исключение
		ПапкаКонтейнер = "";
	КонецПопытки;
	
	Возврат ПапкаКонтейнер;	
	
КонецФункции

Процедура ВыполнитьКомандуСистемы(Команда, ТекущийКаталог) Экспорт
	
	Попытка
		WSH = Новый COMОбъект("Wscript.Shell");
		WindowStyle = 0;
		bWaitOnReturn = 1;
		WSH.Run(ТекущийКаталог + Команда, WindowStyle, bWaitOnReturn);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОчиститьКаталогРаспаковки(Каталог)
	
	Попытка
		УдалитьФайлы(Каталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодключаемыйМодульСобытиеОтладкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Значение = Элемент.Значение;	
	Если Элемент.СписокВыбора.Количество() <= 1 Тогда
		ЭлементыФормы.НадписьСобытиеОтладки.Заголовок = "Поиск событий...";
		ЗаполинтьИменаСобытийПМ();
		Если ЗначениеЗаполнено(Значение) Тогда
			Элемент.Значение = Значение;				
		КонецЕсли;
		ЭлементыФормы.НадписьСобытиеОтладки.Заголовок = "Событие отладки:";
	КонецЕсли;		
	
КонецПроцедуры

Процедура ИмяШаблонаПокупательНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Список = ПолучитьСписокДоступныхШаблоновЦепочки("Покупатель");
	Выбранный = Список.ВыбратьЭлемент();
	Если Выбранный<>Неопределено Тогда
		ИмяШаблонаПокупатель = Выбранный.Представление;
		ШаблонЗапросаЦепочкиДокументов_Покупатель = Выбранный.Значение;
		
		ТабСборки = ПолучитьТаблицуДляСборкиЗапросов("Покупатель");
		ЗаполнитьСоответствиеДокументовСообщений("Покупатель");
		
		ДеревоНастроекДокументовСообщений.Строки.Очистить();
		ЗаполнитьДеревоНастроекДокументовСообщений(ДеревоНастроекДокументовСообщений,"Покупатель");
		
		Для Каждого Стр Из ДеревоНастроекДокументовСообщений.Строки Цикл
			ЭлементыФормы.ДеревоНастроекДокументовСообщений.Развернуть(Стр,Истина);
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ИмяШаблонаПоставщикНачалоВыбора(Элемент, СтандартнаяОбработка)
	//будем парсить СКД
	СтандартнаяОбработка = Ложь;
	Список = ПолучитьСписокДоступныхШаблоновЦепочки("Поставщик");
	Выбранный = Список.ВыбратьЭлемент();
	Если Выбранный<>Неопределено Тогда
		
		ИмяШаблонаПоставщик = Выбранный.Представление;
		ШаблонЗапросаЦепочкиДокументов_Поставщик = Выбранный.Значение;
		
		ТабСборки = ПолучитьТаблицуДляСборкиЗапросов("Поставщик");
		ЗаполнитьСоответствиеДокументовСообщений("Поставщик");
		
		ДеревоНастроекДокументовСообщений.Строки.Очистить();
		ЗаполнитьДеревоНастроекДокументовСообщений(ДеревоНастроекДокументовСообщений,"Поставщик");
		
		Для Каждого Стр Из ДеревоНастроекДокументовСообщений.Строки Цикл
			ЭлементыФормы.ДеревоНастроекДокументовСообщений.Развернуть(Стр,Истина);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяШаблонаПоставщикОткрытие(Элемент, СтандартнаяОбработка)
	_РежимРаботы = "Поставщик";
	СтандартнаяОбработка = Ложь;
	СтрокиТаблицыТипов = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",_РежимРаботы));
	ТаблицаДляПросмотра = ТаблицаТипов.Скопировать(СтрокиТаблицыТипов,"ТипСообщения,ИмяТипа");
	ТаблицаДляПросмотра.Колонки.ТипСообщения.Заголовок = "Сообщение EDI";
	ТаблицаДляПросмотра.Колонки.ИмяТипа.Заголовок = "Тип в 1С";
	ТаблицаДляПросмотра.Колонки.Добавить("Направление");
	
	Для каждого Стр Из ТаблицаДляПросмотра Цикл
		Стр.Направление = ПолучитьНаправлениеСообщения(Стр.ТипСообщения,_РежимРаботы);
		Стр.ИмяТипа = СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","");
		Стр.ТипСообщения = Стр.ТипСообщения+" ("+ПеревестиТипСообщения(Стр.ТипСообщения)+")";
	КонецЦикла;
	
	ТаблицаДляПросмотра.ВыбратьСтроку();
КонецПроцедуры

Процедура НадписьПоказатьШаблонНажатие(Элемент)
	РежимРаботы = ?(Элемент.Имя = "НадписьПоказатьШаблонПоставщика","Поставщик","Покупатель");
	ТД = СформироватьМакетСоответствияДокументовСообщений(РежимРаботы);
	ИмяШаблона = ?(РежимРаботы = "Поставщик",ИмяШаблонаПоставщик,ИмяШаблонаПокупатель);
	ТД.Показать(РежимРаботы+": шаблон "+ИмяШаблона);
КонецПроцедуры

Функция СформироватьМакетСоответствияДокументовСообщений(РежимРаботы)
	
	СтрокиТаблицыТипов = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
	
	Макет = ПолучитьМакет("ПечатьСоответствияДокументовСообщений");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТД = Новый ТабличныйДокумент;
	ТД.Вывести(Макет.ПолучитьОбласть("Заголовок"));
	
	Для каждого Стр Из СтрокиТаблицыТипов Цикл
		ОбластьСтрока.Параметры.Направление = ПолучитьНаправлениеСообщения(Стр.ТипСообщения,РежимРаботы);
		ОбластьСтрока.Параметры.ТипДокумента1С = СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","");
		ОбластьСтрока.Параметры.ТипСообщения = Стр.ТипСообщения+" ("+ПеревестиТипСообщения(Стр.ТипСообщения)+")";
		
		ТД.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	ТД.ТолькоПросмотр = Истина;
	Возврат ТД;
	
КонецФункции

Процедура НадписьИсправитьСитуациюСШаблонамиНажатие(Элемент)
	ЭтаФорма.Закрыть();
	ПолучитьФорму("ФормаСтруктураКомпании_Элемент").ОткрытьМодально();
КонецПроцедуры

//расширения ----------------------------------------------------

//заполнение данных
Процедура ЗаполнитьИнформациюОРасширениях()
	
	ТаблицаДанныхОбУстановленныхРасширениях = ПолучитьДанныеОбУстановленныхРасширениях();
	
	СписокРасширения.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхОбУстановленныхРасширениях Цикл
		НоваяСтрокаСписка = СписокРасширения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСписка, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаблокироватьПанельРасширений()
	
	ЭлементыФормы.КоманднаяПанельРасширения.Видимость 				= Ложь;
	ЭлементыФормы.СписокРасширения.Видимость 						= Ложь;
	ЭлементыФормы.РазделительРасширения.Видимость 					= Ложь;
	ЭлементыФормы.ПодсказкаРасширения.Видимость 					= Ложь;
	
	ЭлементыФормы.НадписьРасширенияНедоступны.Видимость 			= Истина;


	ЭлементыФормы.НадписьРасширенияНедоступныПодсказка.Видимость 	= Истина;
	
	ЭлементыФормы.НадписьРасширенияНедоступны.Значение 				= "Для работы расширений обновите объекты Контур.EDI.";
	ЭлементыФормы.НадписьРасширенияНедоступныПодсказка.Значение 	= "Сохранить файл обновления на диск";
	
	Если НастройкиМодуля.МыПоставщик = Ложь Тогда
		ЭлементыФормы.НадписьРасширенияНедоступны.Значение 			= "Работа с расширениями недоступна.";
		ЭлементыФормы.НадписьРасширенияНедоступныПодсказка.Значение = "Данная версия модуля не поддерживает работу с расширениями
																	  |в режиме работы ""Торговая сеть"".";
	КонецЕсли;
	
КонецПроцедуры

//добавление из библиотеки / вручную
Процедура КоманднаяПанельРасширенияЗагрузитьРасширениеИзБиблиотеки(Кнопка)
	
	ПолучитьФорму("ФормаРасширения_Список").ОткрытьМодально();
	ЗаполнитьИнформациюОРасширениях();	
	
КонецПроцедуры

//создание нового расширения
Процедура КоманднаяПанельРасширенияДействие(Кнопка)
	
	СоздатьРасширение();		
	
КонецПроцедуры

Процедура СоздатьРасширение()
	
	ФормаРасширения = ПолучитьФорму("ФормаРасширения_Элемент");
	Идентификатор = ФормаРасширения.ОткрытьМодально();
	
	ЗаполнитьИнформациюОРасширениях();
	
	СтрокаНовогоРасширения = СписокРасширения.Найти(Идентификатор,"Идентификатор");
	Если Не СтрокаНовогоРасширения = Неопределено Тогда
		ЭлементыФормы.СписокРасширения.ТекущаяСтрока = СтрокаНовогоРасширения;
		ЭлементыФормы.СписокРасширения.ТекущаяКолонка = ЭлементыФормы.СписокРасширения.Колонки.Наименование;
	КонецЕсли;
	
КонецПроцедуры

//настройка заполнения
Процедура КоманднаяПанельРасширенияНастроитьРасширение(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.СписокРасширения.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	РезультатОткрытия = ОткрытьИнтерфейсНастройкиРасширения(ТекущаяСтрока.Ссылка,ТекущаяСтрока.Интерфейс);
	Если Не РезультатОткрытия.Успешно Тогда
		ВывестиПредупреждение_КонтурEDI(РезультатОткрытия.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ОткрытьИнтерфейсНастройкиРасширения(РасширениеСсылка, ЕстьИнтерфейс)
		
	РезультатОткрытия = Новый Структура("Успешно,ОписаниеОшибки",Ложь,"");
	
	//проверим, есть ли интерфейс
	Если Не ЕстьИнтерфейс Тогда
		РезультатОткрытия.Успешно = Истина;
		Возврат РезультатОткрытия;	
	КонецЕсли;
	
	//сохраняем файл обработки во временный файл
	РезультатСохранения = СохранитьИнтерфейсРасширения(РасширениеСсылка);
	Если Не РезультатСохранения.Успешно Тогда
		РезультатОткрытия.ОписаниеОшибки = РезультатСохранения.ОписаниеОшибки;
		Возврат РезультатОткрытия;
	КонецЕсли;
	ИмяФайла = РезультатСохранения.ИмяФайла;
	
	//инициализируем обработку
	РезультатИнициализации = ИнициализироватьИнтерфейсРасширения(ИмяФайла, РасширениеСсылка);
	Если Не РезультатИнициализации.Успешно Тогда
		РезультатОткрытия.ОписаниеОшибки = РезультатИнициализации.ОписаниеОшибки;
		Возврат РезультатОткрытия;
	КонецЕсли;
	Интерфейс = РезультатИнициализации.Интерфейс;	
	
	//открываем интерфейс
	Попытка
		ФормаИнтерфейса = Интерфейс.ПолучитьФорму("Интерфейс");
		ФормаИнтерфейса.ОткрытьМодально();
	Исключение
		РезультатОткрытия.ОписаниеОшибки = "Не удалось открыть интерфейс настройки расширения.";
	КонецПопытки;
	
	//очищаем переменную и удаляем файл
	ФинализироватьИнтерфейсРасширения(ИмяФайла, Интерфейс);
	
	Возврат РезультатОткрытия;
	
КонецФункции

//включение/отключение 
Функция ВключитьРасширение(РасширениеСсылка,Значение)
	
	РезультатВключения = УстановитьФлагИспользованиеРасширения(РасширениеСсылка,Значение);
	
	Возврат РезультатВключения;
	
КонецФункции

//изменение

Процедура КоманднаяПанельРасширенияИзменить(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.СписокРасширения.ТекущаяСтрока;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		Идентификатор = ТекущаяСтрока.Идентификатор;
		ОткрытьФормуРасширения(ТекущаяСтрока.Ссылка);
	КонецЕсли;
	
	ПозиционироватьНаСтрокуРасширения(Идентификатор);
	
КонецПроцедуры

Процедура СписокРасширенияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено или Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//запоминаем позицию курсора  
	Идентификатор = ВыбраннаяСтрока.Идентификатор;
   	
	Если Колонка.Имя = "Активация" Тогда
	//активируем/деактивируем расширения
		ВыбраннаяСтрока.Использование = Не ВыбраннаяСтрока.Использование;
		РезультатВключения = ВключитьРасширение(ВыбраннаяСтрока.Ссылка,ВыбраннаяСтрока.Использование);
		Если Не РезультатВключения.Успешно Тогда
			ВыбраннаяСтрока.Использование = Не ВыбраннаяСтрока.Использование;
			ВывестиПредупреждение_КонтурEDI("Не удалось " + ?(ВыбраннаяСтрока.Использование, "выключить", "включить") + " расширение: """ + РезультатВключения.ОписаниеОшибки + """.");
		КонецЕсли;
		ВыбраннаяСтрока.НеОткрыватьИнтерфейс = Истина; //не открываем интерфейс, когда позиционируемся на колонке наименование и срабатывает выбор строки
	ИначеЕсли Колонка.Имя = "Наименование" Тогда
	//изменяем настройку расширения
		Если ВыбраннаяСтрока.НеОткрыватьИнтерфейс Тогда
			ВыбраннаяСтрока.НеОткрыватьИнтерфейс = Ложь; //сбрасываем после вкл./откл. расширения
		Иначе
			РезультатОткрытия = ОткрытьИнтерфейсНастройкиРасширения(ВыбраннаяСтрока.Ссылка,ВыбраннаяСтрока.Интерфейс);
		КонецЕсли;
	КонецЕсли;
		
	//восстанавливаем позицию курсора
	ПозиционироватьНаСтрокуРасширения(Идентификатор);
	
КонецПроцедуры

Процедура ПозиционироватьНаСтрокуРасширения(Идентификатор = "")
	
	СтрокаПозиционирования = СписокРасширения.Найти(Идентификатор,"Идентификатор");
	Если Не СтрокаПозиционирования = Неопределено Тогда
		ЭлементыФормы.СписокРасширения.ТекущаяСтрока = СтрокаПозиционирования;
	КонецЕсли;
	ЭлементыФормы.СписокРасширения.ТекущаяКолонка = ЭлементыФормы.СписокРасширения.Колонки.Наименование;	
	
КонецПроцедуры

Процедура ОткрытьФормуРасширения(РасширениеСсылка)
	
	ФормаРасширения = ПолучитьФорму("ФормаРасширения_Элемент");
	ФормаРасширения.РасширениеСсылка = РасширениеСсылка;
	ФормаРасширения.ОткрытьМодально();
	
	ЗаполнитьИнформациюОРасширениях();	
	
КонецПроцедуры
	
//регулирование порядка выполнения

Процедура КоманднаяПанельРасширенияПереместитьВверхРасширения(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.СписокРасширения.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаИндекс = СписокРасширения.Индекс(ТекущаяСтрока);
	
	Идентификатор = ТекущаяСтрока.Идентификатор;
	
	ВерхняяСтрокаИндекс = ТекущаяСтрокаИндекс - 1;
	ВерхняяСтрока 		= СписокРасширения.Получить(ВерхняяСтрокаИндекс);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ВерхняяСтрока);
	МассивСтрок.Добавить(ТекущаяСтрока);
	
	РасширенияДляСменыПорядка = СписокРасширения.Скопировать(МассивСтрок,"Ссылка,ПорядокВыполнения");
		
	РезультатСменыПорядка = СменитьПорядокВыполненияРасширений(РасширенияДляСменыПорядка);
	
	Если РезультатСменыПорядка.Успешно Тогда
		ЗаполнитьИнформациюОРасширениях();
		ПозиционироватьНаСтрокуРасширения(Идентификатор);
	Иначе
		ВывестиПредупреждение_КонтурEDI("Не удалось изменить порядок выполнения расширений: """ + РезультатСменыПорядка.ОписаниеОшибки + """.");
	КонецЕсли;
		
КонецПроцедуры

Процедура КоманднаяПанельРасширенияПереместитьВнизРасширения(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.СписокРасширения.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ТекущаяСтрокаИндекс = СписокРасширения.Индекс(ТекущаяСтрока);
	
	Идентификатор = ТекущаяСтрока.Идентификатор;
	
	НижняяСтрокаИндекс  = ТекущаяСтрокаИндекс + 1;
	НижняяСтрока 		= СписокРасширения.Получить(НижняяСтрокаИндекс);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущаяСтрока);
	МассивСтрок.Добавить(НижняяСтрока);
	
	РасширенияДляСменыПорядка = СписокРасширения.Скопировать(МассивСтрок,"Ссылка,ПорядокВыполнения");
	
	РезультатСменыПорядка = СменитьПорядокВыполненияРасширений(РасширенияДляСменыПорядка);
	
	Если РезультатСменыПорядка.Успешно Тогда
		ЗаполнитьИнформациюОРасширениях();
		ПозиционироватьНаСтрокуРасширения(Идентификатор);
	Иначе
		ВывестиПредупреждение_КонтурEDI("Не удалось изменить порядок выполнения расширений: """ + РезультатСменыПорядка.ОписаниеОшибки + """.");
	КонецЕсли;		
	
КонецПроцедуры

//удаление 

Процедура КоманднаяПанельРасширенияУдалитьРасширение(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.СписокРасширения.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	    	
	Ответ = Вопрос("Вы действительно хотите удалить расширение """ + ТекущаяСтрока.Наименование + """?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удаление");
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РезультатУдаления = УдалитьРасширение(ТекущаяСтрока.Ссылка);
		Если Не РезультатУдаления.Успешно Тогда
			ВывестиПредупреждение_КонтурEDI(РезультатУдаления.ОписаниеОшибки);
		КонецЕсли;
		ЗаполнитьИнформациюОРасширениях();
	КонецЕсли;
	Возврат;
	
КонецПроцедуры

//интерфейсные обработчики

Процедура СписокРасширенияПриАктивизацииСтроки(Элемент)
		
	УстановитьДоступностьРасширения();		
	
КонецПроцедуры

Процедура УстановитьДоступностьРасширения()
	
	ТекущаяСтрока = ЭлементыФормы.СписокРасширения.ТекущаяСтрока;
	
	//перемещения
	Если ТекущаяСтрока = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ИзменитьРасширение.Доступность 			= Ложь;
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.УдалитьРасширение.Доступность 			= Ложь;
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.НастроитьРасширение.Доступность 			= Ложь;
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ПереместитьВверхРасширения.Доступность 	= Ложь;
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ПереместитьВнизРасширения.Доступность 	= Ложь;
		Возврат;
	Иначе
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ИзменитьРасширение.Доступность 			= Истина;
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.УдалитьРасширение.Доступность 			= Истина;
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.НастроитьРасширение.Доступность 			= Истина;
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ПереместитьВверхРасширения.Доступность 	= Истина;
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ПереместитьВнизРасширения.Доступность 	= Истина;
	КонецЕсли;
	ИндексТекущейСтроки = СписокРасширения.Индекс(ТекущаяСтрока);
	Если ИндексТекущейСтроки = 0 Тогда
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ПереместитьВверхРасширения.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ПереместитьВверхРасширения.Доступность = Истина;
	КонецЕсли;
	Если ИндексТекущейСтроки+1 = СписокРасширения.Количество() Тогда
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ПереместитьВнизРасширения.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.ПереместитьВнизРасширения.Доступность = Истина;
	КонецЕсли;
	
	//настрока
	Если ТекущаяСтрока.Интерфейс = Истина Тогда
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.НастроитьРасширение.Доступность = Истина;			
	Иначе
		ЭлементыФормы.КоманднаяПанельРасширения.Кнопки.НастроитьРасширение.Доступность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры
  
Процедура СписокРасширенияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура СписокРасширенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ВыбратьСтраницуПодключаемыхМодулей()
	
	ИмяАктивнойСтраницы = ЭлементыФормы.ПодключаемыеМодули.ТекущаяСтраница.Имя;
	
	Если ИмяАктивнойСтраницы = "Расширения" Тогда 
		ЭлементыФормы.ПодключаемыеМодули.ТекущаяСтраница 						= ЭлементыФормы.ПодключаемыеМодули.Страницы.ПодключаемыйМодуль;
		ЭлементыФормы.НадписьЗаголовокРасширения.Заголовок 						= "Подключаемый модуль";
		ЭлементыФормы.НадписьНастройкаПодключаемогоМодуляРасширений.Заголовок 	= "Вернуться к настройке расширений";
	ИначеЕсли ИмяАктивнойСтраницы = "ПодключаемыйМодуль" Тогда
		ЭлементыФормы.ПодключаемыеМодули.ТекущаяСтраница 						= ЭлементыФормы.ПодключаемыеМодули.Страницы.Расширения;	
		ЭлементыФормы.НадписьЗаголовокРасширения.Заголовок 						= "Расширения";
		ЭлементыФормы.НадписьНастройкаПодключаемогоМодуляРасширений.Заголовок 	= "Настройка подключаемого модуля";
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьНастройкаПодключаемогоМодуляРасширенийНажатие(Элемент)
	
	ВыбратьСтраницуПодключаемыхМодулей();	
	
КонецПроцедуры

Процедура СписокРасширенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Активация.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Активация.Выравнивание = ГоризонтальноеПоложение.Центр;
	
	Если ДанныеСтроки.Использование = Истина Тогда
		ОформлениеСтроки.Ячейки.Активация.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаСостояниеАктивно");
	ИначеЕсли ДанныеСтроки.Использование = Ложь Тогда
		ОформлениеСтроки.Ячейки.Активация.Картинка = ПолучитьКартинкуEDI("ЭлементФормы","КартинкаСостояниеНеактивно");
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокРасширенияПриАктивизацииЯчейки(Элемент)
	
	ТекущаяКолонка = ЭлементыФормы.СписокРасширения.ТекущаяКолонка;
	Если Не ТекущаяКолонка = Неопределено Тогда
		Если ТекущаяКолонка.Имя = "Активация" Тогда
			ТекущаяСтрока = ЭлементыФормы.СписокРасширения.ТекущаяСтрока;
			Если Не ТекущаяСтрока = Неопределено Тогда
				
				Идентификатор = ТекущаяСтрока.Идентификатор;
				
				ТекущаяСтрока.Использование = Не ТекущаяСтрока.Использование;
				РезультатВключения = ВключитьРасширение(ТекущаяСтрока.Ссылка,ТекущаяСтрока.Использование);
				Если Не РезультатВключения.Успешно Тогда
					ТекущаяСтрока.Использование = Не ТекущаяСтрока.Использование;
					ВывестиПредупреждение_КонтурEDI("Не удалось " + ?(ТекущаяСтрока.Использование, "выключить", "включить") + " расширение: """ + ТекущаяСтрока.ОписаниеОшибки + """.");
				КонецЕсли;
				ТекущаяСтрока.НеОткрыватьИнтерфейс = Истина; //не открываем интерфейс, когда позиционируемся на колонке наименование и срабатывает выбор строки
				
				ПозиционироватьНаСтрокуРасширения(Идентификатор);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьСохранитьФайлОбновленияНажатие(Элемент)
	
	ПредложитьОбновитьОбъектыМетаданныхКонтурEDI();
	
КонецПроцедуры


