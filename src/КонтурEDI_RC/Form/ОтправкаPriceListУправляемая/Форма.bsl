&НаСервере
Перем ОбработкаОбъект;

//инициализация -----------------------------------------------------------------------

&НаСервере
//инициализация модуля и его экспортных функций
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
		
		//Если Параметры.АдресХранилища<>"" Тогда
		//	ОбработкаОбъект = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища);
		//	Возврат ОбработкаОбъект;
		//КонецЕсли;
		//
		//Если ОбработкаОбъект=Неопределено Тогда
		//	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		//	ОбработкаОбъект.ИнициализироватьПодключаемыеМодули();
		//КонецЕсли;
		//
		//Параметры.АдресХранилища = ПоместитьВоВременноеХранилище(ОбработкаОбъект,УникальныйИдентификатор);
	
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция УФ_БазоваяЕИ(Номенклатура)
	Возврат МодульОбъекта().УФ_ПолучитьБазовуюЕдиницуИзмерения(Номенклатура);
КонецФункции

&НаСервере
Процедура УФ_СоставитьСписокЕдиницИзмерения(СписокВыбора,Номенклатура)
	МодульОбъекта().УФ_ЗаполнитьСписокЕдиницИзмерения(Номенклатура,СписокВыбора);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЗначения()
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		Сообщение = Новый Структура; //заглушка
	ИначеЕсли Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель=Сообщение.Партнер;
	КонецЕсли;
	
	ЦенаВключаетНДС = Истина;
	НЕОбязателенGTIN=
		 (ЗначениеЗаполнено(Получатель)
		И (МодульОбъекта().ПолучитьЗначениеСвойстваОбъектаEDI(Получатель,"РазрешитьПустыеКодыGTINВИсходящихСообщениях")=Истина)); //только в этом случае можно говорить о том можно отправить без GTIN
		
	ОбязателенGTIN = Не НЕОбязателенGTIN;
	
	Если ЗначениеЗаполнено(ТипЦен) И Не ТипЗнч(ТипЦен) = Тип("Тип") Тогда
		Если ТипЦен.Метаданные().Реквизиты.Найти("ЦенаВключаетНДС")<>Неопределено Тогда
			ЦенаВключаетНДС = ТипЦен.ЦенаВключаетНДС;					
		КонецЕсли;		
	КонецЕсли;
	
	ТолькоПросмотрСообщения = Ложь;
	
	Если ЗначениеЗаполнено(Параметры.СообщениеСсылка) Тогда
		Сообщение = МодульОбъекта().ПрочитатьСообщение(Параметры.СообщениеСсылка,,,);
		Если ЗначениеЗаполнено(Параметры.ПереотправляемоеСообщениеСсылка) Тогда 
			Элементы.ФормаОтправить.Заголовок = "Переотправить прайс-лист";
			Сообщение.Вставить("ПереотправляемоеСообщениеСсылка", Сообщение.СообщениеСсылка);
		иначе
			ТолькоПросмотрСообщения=истина;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомераСтрок()
	
	НомСтр = 1;
	
	Для Каждого Стр Из Товары Цикл
		Стр.НомерСтроки = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомераСтрокКлиент()
	
	НомСтр = 1;
	
	Для Каждого Стр Из Товары Цикл
		Стр.НомерСтроки = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСвоихЮрЛиц()

	СписокСвоихЮрЛиц.ЗагрузитьЗначения(МодульОбъекта().ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои").ВыгрузитьКолонку("ЮрФизЛицо"));

КонецПроцедуры // ОбновитьСписокСвоихЮрЛиц()

&НаСервере
Функция ПолучитьИмяСправочникаТипыЦен()
	
	ИмяСправочникаТипыЦен = МодульОбъекта().ПолучитьТипЗначенияОбъекта("ТипыЦен",,Истина);
	
	Возврат ИмяСправочникаТипыЦен;
	
КонецФункции

//управление доступностью полей формы -----------------------------------------------------

&НаСервере
Процедура УстановитьОграничениеТипов()
	
	ИмяСправочникаТипыЦен = МодульОбъекта().ПолучитьТипЗначенияОбъекта("ТипыЦен");
	Если ЗначениеЗаполнено(ИмяСправочникаТипыЦен) Тогда
		Элементы.ТипЦен.ОграничениеТипа	= Новый ОписаниеТипов(ИмяСправочникаТипыЦен);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВидимостьЭлементовКлиент()
	//доступность
	
	Элементы.Отправитель.ТолькоПросмотр 				= ТолькоПросмотрСообщения;
	Элементы.ПредставлениеПолучателя.ТолькоПросмотр  	= ТолькоПросмотрСообщения;
	Элементы.Покупатель.ТолькоПросмотр  				= ТолькоПросмотрСообщения;
	Элементы.ТипЦен.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	Элементы.СтатусТовараПоУмолчанию.ТолькоПросмотр	= ТолькоПросмотрСообщения;
	Элементы.Товары.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	
	Если ТолькоПросмотрСообщения = Истина Тогда 
		
		//КнопкиОсновныеДействияФормы = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
		//КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.ОсновныеДействияФормыОтправить);
		//КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.РазделительОтправить);
		//КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.ВосстановитьЗначения);
		//КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.СохранитьЗначения);
		//КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.РазделительЗакрыть);
		Элементы.ФормаОтправить.Видимость=Ложь;
		
	КонецЕсли;
	Элементы.Товары.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	
	//видимость
	
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") 
		И Сообщение.СодержитОшибки = Истина Тогда
		ОткрытьПанельОшибокКлиент();
	Иначе
		ЗакрытьПанельОшибокКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВидимостьЭлементов()
	
	//доступность
	
	Элементы.Отправитель.ТолькоПросмотр 				= ТолькоПросмотрСообщения;
	Элементы.ПредставлениеПолучателя.ТолькоПросмотр  	= ТолькоПросмотрСообщения;
	Элементы.Покупатель.ТолькоПросмотр  				= ТолькоПросмотрСообщения;
	Элементы.ТипЦен.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	Элементы.ТипЦен.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	Элементы.СтатусТовараПоУмолчанию.ТолькоПросмотр		= ТолькоПросмотрСообщения;
	Элементы.ГруппаТипЦенДействиеЦен.ТолькоПросмотр		= ТолькоПросмотрСообщения;
	Элементы.ГруппаРеквизитыДоговора.ТолькоПросмотр     = ТолькоПросмотрСообщения;
	                            
	Если ТолькоПросмотрСообщения = Истина Тогда
		Элементы.ГруппаСтатусТовараПоУмолчанию.Видимость 	= Ложь;
		Элементы.ФормаОтправить.Видимость 					= Ложь;
		Элементы.Товары.ТолькоПросмотр 						= Истина;
		ЭтаФорма.ТолькоПросмотр 							= Истина;
	КонецЕсли;
	Элементы.Товары.КоманднаяПанель.Доступность = не ТолькоПросмотрСообщения;
	
	//видимость
	
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка")
		И ЗначениеЗаполнено(Сообщение.СообщениеСсылка.ОписаниеОшибки) Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
		
КонецПроцедуры

//получение и вывод данных ----------------------------------------------------------------

//у нас есть готовое сообщение - нужно распихать его по форме.
//по сути это обратная процедура для: ОтправитьСервер()
&НаСервере
Процедура ЗаполнитьКарточкуСообщения()

	//заголовок
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " №" + Сообщение.ДокументEDI.Номер + " от " + Формат(Сообщение.ДокументEDI.Дата, "ДЛФ=Д");
	
	//шапка
	Отправитель = Сообщение.Отправитель1С;
	Получатель  = Сообщение.Получатель1С;
	Если ЗначениеЗаполнено(Сообщение.Покупатель1С) Тогда
		Покупатель  = ТекСписокПокупателей().НайтиПоЗначению(Сообщение.Покупатель1С).Значение;
	КонецЕсли;
	
	ДатаНачалаДействияЦен=Сообщение.ДатаНачалаДействияЦен;
	ДатаОкончанияДействияЦен=Сообщение.ДатаОкончанияДействияЦен;
	
	Если ЗначениеЗаполнено(Сообщение.Контракт) и Сообщение.Контракт.Свойство("Номер") Тогда 
		НомерДоговора 	= Сообщение.Контракт.Номер;
		ДатаДоговора 	= Сообщение.Контракт.Дата;
	КонецЕсли;
	
	Если Сообщение.Свойство("ТипЦен") Тогда //для совместимости со старыми сообщениями
		ТипЦен = Сообщение.ТипЦен;
	КонецЕсли;
	
	//товары
	Для Каждого Строка Из Сообщение.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Каталог = МодульОбъекта().ПолучитьПредставлениеКаталога(НоваяСтрока.Номенклатура);
		Если ЗначениеЗаполнено(Строка.Страна1С) Тогда
			НоваяСтрока.Страна = Строка.Страна1С;
		Иначе
			НоваяСтрока.Страна = Строка.СтранаEDI;
		КонецЕсли;
	КонецЦикла;
	
	//описание ошибки
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка")
		И ЗначениеЗаполнено(Сообщение.СообщениеСсылка.ОписаниеОшибки) Тогда
		СообщениеСсылка = Сообщение.СообщениеСсылка;
		ОписаниеОшибки = СообщениеСсылка.ОписаниеОшибки;
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьКарточкуСообщения()
&НаСервере
Процедура ОткрытьПанельОшибок()
	
	Элементы.ГруппаОшибки.Видимость = истина;
	
КонецПроцедуры
&НаСервере
Процедура ЗакрытьПанельОшибок()
	
	Элементы.ГруппаОшибки.Видимость = Ложь;
	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьПанельОшибокКлиент()
	
	Элементы.ГруппаОшибки.Видимость = истина;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗакрытьПанельОшибокКлиент()
	
	Элементы.ГруппаОшибки.Видимость = Ложь;
	
КонецПроцедуры

//кнопки нижней командной панели ----------------------------------------------------------
&НаКлиенте
Процедура Отправить(Команда)
	
	РезультатПроверки = ПроверитьЗаполнениеШапки();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибокКлиент();
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибокКлиент();
		Возврат;
	КонецЕсли;
	
	//сохраним сообщение в справочнике
	ОтправитьСервер();
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСервер()

	//Внимание, вопрос!
	//Как будем сохранять сообщение? в Структуру, как везде, или еще как?
	
	СообщениеСтруктура = МодульОбъекта().ПолучитьСтруктуруСообщения("PRICELIST","Исходящее");
	
	СообщениеСтруктура.Отправитель1С = Отправитель;
	СообщениеСтруктура.Получатель1С = Получатель;
	
	СообщениеСтруктура.Покупатель1С = Покупатель;
	СообщениеСтруктура.Продавец1С = Отправитель;
	
	СообщениеСтруктура.Партнер = Получатель;
	
	СообщениеСтруктура.ДатаНачалаДействияЦен 	= ДатаНачалаДействияЦен;
	СообщениеСтруктура.ДатаОкончанияДействияЦен = ДатаОкончанияДействияЦен;
	
	СообщениеСтруктура.Статус = "Ожидает отправки";
	
	СообщениеСтруктура.ID = Строка(Новый УникальныйИдентификатор());
	
	СообщениеСтруктура.ТипЦен = ТипЦен;
	
	НомерPriceList=Формат(ТекущаяДата(),"ДФ=ггггММддЧЧммсс");
	Если ЗначениеЗаполнено(ТипЦен) Тогда //E1C_in-30790
		Если ЗначениеЗаполнено(ТипЦен.Код) Тогда
			НомерPriceList = ТипЦен.Код;
		Иначе
			НомерPriceList = ТипЦен.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	СообщениеСтруктура.ДокументEDI.Номер = НомерPriceList; 
	СообщениеСтруктура.ДокументEDI.Дата = ТекущаяДата();
	
	Если ЗначениеЗаполнено(НомерДоговора) Тогда 
		СообщениеСтруктура.Контракт.Дата = ДатаДоговора;
		СообщениеСтруктура.Контракт.Номер = СокрЛП(НомерДоговора);
	КонецЕсли;
	
	Для Каждого Стр Из Товары Цикл
		НовСтрока = СообщениеСтруктура.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,Стр);
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Стр.Страна)) Тогда
			НовСтрока.Страна1С = Стр.Страна;
		ИначеЕсли ТипЗнч(Стр.Страна) = Тип("Строка") Тогда
			НовСтрока.СтранаEDI = Стр.Страна;
		КонецЕсли;
	КонецЦикла;
	
	СообщениеСтруктура.Документ1С = "";
	
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") Тогда
		СообщениеСтруктура.Вставить("ПереотправляемоеСообщениеСсылка",Сообщение.ПереотправляемоеСообщениеСсылка);
	КонецЕсли;
	
	МодульОбъекта().СохранитьСообщение(СообщениеСтруктура);
	
КонецПроцедуры // Отправить()

//кнопки верхней командной панели ---------------------------------------------------------

&НаКлиенте
Процедура ДобавитьЭлемент(Команда)
	
	Если Не ПроверитьЗаполнениеШапки().Успешно Тогда
		ОткрытьПанельОшибокКлиент();		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		ТекстВопроса = "Не выбран тип цен. Заполнить товар(ы) без цен?";
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, заполнить без цен");
		КнопкиВопроса.Добавить("Нет");
		ДопПараметрДляПередачиВОбработчик = Новый Структура;
		ДопПараметрДляПередачиВОбработчик.Вставить("Признак", "ОдинИлиГруппаТоваров");
		ДопПараметрДляПередачиВОбработчик.Вставить("Команда", Команда);
		РезультатВопроса = Неопределено;
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияЗаполненияТоваровБезЦен"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,""Да, заполнить без цен"",""EDI.Контур. Заполнение типа цен"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,"Да, заполнить без цен","EDI.Контур. Заполнение типа цен");
			ОбработчикСогласияЗаполненияТоваровБезЦен(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	Иначе
		ВыбратьОдинИлиГруппуТоваров(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОдинИлиГруппуТоваров(Команда)
	
	ВыбратьГруппу = (Команда.Имя = "ДобавитьГруппу");
	
	ПараметрыФормыВыбораНоменклатуры = Новый Структура;
	
	Если ВыбратьГруппу Тогда 
		ПараметрыФормыВыбораНоменклатуры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Группы);
	иначе //элемент
		ПараметрыФормыВыбораНоменклатуры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ПараметрыФормыВыбораНоменклатуры.Вставить("РежимВыбора",Истина);
	КонецЕсли;
	
	ИмяФормыВыбора=?(ВыбратьГруппу,"Справочник.Номенклатура.ФормаВыбораГруппы","Справочник.Номенклатура.ФормаВыбора");
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ИмяФормыВыбора, ПараметрыФормыВыбораНоменклатуры,""ОбработчикПодбораНоменклатуры"")");//,ДополнительныеПараметры);
	Иначе
		ВыбранаяНоменклатура=ПолучитьФорму(ИмяФормыВыбора,ПараметрыФормыВыбораНоменклатуры).ОткрытьМодально();
		ОбработчикПодбораНоменклатуры(ВыбранаяНоменклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеТовары()

	Состояние("Собираю сведения о номенклатуре...",50,,Элементы.ТоварыДобавитьТовар.Картинка);
	
	ВыбратьТоварыИЗаполнитьТЧ();
	
	ОбновитьНомераСтрокКлиент();
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибокКлиент();
	Иначе
		ЗакрытьПанельОшибокКлиент();
	КонецЕсли;

КонецПроцедуры // ВыбратьВсеТовары()

&НаКлиенте
Процедура ОбработчикПодбораНоменклатуры(ВыбранаяНоменклатура,ДопПараметр=Неопределено) Экспорт
 	//один и тот же на элемент и группу
	СервернаяОбработкаВыбраннойНоменклатуры(ВыбранаяНоменклатура);
	ОбновитьНомераСтрокКлиент();
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибокКлиент();
	Иначе
		ЗакрытьПанельОшибокКлиент();
	КонецЕсли;

КонецПроцедуры // ОбработчикПодбораНоменклатуры()

&НаСервере
Процедура СервернаяОбработкаВыбраннойНоменклатуры(ВыбранаяНоменклатура)

	Если ТипЗнч(ВыбранаяНоменклатура) = Тип(МодульОбъекта().ПолучитьТипЗначенияОбъекта("Номенклатура",,)) Тогда
		ПараметрыЗаполнения=Новый Структура;
		ПараметрыЗаполнения.Вставить("ТипЦен",ТипЦен);
		ПараметрыЗаполнения.Вставить("СтатусТовараПоУмолчанию",СтатусТовараПоУмолчанию);
		ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС",ЦенаВключаетНДС);
		ПараметрыЗаполнения.Вставить("Получатель",Получатель);
		
		Выборка = МодульОбъекта().ПолучитьВыборкуДанныхПоНоменклатуре(ВыбранаяНоменклатура,ПараметрыЗаполнения);
		//без очищения ТЧ
		ТЗЗаполненная = МодульОбъекта().ЗаполнитьТаблицуТовары(РеквизитФормыВЗначение("Товары"),Выборка,ПараметрыЗаполнения);
		ЗначениеВРеквизитФормы(ТЗЗаполненная,"Товары");
	КонецЕсли;
	
КонецПроцедуры // СервернаяОбработкаВыбраннойНоменклатуры()

&НаКлиенте
Процедура ОбработчикВыбораТипаЦен(Значение,ДопПараметрПереданныйВОбработчик=неопределено) Экспорт
	Если ЗначениеЗаполнено(Значение) Тогда 
		ТипЦен = Значение;
		ИнициализироватьЗначения();//сменились условия валидации
		Если ДопПараметрПереданныйВОбработчик.Признак = "ОдинИлиГруппаТоваров" Тогда
			ВыбратьОдинИлиГруппуТоваров(ДопПараметрПереданныйВОбработчик.Команда);
		ИначеЕсли ДопПараметрПереданныйВОбработчик.Признак = "ВсеТовары" Тогда
			ВыбратьВсеТовары();
		КонецЕсли;
	Иначе
		//Пользователь не выбрал элемент справочника
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Для заполнения цены товара(ов) необходимо выбрать тип цен";
		ОткрытьПанельОшибокКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТоварами(Команда)
	
	Если Не ПроверитьЗаполнениеШапки().Успешно Тогда
		ОткрытьПанельОшибокКлиент();
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() <> 0 Тогда
		ТекстВопроса ="Данные таблицы товаров будут очищены. Продолжить?";
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, перезаполнить");
		КнопкиВопроса.Добавить("Нет, не перезаполнять");
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияПерезаполненияТЧ"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""EDI.Контур"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"EDI.Контур");
			ОбработчикСогласияПерезаполненияТЧ(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	Иначе
		ОбработчикСогласияЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияПерезаполненияТЧ(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	
	Если РезультатВопроса="Да, перезаполнить" Тогда 
		ОбработчикСогласияЗаполнения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСогласияЗаполнения()
	
	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		ТекстВопроса = "Не выбран тип цен. Заполнить товар(ы) без цен?";
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, заполнить без цен");
		КнопкиВопроса.Добавить("Нет");
		ДопПараметрДляПередачиВОбработчик = Новый Структура;
		ДопПараметрДляПередачиВОбработчик.Вставить("Признак", "ВсеТовары");
		РезультатВопроса = Неопределено;
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикСогласияЗаполненияТоваровБезЦен"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,""Да, заполнить без цен"",""EDI.Контур. Заполнение типа цен"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,"Да, заполнить без цен","EDI.Контур. Заполнение типа цен");
			ОбработчикСогласияЗаполненияТоваровБезЦен(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
	Иначе
		ВыбратьВсеТовары();
	КонецЕсли;

КонецПроцедуры // ОбработчикСогласияЗаполнения()

&НаКлиенте
Процедура ОбработчикСогласияЗаполненияТоваровБезЦен(РезультатВопроса,ДопПараметрПереданныйВОбработчик = Неопределено) Экспорт
	
	Если РезультатВопроса = "Нет" Тогда
		ИмяСправочникаТипыЦен = ПолучитьИмяСправочникаТипыЦен();
		Если Не ЗначениеЗаполнено(ИмяСправочникаТипыЦен) Тогда
			//Не смогли определить тип справочника
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ОписаниеОшибки = "Для заполнения цены товара(ов) необходимо выбрать тип цен."
			+Символы.ПС+"Не определено имя справочника ""Типы цен"" в таблице типов";
			ОткрытьПанельОшибокКлиент();
		Иначе	
			ИмяФормыВыбора = "Справочник."+ИмяСправочникаТипыЦен+".ФормаВыбора";
			Если Параметры.МодальностьЗапрещена Тогда 
				Выполнить("ОткрытьФормуОбъектаМодально(ИмяФормыВыбора,,""ОбработчикВыбораТипаЦен"",ДопПараметрПереданныйВОбработчик)");//,ДополнительныеПараметры);
			Иначе
				ВыбранныйТипЦен=ПолучитьФорму(ИмяФормыВыбора).ОткрытьМодально();
				ОбработчикВыбораТипаЦен(ВыбранныйТипЦен, ДопПараметрПереданныйВОбработчик);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РезультатВопроса = "Да, заполнить без цен" Тогда
		Если ДопПараметрПереданныйВОбработчик.Признак = "ОдинИлиГруппаТоваров" Тогда
			ВыбратьОдинИлиГруппуТоваров(ДопПараметрПереданныйВОбработчик.Команда);
		ИначеЕсли ДопПараметрПереданныйВОбработчик.Признак = "ВсеТовары" Тогда
			ВыбратьВсеТовары();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьТоварыИЗаполнитьТЧ()

	СтандартнаяОбработка = Истина; //в результате обработки должны получить заполненную таблицу значений "Товары"
	РезультатОбработки = МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьДанныеПрайсЛиста",СтандартнаяОбработка,
												 			 Новый Структура("Отправитель,Получатель,ТипЦен,Товары",
												 			 				  Отправитель,Получатель,ТипЦен,Товары));
	Если Не СтандартнаяОбработка = Истина Тогда
		Если ТипЗнч(РезультатОбработки) = Тип("ТаблицаЗначений") Тогда
			Товары.Очистить();
			Товары = РезультатОбработки.Скопировать();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ТипЦен",ТипЦен);
	ПараметрыЗаполнения.Вставить("СтатусТовараПоУмолчанию",СтатусТовараПоУмолчанию);
	ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС",ЦенаВключаетНДС);
	ПараметрыЗаполнения.Вставить("Получатель",Получатель);
			
	Выборка = МодульОбъекта().ПолучитьВыборкуДанныхПоНоменклатуре(Неопределено,ПараметрыЗаполнения);
	
	Товары.Очистить();
	
	ТЗЗаполненная = МодульОбъекта().ЗаполнитьТаблицуТовары(РеквизитФормыВЗначение("Товары"),Выборка,ПараметрыЗаполнения);
	
	ЗначениеВРеквизитФормы(ТЗЗаполненная,"Товары");

КонецПроцедуры // ВыбратьТоварыИЗаполнитьТЧ()
 
&НаКлиенте
Процедура ОчиститьТаблицуТовары(Команда)
	
	Если Товары.Количество() <> 0 Тогда
	
		ТекстВопроса ="Данные таблицы товаров будут очищены. Продолжить?";
		КнопкиВопроса=новый СписокЗначений;
		КнопкиВопроса.Добавить("Да, очистить");
		КнопкиВопроса.Добавить("Нет, НЕ очищать");
		ДопПараметрДляПередачиВОбработчик=Неопределено;
		РезультатВопроса = Неопределено;
		
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВопрос(Новый ОписаниеОповещения(""ОбработчикОчиститьТЧ"", ЭтаФорма, ДопПараметрДляПередачиВОбработчик), ТекстВопроса, КнопкиВопроса,,,""EDI.Контур"")");
		Иначе
			РезультатВопроса = Вопрос(ТекстВопроса, КнопкиВопроса,,,"EDI.Контур");
			ОбработчикОчиститьТЧ(РезультатВопроса,ДопПараметрДляПередачиВОбработчик);
		КонецЕсли;
		
	Иначе
		//нечего очищать
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОчиститьТЧ(РезультатВопроса,ДопПараметрПереданныйВОбработчик=Неопределено) Экспорт
	Если  РезультатВопроса ="Да, очистить" Тогда 
		Товары.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КакиеТоварыНеПопадутВТаблицуКнопка(Команда)
	ТекстПодсказки = "При стандартном заполнении не будут добавлены товары:" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + " - которые помечены на удаление;" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + " - с нулевой ценой для выбранного типа цен;" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + " - учет которых ведется в разрезе характеристик;" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + " - которые по виду номенклатуры относятся к услугам." + Символы.ПС + Символы.ПС;
	
	ТекстПодсказки = ТекстПодсказки + "Для разработки своего алгоритма заполнения товаров можно" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + "воспользоваться механизмами подключаемого модуля и расширений," + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + "используя событие ""ЗаполнитьДанныеПрайсЛиста""." + Символы.ПС;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьПредупреждение(,ТекстПодсказки,,""Какие товары не попадут в таблицу?"")");
	Иначе
		Предупреждение(ТекстПодсказки,,"Какие товары не попадут в таблицу?");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекСписокПокупателей()
	
	//TODO - обновить кэш, вернуть список, переделать на функцию	
	СписокПокупателей = Новый СписокЗначений;
	ДанныеПартнера = МодульОбъекта().ТаблицаКэшПартнеровКонтрагентов.НайтиСтроки(Новый Структура("Партнер",Получатель));
	Для Каждого Элемент Из ДанныеПартнера Цикл
		СписокПокупателей.Добавить(Элемент.Контрагент);		
	КонецЦикла;
	
	Возврат СписокПокупателей;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы=	Новый Структура;
	ПараметрыФормы.Вставить("ОткрытаКакВыбор",истина);
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ОткрытьФормуОбъектаМодально(ПутьКФормам + ""Партнеры_СписокУправляемая"", ПараметрыФормы,""ОбработчикВыбораПартнера"")");//,ДополнительныеПараметры);
	Иначе
		ВыбранныйПартнер=ПолучитьФормуОбработки("Партнеры_СписокУправляемая",ПараметрыФормы).ОткрытьМодально();
		ОбработчикВыбораПартнера(ВыбранныйПартнер);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораПартнера(Значение,ДопПараметр=неопределено) Экспорт
	Если ЗначениеЗаполнено(Значение) Тогда 
		Получатель = Значение;
		ПредставлениеПолучателя = ПолучитьПредставлениеЭлементаСправочникаВызовСервера(Получатель);
		
		ВыбратьПокупателяПоУмолчанию();
		
		ИнициализироватьЗначения();//сменились условия валидации
	КонецЕсли;
КонецПроцедуры // ОбработчикВыбораПартнера()()

&НаСервере
Функция ПолучитьПредставлениеЭлементаСправочникаВызовСервера(Получатель)

	Возврат МодульОбъекта().ПолучитьПредставлениеЭлементаСправочника(Получатель);	

КонецФункции // ПолучитьПредставлениеЭлементаСправочникаВызовСервера()

&НаСервере
Процедура ВыбратьПокупателяПоУмолчанию()
	
	ТипКонтрагент = МодульОбъекта().ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее",,Истина);
	СписокПокупателей = ТекСписокПокупателей();
	
	Если СписокПокупателей.Количество() <> 1 Тогда
		Покупатель = Справочники[ТипКонтрагент].ПустаяСсылка();
	Иначе
		Покупатель = СписокПокупателей.Получить(0).Значение;
	КонецЕсли;
		
КонецПроцедуры

//обработчики формы и элементов шапки ----------------------------------------------------

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		Выполнить("ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика)");
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	ПолучаемаяФорма=	ПолучитьФорму(ПутьКФормам+ИмяФормы
										, ПараметрыФормы
										,
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.МодальностьЗапрещена=МодульОбъекта().МодальностьЗапрещена();
	ПутьКФормам = МодульОбъекта().Метаданные().ПолноеИмя() + ".Форма.";
	
    ИнициализироватьЗначения();
	
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		
		//Если ЗначениеЗаполнено(Параметры.ПереотправляемоеСообщениеСсылка) Тогда
		//	Сообщение = МодульОбъекта().ПрочитатьСообщение(Параметры.ПереотправляемоеСообщениеСсылка, , "PRICELIST", "Исходящее");
		//	Сообщение.Вставить("ПереотправляемоеСообщениеСсылка", Параметры.ПереотправляемоеСообщениеСсылка);
		//КонецЕсли;
					
		ЗаполнитьКарточкуСообщения();
		ОбновитьНомераСтрок();
		
		//почистить все ТЗ сообщения, т.к. их не получится передать на клиент. (передали в данных формы)
		Сообщение.Товары = Неопределено;
		
	Иначе
			
		Если Не ЗначениеЗаполнено(Отправитель) Тогда
			ТипОрганизации = МодульОбъекта().ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое",,Истина);
			Отправитель = Справочники[ТипОрганизации].ПустаяСсылка();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТипЦен) Тогда
			ИмяСправочникаТипыЦен = МодульОбъекта().ПолучитьТипЗначенияОбъекта("ТипыЦен",,Истина);
			ТипЦен = Справочники[ИмяСправочникаТипыЦен].ПустаяСсылка();
 		КонецЕсли;
		
	КонецЕсли;

	ПредставлениеПолучателя = МодульОбъекта().ПолучитьПредставлениеЭлементаСправочника(Получатель);
	
	//TODO - обновить кэш, вернуть список, переделать на функцию	
	//привязать к выбору значения
	//Если ЗначениеЗаполнено(Получатель) Тогда
	//	ЗаполнитьСписокПокупателей();
	//КонецЕсли;
	
	СписокЕдиницИзмерения 	= МодульОбъекта().ПолучитьСписокЕдиницEDI();
	
	ОбновитьСписокСвоихЮрЛиц();

	Если СписокСвоихЮрЛиц.Количество()=1 Тогда
		Отправитель = СписокСвоихЮрЛиц[0].Значение;
	КонецЕсли;

	//Если ЗначениеЗаполнено(СтатусТовараПоУмолчанию) Тогда
	//	ЭлементыФормы.СтатусТовараПоУмолчанию.Значение = ЭлементыФормы.СтатусТовараПоУмолчанию.СписокВыбора.НайтиПоЗначению(СтатусТовараПоУмолчанию).Значение; 
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Покупатель) Тогда
		ЗначениеСписка = ТекСписокПокупателей().НайтиПоЗначению(Покупатель);
		Если Не ЗначениеСписка = Неопределено Тогда
			Покупатель = ЗначениеСписка.Значение;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОграничениеТипов();
	УстановитьДоступностьВидимостьЭлементов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Список = ТекСписокПокупателей();
	ДопПараметры=Новый Структура;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораПокупателя"", ЭтаФорма,ДопПараметры), Список,Элемент,)");
	Иначе
		Выбранный = Список.ВыбратьЭлемент();
		ОбработчикВыбораПокупателя(Выбранный,ДопПараметры); 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораПокупателя(Выбранный,ДопПараметр=неопределено) Экспорт
    Если Выбранный<>Неопределено Тогда 
		Покупатель = Выбранный.Значение;	
	КонецЕсли;
КонецПроцедуры // ОбработчикВыбораПокупателя()

&НаКлиенте
Процедура ОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если  СписокСвоихЮрЛиц.Количество() = 0 Тогда 
		ОбновитьСписокСвоихЮрЛиц();
	КонецЕсли;
	
	Если  СписокСвоихЮрЛиц.Количество() = 0 Тогда //все равно нет организаций
		ТекстПредупреждения="Не настроено ни одной собственной организации"+Символы.ПС+"Зайдите в настройки, структуру компании и укажите собственные юр. лица";
		Если Параметры.МодальностьЗапрещена Тогда 
			Выполнить("ПоказатьПредупреждение(,ТекстПредупреждения,,""EDI.Контур"")");
		Иначе
			Предупреждение(ТекстПредупреждения,,"EDI.Контур");
		КонецЕсли;
	Иначе
		//что-то есть, показываем выбор 
		ДопПараметры=Новый Структура;
		Если Параметры.МодальностьЗапрещена Тогда
			Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораОтправителя"", ЭтаФорма,ДопПараметры), СписокСвоихЮрЛиц,Элемент,)");
		Иначе
			Выбранный = СписокСвоихЮрЛиц.ВыбратьЭлемент();
			ОбработчикВыбораОтправителя(Выбранный,ДопПараметры); 
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораОтправителя(Выбранный, ДопПараметр=Неопределено) Экспорт
	
	Если Выбранный<>Неопределено Тогда 
		Отправитель = Выбранный.Значение;	
	КонецЕсли;
	
	//действия после выбора своей организации

	//?? может быть нужно что-то почистить?
	
КонецПроцедуры // ОбработчикВыбораОтправителя()

//валидация значений полей ----------------------------------------------------------------

&НаКлиенте
Функция ПроверитьЗаполнениеШапки()
	
	ТаблицаОшибок.Очистить();
	
	Успешно 		  = Истина;
	РезультатПроверки = Новый Структура("Успешно",Успешно);
		
	Если Не ЗначениеЗаполнено(Отправитель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не выбран ""Отправитель"" прайс-листа!";
		Успешно = Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не выбран ""Получатель"" прайс-листа!";
		Успешно = Ложь;
	КонецЕсли;
	
	РезультатПроверки.Успешно = Успешно;

	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеТаблицыТоваров()
	
	ТаблицаОшибок.Очистить();
	
	Успешно 		  = Истина;
	РезультатПроверки = Новый Структура("Успешно",Успешно);
	
	Если Товары.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Нет данных для отправки! Таблица товаров пуста.";
		Успешно = Ложь;
	КонецЕсли;
	
	Для Каждого Стр Из Товары Цикл
		Успешно = ?(ПроверитьСтрокуТаблицыТоваров(Стр), Успешно, Ложь);	
	КонецЦикла;
	
	РезультатПроверки.Успешно 		 = Успешно;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьСтрокуТаблицыТоваров(СтрокаТовара)
	
	Успешно = Истина;
	
	Если ЭтаФорма.ОбязателенGTIN 
		И Не ЗначениеЗаполнено(СтрокаТовара.GTIN) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не заполнено обязательное поле ""GTIN"" в строке № " + СтрокаТовара.НомерСтроки;
		Успешно = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаТовара.СтавкаНДСEDI) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не заполнено обязательное поле ""Ставка НДС"" в строке № " + СтрокаТовара.НомерСтроки;
		Успешно = Ложь;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

//обработчики табличной части ---------------------------------------------------------

&НаКлиенте
Процедура ОбработчикВыбораСоответствияИзМенюЕдиницаEDI(ВыбранноеЗначение,Параметры) Экспорт
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Элементы.Товары.ТекущиеДанные.КодЕдиницыИзмеренияEDI = ВыбранноеЗначение.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	
	УФ_СоставитьСписокЕдиницИзмерения(СписокВыбора,Элементы.Товары.ТекущиеДанные.Номенклатура);
	
	ВыбранноеЗначение = Неопределено;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ТоварыЕдиницаИзмеренияНачалоВыбораЗавершение"", ЭтаФорма), СписокВыбора,Элемент,)");
	Иначе
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора,Элемент,);
		ТоварыЕдиницаИзмеренияНачалоВыбораЗавершение(ВыбранноеЗначение, );
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
	ВыбранноеЗначение = ВыбранныйЭлемент;
    
    Если ВыбранноеЗначение = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ВыбранноеЗначение.Значение)  Тогда
        Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения = УФ_БазоваяЕИ(Элементы.Товары.ТекущиеДанные.Номенклатура);
    иначе
        Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения = ВыбранноеЗначение.Значение;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодЕдиницыИзмеренияEDIНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = ЭтаФорма.СписокЕдиницИзмерения;
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВыборИзМеню(Новый ОписаниеОповещения(""ОбработчикВыбораСоответствияИзМенюЕдиницаEDI"",ЭтаФорма), СписокВыбора)");
	Иначе
		ВыбранноеЗначение = ВыбратьИзМеню(СписокВыбора,Элемент);
		ОбработчикВыбораСоответствияИзМенюЕдиницаEDI(ВыбранноеЗначение,неопределено)
	КонецЕсли;
	СтандартнаяОбработка=Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьНомераСтрокКлиент();
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибокКлиент();
	Иначе
		ЗакрытьПанельОшибокКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.НомерСтроки = ЭтаФорма.Товары.Количество();
		ПроверитьСтрокуТаблицыТоваров(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибокКлиент();
	Иначе
		ЗакрытьПанельОшибокКлиент();
	КонецЕсли;

КонецПроцедуры