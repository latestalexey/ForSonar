Перем ПараметрыПользователяEDI Экспорт;
Перем НастройкиПодключаемогоМодуля Экспорт;

Перем ВариантХраненияДанных Экспорт;

Перем ИмяКонфигурации1С Экспорт;
Перем РелизКонфигурации1С Экспорт;

//переменные для работы протоколов обмена
Перем ПротоколОбмена_КонтурEDI Экспорт;//Варианты: "FTP", "Каталог", "DialMail", "API"
Перем КомпонентаDialMailПодключена Экспорт;
Перем КэшСоединений_КонтурEDI;//Структура, в ключах - GLN, в значениях - объекты FTPСоединение, COMОбъекты (DialMail) или HTTPСоединение, 
										//в зависимости от протокола обмена. На будущее - попытаться сделать отправку исходящих сообщений 
										//в рамках одной учетной записи, тогда от кэша можно будет уйти.
Перем СоединениеАПИ Экспорт;
               
Перем УчетныеЗаписи Экспорт;

Перем НастройкиМодуля Экспорт; 

Перем ПараметрыАвтотестирования Экспорт;

Перем РаботаССерверомДиадок Экспорт;

Перем СоединениеСХранилищем Экспорт;//объект COM-соединения (v8x.ComConnector)
Перем ВнешнееХранилище Экспорт;//признак того, что данные модуля хранятся во внешней базе

Перем РеквизитыПересчета Экспорт;

Перем ТаблицаКэшПартнеров Экспорт;
Перем ТаблицаКэшПартнеровКонтрагентов Экспорт;

Перем ТаблицаКэшИсполняемогоКодаРасширений Экспорт;

Перем МаппингМетаданных Экспорт;
Перем ИспользоватьМаппингМетаданных;

Перем ИспользуетсяПодключаемыйМодуль Экспорт;
Перем ВнешнийМодуль Экспорт; //объект обработки - подключаемого модуля.

Перем Адрес_edi_kontur_ru Экспорт;

Перем ТаблицаТипов Экспорт;//содержит описание типов значений данной конфигурации
Перем ТаблицаКодовРегионов Экспорт;//из модуля конвертации

//переменные для конструктора запросов по спискам документов
Перем ШаблонЗапросаЦепочкиДокументов_Поставщик Экспорт;
Перем ШаблонЗапросаЦепочкиДокументов_Покупатель Экспорт;

Перем ЕстьМетаданныеХраненияОрганизации Экспорт;
Перем мРабочийКаталог Экспорт;//сюда будем загружать файлы сообщений и описания сетей с сервера

Перем ЕстьКоррИспрСФ Экспорт;

Перем ВнутреннийКэш;//Соответствие

Перем IDОсновнойФормы Экспорт;  //нужня для УФ

Перем КаталогОбновленийНаСервере Экспорт;
//{#Область 01_Служебные_функции
	
	
//*********************************************************************
//							МОДУЛИ

Функция ИнициализироватьПодключаемыеМодули() Экспорт
	
	РезультатИнициализации = Новый Структура();
	РезультатИнициализации.Вставить("Успешно");
	РезультатИнициализации.Вставить("ТекстОшибки");
	РезультатИнициализации.Вставить("НужноОбновитьКонфигурацию");
	
	// 1. определяем вариант хранения данных
	
	Если ДобавленыСвоиОбъектыВКонфигурацию() Тогда
		ВариантХраненияДанных = "СвоиОбъекты";
		ВнешнееХранилище = Ложь;
	Иначе
		ПопытатьсяПодключитьсяКВнешнемуХранилищу();//добавленные объекты считаем более приоритетными. Если их нет, то тогда подключаемся к ВХ
		ВариантХраненияДанных = "";
	КонецЕсли;
		
	Если НЕ ВнешнееХранилище = Истина И НЕ ВариантХраненияДанных = "СвоиОбъекты" Тогда

		РезультатИнициализации.Успешно		= Ложь;
		РезультатИнициализации.ТекстОшибки = "Не выбран режим хранения данных модуля";
		
		Возврат РезультатИнициализации;
		
	КонецЕсли;
	
	// 2. Проверим наличие всех необходимых реквизитов в наших справочниках: пока частично
	
	РезультатПроверкиМетаданных = ПроверитьКорректностьИДоступностьМетаданных();//проверка конфигурации, необходимых реквизитов наших справочников, прав доступа
	
	Если НЕ РезультатПроверкиМетаданных.Успешно Тогда
		
		РезультатИнициализации.Успешно = Ложь;
		РезультатИнициализации.ТекстОшибки = РезультатПроверкиМетаданных.ТекстОшибки;
		
		Возврат РезультатИнициализации;
		
	КонецЕсли;
		
	// 3. Проверяем имя конфигурации. Если не заполнено, основной интерфейс выдаст пользователю окно с выбором наиболее подходящей
	
	ОпределитьКонфигурацию();
	
	Если НЕ ЗначениеЗаполнено(ИмяКонфигурации1С) Тогда
		
		РезультатИнициализации.Успешно = Ложь;
		РезультатИнициализации.ТекстОшибки = "Не определена конфигурация";//список поддерживаемых конфигураций расположен в отдельном окне: ФормаСервис_ВыборКонфигурации

		Возврат РезультатИнициализации;
		
	КонецЕсли;
	
	// 4. Все проверки пройдены, начинаем собственно инициализацию.
	
	ОбновитьКэшИсполняемогоКодаРасширений();
	
    // перенес, чтобы при инициализации подключаемого модуля можно было изменить параметр ЕстьКоррИспрСФ, необходимо если COINVOIC 
	// будет формироваться по данным из другой БД
	ЕстьКоррИспрСФ = Ложь;
	
	Если ИмяКонфигурации1С = "УПП"
		ИЛИ ИмяКонфигурации1С = "УТ_10_3"
		ИЛИ ИмяКонфигурации1С = "БП"
		ИЛИ ИмяКонфигурации1С = "КА"
		ИЛИ ИмяКонфигурации1С = "УФ_БП"
		ИЛИ ИмяКонфигурации1С = "УФ_УТ" Тогда
		Если	ЕстьНеобходимыеМетаданные("Документы.КорректировкаРеализации",Истина) И 
				ЕстьНеобходимыеМетаданные("Документы.РеализацияТоваровУслуг",Истина) И
				ЕстьНеобходимыеМетаданные("Документы.СчетФактураВыданный.Реквизиты.Исправление",Истина) Тогда
				
			ЕстьКоррИспрСФ = Истина;
			
		КонецЕсли;		
	КонецЕсли;
	
	НастройкиПодключаемогоМодуля = ПолучитьСписокСвойствEDI(
		"ПодключаемыйМодульТип
		|ПодключаемыйМодульПуть
		|ПодключаемыйМодульИмяОбработки
		|ПодключаемыйМодульВидСправочника
		|ПодключаемыйМодульGUID");
	
	ИнициализироватьВнешнийПодключаемыйМодуль();
	
	ОбновитьТаблицуТиповЗначенияОбъектов();
	
	ИспользоватьМаппингМетаданных = (ПолучитьКонстантуEDI("ИспользоватьМаппингМетаданных")=Истина);
	Если ИспользоватьМаппингМетаданных Тогда 
		МаппингМетаданных = ПолучитьМаппингМетаданных();
		Сообщить_КонтурEDI("Используется маппинг объектов.");
	КонецЕсли;
	
	НастройкиМодуля = ПолучитьНастройкиМодуля();
	
	ПараметрыПользователяEDI = ПолучитьПараметрыТекущегоПользователяEDI();

	ОбновитьКэшПартнеров();
	
	//инициализируем глобальные переменные для работы с API Диадока
	РаботаССерверомДиадок = Новый Структура();
	РаботаССерверомДиадок.Вставить("Используется",Ложь);
	РаботаССерверомДиадок.Вставить("АПИ");
	РаботаССерверомДиадок.Вставить("Соединение");
	
	Адрес_edi_kontur_ru = "edi.kontur.ru";
	КаталогОбновленийНаСервере="/1c/KonturEDI_82/releases/";
	
	мРабочийКаталог = КаталогВременныхФайлов();
	
	РезультатИнициализации.Успешно = Истина;
	
	Возврат РезультатИнициализации;
	
КонецФункции

Функция ПроверитьКорректностьИДоступностьМетаданных() Экспорт//старое название - Инициализировать
	
	//еще пара глобальных переменных, пусть пока здесь поживут
	РеквизитыПересчета = Истина;//только для совместимости с ПМ
	
	ЕстьМетаданныеХраненияОрганизации = ЕстьНеобходимыеМетаданные("Справочники.КонтурEDI_Сообщения.Реквизиты.Организация") И	
	                                    ЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.Ресурсы.ЗначениеСтрока");
	
	РезультатИнициализации = Новый  Структура();
	РезультатИнициализации.Вставить("Успешно");
	РезультатИнициализации.Вставить("ТекстОшибки");
	РезультатИнициализации.Вставить("НужноОбновитьКонфигурацию",Ложь);
	
	
	СписокОшибок = ПроверитьСтруктуруДанных();
	
	Если СписокОшибок.Количество() > 0 Тогда
		
		РезультатИнициализации.Успешно = Ложь;
		РезультатИнициализации.ТекстОшибки = "При проверке структуры данных и прав доступа возникли ошибки!
		|";
		
		Для Каждого Ошибка Из СписокОшибок Цикл
			РезультатИнициализации.ТекстОшибки=РезультатИнициализации.ТекстОшибки + Символы.ПС + Ошибка.Значение;
		КонецЦикла;		
		
		Возврат РезультатИнициализации;
		
	КонецЕсли;
	
	Если ВнешнееХранилище Тогда
		РС = СоединениеСХранилищем.Метаданные.РегистрыСведений.Найти("КонтурEDI_СоответствияТоваров");
	Иначе
		РС = Метаданные.РегистрыСведений.Найти("КонтурEDI_СоответствияТоваров");
	КонецЕсли;
	
	Если РС = Неопределено или РС.Ресурсы.Найти("НаименованиеПартнера") = Неопределено Тогда
		
		РезультатИнициализации.Успешно = Ложь;
		РезультатИнициализации.ТекстОшибки = "Для работы этой версии модуля EDI.Контур необходимо обновить конфигурацию:"+Символы.ПС+" + ресурс ""НаименованиеПартнера"" Тип:Строка(250) в регистре сведений ""КонтурEDI_СоответствиеТоваров"""+Символы.ПС;
		РезультатИнициализации.НужноОбновитьКонфигурацию = Истина;
		
		Возврат РезультатИнициализации;
		
	КонецЕсли;
										
	РезультатИнициализации.Успешно = Истина;
	
	Возврат РезультатИнициализации;
	
КонецФункции

Процедура ФинализироватьПодключаемыеМодули() Экспорт
	
	СоединениеАПИ					= Неопределено;
	ТаблицаКэшПартнеров				= Неопределено;
	ТаблицаКэшПартнеровКонтрагентов	= Неопределено;
	
	ПараметрыПользователяEDI		= Неопределено;
	ИмяКонфигурации1С				= Неопределено;
	
	НастройкиМодуля					= Неопределено;
	ВнешнийМодуль					= Неопределено;
	ИспользуетсяПодключаемыйМодуль	= Неопределено;
	
	МаппингМетаданных 				= Неопределено;
	ВнутреннийКэш					= Неопределено;
	
КонецПроцедуры

//Оставлена для совместимости со старыми подключаемыми модулями
Функция ПроверитьНаличиеРеквизитовПересчета() Экспорт
	Возврат Истина;
КонецФункции

//*********************************************************************
//							ПРОЧЕЕ

// Установим картинку и заголовок формы.
Процедура ПриОткрытииФормы(Форма) Экспорт
	
	Форма.КартинкаЗаголовка = БиблиотекаКартинокEDI().КартинкаЛого;
	
	Если Найти(Форма.Заголовок,"EDI.Контур. ")<>1 Тогда
		Форма.Заголовок = "EDI.Контур. "+Форма.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРезультатЗапроса(Запрос,ИмяПоля = "Ссылка") Экспорт
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка[ИмяПоля];
		
	КонецЕсли;
	
КонецФункции

Функция ДобавленыСвоиОбъектыВКонфигурацию() Экспорт
	
	Если  Метаданные.Справочники.Найти("КонтурEDI_Сообщения") <> Неопределено
		И Метаданные.Справочники.Найти("КонтурEDI_ТочкиДоставки") <> Неопределено
		И Метаданные.Справочники.Найти("КонтурEDI_ДополнительныеСправочники") <> Неопределено
		И Метаданные.РегистрыСведений.Найти("КонтурEDI_СтатусыДокументов") <> Неопределено
		И Метаданные.РегистрыСведений.Найти("КонтурEDI_СоответствияТоваров") <> Неопределено
		И Метаданные.РегистрыСведений.Найти("КонтурEDI_ДополнительныеРеквизиты") <> Неопределено
		Тогда
		
		Возврат Истина;	

	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//для регистрации модуля в УФ базах
Функция СведенияОВнешнейОбработке() Экспорт
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//МассивНазначений.Добавить("Документ.ЗаказКлиента");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Модуль Контур.EDI");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", ПолучитьНомерРелиза_КонтурEDI());    
	ПараметрыРегистрации.Вставить("Информация", "Модуль для обмена EDI сообщениями");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	//
	//// Добавим команду в таблицу
	//ДобавитьКоманду(ТаблицаКоманд, "E", "Диадок", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	//
	
	СтрокаТЧ = ТаблицаКоманд.Добавить();
	СтрокаТЧ.Идентификатор = "ОткрытьМодульКонтурEDI";
	СтрокаТЧ.Представление = "Открыть модуль Контур.EDI";
	СтрокаТЧ.ПоказыватьОповещение = Ложь;
	СтрокаТЧ.Использование = "ОткрытиеФормы";
	
	//Добавление для вызовов из регламентного //спасибо вот этому человеку http://infostart.ru/profile/97746/
	СтрокаТЧ = ТаблицаКоманд.Добавить();
	СтрокаТЧ.Идентификатор = "ВыполнитьФоновыйОбмен";
	СтрокаТЧ.Представление = "Выполнить фоновый обмен Контур.EDI";
	СтрокаТЧ.ПоказыватьОповещение = Ложь;
	СтрокаТЧ.Использование = "ВызовСерверногоМетода";
	//
	
	//// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды)    Экспорт
	
	Если ИдентификаторКоманды = "ВыполнитьФоновыйОбмен"    Тогда
		ФоновоеЗадание_ВыполнитьОбмен();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции

// ПЕЧАТЬ

Функция ПоказатьСостояниеЗагруженногоЗаказа(Документ = Неопределено,Модально = Ложь) Экспорт
	
	Если НЕ Документ = Неопределено Тогда
		СсылкаНаОбъект = Документ;
	КонецЕсли;
	
	ФормаПросмотраСостояния = ПолучитьФорму("ФормаСервис_ПросмотрСостоянияЗаказа");
	
	Если Модально Тогда
		
		ФормаПросмотраСостояния.ОткрытьМодально();
		
	Иначе
		
		ФормаПросмотраСостояния.Открыть();
	
	КонецЕсли;
	
КонецФункции

Функция Печать() Экспорт
	
	ИнициализироватьПодключаемыеМодули();
	
	ПоказатьСостояниеЗагруженногоЗаказа();
	
	Возврат Неопределено;
	
КонецФункции

Функция МодальностьЗапрещена() Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	ТекВерсияПлатформы=СисИнфо.ВерсияПриложения;
	Остаток=Сред(СокрЛП(ТекВерсияПлатформы),3);  //и так ясно что "8." - в топку
	ВтораяЦифраВерсии=Число(Лев(Остаток,1)); //да полюбому 8.10.х не будет
	Остаток=Сред(СокрЛП(Остаток),3);
	ТретьяЦифраВерсии=Число(Лев(Остаток,Найти(Остаток,".")-1));
	
	Если (ВтораяЦифраВерсии=3 и ТретьяЦифраВерсии>=4) или ВтораяЦифраВерсии>3 Тогда 
		Попытка
			Если Строка(Метаданные.РежимИспользованияМодальности)  = "Использовать" Тогда 
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Исключение
			//платфома не в курсе что есть режим отказа от модальности
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//возвращает "81", "82" или "83". Синтаксис 8.3 считаем совпадающим с 8.2
Функция КонтурEDI_ВерсияПлатформы() Экспорт
	
	СИ=Новый СистемнаяИнформация;
	Если Лев(СИ.ВерсияПриложения,3)="8.1"  //перед нами 8.1
		Или Лев(СИ.ВерсияПриложения,1)="1" 
		Тогда //в документации путаница, на всякий случай попробуем так и так
		Возврат "81";
	ИначеЕсли Лев(СИ.ВерсияПриложения,3)="8.3" Тогда//влияет на инициализацию ПМ
		Возврат "83";
	Иначе
		Возврат "82";
	КонецЕсли;
	
КонецФункции

//точка входа для регламентного задания обмена с сервером
Процедура ФоновоеЗадание_ВыполнитьОбмен() Экспорт
	
	ИнициализироватьПодключаемыеМодули();
	ВыполнитьОбменССервером();
	ФинализироватьПодключаемыеМодули();
	
КонецПроцедуры	

Функция ПроверитьСуществованиеФайлаКаталога(ИмяФайла) Экспорт  //только проверяем

	НайденныйФайл = Новый Файл(ИмяФайла);
	
	Возврат НайденныйФайл.Существует();
	
КонецФункции

Функция EDIПроверитьСуществованиеКаталога(ИмяКаталога) Экспорт  //проверяем и предлагаем создать
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		#Если Клиент Тогда
			Ответ = Вопрос("Каталог: "+ИмяКаталога+" не существует. Создать?", 
			РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				СоздатьКаталог(ИмяКаталога);
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		#Иначе
			СоздатьКаталог(ИмяКаталога);
			Возврат Истина;
		#КонецЕсли
		
	КонецЕсли;
КонецФункции

Процедура ЗарегистрироватьОшибку(Результат,ТекстОшибки) Экспорт
	
	НоваяСтрока = Результат.ТаблицаОшибок.Добавить();
	
	НоваяСтрока.ТекстОшибки = ТекстОшибки;
	
КонецПроцедуры

Функция ИнициализироватьСтруктуруРезультатаФункции() Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки");
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("Успешно",			Ложь);
	СтруктураРезультата.Вставить("ТаблицаОшибок",	ТаблицаОшибок);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ОповеститьОбОшибках(Параметры,Заголовок) Экспорт
	
	//сюда неплохо бы закостылить: если действие выполняется под пользователем для автообмена, то только вывести сообщения в консоль
	Если ПараметрыПользователяEDI.ЭтоАвтообмен = Истина Тогда
		
		Для Каждого Стр Из Параметры.ТаблицаОшибок Цикл
			Сообщить_КонтурEDI(""+Стр.ТекстОшибки);
		КонецЦикла;	
		
	Иначе //выведем сообщения интерактивно	
	
		#Если Клиент Тогда
		ТаблицаОшибок = Параметры.ТаблицаОшибок;
		
		Если ТаблицаОшибок.Количество() > 0 Тогда
			
			ФормаВыводаОшибок = ПолучитьФорму("ФормаСервис_ВыводОшибок");
			ФормаВыводаОшибок.ТекстЗаголовка = Заголовок;
			ФормаВыводаОшибок.ТаблицаОшибок = ТаблицаОшибок;
			ФормаВыводаОшибок.ОткрытьМодально();
			
		КонецЕсли;
		#Иначе
		Для Каждого Стр Из Параметры.ТаблицаОшибок Цикл
			Сообщить_КонтурEDI(""+Стр.ТекстОшибки);
		КонецЦикла;	
		#КонецЕсли
		
	КонецЕсли;	
	
КонецФункции

Функция ТолькоЦифрыВСтроке_КонтурEDI(Стр) Экспорт
	
	Для к = 1 По СтрДлина(Стр) Цикл 
		Если Найти("0123456789",Сред(Стр,к,1))=0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
			
КонецФункции

Функция ЕстьЦифрыВСтроке_КонтурEDI(Стр) Экспорт
	
	Для к = 1 По СтрДлина(Стр) Цикл 
		Если Найти("0123456789",Сред(Стр,к,1))<>0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
			
КонецФункции

Функция ПолучитьНомерНаПечать_КонтурEDI(ДокументСсылка) Экспорт
	
	НомерДокумента = ОбработкаСобытияПодключаемогоМодуля("ПолучитьНомерНаПечать",,
			Новый Структура("ДокументСсылка",
			ДокументСсылка));
			
	Если НомерДокумента<>Неопределено Тогда
		Возврат НомерДокумента;
	КонецЕсли;			
	
	Если ИмяКонфигурации1С = "УТ_10_2" ИЛИ ИмяКонфигурации1С = "RIT" Тогда
		Выполнить("НомерДокумента = ПолучитьНомерНаПечать(ДокументСсылка);");
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда 
		    НомерДокумента = ДокументСсылка.Номер;
			Выполнить("НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерДокумента, Ложь, Истина)");
			//Выполнить("СтандартныеПодсистемыКлиентСерверПереопределяемый.ПолучитьНомерНаПечать(НомерДокумента, Истина)");

	ИначеЕсли ИмяКонфигурации1С = "УФ_БП" или ИмяКонфигурации1С = "УФ_УНФ" Тогда 
		    НомерДокумента = ДокументСсылка.Номер;
			Выполнить("НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерДокумента, Истина, Истина)");
			
	ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда 
		    НомерДокумента = ДокументСсылка.Номер;

	Иначе
		Попытка
			Выполнить("НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка);");
		Исключение
			Попытка
				Выполнить("НомерДокумента = ПолучитьНомерНаПечать(ДокументСсылка);"); // если нам попалась старая версия УПП с глобальными модулями
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
	Возврат НомерДокумента;
	
КонецФункции	

Функция ВывестиПредупреждение_КонтурEDI(ТекстПредупреждения,Таймаут = 0,Заголовок = "EDI.Контур") Экспорт
	
	Если (ТипЗнч(ПараметрыПользователяEDI) = Тип("Структура")
		И ПараметрыПользователяEDI.ЭтоАвтообмен = Истина)
		Или ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		// Для пользователя автообмена будем писать все предупреждения в консоль, чтоб не было модальных окон
		// То же самое - в режиме автотестов
		Сообщить_КонтурEDI(ТекстПредупреждения);
	Иначе
		#Если Клиент Тогда
			Предупреждение(ТекстПредупреждения,Таймаут,Заголовок);
		#Иначе
			Сообщить_КонтурEDI(ТекстПредупреждения);
		#КонецЕсли
	КонецЕсли;
	
КонецФункции

Функция ВывестиСообщениеПользователю(Текст,ИмяЭлементаФормы=Неопределено) Экспорт
	
	СИ = Новый СистемнаяИнформация;
	Если Лев(ИмяКонфигурации1С,3) = "УФ_" Тогда
		//в режиме управляемых форм покажем СообщениеПользователю, в остальных - Предупреждение
		Выполнить("
		|СП = Новый СообщениеПользователю;
		|СП.Текст = Текст;
		|СП.Поле = ИмяЭлементаФормы;
		|СП.Сообщить();
		|");
	Иначе
		ВывестиПредупреждение_КонтурEDI(Текст);
	КонецЕсли;
	
КонецФункции

//заглушка для вывода сообщений: в обычных формах и в УФ
Процедура Сообщить_КонтурEDI(ТекстСообщения,Парам2="",Парам3="") Экспорт
	
	//пример записи логов в файл. Можно также дублировать сообщения в журнал регистрации.
	//Если ТипЗнч(ПараметрыПользователяEDI) = Тип("Структура") И ПараметрыПользователяEDI.ЭтоАвтообмен = Истина Тогда
	//	Если обЗначениеНеЗаполнено(Лог) Тогда
	//		Лог = Новый ТекстовыйДокумент;
	//		ПутьКФайлу = мРабочийКаталог()+"\log_"+Формат(ТекущаяДата(),"ДФ=yyyy_MM_dd")+".txt";
	//		Лог.ИспользуемоеИмяФайла = ПутьКФайлу;
	//		Файл = Новый Файл(ПутьКФайлу);
	//		Если НЕ Файл.Существует() Тогда
	//			Лог.Записать(ПутьКФайлу);
	//		КонецЕсли;
	//	КонецЕсли;	
	//	Лог.Прочитать(Лог.ИспользуемоеИмяФайла);
	//	Лог.ДобавитьСтроку(ТекстСообщения);
	//	Лог.Записать(Лог.ИспользуемоеИмяФайла);
	//	Возврат;
	//КонецЕсли;
	
	#Если Клиент Тогда
		Сообщить(ТекстСообщения);
	#Иначе
		Выполнить("
			|СП = Новый СообщениеПользователю;
			|СП.Текст = ТекстСообщения;
			|СП.Сообщить();
		|");
	
	#КонецЕсли

КонецПроцедуры	

//заглушка для отрисовки статуса
Процедура Состояние_КонтурEDI(ТекстСообщения,Парам2="",Парам3="") Экспорт
	#Если Клиент Тогда
	Состояние(ТекстСообщения);
	#Иначе
	//СообщениеПользователю = Новый СообщениеПользователю;
	//СообщениеПользователю.Текст=ТекстСообщения;
	//СообщениеПользователю.Сообщить();
	#КонецЕсли
    //для УФ подумать как состояние лучше сделать
КонецПроцедуры	

Функция ПолучитьКартинкуEDI(ИсточникКартинки,ИмяКартинки) Экспорт
	
	Если ИсточникКартинки = "ЭлементФормы" Тогда
		
		НайденныйЭлемент = Неопределено;
		БиблиотекаКартинокEDI().Свойство(ИмяКартинки,НайденныйЭлемент);
		Возврат НайденныйЭлемент;
		
	КонецЕсли;
		
КонецФункции

//заглушка для совместимости с 8.1
Функция ПодключитьВнешнююКомпоненту_КонтурEDI(ИмяКомпоненты) Экспорт
	Результат=Истина;
	СИ=Новый СистемнаяИнформация;
	Если Лев(СИ.ВерсияПриложения,3)="8.1"  //перед нами 8.1
			Или Лев(СИ.ВерсияПриложения,1)="1" Тогда //в документации путаница, на всякий случай попробуем так и так
		Попытка
			Выполнить("ПодключитьВнешнююКомпоненту("""+ИмяКомпоненты+""");");//в 8.1 это было процедурой, в 8.2 стало функцией. Если будет ошибка, все равно свалимся в Исключение
		Исключение
			Результат=Ложь;
		КонецПопытки;	
	Иначе//8.2 и выше, тут все ок
		Выполнить("Результат = ПодключитьВнешнююКомпоненту("""+ИмяКомпоненты+""");");
	КонецЕсли;
	Возврат Результат;
КонецФункции	

//готовит текстовый файл с основными настройками модуля для отправки на диагностику
Функция ПодготовитьФайлНастроекМодуля()  Экспорт
	
	//соберем все константы
	ТаблицаКонстант = Новый ТаблицаЗначений;
	ТаблицаКонстант.Колонки.Добавить("Имя");
	ТаблицаКонстант.Колонки.Добавить("Значение");
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство КАК ИмяСвойства,
	|	КонтурEDI_ДополнительныеРеквизиты.Значение
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Объект = НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСвойства";
	ВыборкаСвойств = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСвойств.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКонстант.Добавить();
		НоваяСтрока.Имя = ВыборкаСвойств.ИмяСвойства;
		НоваяСтрока.Значение = ПолучитьКонстантуEDI(ВыборкаСвойств.ИмяСвойства);//не оптимально, но получать свойства пачкой станем через несколько релизов.
		
	КонецЦикла;

	//создадим файл
	ПутьКНастройкам = мРабочийКаталог+"КонтурEDI_Настройки.txt";
	
	Текст = Новый ТекстовыйДокумент;
	
	Текст.ДобавитьСтроку("Информация об 1С");
	
	Текст.ДобавитьСтроку("	Конфигурация = "+Метаданные.Синоним);
	Текст.ДобавитьСтроку("	Версия = "+Метаданные.Версия);
	
	Текст.ДобавитьСтроку("Информация о модуле:");
	
	Текст.ДобавитьСтроку("	Версия = "+ПолучитьНомерРелиза_КонтурEDI());
	Текст.ДобавитьСтроку("	ВариантХраненияДанных = "+?(ВнешнееХранилище,"ВнешнееХранилище","СвоиОбъекты"));
	
	Текст.ДобавитьСтроку("Настройки модуля:");
	
	Для каждого стр из ТаблицаКонстант Цикл
		
		Текст.ДобавитьСтроку("	"+Стр.Имя+" = "+СокрЛП(Стр.Значение));
		
	КонецЦикла;
	
	Текст.Записать(ПутьКНастройкам);
	
	Возврат ПутьКНастройкам;
	
КонецФункции

// РАБОТА С ДИАДОКОМ
Процедура ИнициализироватьРаботуСДиадоком() Экспорт
	
	ТребуемаяВерсияКомпонентыДиадок = "5_5_5_86";
	
	// загружаем компоненту
	КраткоеИмяДиадок="Diadoc_EDI_"+ТребуемаяВерсияКомпонентыДиадок;
	ПутьКФайлуКомпонентыДД =  КаталогВременныхФайлов()+КраткоеИмяДиадок+".dll";
	
	ЗагрузилиКомпоненту = Ложь;
	ФайлКомпоненты = Новый Файл(ПутьКФайлуКомпонентыДД);
	
	//если файла нет в темпе, то попробуем загрузить из кэша в базе
	Если Не ФайлКомпоненты.Существует() Тогда
		
		СохраненныйФайл=ПолучитьФайлИзБазы(КраткоеИмяДиадок);
		
		Если СохраненныйФайл=Неопределено Тогда
			//не нашлось кэша данного файла в базе, загрузим из интернета
			
			Состояние_КонтурEDI("Загрузка модуля Диадок с сервера...");
			Сообщить_КонтурEDI("Загрузка модуля Диадок с сервера...");//дубль в окно сообщений на всякий случай
			
			Если Не	ПолучитьФайлHTTP(
				ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
				"/1c/support/"+КраткоеИмяДиадок+".dll",
				ПутьКФайлуКомпонентыДД)
			Тогда
				ВывестиПредупреждение_КонтурEDI("Не удалось загрузить модуль Диадок с сервера. 
				|Обратитесь в техподдержку");
				Состояние_КонтурEDI("");
				Возврат;
			КонецЕсли;	
			
			Состояние_КонтурEDI("Сохранение (кэширование) модуля Диадок...");
			
			//и кэшируем загруженный файл в базе
			Если Не СохранитьФайлВБазу(ПутьКФайлуКомпонентыДД,КраткоеИмяДиадок) Тогда
				Сообщить_КонтурEDI("Не удалось сохранить модуль Диадок в базе, в следующий раз модуль будет повторно загружен с сайта");
			КонецЕсли;	
			
		Иначе	//модуль сохранен в базе
			СохраненныйФайл.Записать(ПутьКФайлуКомпонентыДД);
		КонецЕсли;	
	КонецЕсли;
	
	//теперь файл есть, подключим компоненту
	Попытка
		ЗагрузитьВнешнююКомпоненту(ПутьКФайлуКомпонентыДД);	
		ЗагрузилиКомпоненту = Истина;
	Исключение
		Попытка
			//если компонента уже зарегистрирована в системе, попробуем ее инициализировать по имени класса
			ПодключитьВнешнююКомпоненту("AddIn.DiadocInvoiceAPI");    
			ЗагрузилиКомпоненту = Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецПопытки;
	
    //и дадим все нужные настройки/объекты модулю
	Если ЗагрузилиКомпоненту Тогда
		
		РаботаССерверомДиадок.Используется = Истина;
		
		// создание объекта контекста API
		ДиадокАПИ_ = Новый("AddIn.DiadocInvoiceAPI");
		ДиадокАПИ  = ДиадокАпи_.CreateObject();
		
		//Задаем параметры подлючения к серверу
		ДиадокАПИ.ApiClientId = "1S-Box2_19-b9b4602d-c9fa-4680-ad9a-0bd740eed1c8";
		ДиадокАПИ.ServerUrl   = "https://diadoc-api.kontur.ru:443";
		
		РаботаССерверомДиадок.АПИ = ДиадокАПИ;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьСоединениеСДиадокомПоЛогину(Логин,Пароль)
	
	Если НЕ РаботаССерверомДиадок.Используется Тогда
		ИнициализироватьРаботуСДиадоком();
	КонецЕсли;
	
	Если НЕ РаботаССерверомДиадок.Используется Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ДиадокСоединение = РаботаССерверомДиадок.АПИ.CreateConnectionByLogin(Логин,Пароль);
		РаботаССерверомДиадок.Соединение = ДиадокСоединение;         
	Исключение
		РаботаССерверомДиадок.Используется = Ложь;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСоединениеСДиадокомПоУмолчанию(ВыводитьПредупреждения = Истина) Экспорт
	
	Если РаботаССерверомДиадок.Используется Тогда
		Возврат Истина;
	КонецЕсли;
	
	Логин = ПараметрыПользователяEDI.ЛогинСлужебныйДиадок;
	Пароль = ПараметрыПользователяEDI.ПарольСлужебныйДиадок;
	
	Если ЗначениеЗаполнено(Логин) и ЗначениеЗаполнено(Пароль) Тогда
		Если УстановитьСоединениеСДиадокомПоЛогину(Логин,Пароль) Тогда
			Возврат Истина;
		Иначе
			Если ВыводитьПредупреждения Тогда
				ВывестиПредупреждение_КонтурEDI("Не удалось установить соединение с Диадоком! 
				|Проверьте параметры подключения в настройках модуля на вкладке ЭДО (Диадок).");
			КонецЕсли;
		КонецЕсли;	
	Иначе
		Если ВыводитьПредупреждения Тогда
			ВывестиПредупреждение_КонтурEDI("Не указаны параметры подключения к Диадоку! 
			|Введите логин и пароль в меню настроек на вкладке ЭДО (Диадок).");
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//СтруктураКолонокПреобразуемыхВСсылки = Структура
//Ключ - имя преобразуемой колонки
//Значение - тип колонки в текущей базе (объект ОписаниеТипов)
Функция ПолучитьТаблицуИзВнешнейБазы(ВнешняяТаблица,СтруктураКолонокПреобразуемыхВСсылки=Неопределено) Экспорт
	
	//можно еще в ТипыПреобразуемыхКолонок дать возможность писать пустое значение, чтоб по умолчанию преобразовывалось в Строка(80)
	
	//на рефакторинг: разобраться с пакетным преобразованием колонок
	
	БыстроеПреобразование = Истина; //для отладки, чтобы можно было отключить в случае чего
		
	Если СтруктураКолонокПреобразуемыхВСсылки = Неопределено Тогда
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура;
	КонецЕсли;	
	ПреобразуемыеКолонки = Новый Массив;
	ТипыПреобразуемыхКолонок = Новый Массив;
	
	Для Каждого Эл Из СтруктураКолонокПреобразуемыхВСсылки Цикл
		ПреобразуемыеКолонки.Добавить(Эл.Ключ);
		ТипыПреобразуемыхКолонок.Добавить(Эл.Значение);
	КонецЦикла;	
	
	СтрокаПреобразуемыеКолонки = "";
	Для Каждого Эл Из ПреобразуемыеКолонки Цикл
		СтрокаПреобразуемыеКолонки = СтрокаПреобразуемыеКолонки+?(СтрокаПреобразуемыеКолонки="","",",")+Эл;
	КонецЦикла;	
	
	ВнутренняяТаблица = Новый ТаблицаЗначений;
	МассивКолонокПреобразуемыхВСтроки = Новый Массив;
	
	Для Каждого Колонка Из ВнешняяТаблица.Колонки Цикл
		
		ЭтоПримитивныйТип = Истина;
		ТипыВнешнейКолонки = Колонка.ТипЗначения.Типы();
		Для Каждого Эл Из ТипыВнешнейКолонки Цикл 
			ТипЗначенияКолонкиСтрокой = СоединениеСХранилищем.String(Эл);
			Если (ТипЗначенияКолонкиСтрокой <> "Дата"
				и ТипЗначенияКолонкиСтрокой <> "Булево"
				и ТипЗначенияКолонкиСтрокой <> "Строка"
				и ТипЗначенияКолонкиСтрокой <> "Число"
				и ТипЗначенияКолонкиСтрокой <> "Null")
				Тогда
				ЭтоПримитивныйТип = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		ИндексПреобразуемойКолонки = ПреобразуемыеКолонки.Найти(Колонка.Имя);
		
		Если ИндексПреобразуемойКолонки<>Неопределено Тогда
			//ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя,ТипыПреобразуемыхКолонок[ИндексПреобразуемойКолонки]);
			Если ЗначениеЗаполнено(ТипыПреобразуемыхКолонок[ИндексПреобразуемойКолонки]) Тогда
				ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя,ТипыПреобразуемыхКолонок[ИндексПреобразуемойКолонки]);
			Иначе
				ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя);
			КонецЕсли;
		ИначеЕсли ЭтоПримитивныйТип	Тогда
		    //это примитивные типы. Их перетащим прямо как есть
			ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя,ЗначениеИзСтрокиВнутр(СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Колонка.ТипЗначения)));
			
		Иначе	//это ссылки внешней базы. Преобразуем их в Строка(80)
			ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(80));
			ВнутренняяТаблица.Колонки.Добавить(Колонка.Имя,ОписаниеТиповСтрока);
			
			МассивКолонокПреобразуемыхВСтроки.Добавить(Колонка.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаВнешнейТаблицы Из ВнешняяТаблица Цикл
		Нов = ВнутренняяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(Нов,СтрокаВнешнейТаблицы,,СтрокаПреобразуемыеКолонки);
	КонецЦикла;
	
	Для Каждого ТекКолонка Из ПреобразуемыеКолонки Цикл
		//преобразовать Строки внешней базы в Ссылки текущей базы
		
		Если Не БыстроеПреобразование Тогда
		//вариант поштучного преобразования
			Сч=0;
			Для Каждого СтрокаВнешнейТаблицы Из ВнешняяТаблица Цикл
				Если ЗначениеЗаполнено(СтрокаВнешнейТаблицы[ТекКолонка]) Тогда
					ВнутренняяТаблица[Сч][ТекКолонка] = ЗначениеИзСтрокиВнутр(СтрокаВнешнейТаблицы[ТекКолонка]);
				КонецЕсли;	
				Сч=Сч+1;
			КонецЦикла;	
		Иначе
			//а здесь - быстрое преобразование пачкой
			МассивДляПреобразования = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(ВнешняяТаблица.ВыгрузитьКолонку(ТекКолонка));
			НоваяСтрока = МассивДляПреобразования;
			
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""S"",""{""""#"""","		,	"{""#"","	);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""S"",""{""""U""""}""}"	,	"{""U""}"	);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"}""}"						,	"}"			);
			
			ПреобразованноеЗначение = ЗначениеИзСтрокиВнутр(НоваяСтрока);
			ВнутренняяТаблица.ЗагрузитьКолонку(ПреобразованноеЗначение,ТекКолонка);
		 КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекКолонка Из МассивКолонокПреобразуемыхВСтроки Цикл
		//преобразовать Ссылки во внешней базе в Строки в текущей базе
		Попытка
			//быстрое преобразование пачкой
			МассивДляПреобразования = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(ВнешняяТаблица.ВыгрузитьКолонку(ТекКолонка));
			НоваяСтрока = МассивДляПреобразования;
			
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""#"","		,	"{""S"",""{""""#"""","	);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"}"				,	"}""}"					);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""U""}""}"	,	"{""U""}"				);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""L""}""}"	,	"{""L""}"				);
			
			НоваяСтрока = "{""#"""+Сред(НоваяСтрока,13);
			НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-7)+
			"}
			|}";
			ПреобразованноеЗначение = ЗначениеИзСтрокиВнутр(НоваяСтрока);
			ВнутренняяТаблица.ЗагрузитьКолонку(ПреобразованноеЗначение,ТекКолонка);
		Исключение
			//вариант поштучного преобразования
			Сч=0;
			Для Каждого СтрокаВнешнейТаблицы Из ВнешняяТаблица Цикл
				Если СтрокаВнешнейТаблицы[ТекКолонка]=NULL Тогда
					ВнутренняяТаблица[Сч][ТекКолонка] = NULL
				ИначеЕсли СтрокаВнешнейТаблицы[ТекКолонка]=Неопределено Тогда
					ВнутренняяТаблица[Сч][ТекКолонка] = Неопределено
				Иначе	
					ВнутренняяТаблица[Сч][ТекКолонка] = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(СтрокаВнешнейТаблицы[ТекКолонка]);
				КонецЕсли;
				Сч=Сч+1;
			КонецЦикла;	
		КонецПопытки;	
	КонецЦикла;
	
	Возврат ВнутренняяТаблица;
	
КонецФункции	


//СтруктураКолонокПреобразуемыхВСсылки = Структура
//Ключ - имя преобразуемой колонки
//Значение - тип колонки во внешней базе
//Поскольку во внешней базе всего 3 ссылочных типа - КонтурEDI_ДополнительныеСправочники,КонтурEDI_ТочкиДоставки,КонтурEDI_Сообщения, то используются именно эти значения
Функция ПоместитьТаблицуВоВнешнююБазу(ВнутренняяТаблица,СтруктураКолонокПреобразуемыхВСсылки=Неопределено) Экспорт
	
	//на самом деле, мы можем преобразовать в таблице колонки и закинуть ее полностью через ЗначениеВСтрокуВнутр
	
	БыстроеПреобразование = Истина; //для отладки, чтобы можно было отключить в случае чего
	
	Если СтруктураКолонокПреобразуемыхВСсылки = Неопределено Тогда
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура;
	КонецЕсли;	
	ПреобразуемыеКолонки = Новый Массив;
	ТипыПреобразуемыхКолонок = Новый Массив;
	
	Для Каждого Эл Из СтруктураКолонокПреобразуемыхВСсылки Цикл
		ПреобразуемыеКолонки.Добавить(Эл.Ключ);
		ТипыПреобразуемыхКолонок.Добавить(Эл.Значение);
	КонецЦикла;	
	
	СтрокаПреобразуемыеКолонки = "";
	Для Каждого Эл Из ПреобразуемыеКолонки Цикл
		СтрокаПреобразуемыеКолонки = СтрокаПреобразуемыеКолонки+?(СтрокаПреобразуемыеКолонки="","",",")+Эл;
	КонецЦикла;	
	
	ВнешняяТаблица = СоединениеСХранилищем.NewObject("ТаблицаЗначений");	
	
	//1. Подготовим колонки таблицы
	МассивКолонокПреобразуемыхВСтроки = Новый Массив;
	
	Для Каждого Колонка Из ВнутренняяТаблица.Колонки Цикл
		
		ЭтоПримитивныйТип = Истина;
		СодержитNULL = Ложь;
		
		ТипыВнутреннейКолонки = Колонка.ТипЗначения.Типы();
		Для Каждого Эл Из ТипыВнутреннейКолонки Цикл
			ТипЗначенияКолонкиСтрокой = Строка(Эл);
			Если (ТипЗначенияКолонкиСтрокой <> "Дата"
				и ТипЗначенияКолонкиСтрокой <> "Булево"
				и ТипЗначенияКолонкиСтрокой <> "Строка"
				и ТипЗначенияКолонкиСтрокой <> "Число"
				и ТипЗначенияКолонкиСтрокой <> "Null")
				Тогда
				ЭтоПримитивныйТип = Ложь;
			КонецЕсли;
			
			Если ТипЗначенияКолонкиСтрокой = "Null" Тогда
				СодержитNULL = истина;
			КонецЕсли;	

		КонецЦикла;	
		
		ИндексПреобразуемойКолонки = ПреобразуемыеКолонки.Найти(Колонка.Имя);
		
		Если ИндексПреобразуемойКолонки<>Неопределено Тогда
			//такие колонки нам надо преобразовать в тип внешней базы
			
			ТипВнешнейБазы = СоединениеСХранилищем.ПолучитьТипЗначения(ТипыПреобразуемыхКолонок[ИндексПреобразуемойКолонки]);
			ВнешняяТаблица.Колонки.Добавить(Колонка.Имя,ТипВнешнейБазы);
		ИначеЕсли ЭтоПримитивныйТип Тогда
		    //это примитивные типы. Их перетащим прямо как есть
			ВнешняяТаблица.Колонки.Добавить(Колонка.Имя,СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Колонка.ТипЗначения)));
			
			
		Иначе
			//тут остаются типы, которые в текуще базе являются ссылками, а во внешней будут строками
			
			//преобразуем такие колонки в Строки
			
			МассивТиповКолонки_Внеш = Новый Массив;
			Если СодержитNULL Тогда
				МассивТиповКолонки_Внеш.Добавить(Тип("Null"));
			КонецЕсли;
			МассивТиповКолонки_Внеш.Добавить(Тип("Строка"));
			
			ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТиповКолонки_Внеш,,Новый КвалификаторыСтроки(80));
			ВнешняяТаблица.Колонки.Добавить(Колонка.Имя,СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ОписаниеТиповСтрока)));
			
			//и пометить их, чтобы при заполнении внешней таблицы преобразовать их в Строки!!!
			МассивКолонокПреобразуемыхВСтроки.Добавить(Колонка.Имя);
			
		КонецЕсли;	
	КонецЦикла;	
	
	//2. Перекачаем строки в созданную таблицу
	
	Для Сч = 0 По ВнутренняяТаблица.Количество()-1 Цикл
		Нов = ВнешняяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(Нов,ВнутренняяТаблица[Сч],,СтрокаПреобразуемыеКолонки);
		//колонки из МассивКолонокПреобразуемыхВСтроки тоже заполнятся, ну и ладно пока
	КонецЦикла;
	
	Для Каждого ТекКолонка Из ПреобразуемыеКолонки Цикл
		//преобразовать Строки из текущей таблицы в Ссылки во внешней базе
		Если Не БыстроеПреобразование Тогда
			//поштучное преобразование
			Сч=0;
			Для Каждого ВнешняяСтрока Из ВнешняяТаблица Цикл
				ВнешняяСтрока[ТекКолонка] = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ВнутренняяТаблица[Сч][ТекКолонка]);
				Сч=Сч+1;
			КонецЦикла;	
		Иначе
			//а здесь - быстрое преобразование пачкой
			МассивДляПреобразования = ЗначениеВСтрокуВнутр(ВнутренняяТаблица.ВыгрузитьКолонку(ТекКолонка));
			НоваяСтрока = МассивДляПреобразования;
			
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""S"",""{""""#"""","	,	"{""#"","	);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"}""}"					,	"}"			);
			
			ПреобразованноеЗначение = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(НоваяСтрока);
			ВнешняяТаблица.ЗагрузитьКолонку(ПреобразованноеЗначение,ТекКолонка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекКолонка Из МассивКолонокПреобразуемыхВСтроки Цикл
		//преобразовать Ссылки в текущей базе в Строки во внешней базе
		
		Попытка
			//быстрое преобразование пачкой
			МассивДляПреобразования = ЗначениеВСтрокуВнутр(ВнутренняяТаблица.ВыгрузитьКолонку(ТекКолонка));
			НоваяСтрока = МассивДляПреобразования;
			
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""#"","		,	"{""S"",""{""""#"""","	);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"}"				,	"}""}"					);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""L""}""}"	,	"{""L""}"				);
			НоваяСтрока = СтрЗаменить(НоваяСтрока,	"{""U""}""}"	,	"{""U""}"				);
			
			НоваяСтрока = "{""#"""+Сред(НоваяСтрока,13);
			НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-7)+
			"}
			|}";
			ПреобразованноеЗначение = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(НоваяСтрока);
			ВнешняяТаблица.ЗагрузитьКолонку(ПреобразованноеЗначение,ТекКолонка);
		Исключение	
			//поштучное преобразование
			Сч=0;
			Для Каждого ВнешняяСтрока Из ВнешняяТаблица Цикл
				Если ВнутренняяТаблица[Сч][ТекКолонка] = NULL Тогда
					ВнешняяСтрока[ТекКолонка] = NULL;
				ИначеЕсли ВнутренняяТаблица[Сч][ТекКолонка] = Неопределено Тогда
					ВнешняяСтрока[ТекКолонка] = Неопределено;
				Иначе	
					ВнешняяСтрока[ТекКолонка] = ЗначениеВСтрокуВнутр(ВнутренняяТаблица[Сч][ТекКолонка]);
				КонецЕсли;
				Сч=Сч+1;
			КонецЦикла;
		КонецПопытки;
	КонецЦикла;
	
	Возврат ВнешняяТаблица;
КонецФункции	

//Передает временную таблицу ИмяВТ из запроса ЛокальныйЗапрос в ВнешнийЗапрос.
//При необходимости индексирует ее по полям Индексы (Строка через запятые), и конвертирует поля СтруктураКолонокПреобразуемыхВСсылки.
Процедура ПередатьВременнуюТаблицуВоВнешнийЗапрос(ИмяВТ,ЛокальныйЗапрос,ВнешнийЗапрос,СтруктураКолонокПреобразуемыхВСсылки=Неопределено,Индексы=Неопределено)
	ИсходныйТекстЗапроса_Локальный	= ЛокальныйЗапрос.Текст;
	ИсходныйТекстЗапроса_Внешний	= ВнешнийЗапрос.Текст;
	
	//выгрузим ВТ в ТаблицуЗначений
	ЛокальныйЗапрос.Текст = "Выбрать * Из "+ИмяВТ;
	ВТ = ЛокальныйЗапрос.Выполнить().Выгрузить();
	ВТ = ПоместитьТаблицуВоВнешнююБазу(ВТ,СтруктураКолонокПреобразуемыхВСсылки);//передадим ТаблицуЗначений с локальной базы во внешнее соединение
	
	//подготовим текст запроса для помещения ТаблицыЗначений во ВременнуюТаблицу ВнешнегоЗапроса
	ВнешнийЗапрос.Текст = "Выбрать * Поместить "+ИмяВТ+" Из &"+ИмяВТ+" как "+ИмяВТ;
	Если ЗначениеЗаполнено(Индексы) Тогда
		ВнешнийЗапрос.Текст = ВнешнийЗапрос.Текст+" Индексировать по "+Индексы;
	КонецЕсли;	
	ВнешнийЗапрос.УстановитьПараметр(ИмяВТ,ВТ);
	ВнешнийЗапрос.Выполнить();//создадим врем.таблицу
//	СоединениеСХранилищем.ВыполнитьЗапросСОтладкой(ВнешнийЗапрос); //отладка
	
	//вернем обратно исходные тексты запросов
	ЛокальныйЗапрос.Текст	= ИсходныйТекстЗапроса_Локальный;
	ВнешнийЗапрос.Текст		= ИсходныйТекстЗапроса_Внешний;
	
КонецПроцедуры	

//Передает временную таблицу ИмяВТ из запроса ВнешнийЗапрос в ЛокальныйЗапрос.
//При необходимости индексирует ее по полям Индексы (Строка через запятые), и конвертирует поля СтруктураКолонокПреобразуемыхВСсылки.
Процедура ПередатьВременнуюТаблицуВЛокальныйЗапрос(ИмяВТ,ЛокальныйЗапрос,ВнешнийЗапрос,СтруктураКолонокПреобразуемыхВСсылки=Неопределено,Индексы=Неопределено)
	ИсходныйТекстЗапроса_Локальный	= ЛокальныйЗапрос.Текст;
	ИсходныйТекстЗапроса_Внешний	= ВнешнийЗапрос.Текст;
	
	//выгрузим ВТ в ТаблицуЗначений
	ВнешнийЗапрос.Текст = "Выбрать * Из "+ИмяВТ;
//	ВТ = СоединениеСХранилищем.ВыполнитьЗапросСОтладкой(ВнешнийЗапрос).Выгрузить(); //отладка
	ВТ = ВнешнийЗапрос.Выполнить().Выгрузить();
	ВТ = ПолучитьТаблицуИзВнешнейБазы(ВТ,СтруктураКолонокПреобразуемыхВСсылки);//конвертируем ТаблицуЗначений внешнего соединения в локальную ТаблицуЗначений
	
	//подготовим текст запроса для помещения ТаблицыЗначений во ВременнуюТаблицу ЛокальногоЗапроса
	ЛокальныйЗапрос.Текст = "Выбрать * Поместить "+ИмяВТ+" Из &"+ИмяВТ+" как "+ИмяВТ;
	
	Если ЗначениеЗаполнено(Индексы) Тогда
		ЛокальныйЗапрос.Текст = ЛокальныйЗапрос.Текст+" Индексировать по "+Индексы;
	КонецЕсли;	
	ЛокальныйЗапрос.УстановитьПараметр(ИмяВТ,ВТ);
	ЛокальныйЗапрос.Выполнить();//создадим врем.таблицу
	
	//вернем обратно исходные тексты запросов
	ЛокальныйЗапрос.Текст	= ИсходныйТекстЗапроса_Локальный;
	ВнешнийЗапрос.Текст		= ИсходныйТекстЗапроса_Внешний;
	
КонецПроцедуры	

//выбирает все поля из временной таблицы ИмяВТ запроса Запрос, и возвращает их в виде ТаблицыЗначений
//используется для отладки
Функция ПросмотретьВременнуюТаблицуЗапроса(Запрос,ИмяВТ) Экспорт
	ТекстЗапроса_Исходный = Запрос.Текст;
	Запрос.Текст = "Выбрать * Из "+ИмяВТ;
	Попытка
		ТЗ = Запрос.Выполнить().Выгрузить();
	Исключение
		//например, указали не то имя ВТ 
	КонецПопытки;	
	
	Запрос.Текст = ТекстЗапроса_Исходный;
	Возврат ТЗ;
КонецФункции	

// Разбивает строку на несколько строк, используя заданный набор разделителей.
//
// Параметры:
//  Строка          - Строка - строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - строка, содержащая символы-разделители.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - отдельные слова
//
// Пример:
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три", "-") возвратит массив значений: "один", "@#два2_!три";
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив значений: "один-", "два2", "три".
//
Функция EDI_РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов="") Экспорт
	
	Слова = Новый Массив;
	
	Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
		Строка = СтрЗаменить(Строка,Сред(РазделителиСлов,Сч,1),Символы.ПС);
	КонецЦикла;
	
	Для Сч=1 По СтрЧислоСтрок(Строка) Цикл
		ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка,Сч));
		Если ТекСлово<>"" Тогда
			Слова.Добавить(ТекСлово);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Слова;
	
КонецФункции

#Если Клиент Тогда
Функция ПолучитьФормуИнтерактивнойСправки(КодРаздела,ВладелецФормы) Экспорт
	
	НеОткрывать = ВосстановитьЗначение("КонтурEDI_НеПоказыватьСправку_"+КодРаздела);
	Если НеОткрывать = Неопределено Тогда
		НеОткрывать = Ложь;
	КонецЕсли;

	Если НеОткрывать Тогда
		Возврат Неопределено;//пользователь уже смотрел этот раздел и больше не хочет	
	КонецЕсли;
	
	URL = Неопределено;
	МакетРазделовСправки = ПолучитьМакет("РазделыСправки");
	Для Сч=2 по МакетРазделовСправки.ВысотаТаблицы Цикл
		Если ПолучитьТекстЯчейкиОбласти(МакетРазделовСправки,Сч,1)=КодРаздела Тогда
			URL = ПолучитьТекстЯчейкиОбласти(МакетРазделовСправки,Сч,2);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если URL<>Неопределено Тогда
		ФРМ = ПолучитьФорму("ФормаСервис_НовоеВРелизе",ВладелецФормы);
		ФРМ.КодРаздела = КодРаздела;
		ФРМ.URL = URL;
	КонецЕсли;
	
	Возврат ФРМ;
	
КонецФункции

#КонецЕсли

Процедура ОбработатьВозвратнуюТару_УФ(Товары,ОтправлятьВозвратнуюТару,ТипСообщения) Экспорт  //уничтожим тару если её не должно быть в этом сообщении
	//!!!
	//Внимание!
	//Если Вы решили изменить Этот механизм, то лучше сделайте это в подключаемом модуле в событии ПослеПолученияТоваровДокумента1С!
	//включив константу ОтправлятьВозвратную тару
	
	ОпределитьРелизКонфигурации();
	
	Если (ТипСообщения <> "INVOIC" и ТипСообщения <> "DESADV" и ТипСообщения <> "COINVOIC") 
		ИЛИ ОтправлятьВозвратнуюТару=Ложь Тогда
		//тара в таком сообщении не нужна                         
		КоличествоСтрок=Товары.Количество();
		Если КоличествоСтрок>0 Тогда 
			Для й=1 по КоличествоСтрок Цикл    //обойдем ТЗ с конца, удаляя лишние строки
				ТекСтрока=Товары[КоличествоСтрок-й];
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)Тогда 
					Если ЭтоСтрокаС_Тарой_УФ(ТекСтрока) Тогда
						Товары.Удалить(ТекСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли (ТипСообщения = "INVOIC" ИЛИ ТипСообщения = "DESADV" ИЛИ ТипСообщения = "COINVOIC") и ОтправлятьВозвратнуюТару=Истина Тогда
		Попытка
		Для Каждого СтрокаТоваров Из Товары Цикл
			Если ЭтоСтрокаС_Тарой_УФ(СтрокаТоваров) Тогда 
				СтрокаТоваров.ТипЕдиницы = "RC";
			КонецЕсли;
		КонецЦикла;	
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСтрокаС_Тарой_УФ(ТекСтрока)Экспорт
	//ТекСтрока.номенклатура заполнена
	
	Если ИмяКонфигурации1С="УФ_УТ" и РелизКонфигурации1С="11.1" Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.ВидНоменклатуры) 
			И ЗначениеЗаполнено(ТекСтрока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры)
			И ТекСтрока.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		//напишите условия по выбрасыванию тары для вашей конфигурации в подключаемом модуле, событие и ключ глобального поиска: "ПослеПолученияТоваровДокумента1С"
		// используйте ОбработатьВозвратнуюТару_УФ и адаптированную ЭтоСтрокаС_Тарой_УФ в ПМ
		
		//дополнительно:
		//УНФ 1.5 - нет понятия возвратная тара
		//БП 3.0 - отдельная таб часть - уже обработано на этапе получения товаров документа запросом
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

//Сборка pricelist
Функция ПолучитьВыборкуДанныхПоНоменклатуре(Номенклатура = Неопределено,ПараметрыЗаполнения) Экспорт
	
	// самый простой запрос, не учитываем:
	// - наличие характеристик (их совсем игнорируем)
	// - несколько штрихкодов на один товар
	// - цена может быть рассчитываемой
	// - цена может быть в другой валюте
	
	ВыборкаБезЦен = ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ТипЦен), Ложь, Истина);
	
	Запрос = Новый Запрос();
	Если ИмяКонфигурации1С = "КА"
		или ИмяКонфигурации1С = "УПП"
		или ИмяКонфигурации1С = "УТ_10_2"
		или ИмяКонфигурации1С = "УТ_10_3" Тогда
		
		Если ВыборкаБезЦен Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СправочникНоменклатура.Родитель КАК Родитель,
			|	СправочникНоменклатура.Ссылка КАК Номенклатура,
			|	СправочникНоменклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	СправочникНоменклатура.Код КАК КодТовараПоставщика,
			|	СправочникНоменклатура.НаименованиеПолное КАК Наименование,
			|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДС,
			|	0 КАК Цена,
			|	Штрихкоды.Штрихкод КАК GTIN,
			|	СправочникНоменклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоВОдномМесте,
			|	СправочникНоменклатура.СтранаПроисхождения КАК Страна,
			|	NULL КАК КвантПоставки,
			|	NULL КАК ЕдИзмСрокаГодности,
			|	NULL КАК СрокГодности
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
			|		ПО СправочникНоменклатура.Ссылка = Штрихкоды.Владелец
			|			И (Штрихкоды.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.))
			|			И (Штрихкоды.ЕдиницаИзмерения = СправочникНоменклатура.ЕдиницаХраненияОстатков)
			|ГДЕ
			|	НЕ СправочникНоменклатура.ЭтоГруппа
			|	И НЕ СправочникНоменклатура.ПометкаУдаления
			|	И НЕ СправочникНоменклатура.Услуга
			|	И &УсловиеОтбораНоменклатуры";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель КАК Родитель,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Ссылка КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Код КАК КодТовараПоставщика,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.НаименованиеПолное КАК Наименование,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
			|	ЦеныНоменклатурыСрезПоследних.Цена,
			|	Штрихкоды.Штрихкод КАК GTIN,
			|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент КАК КоличествоВОдномМесте,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.СтранаПроисхождения КАК Страна,
			|	NULL КАК КвантПоставки,
			|	NULL КАК ЕдИзмСрокаГодности,
			|	NULL КАК СрокГодности
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			ТипЦен = &ТипЦен
			|				И НЕ Номенклатура.ПометкаУдаления
			|				И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.)
			|				И НЕ Номенклатура.Услуга
			|				И &УсловиеОтбораНоменклатуры) КАК ЦеныНоменклатурыСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
			|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = Штрихкоды.Владелец
			|			И (Штрихкоды.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.))
			|			И (Штрихкоды.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения)
			|ГДЕ
			|	ЦеныНоменклатурыСрезПоследних.Цена > 0";
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "БП"
		или ИмяКонфигурации1С = "УФ_БП" Тогда
		
		Если ВыборкаБезЦен Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СправочникНоменклатура.Родитель КАК Родитель,
			|	СправочникНоменклатура.Ссылка КАК Номенклатура,
			|	СправочникНоменклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СправочникНоменклатура.Код КАК КодТовараПоставщика,
			|	СправочникНоменклатура.НаименованиеПолное КАК Наименование,
			|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДС,
			|	0 КАК Цена,
			|	NULL КАК GTIN,
			|	NULL КАК КоличествоВОдномМесте,
			|	СправочникНоменклатура.СтранаПроисхождения КАК Страна,
			|	NULL КАК КвантПоставки,
			|	NULL КАК ЕдИзмСрокаГодности,
			|	NULL КАК СрокГодности
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ГДЕ
			|	НЕ СправочникНоменклатура.ЭтоГруппа
			|	И НЕ СправочникНоменклатура.ПометкаУдаления
			|	И НЕ СправочникНоменклатура.Услуга
			|	И &УсловиеОтбораНоменклатуры";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель КАК Родитель,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Ссылка КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Код КАК КодТовараПоставщика,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.НаименованиеПолное КАК Наименование,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
			|	ЦеныНоменклатурыСрезПоследних.Цена,
			|	NULL КАК GTIN,
			|	NULL КАК КоличествоВОдномМесте,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.СтранаПроисхождения КАК Страна,
			|	NULL КАК КвантПоставки,
			|	NULL КАК ЕдИзмСрокаГодности,
			|	NULL КАК СрокГодности
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			ТипЦен = &ТипЦен
			|				И НЕ Номенклатура.ПометкаУдаления
			|				И НЕ Номенклатура.Услуга
			|				И &УсловиеОтбораНоменклатуры) КАК ЦеныНоменклатурыСрезПоследних
			|ГДЕ
			|	ЦеныНоменклатурыСрезПоследних.Цена > 0";
		КонецЕсли;
		Если ИмяКонфигурации1С = "УФ_БП" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".БазоваяЕдиницаИзмерения",".ЕдиницаИзмерения");	
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
		
		Если ВыборкаБезЦен Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СправочникНоменклатура.Родитель КАК Родитель,
			|	СправочникНоменклатура.Ссылка КАК Номенклатура,
			|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СправочникНоменклатура.Код КАК КодТовараПоставщика,
			|	СправочникНоменклатура.НаименованиеПолное КАК Наименование,
			|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДС,
			|	0 КАК Цена,
			|	Штрихкоды.Штрихкод КАК GTIN,
			|	NULL КАК КоличествоВОдномМесте,
			|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК Страна,
			|	NULL КАК КвантПоставки,
			|	NULL КАК ЕдИзмСрокаГодности,
			|	NULL КАК СрокГодности
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|		ПО СправочникНоменклатура.Ссылка = Штрихкоды.Номенклатура
			|			И (Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.))
			|			И (Штрихкоды.Упаковка = СправочникНоменклатура.ЕдиницаИзмерения)
			|ГДЕ
			|	НЕ СправочникНоменклатура.ЭтоГруппа
			|	И НЕ СправочникНоменклатура.ПометкаУдаления
			|	И НЕ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|	И &УсловиеОтбораНоменклатуры";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель КАК Родитель,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Ссылка КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК ЕдиницаИзмерения,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Код КАК КодТовараПоставщика,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.НаименованиеПолное КАК Наименование,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
			|	ЦеныНоменклатурыСрезПоследних.Цена,
			|	Штрихкоды.Штрихкод КАК GTIN,
			|	ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент КАК КоличествоВОдномМесте,
			|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК Страна,
			|	NULL КАК КвантПоставки,
			|	NULL КАК ЕдИзмСрокаГодности,
			|	NULL КАК СрокГодности
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			ВидЦены = &ТипЦен
			|				И НЕ Номенклатура.ПометкаУдаления
			|				И НЕ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|				И &УсловиеОтбораНоменклатуры) КАК ЦеныНоменклатурыСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = Штрихкоды.Номенклатура
			|			И (Штрихкоды.Упаковка = ЦеныНоменклатурыСрезПоследних.Упаковка) 
			|ГДЕ
			|	ЦеныНоменклатурыСрезПоследних.Цена > 0";
		КонецЕсли;
		Если ОпределитьРелизКонфигурации()="11.2" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,".Коэффициент",".КоличествоУпаковок");	
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда
		
		Если ВыборкаБезЦен Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СправочникНоменклатура.Родитель КАК Родитель,
			|	СправочникНоменклатура.Ссылка КАК Номенклатура,
			|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СправочникНоменклатура.Код КАК КодТовараПоставщика,
			|	СправочникНоменклатура.НаименованиеПолное КАК Наименование,
			|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДС,
			|	0 КАК Цена,
			|	Штрихкоды.Штрихкод КАК GTIN,
			|	NULL КАК КоличествоВОдномМесте,
			|	СправочникНоменклатура.СтранаПроисхождения КАК Страна,
			|	NULL КАК КвантПоставки,
			|	NULL КАК ЕдИзмСрокаГодности,
			|	NULL КАК СрокГодности
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|		ПО СправочникНоменклатура.Ссылка = Штрихкоды.Номенклатура
			|			И (Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.))
			|			И (Штрихкоды.ЕдиницаИзмерения = СправочникНоменклатура.ЕдиницаИзмерения)
			|ГДЕ
			|	НЕ СправочникНоменклатура.ЭтоГруппа
			|	И НЕ СправочникНоменклатура.ПометкаУдаления
			|	И НЕ СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|	И &УсловиеОтбораНоменклатуры";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Родитель КАК Родитель,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Ссылка КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Код КАК КодТовараПоставщика,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.НаименованиеПолное КАК Наименование,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС,
			|	ЦеныНоменклатурыСрезПоследних.Цена,
			|	Штрихкоды.Штрихкод КАК GTIN,
			|	NULL КАК КоличествоВОдномМесте,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.СтранаПроисхождения КАК Страна,
			|	NULL КАК КвантПоставки,
			|	NULL КАК ЕдИзмСрокаГодности,
			|	NULL КАК СрокГодности
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			ВидЦен = &ТипЦен
			|				И НЕ Номенклатура.ПометкаУдаления
			|				И НЕ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|				И &УсловиеОтбораНоменклатуры) КАК ЦеныНоменклатурыСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = Штрихкоды.Номенклатура
			|			И (Штрихкоды.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) 
			|ГДЕ
			|	ЦеныНоменклатурыСрезПоследних.Цена > 0";
		КонецЕсли;	
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ВыборкаБезЦен", ВыборкаБезЦен);
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросПоНоменклатуреДляПрайсЛиста",,
	Новый Структура("Запрос,ДополнительныеПараметры", Запрос, ПараметрыЗаполнения));
	
	Если РезультатПМ <> Неопределено 
		И ТипЗнч(РезультатПМ) = Тип("Запрос") Тогда
		Запрос = РезультатПМ;
	КонецЕсли;
	
	Если НЕ ВыборкаБезЦен Тогда
		Запрос.УстановитьПараметр("ТипЦен",ПараметрыЗаполнения.ТипЦен);
	КонецЕсли;
		
	ТипНоменклатуры = ПолучитьТипЗначенияОбъекта("Номенклатура",,);
	УсловиеОтбораНоменклатуры = "Истина";
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Если ТипЗнч(Номенклатура) = Тип(ТипНоменклатуры) Тогда
			Если ВыборкаБезЦен Тогда
				УсловиеОтбораНоменклатуры = "СправочникНоменклатура.Ссылка В ИЕРАРХИИ(&Номенклатура)";
			Иначе
				УсловиеОтбораНоменклатуры = "Номенклатура В ИЕРАРХИИ(&Номенклатура)";
			КонецЕсли;
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);	
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораНоменклатуры", УсловиеОтбораНоменклатуры);
		
	Выборка = Запрос.Выполнить().Выбрать();				
	
	Возврат Выборка;
	
КонецФункции

Функция ЗаполнитьТаблицуТовары(Товары,Выборка,ПараметрыЗаполнения) Экспорт
	
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", 	Выборка.Номенклатура);
		//Отбор.Вставить("GTIN",			Выборка.GTIN);
		Если Товары.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			//Сообщить("Товар " + Строка(Выборка.Номенклатура) + " с таким штрихкодом " + СокрЛП(Выборка.GTIN) + " уже содержится в таблице."); 
			//Сообщить("Товар " + Строка(Выборка.Номенклатура) +" уже содержится в таблице."); 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка,"Номенклатура,ЕдиницаИзмерения,GTIN,КодТовараПоставщика,Наименование");
		
		Если ИмяКонфигурации1С="УФ_УТ" и (Не ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения)) Тогда 
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.номенклатура.ЕдиницаИзмерения; //базовая еи может не проставляться в регистр
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения.СтатусТовараПоУмолчанию) Тогда
			НоваяСтрока.Статус = ПараметрыЗаполнения.СтатусТовараПоУмолчанию;
		Иначе
			НоваяСтрока.Статус = "Changed";
		КонецЕсли;
		
		СтавкаНДС = МодульТиповой_ПолучитьСтавкуНДС(Выборка.СтавкаНДС);
		
		Если ПараметрыЗаполнения.ЦенаВключаетНДС Тогда
			НоваяСтрока.ЦенаСНДС 	= Выборка.Цена;
			НоваяСтрока.ЦенаБезНДС	= Окр((Выборка.Цена * 100) / (100 + СтавкаНДС),2,1);
		Иначе	
			НоваяСтрока.ЦенаБезНДС 	= Выборка.Цена;
			НоваяСтрока.ЦенаСНДС	= Окр((Выборка.Цена * (100 + СтавкаНДС)) / 100,2,1);
		КонецЕсли;	
		
		НоваяСтрока.Каталог 		 		= ПолучитьПредставлениеКаталога(Выборка.Номенклатура);
        НоваяСтрока.СтавкаНДСEDI 		 	= КонвертироватьЗначение1СвEDI(Выборка.СтавкаНДС,"СтавкаНДС",Неопределено);
		НоваяСтрока.КодЕдиницыИзмеренияEDI 	= КонвертироватьЗначение1СвEDI(НоваяСтрока.ЕдиницаИзмерения,"КодЕдиницы",Неопределено);
		
		//Дополнительные реквизиты
		НоваяСтрока.КоличествоВОдномМесте 	= Выборка.КоличествоВОдномМесте;
		НоваяСтрока.КвантПоставки 			= Выборка.КвантПоставки;
		НоваяСтрока.Страна			    	= Выборка.Страна;
		НоваяСтрока.СрокГодности 			= Выборка.СрокГодности;
		НоваяСтрока.ЕдИзмСрокаГодности      = Выборка.ЕдИзмСрокаГодности;
		
	КонецЦикла;
	
	//дозаполним код товара покупателя
	ТаблицаКонвертации = Товары.Скопировать(,"Номенклатура, ЕдиницаИзмерения");
	Если ЗначениеЗаполнено(ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры", , Истина)) Тогда
		ТаблицаКонвертации.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Иначе
		ТаблицаКонвертации.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("NULL,Строка",,Новый КвалификаторыСтроки(1)));
	КонецЕсли;
	ТаблицаСоответствий = ПолучитьТаблицуСоответствийДляТоваров1С(ТаблицаКонвертации,ПараметрыЗаполнения.Получатель);
		
	Для Каждого Строка Из Товары Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", Строка.Номенклатура);
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", Строка.ЕдиницаИзмерения);
		
		МассивСтрок = ТаблицаСоответствий.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Строка.КодТовараПокупателя = МассивСтрок[0].КодТовараСторонний;	//в обязательно порядке дополним код товара сети
			Если Не ЗначениеЗаполнено(Строка.GTIN) Тогда                    //в случае отсутствия штрихкода дополним его
				Если ЗначениеЗаполнено(МассивСтрок[0].GTIN) Тогда
					Строка.GTIN = МассивСтрок[0].GTIN;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		    	
	КонецЦикла;
	
	Возврат Товары;
КонецФункции

//Конец сборки pricelist

//используется в форме общих настроек
Процедура ЗаполнитьДеревоНастроекДокументовСообщений(Дерево,РежимРаботы) Экспорт
	
	ИмяШаблона = ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_"+РежимРаботы);
	
	ТаблицаСоединенийДокументов = ПолучитьТаблицуДляСборкиЗапросов(РежимРаботы);
	
	СтрокаДерева_Корень = Дерево.Строки.Добавить();
	СтрокаДерева_Корень.НастройкаНаименование = РежимРаботы;
	СтрокаДерева_Корень.ЭтоГруппа = Истина;
	
	СтрокаДерева_СоответствиеДокументовСообщений = СтрокаДерева_Корень.Строки.Добавить();
	СтрокаДерева_СоответствиеДокументовСообщений.НастройкаНаименование = "Отправка сообщений";
	СтрокаДерева_СоответствиеДокументовСообщений.ЭтоГруппа = Истина;
	
	
	//теперь пройдемся по отправляемым сообщениям
	СтрокиОтправляемыхСообщений = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
	
	НовСтрока_ТипСообщения = СтрокаДерева_СоответствиеДокументовСообщений.Строки.Добавить();
	НовСтрока_ТипСообщения.НастройкаНаименование = "Отправлять по непроведенному документу:";
	НовСтрока_ТипСообщения.ЭтоГруппа = Истина;

	Для Каждого СтрокаСообщения Из СтрокиОтправляемыхСообщений Цикл
		
		Если ПолучитьНаправлениеСообщения(СтрокаСообщения.ТипСообщения,РежимРаботы)="Исходящее" Тогда
			
			НовСтрока = НовСтрока_ТипСообщения.Строки.Добавить();
			НовСтрока.НастройкаНаименование = СтрокаСообщения.ТипСообщения+" ("+ПеревестиТипСообщения(СтрокаСообщения.ТипСообщения)+")";
			НовСтрока.НастройкаИД = "ОПНД_"+СтрокаСообщения.ТипСообщения;
			НовСтрока.Значение = (ПолучитьКонстантуEDI(НовСтрока.НастройкаИД)=Истина);
			
			ИмяТипаДокумента = ПолучитьТипЗначенияОбъекта(СтрокаСообщения.ИмяОбъекта,,Истина);
			
			Если НЕ Метаданные.Документы.Найти(ИмяТипаДокумента)=Неопределено
				И Строка(Метаданные.Документы[ИмяТипаДокумента].Проведение) = "Запретить" Тогда
				НовСтрока.Значение = Истина;//если текущий документ вообще никогда не проводится, то выставим этот флаг автоматом
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если РежимРаботы = "Покупатель" Тогда
		НовСтрока_ТипСообщения = СтрокаДерева_Корень.Строки.Добавить();
		НовСтрока_ТипСообщения.НастройкаНаименование = "Не принимать автоматически:";//пока только для режима торговой сети, не будем пугать поставщиков обилием настроек
		НовСтрока_ТипСообщения.ЭтоГруппа = Истина;

		Для Каждого СтрокаСообщения Из СтрокиОтправляемыхСообщений Цикл
			
			Если ПолучитьНаправлениеСообщения(СтрокаСообщения.ТипСообщения,РежимРаботы)="Входящее" Тогда
				//дадим возможность принимать только вручную
				
				НовСтрока = НовСтрока_ТипСообщения.Строки.Добавить();
				НовСтрока.НастройкаНаименование = СтрокаСообщения.ТипСообщения+" ("+ПеревестиТипСообщения(СтрокаСообщения.ТипСообщения)+")";
				НовСтрока.НастройкаИД = "НеПриниматьАвтоматически_"+СтрокаСообщения.ТипСообщения;
				НовСтрока.Значение = (ПолучитьКонстантуEDI(НовСтрока.НастройкаИД)=Истина);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаДерева_СозданиеДокументов = СтрокаДерева_Корень.Строки.Добавить();
	СтрокаДерева_СозданиеДокументов.НастройкаНаименование = "Работа с документами";
	СтрокаДерева_СозданиеДокументов.ЭтоГруппа = Истина;
	
	Для Сч=0 По ТаблицаСоединенийДокументов.Количество()-1 Цикл
		СтрокаСоединений = ТаблицаСоединенийДокументов[Сч];
		
		НовСтрока_ТипДокумента = СтрокаДерева_СозданиеДокументов.Строки.Добавить();
		НовСтрока_ТипДокумента.НастройкаНаименование = СтрокаСоединений.ТипДокумента;
		НовСтрока_ТипДокумента.ЭтоГруппа = Истина;
		
		НовСтрока = НовСтрока_ТипДокумента.Строки.Добавить();
		НовСтрока.НастройкаНаименование = "Не предлагать провести документ в модуле";
		НовСтрока.НастройкаИД = "НПД_"+СтрокаСоединений.ТипДокумента;
		НовСтрока.Значение = (ПолучитьКонстантуEDI(НовСтрока.НастройкаИД)=Истина);
		
		Если Сч>0 Тогда
			НовСтрока = НовСтрока_ТипДокумента.Строки.Добавить();
			НовСтрока.НастройкаНаименование = "Не предлагать создать документ в модуле";
			НовСтрока.НастройкаИД = "НСД_"+СтрокаСоединений.ТипДокумента;
			НовСтрока.Значение = (ПолучитьКонстантуEDI(НовСтрока.НастройкаИД)=Истина);
			
			НовСтрока = НовСтрока_ТипДокумента.Строки.Добавить();
			НовСтрока.НастройкаНаименование = "Создавать по непроведенному основанию: "+ТаблицаСоединенийДокументов[Сч-1].ТипДокумента;
			НовСтрока.НастройкаИД = "СПНО_"+СтрокаСоединений.ТипДокумента;
			НовСтрока.Значение = (ПолучитьКонстантуEDI(НовСтрока.НастройкаИД)=Истина);
			
			ТипПредыдущегоДокумента = ТаблицаСоединенийДокументов[Сч-1].ТипДокумента;
			Если НЕ Метаданные.Документы.Найти(ТипПредыдущегоДокумента)=Неопределено
				И Строка(Метаданные.Документы[ТипПредыдущегоДокумента].Проведение) = "Запретить" Тогда
				НовСтрока.Значение = Истина;//если предыдущий документ в цепочке вообще никогда не проводится, то выставим этот флаг автоматом
			КонецЕсли;
			
		КонецЕсли;//для 2 и 3 документа уже можно выводить настройки создания/проведения	
		
	КонецЦикла;	
		
КонецПроцедуры	

Функция ПроверитьКорректностьНастроекПартнераПередЗаписью(СтруктураПараметров) Экспорт
	
	Результат = Истина;
	
	//отправка invoic
	_INVOICДоОбработкиRECADV="INVOICДоОбработкиRECADV";
	Если СтруктураПараметров.Свойство("INVOICДоОбработкиRECADV",_INVOICДоОбработкиRECADV)
		И _INVOICДоОбработкиRECADV=Ложь
		Тогда
		_ОтправлятьINVOICсDESADV=Ложь;
		Если СтруктураПараметров.Свойство("ОтправлятьINVOICсDESADV",_ОтправлятьINVOICсDESADV)
			Тогда
			СтруктураПараметров["ОтправлятьINVOICсDESADV"]=Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	//проверим флаг "ПроводитьЗаказВсегда"
	
	Если СтруктураПараметров.ЭтоТорговаяСеть = Истина
		И (СтруктураПараметров.ORDRSP = Истина
		ИЛИ СтруктураПараметров.DESADV) = Истина Тогда
		СтруктураПараметров.Вставить("ПроводитьЗаказВсегда",Ложь);//скинем этот флаг, он будет не нужен
		
		//еще он может быть не нужен в цепочке ORDERS-INVOIC в случае, если в цепочке только 2 документа. Т.е. между ORDERS и INVOIC нет связанного документа.
		
	КонецЕсли;
	
	//взаимоисключающие галочки:
	// СинхронизироватьТоварыТолькоПоКодуПартнера
	// СинхронизироватьТоварыТолькоПоGTIN
	Если СтруктураПараметров.Свойство("СинхронизироватьТоварыТолькоПоGTIN") и СтруктураПараметров.Свойство("СинхронизироватьТоварыТолькоПоКодуПартнера") И
		 СтруктураПараметров.СинхронизироватьТоварыТолькоПоGTIN и СтруктураПараметров.СинхронизироватьТоварыТолькоПоКодуПартнера Тогда
		 Результат = Ложь;
		 РезультатПроверки = "Настройки: ""СинхронизироватьТоварыТолькоПоКодуПартнера"" и ""СинхронизироватьТоварыТолькоПоGTIN"" являются взаимоисключающими и не могут устанавливаться одновременно."+Символы.ПС+"Сбросьте хотя бы одну из них."+Символы.ПС+"Внимание! Если вы не до конца понимаете значение этих настроек - обратитесь в техподдержку.";
		 ВывестиПредупреждение_КонтурEDI(РезультатПроверки);
	 КонецЕсли;
	 
	Возврат Результат;
	
КонецФункции

Функция ПроверитьКорректностьОбщихНастроекПередЗаписью(СтруктураПараметров) Экспорт
	
	Результат = Истина;
	
	Если СтруктураПараметров.ПодключаемыйМодульТип<>"Нет" Тогда
		
		Если СтруктураПараметров.ПодключаемыйМодульТип = "Диск" Тогда
			Если ПустаяСтрока(СтруктураПараметров.ПодключаемыйМодульПуть) Тогда
				ВывестиСообщениеПользователю("Не указан путь к подключаемому модулю!","ПодключаемыйМодульПуть");
				Результат = Ложь;
			КонецЕсли;
			
		ИначеЕсли СтруктураПараметров.ПодключаемыйМодульТип = "1С" Тогда
			Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПодключаемыйМодульСсылка) Тогда
				ВывестиСообщениеПользователю("Не указана ссылка на подключаемый модуль!","ПодключаемыйМодульСсылка");
				Результат = Ложь;
			КонецЕсли;
		ИначеЕсли СтруктураПараметров.ПодключаемыйМодульТип = "Конфигурация" Тогда
			Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ПодключаемыйМодульИмяОбработки) Тогда
				ВывестиСообщениеПользователю("Не указано имя обработки подключаемого модуля!","ПодключаемыйМодульИмяОбработки");
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ПротоколОбмена_КонтурEDI="Каталог" Тогда
		
		Если ПустаяСтрока(СтруктураПараметров.АдресКаталогаОбменаEDI) Тогда
			ВывестиСообщениеПользователю("Не указан путь к локальному каталогу обмена!","АдресКаталогаОбменаEDI");
			Результат = Ложь;
		КонецЕсли;
		
		Если СтрДлина(СтруктураПараметров.АдресКаталогаОбменаEDI)>50 тогда
			ВывестиСообщениеПользователю("Слишком длинное наименование локального каталога обмена (максимум 50 символов)","АдресКаталогаОбменаEDI");//проверить необходимость
			Результат = Ложь;
		КонецЕсли;
		
		Если не(EDIПроверитьСуществованиеКаталога(СтруктураПараметров.АдресКаталогаОбменаEDI)
			//вложенные каталоги
			и EDIПроверитьСуществованиеКаталога(СтруктураПараметров.АдресКаталогаОбменаEDI+"\Inbox")
			и EDIПроверитьСуществованиеКаталога(СтруктураПараметров.АдресКаталогаОбменаEDI+"\Outbox")
			и EDIПроверитьСуществованиеКаталога(СтруктураПараметров.АдресКаталогаОбменаEDI+"\Reports")
			и EDIПроверитьСуществованиеКаталога(СтруктураПараметров.АдресКаталогаОбменаEDI+"\Settings")
			и EDIПроверитьСуществованиеКаталога(СтруктураПараметров.АдресКаталогаОбменаEDI+"\PARTIN"))
			Тогда
			ВывестиСообщениеПользователю("В локальном каталоге обмена отсутствуют необходимые каталоги","АдресКаталогаОбменаEDI");//проверить необходимость
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ИспользуетсяПрокси И (
		Не ЗначениеЗаполнено(СтруктураПараметров.ЛогинПрокси)
		И Не ЗначениеЗаполнено(СтруктураПараметров.ПарольПрокси)
		И Не ЗначениеЗаполнено(СтруктураПараметров.СерверПрокси)
		И Не ЗначениеЗаполнено(СтруктураПараметров.ПортПрокси)
		И Не ЗначениеЗаполнено(СтруктураПараметров.ТипПрокси)
		) Тогда
		ВывестиСообщениеПользователю("Не указан ни один из параметров прокси сервера!","ИспользуетсяПрокси");//проверить, на форме 2 ЭУ. Да и смысла особого нет, если не блокируем работу в этом случае.
		//Результат = Ложь;
		
	КонецЕсли;
	
	//"Не создавать заказы с ненастроенными точками доставки" при незаполненном справочнике ТД
	Если Не ЗначениеЗаполнено(СтруктураПараметров.СвойСправочникТочекДоставки)//НЕ используем свой справочник точек доставки
		И СтруктураПараметров.НеСоздаватьЗаказыБезСвоихТД = Истина Тогда
	    ВывестиПредупреждение_КонтурEDI("Флаг ""Не создавать заказы с ненастроенными точками доставки"" не будет включен без заполненной настройки ""Свой справочник точек доставки""");
		//СтруктураПараметров["НеСоздаватьЗаказыБезСвоихТД"]=Ложь;
		Результат = Ложь;
	КонецЕсли;	
	
	//ДобавлятьВозвратВОснованияСчетФактуры не будет работать для УТ 10_2
	Если СтруктураПараметров.ДобавлятьВозвратВОснованияСчетФактуры=Истина
		И ИмяКонфигурации1С = "УТ_10_2" Тогда
	    ВывестиПредупреждение_КонтурEDI("Флаг ""Добавлять документ ""Возврат товаров от покупателя"" в основание счета-фактуры"" не совместим с конфигурацией: Управление Торговлей 10_2");
		//СтруктураПараметров["ДобавлятьВозвратВОснованияСчетФактуры"]=Ложь;
		Результат = Ложь;
	КонецЕсли;	
	
	Если (СтруктураПараметров.НеБратьАдресаПартнераИз1С=Ложь или  СтруктураПараметров.НеБратьСвоиАдресаИз1С=Ложь) и Лев(СокрЛП(ИмяКонфигурации1С),2)="УФ" Тогда 
		
		//МодульОбъекта().ВывестиПредупреждение_КонтурEDI("Для этой конфигурации настроки"+Символы.ПС+"Заполнять реквизиты юр./физ. лиц торговой сети по GLN на сервере"+Символы.ПС+
		//"и"+Символы.ПС+"Заполнять реквизиты компании по GLN на сервере"+Символы.ПС+"Должны быть установлены в ИСТИНА"+Символы.ПС+Символы.ПС+"Необходимые изменения внесены автоматически");
		
		//В УФ не собираем адреса - пользуемся информацией на сервере
		СтруктураПараметров.НеБратьАдресаПартнераИз1С=Истина;
		СтруктураПараметров.НеБратьСвоиАдресаИз1С=Истина;
	КонецЕсли;
	
	
	Если СтруктураПараметров.ПротоколОбмена_КонтурEDI = "API"
		И ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI")<>"API" Тогда
		
		//сменился протокол обмена, надо заполнить справочники для API
		
		Если Не ОбновитьСписокОрганизацийПоУчетнымЗаписям() Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось переключиться на API. Обратитесь в техподдержку.");
			Результат = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	
	//при включении валидации пометим все входящие сообщения, как успешно провалидированные
	КонстантаВалидироватьВходящиеСообщения = (ПолучитьКонстантуEDI("ВалидироватьВходящиеСообщения") = Истина);	
	Если Не КонстантаВалидироватьВходящиеСообщения 
		 И СтруктураПараметров.ВалидироватьВходящиеСообщения = Истина Тогда
		 #Если Клиент Тогда
			УстановитьФлагВалидации = Ложь;
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, 	"Да");
			Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
			Ответ = Вопрос("Необходимо пометить принятые ранее сообщения как успешно прошедшие валидацию.
			|
			|Выполнить обработку?", Кнопки, , КодВозвратаДиалога.Нет, "Валидация входящих сообщений");
			УстановитьФлагВалидации = (Ответ = КодВозвратаДиалога.Да);
		#Иначе
			УстановитьФлагВалидации = Истина;
		#КонецЕсли
		
		Если УстановитьФлагВалидации тогда
			//установим константу, получим сообщения и затем откатим значение
			УстановитьКонстантуEDI("ВалидироватьВходящиеСообщения", Истина);			   
			УспешнаяОбработка = (УстановитьПризнакУспешнойВалидацииСообщений() = Истина);
			УстановитьКонстантуEDI("ВалидироватьВходящиеСообщения", Ложь);
			Если Не УспешнаяОбработка Тогда
				Результат = Ложь;
			КонецЕсли;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Если в цепочке есть документ, который в конфигурации не проводится (например, "СчетНаОплату" в БП), то 
	Для Каждого РежимРаботы Из EDI_РазложитьСтрокуВМассивСлов("Покупатель,Поставщик",",") Цикл
		ИмяШаблона = СтруктураПараметров["ШаблонЦепочкиДокументов_"+РежимРаботы];
		
		Если ЗначениеЗаполнено(ИмяШаблона) Тогда
			
			Для Каждого Эл Из ПолучитьСписокДоступныхШаблоновЦепочки(РежимРаботы) Цикл
				Если ИмяШаблона = Эл.Представление Тогда
					
					ЭтотОбъект["ШаблонЗапросаЦепочкиДокументов_"+РежимРаботы] = Эл.Значение;
					ТаблицаСоединенийДокументов = ПолучитьТаблицуДляСборкиЗапросов(РежимРаботы);
					ЗаполнитьСоответствиеДокументовСообщений(РежимРаботы);
					
					СтрокиОтправляемыхСообщений = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
					
					Для Каждого СтрокаСообщения Из СтрокиОтправляемыхСообщений Цикл
						
						Если ПолучитьНаправлениеСообщения(СтрокаСообщения.ТипСообщения,РежимРаботы)="Исходящее" Тогда
							
							ИмяТипаДокумента = ПолучитьТипЗначенияОбъекта(СтрокаСообщения.ИмяОбъекта,,Истина);
			
							Если НЕ Метаданные.Документы.Найти(ИмяТипаДокумента)=Неопределено
								И Строка(Метаданные.Документы[ИмяТипаДокумента].Проведение) = "Запретить" Тогда
								//СтруктураПараметров["ОПНД_"+СтрокаСообщения.ТипСообщения] = Истина;//если текущий документ вообще никогда не проводится, то выставим этот флаг автоматом
								СтруктураПараметров.Вставить("ОПНД_"+СтрокаСообщения.ТипСообщения,Истина);//если текущий документ вообще никогда не проводится, то выставим этот флаг автоматом
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					
					Для Сч=0 По ТаблицаСоединенийДокументов.Количество()-1 Цикл
						СтрокаСоединений = ТаблицаСоединенийДокументов[Сч];
						
						Если Сч>0 Тогда
							
							ТипПредыдущегоДокумента = ТаблицаСоединенийДокументов[Сч-1].ТипДокумента;
							Если НЕ Метаданные.Документы.Найти(ТипПредыдущегоДокумента)=Неопределено
								И Строка(Метаданные.Документы[ТипПредыдущегоДокумента].Проведение) = "Запретить" Тогда
								//СтруктураПараметров["СПНО_"+СтрокаСоединений.ТипДокумента] = Истина;
								СтруктураПараметров.Вставить("СПНО_"+СтрокаСоединений.ТипДокумента,Истина);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;	
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


//**********************************************
//  КЭШИРОВАНИЕ

Функция ЭДО_Кэш_Прочитать(ИмяЗначения)
	
	Если ВнутреннийКэш = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВнутреннийКэш.Получить(ИмяЗначения);
	КонецЕсли;
	
КонецФункции

Процедура ЭДО_Кэш_Поместить(ИмяЗначения,Значение)
	
	Если ВнутреннийКэш = Неопределено Тогда
		ВнутреннийКэш = Новый Соответствие;
	КонецЕсли;
	
	ВнутреннийКэш.Вставить(ИмяЗначения,Значение);
	
КонецПроцедуры


//}#КонецОбласти //Служебные_функции

//{#Область 02_Внешнее_Соединение
	
//получает строковое представление элемента справочника из внешнего соединения или из локальной базы
Функция ПолучитьПредставлениеЭлементаСправочника(ЗначениеЭлемента) Экспорт
	Если ВнешнееХранилище Тогда
		Если ЗначениеЭлемента=Неопределено Тогда
		ИначеЕсли ТипЗнч(ЗначениеЭлемента)=Тип("Строка")
			И Лев(ЗначениеЭлемента,4)="{""#""" Тогда //скорей всего, это ссылка
			ЗначениеВнешнейБазы = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеЭлемента);
			Возврат СокрЛП(СоединениеСХранилищем.String(ЗначениеВнешнейБазы));
		Иначе
			Возврат СокрЛП(ЗначениеЭлемента);
		КонецЕсли;	
	Иначе
		Возврат СокрЛП(ЗначениеЭлемента);
	КонецЕсли;	
КонецФункции	

Процедура ЗаменитьСсылкиДляВнешнегоХранилищаВЗапросе(ТекстЗапроса, ИдентификаторЗапроса = Неопределено)
	
	//Поменяем Ссылки, вроде "Таб.Документ Ссылка Документ.РеализацияТоваров"
	ТипДокументаORDERS = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина);
	
	//на рефакторинг: отталкиваться от ТаблицаТипов
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Ссылка Документ."+ТипДокументаORDERS,"ЕСТЬ НЕ NULL");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Ссылка Документ.РеализацияТоваровУслуг","ЕСТЬ НЕ NULL");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Ссылка Документ.СчетФактураВыданный","ЕСТЬ НЕ NULL");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Ссылка Документ.ВозвратТоваровОтПокупателя","ЕСТЬ НЕ NULL");
	
	//то же самое для верхнего регистра на всякий случай
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ССЫЛКА Документ."+ТипДокументаORDERS,"ЕСТЬ НЕ NULL");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ССЫЛКА Документ.РеализацияТоваровУслуг","ЕСТЬ НЕ NULL");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ССЫЛКА Документ.СчетФактураВыданный","ЕСТЬ НЕ NULL");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ССЫЛКА Документ.ВозвратТоваровОтПокупателя","ЕСТЬ НЕ NULL");

	
	//заменим типы документов на Строки
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ."+ТипДокументаORDERS,"Строка (80)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.РеализацияТоваровУслуг","Строка (80)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.СчетФактураВыданный","Строка (80)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Справочник.Контрагенты","Строка (80)");
	

	//Сравнение на Is Null во внешней базе некорректно. Меняем его на сравнение с пустой строкой, но только для заранее заданных полей: 
	//Заказ,Реализация,СчетФактура,Документ, возможно еще Возврат или КорректировочныйСчетФактура
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СчетФактура ЕСТЬ NULL","СчетФактура = """"");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Заказ ЕСТЬ NULL","Заказ = """"");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Реализация ЕСТЬ NULL","Реализация = """"");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ ЕСТЬ NULL","Документ = """"");
	
КонецПроцедуры	

Процедура ПопытатьсяПодключитьсяКВнешнемуХранилищу()
	
	ВнешнееХранилище = Ложь;
	//Возврат; //пока не задействуем
		
	СИ=Новый СистемнаяИнформация;
	Если Лев(СИ.ВерсияПриложения,3)="8.1"  //перед нами 8.1
		Или Лев(СИ.ВерсияПриложения,1)="1" 
		Тогда //в документации путаница, на всякий случай попробуем так и так
		ВерсияКоннектора = "81";
	Иначе
		Если Лев(СИ.ВерсияПриложения,3)="8.3" Тогда
			ВерсияКоннектора = "83";
		Иначе
			ВерсияКоннектора = "82";
		КонецЕсли;
	КонецЕсли;	
	
	_ПараметрыБазы = РазобратьСтрокуСоединенияИнформационнойБазы();
	Если _ПараметрыБазы.ТипСоединения = "Файл" Тогда
		//	Внешним хранилищем считаем папку с именем "KonturEDI_Data", которая находится в каталоге ИБ
		
		ПутьКВнешнемуХранилищу = _ПараметрыБазы.КаталогБазы+"KonturEDI_Data\";
		
		КаталогНаДиске = Новый Файл(ПутьКВнешнемуХранилищу);
		Если КаталогНаДиске.Существует() Тогда
			
			Коннектор = Неопределено;
			Попытка
			Выполнить("Коннектор = Новый COMОбъект(""V""+ВерсияКоннектора+"".ComConnector"")"); //без компиляции т.к. мог быть не установлен компонент платформы
				СоединениеСХранилищем = Коннектор.Connect("File="""+СокрЛП(ПутьКВнешнемуХранилищу)+""";Usr="""";Pwd = """";");
				ВнешнееХранилище = Истина;
			Исключение
				_ТекстОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли _ПараметрыБазы.ТипСоединения = "Сервер" Тогда
		//	Внешним хранилищем считаем базу на том же сервере, но с именем <Имябазы+Постфикс "KonturEDI_Data">
		//с релиза 4.02.005.01 перенесли инициализацию подключения в отдельный блок
		//пока отключим вообще
		//Возврат;
		
		// kns _метка_ 
		Если НЕ _ПараметрыБазы.ИмяБазы = "svn" Тогда
			Коннектор = Неопределено;
			Попытка
			Выполнить("Коннектор = Новый COMОбъект(""V""+ВерсияКоннектора+"".ComConnector"")"); //без компиляции т.к. мог быть не установлен компонент платформы
				СоединениеСХранилищем = Коннектор.Connect("Srvr="""+_ПараметрыБазы.ИмяСервера+""";Ref = """+_ПараметрыБазы.ИмяБазы+"_KonturEDI_Data"";Usr="""";Pwd = """";");
				ВнешнееХранилище = Истина;
			Исключение
				_ТекстОшибки = ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// kns _метка_ обработать ошибку подключения
	Если ЗначениеЗаполнено(_ТекстОшибки) Тогда
		//попробуем обработать сообщение про версию COM коннектора
		Если Найти(_ТекстОшибки,"comcntr")<>0 
			И Найти(_ТекстОшибки,"core")<>0 Тогда
			//это как раз наш случай
			//Версия компоненты 'comcntr' (8.2.19.106) отличается от версии корневого модуля 'core82' (8.2.19.60)
			//есть описание вот тут
			//http://j008.ru/ps/016_V82.COMConnector
			
			СИ = Новый СистемнаяИнформация;
			ВерсияПлатформы = СИ.ВерсияПриложения;
			Позиция = Найти(_ТекстОшибки,"'comcntr' (");
			ВерсияКоннектора = Сред(_ТекстОшибки,Позиция+11,10);
			Если Прав(ВерсияКоннектора,1)=")" Тогда
				ВерсияКоннектора = Лев(ВерсияКоннектора,9);
			КонецЕсли;	
			
			ТекстПредупреждения = "Версия COM-коннектора ("+ВерсияКоннектора+") отличается от версии платформы ("+ВерсияПлатформы+")."
				+Символы.ПС+"Переустановите платформу "+ВерсияПлатформы+" или используйте платформу "+ВерсияКоннектора+" для запуска базы";
				
			ВывестиПредупреждение_КонтурEDI(ТекстПредупреждения);
		Иначе
			ВывестиПредупреждение_КонтурEDI("Не удалось подключиться к внешнему хранилищу по причине:"+Символы.ПС+СокрЛП(_ТекстОшибки));
		КонецЕсли;	
		
	КонецЕсли;	
	
	
//С 8.2.12 программа установки выполняет регистрацию COM-соединения "для компьютера". Имеется возможность выполнить регистрацию "для пользователя" с помощью командной строки 
//regsvr32 /n /i:user comcntr.dl	
	
КонецПроцедуры

Функция РазобратьСтрокуСоединенияИнформационнойБазы() Экспорт
	Результат = Новый Структура;
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если Найти(ВРег(СтрокаСоединения),"FILE")>0 Тогда
		Результат.Вставить("ТипСоединения","Файл");
		КаталогБазы = Сред(СтрокаСоединения,7);
		ПозицияРазделителя = Найти(КаталогБазы,"""");
		
		Если ПозицияРазделителя=0 Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось разобрать путь к базе:"+СтрокаСоединенияИнформационнойБазы());	
			Возврат Результат;
		КонецЕсли;	
		
		КаталогБазы = Лев(КаталогБазы,ПозицияРазделителя-1);
		Если Прав(КаталогБазы,1)<>"\" Тогда 
			КаталогБазы = КаталогБазы+"\"; 
		КонецЕсли;
		
		Результат.Вставить("КаталогБазы",КаталогБазы);
		
	ИначеЕсли Найти(ВРег(СтрокаСоединения),"SRVR")>0 Тогда
		Результат.Вставить("ТипСоединения","Сервер");
		СтрокаСоединения = Сред(СтрокаСоединения,7);
		ПозицияРазделителя = Найти(СтрокаСоединения,";");
		
		Если ПозицияРазделителя=0 Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось разобрать путь к базе:"+СтрокаСоединенияИнформационнойБазы());	
			Возврат Результат;
		КонецЕсли;	
		
		ИмяСервера = Лев(СтрокаСоединения,ПозицияРазделителя-2);
		
		ИмяБазы = Сред(СтрокаСоединения,ПозицияРазделителя+6);
		ПозицияРазделителя = Найти(ИмяБазы,";");
		
		Если ПозицияРазделителя=0 Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось разобрать путь к базе:"+СтрокаСоединенияИнформационнойБазы());	
			Возврат Результат;
		КонецЕсли;	
		
		ИмяБазы = Лев(ИмяБазы,ПозицияРазделителя-2);
		
		Результат.Вставить("ИмяСервера",ИмяСервера);
		Результат.Вставить("ИмяБазы",ИмяБазы);
		
		//Srvr="K1210006";Ref="test_trade_10_3";		
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции	

//пока только для файловых баз. Создает базу сообщений/настроек в папке с основной базой
//Может работать только на клиенте!
Функция РазвернутьВнешнееХранилище_КонтурEDI() Экспорт
	
	//будем пробовать разворачивать из CF вместо DT
	
	//есть еще параметр
	//UseTemplate "C:\Documents and Settings\User\My Documents\tmplts\TestVendor\TestConfig\1Cv8.cf"
	//на будущее можно использовать его вместо загрузки из DT
	
	_ПараметрыБазы = РазобратьСтрокуСоединенияИнформационнойБазы();
	Если _ПараметрыБазы.ТипСоединения = "Файл" Тогда
		
		ПутьКВнешнемуХранилищу = _ПараметрыБазы.КаталогБазы+"KonturEDI_Data\";
		
		//очистим то, что было создано в прошлый раз.
		//Внимание! Нельзя это делать, если хранилище уже развернуто.
		//в форме настройки вариантов хранения в этом случае данная закладка скрывается с глаз долой.
		//УдалитьФайлы(ПутьКВнешнемуХранилищу);
		
		//ПутьКВнешнемуХранилищу_Врем = КаталогВременныхФайлов()+"KonturEDI_Data";
		ПутьКВнешнемуХранилищу_Врем = "%temp%\KonturEDI_Data";
		УдалитьФайлы(ПутьКВнешнемуХранилищу_Врем);
		
		КаталогНаДиске = Новый Файл(ПутьКВнешнемуХранилищу);
		Если Не КаталогНаДиске.Существует() Тогда
			
			ИмяФайлаКонфигурации = ПолучитьИмяВременногоФайла("cf");
			ПолучитьМакет("ОбновлениеДляХраненияДанных_ВнешнееХранилище").Записать(ИмяФайлаКонфигурации);
			
			ПутьКПриложению = """"+КаталогПрограммы()+"1cv8.exe""";
			
			//создадим чистую базу. 
			//Приходится создавать во врем.каталоге, т.к. 1cv8.exe не умеет создавать базы в папках, содержащих пробелы в пути 
			//а 1cestart.exe создает базу под последнюю установленную версию платформы.
			КоманднаяСтрока = ПутьКПриложению
				+ " CREATEINFOBASE FILE="""+ПутьКВнешнемуХранилищу_Врем+"""";
				
				
			//развернем базу из DT	
			КоманднаяСтрока = КоманднаяСтрока+Символы.ПС+
			ПутьКПриложению+" CONFIG /F """+ПутьКВнешнемуХранилищу_Врем+""" /LoadCfg  """               //LoadCfg
				+ ИмяФайлаКонфигурации+""" /UpdateDBCfg /DisableStartupMessages" ;//загрузить конфиг   
				
			//скопируем из врем.папки в каталог базы
			КоманднаяСтрока = КоманднаяСтрока+Символы.ПС+
			"xcopy """+ПутьКВнешнемуХранилищу_Врем+""" """+ПутьКВнешнемуХранилищу+"""  /E /I";
				
				
			ИмяБатФайла = КаталогВременныхФайлов()+"KonturEDI_CreateExternalStore.bat";	
			Бат=Новый ТекстовыйДокумент;
			Бат.УстановитьТекст(КоманднаяСтрока);
			Бат.Записать(ИмяБатФайла,КодировкаТекста.OEM);
			
			#Если Клиент Тогда
			КомандаСистемы(""""+ИмяБатФайла+"""");
			#Иначе
			ЗапуститьПриложение(ИмяБатФайла,,Истина);
			#КонецЕсли
			
			//и сразу подключимся, если это первый запуск модуля
			//Если УчетныеЗаписи=Неопределено Тогда
				ПопытатьсяПодключитьсяКВнешнемуХранилищу();
			//КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецФункции

Функция ИнициализироватьЗапрос_КонтурEDI(ДляВнешнегоХранилища = Ложь) Экспорт
	Если ДляВнешнегоХранилища = Истина Тогда
		_Запрос = СоединениеСХранилищем.NewObject("Запрос");
		_Запрос.МенеджерВременныхТаблиц = СоединениеСХранилищем.NewObject("МенеджерВременныхТаблиц");
	Иначе
		_Запрос = Новый Запрос();
		_Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	Возврат _Запрос;
КонецФункции	

//параллельные транзакции в режиме внешнего хранилища
Функция НачатьТранзакцию_КонтурEDI() Экспорт
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
	Если ВнешнееХранилище Тогда
		СоединениеСХранилищем.НачатьТранзакцию(СоединениеСХранилищем.РежимУправленияБлокировкойДанных.Автоматический);
	КонецЕсли;	
КонецФункции

//параллельные транзакции в режиме внешнего хранилища
Функция ЗафиксироватьТранзакцию_КонтурEDI() Экспорт
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если ВнешнееХранилище Тогда
		Если СоединениеСХранилищем.ТранзакцияАктивна() Тогда
			СоединениеСХранилищем.ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

//параллельные транзакции в режиме внешнего хранилища
Функция ОтменитьТранзакцию_КонтурEDI() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Если ВнешнееХранилище Тогда
		Если СоединениеСХранилищем.ТранзакцияАктивна() Тогда
			СоединениеСХранилищем.ОтменитьТранзакцию();
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

//}#КонецОбласти //Внешнее_Соединение


//{#Область 03_Сборка_Разборка_Запросов
	
Функция ПолучитьТаблицуДляСборкиЗапросов(РежимРаботы) Экспорт
	
	//1. Для начала вытащим из шаблона запроса часть, содержащую соединения	
	
	//и все это нам надо кинуть еще и в таблицу типов
	Если РежимРаботы = "Поставщик" Тогда
		ИсходныйТекстЗапроса = ШаблонЗапросаЦепочкиДокументов_Поставщик;
	ИначеЕсли РежимРаботы = "Покупатель" Тогда
		ИсходныйТекстЗапроса = ШаблонЗапросаЦепочкиДокументов_Покупатель;
	КонецЕсли;	
	
	//удастся ли из верхней части вытащить соответствие типов документов сообщениям?
	//без нижней части не получится.
	//конструкции вида <ПсевдонимТаблицы>.Ссылка как <ТипСообщения> и будут ключом
	//надо обновить ТаблицаТипов. Сделаем это здесь или отдельно?
	
	
	ПозицияНачалаСоединений = Найти(ИсходныйТекстЗапроса,"{ПОЛНОЕ СОЕДИНЕНИЕ");
	//найдем позицию: до нее все будет неизменным,
	//после - соединения и условия
	//соединения надо перетасовать
	//условия - кинуть так же, как начало
	ТекстНачалаЗапроса = Лев(ИсходныйТекстЗапроса,ПозицияНачалаСоединений-1);
	
	ТекстОстаткаЗапроса = Сред(ИсходныйТекстЗапроса,ПозицияНачалаСоединений);
	
	ПозицияНачалаУсловий = СтрДлина(ТекстОстаткаЗапроса);//все до этой позиции будет перетасовано
	
	ТекстСоединений = Лев(ТекстОстаткаЗапроса,ПозицияНачалаУсловий);//тасовать будем именно это
	
	//2. Теперь приступим к формированию таблицы
	
	ТаблицаСоединенийДокументов = Новый ТаблицаЗначений;
	ТаблицаСоединенийДокументов.Колонки.Добавить("ИмяТаблицы",Новый ОписаниеТипов("Строка"));
	ТаблицаСоединенийДокументов.Колонки.Добавить("ПсевдонимТаблицы",Новый ОписаниеТипов("Строка"));
	ТаблицаСоединенийДокументов.Колонки.Добавить("СоединениеСоСледующейТаблицей",Новый ОписаниеТипов("Строка"));
	ТаблицаСоединенийДокументов.Колонки.Добавить("ТипДокумента",Новый ОписаниеТипов("Строка"));//тип в виде строки вроде "ЗаказПоставщику"
	
	
	ЧислоТаблиц = СтрЧислоВхождений(ТекстСоединений,"{");
	
	Для Сч=1 По ЧислоТаблиц Цикл
		
		РазбираемыйКусок = ТекстСоединений;
		
		//1. найти последнюю открывающую скобку
		Для сч2 = 0 по ЧислоТаблиц-Сч Цикл
			ПозицияОткрывающейСкобки = Найти(РазбираемыйКусок,"{");
			РазбираемыйКусок = Сред(РазбираемыйКусок,ПозицияОткрывающейСкобки+1);
		КонецЦикла;	
		
		ПозицияЗакрывающейСкобки = Найти(РазбираемыйКусок,"}");
		РазбираемыйКусок = Лев(РазбираемыйКусок,ПозицияЗакрывающейСкобки-1);
		//Сообщить(РазбираемыйКусок);
			  
		ТекстСоединений = СтрЗаменить(ТекстСоединений,"{"+РазбираемыйКусок+"}","");//вырежем то, что разобрали, из запроса
		
		РазбираемыйКусок = СтрЗаменить(РазбираемыйКусок,Символы.ПС," ");//для корректного поиска ниже
		РазбираемыйКусок = СтрЗаменить(РазбираемыйКусок,Символы.Таб," ");//для корректного поиска ниже
		ПозицияСловаСоединение = Найти(РазбираемыйКусок," СОЕДИНЕНИЕ ");
		ПозицияСловаКак = Найти(РазбираемыйКусок," КАК ");
		ПозицияСловаПо = Найти(РазбираемыйКусок," ПО ");
		
		НовСтрокаТаблицы = ТаблицаСоединенийДокументов.Добавить();
		
		НовСтрокаТаблицы.ИмяТаблицы = СокрЛП(Сред(РазбираемыйКусок,ПозицияСловаСоединение+11,ПозицияСловаКак - ПозицияСловаСоединение - 11));
		
		//в псевдоним взять название объекта в метаданных     
		НовСтрокаТаблицы.ПсевдонимТаблицы = СокрЛП(Сред(РазбираемыйКусок,ПозицияСловаКак+4,ПозицияСловаПо - ПозицияСловаКак - 4));
		НовСтрокаТаблицы.ТипДокумента = СтрЗаменить(НовСтрокаТаблицы.ИмяТаблицы,"Документ.","");
		ПозицияТочки = Найти(НовСтрокаТаблицы.ТипДокумента,".");
		Если ПозицияТочки<>0 Тогда
			НовСтрокаТаблицы.ТипДокумента = Лев(НовСтрокаТаблицы.ТипДокумента,ПозицияТочки-1);
		КонецЕсли;	
		
		НовСтрокаТаблицы.СоединениеСоСледующейТаблицей = СокрЛП(Сред(РазбираемыйКусок,ПозицияСловаПо+3));
		
	КонецЦикла;	
	
	Возврат ТаблицаСоединенийДокументов;
КонецФункции	


//используется в построении списков документов и в поиске связанных сообщений по документам
Функция ПолучитьТекстЗапросаДляТаблицы(ИмяТаблицы, ТаблицаСоединенийДокументов, НазначениеЗапроса)
	
	//у нас тут самопальный построитель с преферансом и барышнями
	
	//работает в 2 режимах: 
	//	1. НазначениеЗапроса = "ПостроениеСписка" - для вывода списка требуемых действий
	//	2. НазначениеЗапроса = "СвязанныеСообщения" - для просмотра связанных сообщений и навигации по цепочке документов/сообщений
	
	ПараметрыПМ = Новый Структура(	"ИмяТаблицы,	ТаблицаСоединенийДокументов,	НазначениеЗапроса",
									ИмяТаблицы,		ТаблицаСоединенийДокументов,	НазначениеЗапроса);
									
	//предусмотрим возможность полностью переопределить данные запросы, актуально для Астора
	//и других конфигураций, где для связи документов друг с другом используются вспомогательные таблицы (РС, РН и т.д.)
	СтандартнаяОбработка = Истина;
	ПолныйТекстЗапроса = ОбработкаСобытияПодключаемогоМодуля("ПолучитьТекстЗапросаДляТаблицы",СтандартнаяОбработка,ПараметрыПМ);
	Если Не СтандартнаяОбработка Тогда
		Возврат ПолныйТекстЗапроса;
	КонецЕсли;
	
	ТекущаяСтрокаТаблицы = ТаблицаСоединенийДокументов.Найти(ИмяТаблицы,"ПсевдонимТаблицы");
	
	ПоляВПредыдущемДокументе = (ИмяКонфигурации1С = "УТ_10_2" и Лев(ТекущаяСтрокаТаблицы.ПсевдонимТаблицы,11)="СчетФактура") 
							или (ИмяКонфигурации1С = "УФ_УТ" и ТекущаяСтрокаТаблицы.ПсевдонимТаблицы = "СчетФактураВыданный")
							или (ИмяКонфигурации1С = "УФ_УТ" и ТекущаяСтрокаТаблицы.ПсевдонимТаблицы = "СчетФактураПолученныйДокументыОснования");
							//костыль для УТ 10.2 и УФ_УТ: в документе СчетФактураВыданный и СчетФактура иногда нет контрагентов, сумм и т.д.
	
	ТекстПолей = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|";

	ТекстПолей = ТекстПолей+"	"+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".Ссылка КАК Док_"+ТекущаяСтрокаТаблицы.ТипДокумента;
	
	ТекстТаблицСоединений = Символы.ПС+"ИЗ"+Символы.ПС+"	"+ТекущаяСтрокаТаблицы.ИмяТаблицы+" КАК "+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы;
	ТекстУсловий = Символы.ПС+"ГДЕ"+Символы.ПС+"	Истина";//на будущее, пока не надо
	ТекстИндексов = "";
	
	СоединениеЧерезСсылку = (СтрЧислоВхождений(ТекущаяСтрокаТаблицы.ИмяТаблицы,".")>1);//в этом случае основные поля - Контрагент,СуммаДокумента,Проведен - находятся в шапке документа.
	
	//добавим связь с таблицей партнеров
	Если НазначениеЗапроса = "СвязанныеСообщения" Тогда//запрос для связанных сообщений
		
		ТекстУсловий = ТекстУсловий+"
		|	И "+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".Ссылка В (&Ссылка)";
		
	ИначеЕсли НазначениеЗапроса = "ПостроениеСписка" Тогда
		
		ТекстПолей = ТекстПолей + ",
		|	ТаблицаКэшПартнеровКонтрагентов.Партнер,
		|	ТаблицаКэшПартнеровКонтрагентов.PORDERS,
		|	ТаблицаКэшПартнеровКонтрагентов.ORDERS,
		|	ТаблицаКэшПартнеровКонтрагентов.ORDRSP,
		|	ТаблицаКэшПартнеровКонтрагентов.DESADV,
		|	ТаблицаКэшПартнеровКонтрагентов.RECADV,
		|	ТаблицаКэшПартнеровКонтрагентов.INVOIC,
		|	"""" КАК СообщениеБлокирующееPORDERS,
		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDERS,
		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDRSP,
		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееDESADV,
		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRECADV,
		|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееINVOIC";
			
		ИмяРеквизитаСуммаДокумента = "";
		Для Каждого _ВариантИмени Из EDI_РазложитьСтрокуВМассивСлов("СуммаДокумента,ИтогоВсего,ИтогоСумма",",") Цикл
			Если НЕ Метаданные.Документы[ТекущаяСтрокаТаблицы.ТипДокумента].Реквизиты.Найти(_ВариантИмени) = Неопределено Тогда
				ИмяРеквизитаСуммаДокумента = _ВариантИмени;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СоединениеЧерезСсылку Тогда
			
			ПсевдонимШапки = ТекущаяСтрокаТаблицы.ТипДокумента+"_Шапка";
			
			ТекстПолей = ТекстПолей + ",
			|	"+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".Ссылка.Проведен КАК Док_Проведен,
			|	";
			Если ИмяКонфигурации1С = "УФ_УТ" и ТекущаяСтрокаТаблицы.ПсевдонимТаблицы = "СчетФактураПолученныйДокументыОснования" Тогда
				ТекстПолей = ТекстПолей + ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".ДокументОснование.СуммаДокумента КАК СуммаДокумента";//В УТ11 поле "СуммаДокумента" отсутствует в счет-фактуре.
			Иначе
				ТекстПолей = ТекстПолей + ПсевдонимШапки+"."+ИмяРеквизитаСуммаДокумента+" КАК СуммаДокумента";
			КонецЕсли;
			
			ТекстТаблицСоединений = ТекстТаблицСоединений+"
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ТекущаяСтрокаТаблицы.ТипДокумента+" КАК "+ПсевдонимШапки+"
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
			|			ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = "+ПсевдонимШапки+".Контрагент)
			|		По ("+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".Ссылка = "+ПсевдонимШапки+".Ссылка)";
			
			ТекстУсловий = ТекстУсловий+"
			|	И "+ПсевдонимШапки+".Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И НЕ "+ПсевдонимШапки+".ПометкаУдаления
			|	И "+ПсевдонимШапки+".Контрагент в (Выбрать ТаблицаКэшПартнеровКонтрагентов.Контрагент Из ТаблицаКэшПартнеровКонтрагентов)";//здесь возможна ветка для УФ
			
		Иначе	
			ТекстПолей = ТекстПолей + ",
			|	"+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".Проведен КАК Док_Проведен,
			|	"
			
			//костыль для УТ 10.2 и УФ_УТ
			+?(ПоляВПредыдущемДокументе,
				ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".ДокументОснование.СуммаДокумента КАК СуммаДокумента",
				ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+"."+ИмяРеквизитаСуммаДокумента+" КАК СуммаДокумента"
				);
				
			ТекстТаблицСоединений = ТекстТаблицСоединений+"
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов"
			
			+?(ПоляВПредыдущемДокументе,
				"
				|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = "+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".ДокументОснование.Контрагент)"
				,
				"
				|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = "+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".Контрагент)"
			);
			
			
			ТекстУсловий = ТекстУсловий+"
			|	И "+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И НЕ "+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".ПометкаУдаления"
			
			+?(ПоляВПредыдущемДокументе,
				"
				|	И "+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".ДокументОснование.Контрагент в (Выбрать ТаблицаКэшПартнеровКонтрагентов.Контрагент Из ТаблицаКэшПартнеровКонтрагентов)"
				,
				"
				|	И "+ТекущаяСтрокаТаблицы.ПсевдонимТаблицы+".Контрагент в (Выбрать ТаблицаКэшПартнеровКонтрагентов.Контрагент Из ТаблицаКэшПартнеровКонтрагентов)"
			);
			
				
		КонецЕсли;	
		
		ТекстИндексов = "
		|ИНДЕКСИРОВАТЬ ПО
		|	Док_"+ТекущаяСтрокаТаблицы.ТипДокумента;
		
	КонецЕсли;	
	
	
	//в будущем можно продумать оптимизацию, когда у нас одна таблица ссылается на другую явно
	
	//теперь заполним область соединений документов
	//1. Сначала пройдемся вверх, чтобы получить предыдущие документы
	
	ИндексТекущейСтроки = ТаблицаСоединенийДокументов.Индекс(ТекущаяСтрокаТаблицы);
	Для Сч=1 По ИндексТекущейСтроки Цикл//текущую строку не берем
		ДобавляемаяСтрока = ТаблицаСоединенийДокументов[ИндексТекущейСтроки-Сч];
		
		ТекстПолей = ТекстПолей+", "+Символы.ПС
		+"	"+ДобавляемаяСтрока.ПсевдонимТаблицы+".Ссылка КАК Док_"+ДобавляемаяСтрока.ТипДокумента;
		
		ТекстТаблицСоединений = ТекстТаблицСоединений+Символы.ПС
		+"		ЛЕВОЕ СОЕДИНЕНИЕ "+ДобавляемаяСтрока.ИмяТаблицы+" КАК "+ДобавляемаяСтрока.ПсевдонимТаблицы
			+Символы.ПС+"		ПО "+ДобавляемаяСтрока.СоединениеСоСледующейТаблицей;
			
		Если НазначениеЗапроса = "ПостроениеСписка" Тогда
			ТекстИндексов = ТекстИндексов + ",
			|	Док_"+ДобавляемаяСтрока.ТипДокумента;
		КонецЕсли;
		
	КонецЦикла;	
	
	//2. Потом вниз - на одну позицию или до конца, чтобы получить следующие документы
	//на одну позицию - для того, чтобы получить запрос, который покажет по каждой цепочке документов, какие следующие документы еще не созданы
	//Например, есть ЗаказПокупателя, но нет Реализации
	//или есть Реализация, но нет СчетФактуры
	//ДобавлятьВсеТаблицы = Истина - для функции НайтиСвязанныеСообщения
	//Для остальных ДобавлятьВсеТаблицы = Ложь
	
	ПредыдущаяСтрока = ТекущаяСтрокаТаблицы;
	Для Сч=ИндексТекущейСтроки+1 По ТаблицаСоединенийДокументов.Количество()-1 Цикл//текущую строку не берем
		
		ДобавляемаяСтрока = ТаблицаСоединенийДокументов[Сч];
		
		ТекстПолей = ТекстПолей+", "+Символы.ПС
			+"	"+ДобавляемаяСтрока.ПсевдонимТаблицы+".Ссылка КАК Док_"+ДобавляемаяСтрока.ТипДокумента;
			
		ТекстТаблицСоединений = ТекстТаблицСоединений+Символы.ПС
		+"		ЛЕВОЕ СОЕДИНЕНИЕ "+ДобавляемаяСтрока.ИмяТаблицы+" КАК "+ДобавляемаяСтрока.ПсевдонимТаблицы
			+Символы.ПС+"		ПО "+ПредыдущаяСтрока.СоединениеСоСледующейТаблицей;
			
		ПредыдущаяСтрока = ДобавляемаяСтрока;
		Если НазначениеЗапроса = "ПостроениеСписка" Тогда
			Прервать;//нам требуется только один документ вперед в цепочке
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если НазначениеЗапроса = "ПостроениеСписка" Тогда
		ТекстПолей = ТекстПолей+"
		|	Поместить ВТ_"+ТекущаяСтрокаТаблицы.ТипДокумента;
	КонецЕсли;	
	
	ПолныйТекстЗапроса = ТекстПолей+ТекстТаблицСоединений+ТекстУсловий+ТекстИндексов;
	
	Возврат ПолныйТекстЗапроса;
	
	//на выходе получаем текст запроса вроде
	
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Документы.Ссылка КАК Заказ,
	//|	Документы.Проведен КАК Заказ_Проведен,
	//|	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
	//|	ТаблицаКэшПартнеровКонтрагентов.PORDERS,
	//|	ТаблицаКэшПартнеровКонтрагентов.ORDERS,
	//|	ТаблицаКэшПартнеровКонтрагентов.ORDRSP,
	//|	ТаблицаКэшПартнеровКонтрагентов.DESADV,
	//|	ТаблицаКэшПартнеровКонтрагентов.RECADV,
	//|	ТаблицаКэшПартнеровКонтрагентов.INVOIC,
	//|	ТаблицаКэшПартнеровКонтрагентов.INVOICДоОбработкиRECADV,
	//|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDERS,
	//|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееORDRSP,
	//|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееDESADV,
	//|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееRECADV,
	//|	ТаблицаКэшПартнеровКонтрагентов.СообщениеБлокирующееINVOIC,
	//|	Документы.СуммаДокумента КАК СуммаДокумента,
	//|	РеализацияТоваровУслуг.Ссылка КАК Реализация
	//|ПОМЕСТИТЬ ВТДокументы_ЗаказПокупателя
	//|ИЗ
	//|	Документ.ЗаказПокупателя КАК Документы
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
	//|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = Документы.Контрагент)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//|		ПО РеализацияТоваровУслуг.Сделка = Документы.Ссылка
	//|ГДЕ
	//|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	//|	И НЕ Документы.ПометкаУдаления
	//|	И &Условия
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	Документы.Ссылка,
	//|	Партнер";
	
КонецФункции	


//}#КонецОбласти //Сборка_Разборка_Запросов


//{#Область 04_Работа_С_Подключаемым_Модулем

//************************************************************
// РАБОТА С ПОДКЛЮЧАЕМЫМ МОДУЛЕМ

Функция ИнициализироватьВнешнийПодключаемыйМодуль() Экспорт
	
	Если ИспользуетсяПодключаемыйМодуль=Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если Не ВнешнийМодуль = Неопределено Тогда
		Возврат ВнешнийМодуль;
	КонецЕсли;
		
	ВнешнийМодуль 					= Неопределено;
	ИспользуетсяПодключаемыйМодуль 	= Ложь;
	
	ПодключаемыйМодульТип = НастройкиПодключаемогоМодуля.ПодключаемыйМодульТип;
	
	Если ЗначениеЗаполнено(ПодключаемыйМодульТип) И НЕ ПодключаемыйМодульТип = "Нет" Тогда
		
		Если ПодключаемыйМодульТип = "Диск" Тогда
			
			ПодключаемыйМодульПуть = НастройкиПодключаемогоМодуля.ПодключаемыйМодульПуть;
			Если ЗначениеЗаполнено(ПодключаемыйМодульПуть) Тогда
				Попытка
					
					Если КонтурEDI_ВерсияПлатформы()="81" Тогда
						ВнешнийМодуль = ВнешниеОбработки.Создать(СокрЛП(ПодключаемыйМодульПуть));
					Иначе
						УстановитьПривилегированныйРежим(Истина); 
						ВнешнийМодуль = ВнешниеОбработки.Создать(СокрЛП(ПодключаемыйМодульПуть), Ложь); //в небезопасном режиме, т.к. ПМ может содержать небезопасный код
					КонецЕсли;
					
					ВнешнийМодуль.Инициализировать(ЭтотОбъект);
					ИспользуетсяПодключаемыйМодуль = Истина;
				Исключение
					ВывестиПредупреждение_КонтурEDI("Не удалось подключить внешний модуль!");
				КонецПопытки;
			КонецЕсли;	
			
		ИначеЕсли ПодключаемыйМодульТип = "1С" Тогда
				
			Попытка
				Модуль = ПолучитьСсылкуНаПодключаемыйМодуль();
				Если ЗначениеЗаполнено(Модуль) Тогда
					МетаданныеСправочника = Модуль.Метаданные();
					ИмяРеквизита = "";
					ИмяТиповогоРеквизита="";
					Если ЗначениеЗаполнено(ИмяКонфигурации1С) и Лев(ИмяКонфигурации1С,3)="УФ_" Тогда
						ИмяТиповогоРеквизита= "ХранилищеОбработки";    //типовое название реквизита
					КонецЕсли;
					
					Если ИмяРеквизита = "" Тогда //вдруг его переименуют
						ИмяРеквизита = "";
						Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
							Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
								ИмяРеквизита = Реквизит.Имя;
								//будем брать последний реквизит такого типа т.к. это более вероятно, если найдем наш - гуд
								Если ИмяТиповогоРеквизита=Реквизит.Имя Тогда
									Прервать;  //найден ожидаемый реквизит нужного типа
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
						МодульОбъект = Модуль.ПолучитьОбъект();
						ИмяФайла = ПолучитьИмяВременногоФайла();
						ДвоичныеДанные = МодульОбъект[ИмяРеквизита].Получить();
						ДвоичныеДанные.Записать(ИмяФайла);
						
						Если КонтурEDI_ВерсияПлатформы()="81" Тогда
							ВнешнийМодуль = ВнешниеОбработки.Создать(ИмяФайла);
						Иначе
							ВнешнийМодуль = ВнешниеОбработки.Создать(ИмяФайла, Ложь);//в небезопасном режиме, т.к. ПМ может содержать небезопасный код
						КонецЕсли;
						
						ВнешнийМодуль.Инициализировать(ЭтотОбъект);
						ИспользуетсяПодключаемыйМодуль = Истина;
						УдалитьФайлы(ИмяФайла);
					КонецЕсли;
				КонецЕсли;
			Исключение
				ВывестиПредупреждение_КонтурEDI("Не удалось подключить внешний модуль!");
			КонецПопытки;
			
		ИначеЕсли ПодключаемыйМодульТип = "Конфигурация" Тогда
			
			ПодключаемыйМодульИмяОбработки = НастройкиПодключаемогоМодуля.ПодключаемыйМодульИмяОбработки;
			Если ЗначениеЗаполнено(ПодключаемыйМодульИмяОбработки) Тогда
				Попытка
					ВнешнийМодуль = Обработки[ПодключаемыйМодульИмяОбработки].Создать();
					ВнешнийМодуль.Инициализировать(ЭтотОбъект);
					ИспользуетсяПодключаемыйМодуль = Истина;
				Исключение
					ВывестиПредупреждение_КонтурEDI("Не удалось подключить внешний модуль!");
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ВнешнийМодуль;
	
КонецФункции

Функция ИнициализироватьВнешнийПодключаемыйМодульУправляемыйРежим() Экспорт
	
	//заглушка на всякий случай. Более не используется.
	Возврат ИнициализироватьВнешнийПодключаемыйМодуль();
	
КонецФункции // ИнициализироватьВнешнийПодключаемыйМодульУправляемыйРежим()

//	ИмяСобытия 				- 		Тип: Строка.
//									Идентификатор события, которое необходимо обработать
//
//	СтандартнаяОбработкаEDI - 		Тип: Булево. Необязательный
//									Передается признак выполнения стандартной обработки события. 
//									Если в теле процедуры указать ему значение Ложь, стандартная обработка события производиться не будет.
//	ПараметрыПодключаемогоМодуля - 	Тип: Структура. Необязательный
//									Параметры, которые будут доступны подключаемому модулю.
Функция ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия,СтандартнаяОбработкаEDI=Неопределено,ПараметрыПодключаемогоМодуля = Неопределено) Экспорт
	
	//Примеры использования
	
	//Вариант 1 - вызов процедуры
	//ОбработкаСобытияПодключаемогоМодуля("ПослеЗагрузкиВходящегоСообщения",,
	//		Новый Структура("Сообщение,ДокументСсылка",
	//		"",""));
	
	//Вариант 2 - вызов функции
	//РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеЗагрузкиВходящегоСообщения",,
	//		Новый Структура("Сообщение,ДокументСсылка",
	//		"",""));
	//Если РезультатПМ <> Неопределено Тогда
	//	СтруктураНастроек = РезультатПМ.СтруктураНастроек;
	//КонецЕсли;
	
		//расширения
		РезультатОбработки = ОбработатьСобытиеКонтурEDIвРасширениях(ИмяСобытия, ПараметрыПодключаемогоМодуля, СтандартнаяОбработкаEDI);
		Если Не РезультатОбработки = Неопределено Тогда
			Возврат РезультатОбработки;
		КонецЕсли;
		
	#Если Клиент Тогда 
		//т.е. мы в модуле обработки оказались клиентом - ОФ или толстый УФ
		//подключаемый модуль
		Если ИспользуетсяПодключаемыйМодуль = Истина Тогда
			РезультатОбработки = ВнешнийМодуль.ОбработатьСобытиеКонтурEDI(ИмяСобытия, ПараметрыПодключаемогоМодуля, СтандартнаяОбработкаEDI);
			Возврат РезультатОбработки;
		КонецЕсли;
	#иначе
		ВнешнийМодуль = ИнициализироватьВнешнийПодключаемыйМодульУправляемыйРежим();	//Должна оставаться последней! т.к. возможно что Объект Док протухнет если в ПМ его перечитают
		
		//В некоторых ситуациях может потребоваться вывести сообщение пользователю из ПМ в Основную форму (а не активную) 
		//Для такой возможности в некоторых событиях проброшен ОсновнойМодуль.IDОсновнойФормы - (необязательно заполнен во всех событиях) 
		//его можно указать как идентификатор назначения у СообщениеПользователю
		//Пример вывода сообщения из контекста ПМ:
		//	Сп = Новый СообщениеПользователю;
		//	Если ЗначениеЗаполнено(ОсновнойМодуль.IDОсновнойФормы) Тогда 
		//		Сп.ИдентификаторНазначения=ОсновнойМодуль.IDОсновнойФормы;
		//	КонецЕсли;
		//	Сп.Текст = "Я адресован в основную форму!";
		//	Сп.Сообщить();
		
		Если ВнешнийМодуль <> Неопределено Тогда
			СтандартнаяОбработкаEDI = Истина;
			РезультатОбработки = ВнешнийМодуль.ОбработатьСобытиеКонтурEDI(ИмяСобытия,ПараметрыПодключаемогоМодуля, СтандартнаяОбработкаEDI);
			//СтандартнаяОбработка не имеет значения
			Возврат РезультатОбработки;
		КонецЕсли;
	#КонецЕсли
	Возврат Неопределено;
	
КонецФункции

Функция ОбработатьСобытиеКонтурEDIвРасширениях(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI)
	
	//ТаблицаЗначений:
	//Колонки: 	РасширениеСсылка	- ссылка на спр. Дополнительные справочники
	//			ИсполняемыйКод  	- код обработчика события
	//			ПорядокВыполнения   - порядок выполнения кода в разрезе расширений
	ТаблицаИсполняемогоКода = ПолучитьТаблицуИсполняемогоКода(ИмяСобытия);

	Если Не ЗначениеЗаполнено(ТаблицаИсполняемогоКода) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	//если это событие расширения - тогда оставляем только обработчик конкретного расширения
	МассивСобытийРасширений = ПолучитьМассивСобытийРасширений();
	Если Не МассивСобытийРасширений.Найти(ИмяСобытия) = Неопределено Тогда
		Если Параметры.Свойство("РасширениеСсылка") И ЗначениеЗаполнено(Параметры.РасширениеСсылка) Тогда
			РасширениеСсылка = Параметры.РасширениеСсылка;
			Для Каждого Строка Из ТаблицаИсполняемогоКода Цикл
				Если Не Строка.РасширениеСсылка = РасширениеСсылка Тогда
					ТаблицаИсполняемогоКода.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаИсполняемогоКода Цикл
		
		РасширениеСсылка	= Строка.РасширениеСсылка;
		ИсполняемыйКод 		= Строка.ИсполняемыйКод;
		
		_РасширениеСсылка = ПолучитьЭлементСправочника("Расширения",РасширениеСсылка);
		
		ОсновнойМодуль=ЭтотОбъект; //чтобы можно было переносить код из ПМ в расширения не заботясь о контексте
		Р_е_з_у_л_ь_т_а_т = Неопределено;  //переменную Результат очень вероятно захотят использовать в коде расширения
		Попытка
			Выполнить(ИсполняемыйКод); //метод выполнялся в транзакции, убрали, транзакциями пользуемся в коде расширения (при необходимости)
		Исключение
			_ОшибкаИсполненияКода = ОписаниеОшибки();
			СП = Новый СообщениеПользователю;
			СП.Текст = "Алгоритм расширения """ + _РасширениеСсылка.Наименование + """ был выполнен с ошибкой:
					   |	- расположение ошибки: 	обработчик события """ + ИмяСобытия + """;
					   |	- описание ошибки: 		" + _ОшибкаИсполненияКода + ".";
			СП.Сообщить();
		КонецПопытки;
		
		Если Не Р_е_з_у_л_ь_т_а_т = Неопределено Тогда
			Возврат Р_е_з_у_л_ь_т_а_т;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьТаблицуИсполняемогоКода(ИмяСобытия)
	
	//нет метаданных хранения расширений или активных расширений
	Если ТаблицаКэшИсполняемогоКодаРасширений.Количество() = 0 Тогда
		Возврат Неопределено;		
	КонецЕсли;
		
	МассивСобытийРасширений = ТаблицаКэшИсполняемогоКодаРасширений.НайтиСтроки(Новый Структура("ИмяСобытия",ИмяСобытия));
	Если МассивСобытийРасширений.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
    ТаблицаИсполняемогоКода = Новый ТаблицаЗначений;
	ТаблицаИсполняемогоКода.Колонки.Добавить("РасширениеСсылка");
	ТаблицаИсполняемогоКода.Колонки.Добавить("ИсполняемыйКод");
	ТаблицаИсполняемогоКода.Колонки.Добавить("ПорядокВыполнения");
	
	Для Каждого Элемент Из МассивСобытийРасширений Цикл
		НоваяСтрока = ТаблицаИсполняемогоКода.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);		
	КонецЦикла;
	
	ТаблицаИсполняемогоКода.Сортировать("ПорядокВыполнения");	
	
	Возврат ТаблицаИсполняемогоКода;
		        		
КонецФункции

Процедура ФорматироватьИсполняемыйКод(ИсполняемыйКод)
	
	ИсполняемыйКод = СокрЛП(ИсполняемыйКод);
	
	//заменим лишние конструкции
	ИсполняемыйКод = СтрЗаменить(ИсполняемыйКод, "Возврат ", 		"Р_е_з_у_л_ь_т_а_т = ");
	ИсполняемыйКод = СтрЗаменить(ИсполняемыйКод, "возврат ", 		"Р_е_з_у_л_ь_т_а_т = ");
	ИсполняемыйКод = СтрЗаменить(ИсполняемыйКод, "ОсновнойМодуль.", "");
	ИсполняемыйКод = СтрЗаменить(ИсполняемыйКод, Символ(182), 		Символы.ПС);
	
КонецПроцедуры

Функция УстановитьФлагИспользованиеРасширения(РасширениеСсылка, Использование) Экспорт 
	
	СтруктураРезультата = Новый Структура("Успешно,ОписаниеОшибки",Ложь,"");
	
	Если РасширениеСсылка = Неопределено 
		 или Использование = Неопределено 
		 или Не ТипЗнч(Использование) = Тип("Булево") Тогда
		СтруктураРезультата.ОписаниеОшибки = "Неверные исходные данные для активации/деактивации расширения."; 
		Возврат СтруктураРезультата;	 
	КонецЕсли;
	
	СтруктураЭлемента = ИнициализироватьТаблицуДополнительныхРеквизитовРасширения();
	Реквизит = СтруктураЭлемента.Добавить();
	Реквизит.ИмяРеквизита = "Использование";
	Реквизит.Значение 	  = Использование;
	
	Попытка
		СохранитьЭлементСправочника("Расширения",РасширениеСсылка,СтруктураЭлемента);
		СтруктураРезультата.Успешно = Истина;
	Исключение
		_ОписаниеОшибки = ОписаниеОшибки();
		СтруктураРезультата.ОписаниеОшибки = _ОписаниеОшибки;
	КонецПопытки;
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеАктивацииДеактивацииРасширения",,Новый Структура("РасширениеСсылка, Использование, Успешно", РасширениеСсылка, Использование, СтруктураРезультата.Успешно));
	
	Возврат СтруктураРезультата;
		
КонецФункции

Функция СменитьПорядокВыполненияРасширений(РасширенияДляСменыПорядка) Экспорт
	
	СтруктураРезультата = Новый Структура("Успешно,ОписаниеОшибки",Ложь,"");
		
	ПервоеРасширениеСсылка = РасширенияДляСменыПорядка.Получить(0).Ссылка;
	ВтороеРасширениеСсылка = РасширенияДляСменыПорядка.Получить(1).Ссылка;
	
	НовыйПорядокПервоеРасширение = РасширенияДляСменыПорядка.Получить(1).ПорядокВыполнения;
	НовыйПорядокВтороеРасширение = РасширенияДляСменыПорядка.Получить(0).ПорядокВыполнения;
	
	СтруктураПервогоЭлемента = ИнициализироватьТаблицуДополнительныхРеквизитовРасширения();
	РеквизитПервогоЭлемента = СтруктураПервогоЭлемента.Добавить();
	РеквизитПервогоЭлемента.ИмяРеквизита = "ПорядокВыполнения";
	РеквизитПервогоЭлемента.Значение 	  = НовыйПорядокПервоеРасширение;
	
	СтруктураВторогоЭлемента = ИнициализироватьТаблицуДополнительныхРеквизитовРасширения();
	РеквизитВторогоЭлемента = СтруктураВторогоЭлемента.Добавить();
	РеквизитВторогоЭлемента.ИмяРеквизита = "ПорядокВыполнения";
	РеквизитВторогоЭлемента.Значение 	  = НовыйПорядокВтороеРасширение;
	
	НачатьТранзакцию_КонтурEDI();
	Попытка
		СохранитьЭлементСправочника("Расширения",ПервоеРасширениеСсылка,СтруктураПервогоЭлемента);
		СохранитьЭлементСправочника("Расширения",ВтороеРасширениеСсылка,СтруктураВторогоЭлемента);
		ЗафиксироватьТранзакцию_КонтурEDI();
		СтруктураРезультата.Успешно = Истина;
	Исключение
		ОтменитьТранзакцию_КонтурEDI();
		_ОписаниеОшибки = ОписаниеОшибки();
		СтруктураРезультата.ОписаниеОшибки = _ОписаниеОшибки;
	КонецПопытки;
	
	Возврат СтруктураРезультата;
	
КонецФункции

//работа с файлами расширений

Функция СохранитьИнтерфейсРасширения(Знач РасширениеСсылка) Экспорт
		
	РасширениеСсылка = ПреобразоватьЗначениеДляВнешнегоХранилища(РасширениеСсылка);	
	РезультатСохранения = Новый Структура("Успешно,ОписаниеОшибки,ИмяФайла",Ложь,"","");
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
    СтрокаРеквизитаИнтерфейс = РасширениеСсылка.ДополнительныеРеквизиты.Найти("Интерфейс", "ИмяРеквизита");
	Если СтрокаРеквизитаИнтерфейс = Неопределено Тогда
		РезультатСохранения.ОписаниеОшибки = "Не удалось открыть настройки расширения: не найден интерфейс настройки.";
		Возврат РезультатСохранения;
	КонецЕсли;
	
	Попытка
		СтрокаРеквизитаИнтерфейс.ЗначениеХранилищеЗначения.Получить().Записать(ИмяФайла);
	Исключение
		РезультатСохранения.ОписаниеОшибки = "Не удалось открыть настройки расширения: не получилось извлечь и сохранить интерфейс настройки на диск.";
		Возврат РезультатСохранения;
	КонецПопытки;
	
	РезультатСохранения.Успешно = Истина;
	РезультатСохранения.ИмяФайла = ИмяФайла;
	
	Возврат РезультатСохранения;
	
КонецФункции

Функция ИнициализироватьИнтерфейсРасширения(ИмяФайла, РасширениеСсылка) Экспорт
	
	РезультатИнициализации = Новый Структура("Успешно,ОписаниеОшибки,Интерфейс",Ложь,"",Неопределено);

	Попытка
		Интерфейс = ВнешниеОбработки.Создать(СокрЛП(ИмяФайла));
		Интерфейс.Инициализировать(ЭтотОбъект, РасширениеСсылка);
	Исключение
		РезультатИнициализации.ОписаниеОшибки = "Не удалось инициализировать интерфейс расширения.";
		Возврат РезультатИнициализации;
	КонецПопытки;
	
	РезультатИнициализации.Успешно = Истина;
	РезультатИнициализации.Интерфейс = Интерфейс;
	
	Возврат РезультатИнициализации;
	
КонецФункции

Процедура ФинализироватьИнтерфейсРасширения(ИмяФайла,Интерфейс) Экспорт
	
	Интерфейс = Неопределено;
	
	Попытка
		Файл = Новый Файл(ИмяФайла);
		УдалитьФайлы(Файл.Путь,Файл.Имя);
	Исключение
	КонецПопытки;		
	
КонецПроцедуры

//получение данных

Функция ПолучитьДанныеОбУстановленныхРасширениях(ИсключитьКастомныеРасширения = Ложь) Экспорт
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Расширения_ДопРеквизитИспользование.Значение КАК БУЛЕВО) КАК Использование,
	|	Расширения_Ссылки.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(
	|		ВЫБОР
	|			КОГДА Расширения_ДопРеквизитФлагНаличияИнтерфейса.Значение = ИСТИНА
	|				ТОГДА ""изменить""
	|			ИНАЧЕ """"
	|		КОНЕЦ 
	|	КАК СТРОКА(10)) КАК Настройка,
	|	ВЫРАЗИТЬ(Расширения_ДопРеквизитФлагНаличияИнтерфейса.Значение КАК БУЛЕВО) КАК Интерфейс,
	|	ВЫРАЗИТЬ(Расширения_ДопРеквизитВерсияРасширения.Значение КАК СТРОКА(20)) КАК ВерсияРасширения,
	|	Расширения_ДопРеквизитОписаниеПолное.ЗначениеСтрока КАК ОписаниеПолное,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(Расширения_ДопРеквизитПорядокВыполнения.Значение, 0) КАК Число(5,0)) КАК ПорядокВыполнения,
	|	Расширения_Ссылки.Ссылка,
	|	ВЫРАЗИТЬ(Расширения_ДопРеквизитВерсияМодуля.Значение КАК СТРОКА(20)) КАК РекомендуемаяВерсияМодуля,
	|	ВЫРАЗИТЬ(Расширения_ДопРеквизитИдентификатор.Значение КАК СТРОКА(50)) КАК Идентификатор,
	|	ВЫРАЗИТЬ(Расширения_ДопРеквизитОбязательный.Значение КАК БУЛЕВО) КАК Обязательный
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники КАК Расширения_Ссылки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Расширения_ДопРеквизитИспользование
	|		ПО Расширения_Ссылки.Ссылка = Расширения_ДопРеквизитИспользование.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Расширения_ДопРеквизитОписаниеПолное
	|		ПО Расширения_Ссылки.Ссылка = Расширения_ДопРеквизитОписаниеПолное.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Расширения_ДопРеквизитФлагНаличияИнтерфейса
	|		ПО Расширения_Ссылки.Ссылка = Расширения_ДопРеквизитФлагНаличияИнтерфейса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Расширения_ДопРеквизитВерсияРасширения
	|		ПО Расширения_Ссылки.Ссылка = Расширения_ДопРеквизитВерсияРасширения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Расширения_ДопРеквизитПорядокВыполнения
	|		ПО Расширения_Ссылки.Ссылка = Расширения_ДопРеквизитПорядокВыполнения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Расширения_ДопРеквизитВерсияМодуля
	|		ПО Расширения_Ссылки.Ссылка = Расширения_ДопРеквизитВерсияМодуля.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Расширения_ДопРеквизитОбязательный
	|		ПО Расширения_Ссылки.Ссылка = Расширения_ДопРеквизитОбязательный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Расширения_ДопРеквизитИдентификатор
	|		ПО Расширения_Ссылки.Ссылка = Расширения_ДопРеквизитИдентификатор.Ссылка
	|ГДЕ
	|	Расширения_Ссылки.ИмяСправочника = ""Расширения""
	|	И Расширения_ДопРеквизитИспользование.ИмяРеквизита = ""Использование""
	|	И Расширения_ДопРеквизитОписаниеПолное.ИмяРеквизита = ""ОписаниеПолное""
	|	И Расширения_ДопРеквизитФлагНаличияИнтерфейса.ИмяРеквизита = ""Интерфейс""
	|	И Расширения_ДопРеквизитВерсияРасширения.ИмяРеквизита = ""ВерсияРасширения""
	|	И Расширения_ДопРеквизитПорядокВыполнения.ИмяРеквизита = ""ПорядокВыполнения""
	|	И Расширения_ДопРеквизитВерсияМодуля.ИмяРеквизита = ""РекомендуемаяВерсияМодуля""
	|	И Расширения_ДопРеквизитИдентификатор.ИмяРеквизита = ""Идентификатор""
	|	И Расширения_ДопРеквизитОбязательный.ИмяРеквизита = ""Обязательный""
	|	И Истина
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокВыполнения";
	
	Если ИсключитьКастомныеРасширения Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Истина","НЕ Расширения_ДопРеквизитВерсияРасширения.Значение = ""0.0""");
	КонецЕсли;
	
	Если ВнешнееХранилище Тогда
		ТаблицаДанныхОбУстановленныхРасширениях = ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить());
	Иначе
		ТаблицаДанныхОбУстановленныхРасширениях = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаДанныхОбУстановленныхРасширениях;
	
КонецФункции

Функция ЗагрузитьФайлыРасширенийВЛокальныйКаталог(МассивИменФайлов) Экспорт
	
	РезультатЗагрузки = Новый Структура("Успешно,ОписаниеОшибки,МассивЗагруженныхФайлов",Ложь,"",Новый Массив);
	
	КаталогРасширенийНаСервере = ПолучитьКаталогРасширений("НаСервере");
	КаталогРасширенийЛокальный = ПолучитьКаталогРасширений("Локальный"); 
	
	//создаем каталог расширений
	Каталог = Новый Файл(КаталогРасширенийЛокальный);
	Если Не Каталог.Существует() Тогда
		СоздатьКаталог(КаталогРасширенийЛокальный);
	КонецЕсли;
	
	Для Каждого ИмяФайлМассива Из МассивИменФайлов Цикл
		
		//создаем каталог расширения   
		ПозицияРазделителя = Найти(ИмяФайлМассива,"/");
		Если Не ПозицияРазделителя = 0 Тогда
			ПутьКаталога = КаталогРасширенийЛокальный+"\"+Лев(ИмяФайлМассива,ПозицияРазделителя-1);
			Каталог = Новый Файл(ПутьКаталога);
			Если Не Каталог.Существует() Тогда
				СоздатьКаталог(ПутьКаталога);
			КонецЕсли;
		КонецЕсли;
		
		Если Не	ПолучитьФайлHTTP(
			ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
			КаталогРасширенийНаСервере+ИмяФайлМассива, 
			КаталогРасширенийЛокальный+СтрЗаменить(ИмяФайлМассива,"/","\"))
		Тогда
			РезультатЗагрузки.Успешно = Ложь;
			РезультатЗагрузки.ОписаниеОшибки = "Не удалось получить файл " + ИмяФайлМассива + " с сервера. Проверьте Ваше подключение к Интернет.";
			Возврат РезультатЗагрузки;
		КонецЕсли;
		
		//отладка
		//КопироватьФайл("C:\20160801\"+ИмяФайлМассива, КаталогРасширенийЛокальный+СтрЗаменить(ИмяФайлМассива,"/","\"));
		
		РезультатЗагрузки.Успешно  = Истина;
		РезультатЗагрузки.МассивЗагруженныхФайлов.Добавить(КаталогРасширенийЛокальный+СтрЗаменить(ИмяФайлМассива,"/","\"));
	
	КонецЦикла;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

//чтение XML

Функция ПрочитатьФайлДанныхРасширений(ИмяФайлаДанных) Экспорт
	
	РезультатЧтения = Новый Структура("Успешно,ОписаниеОшибки,ДанныеЧтения",Ложь,"",Неопределено);
	
	Чтение = Новый ЧтениеXML;
	
	Попытка 
		Чтение.ОткрытьФайл(ИмяФайлаДанных);
		ДанныеЧтения = ФабрикаXDTO.ПрочитатьXML(Чтение);
		Чтение.Закрыть();
		Чтение = Неопределено;
		РезультатЧтения.Успешно = Истина;
		РезультатЧтения.ДанныеЧтения = ДанныеЧтения;
	Исключение
		_ОписаниеОшибки = ОписаниеОшибки();
		РезультатЧтения.ОписаниеОшибки = "Не удалось прочитать файл данных расширений: """ + _ОписаниеОшибки + """.";
	КонецПопытки;
		
	Возврат РезультатЧтения;
	
КонецФункции

Функция ИнициализироватьТаблицуДанныхОРасширениях()
	
	ТаблицаДанные = Новый ТаблицаЗначений;
	ТаблицаДанные.Колонки.Добавить("Идентификатор",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	ТаблицаДанные.Колонки.Добавить("Наименование",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ТаблицаДанные.Колонки.Добавить("ВерсияРасширения",			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанные.Колонки.Добавить("РекомендуемаяВерсияМодуля",	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанные.Колонки.Добавить("Обязательный",				Новый ОписаниеТипов("Булево"));
	ТаблицаДанные.Колонки.Добавить("Интерфейс",					Новый ОписаниеТипов("Булево"));
	ТаблицаДанные.Колонки.Добавить("Устаревшее",				Новый ОписаниеТипов("Булево"));
	ТаблицаДанные.Колонки.Добавить("ОписаниеПолное",			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	
	ТаблицаДанные.Колонки.Добавить("ТипФорм",				);   //список значений
	ТаблицаДанные.Колонки.Добавить("ТорговыеСети",			);
	ТаблицаДанные.Колонки.Добавить("Конфигурации",			);
	
	Возврат ТаблицаДанные;
		
КонецФункции

Функция ИнициализироватьТаблицуДополнительныхРеквизитовРасширения() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ИмяРеквизита", 				Новый ОписаниеТипов("Строка", , 
															Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	Таблица.Колонки.Добавить("Значение", 					Новый ОписаниеТипов("Булево, Строка, Дата, Число",
															Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой),
															Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная),
															Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Таблица.Колонки.Добавить("ЗначениеСтрока", 				Новый ОписаниеТипов("Строка", ,
															Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	Таблица.Колонки.Добавить("ЗначениеХранилищеЗначения", 	Новый ОписаниеТипов("Строка", ,
															Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная))); //здесь будем передавать путь к файлу-интерфейса
	Возврат Таблица;														

КонецФункции

Функция ПолучитьСоответствиеСвойствСпискаРасширений()
	
	СоответствиеСвойств = Новый Структура;
	СоответствиеСвойств.Вставить("Идентификатор",				"id");
	СоответствиеСвойств.Вставить("Наименование",				"name");
	СоответствиеСвойств.Вставить("ВерсияРасширения",			"version");
	СоответствиеСвойств.Вставить("РекомендуемаяВерсияМодуля",	"moduleVersion");
	СоответствиеСвойств.Вставить("Обязательный",				"compulsory");
	СоответствиеСвойств.Вставить("Интерфейс",					"interface");
	СоответствиеСвойств.Вставить("ОписаниеПолное",				"description");
	
	СоответствиеСвойств.Вставить("Устаревшее",					"outdated");
	СоответствиеСвойств.Вставить("ТипФорм",						"ApplicationTypes");
	СоответствиеСвойств.Вставить("ТорговыеСети",				"Nets");
	СоответствиеСвойств.Вставить("Конфигурации",				"Configurations");
	Возврат СоответствиеСвойств;
	
КонецФункции

Функция ПолучитьСоответствиеСвойствРасширения()
	
	СоответствиеСвойств = Новый Структура;
	СоответствиеСвойств.Вставить("id",				"Идентификатор");
	СоответствиеСвойств.Вставить("name",			"Наименование");
	СоответствиеСвойств.Вставить("version",			"ВерсияРасширения");
	СоответствиеСвойств.Вставить("moduleVersion",	"РекомендуемаяВерсияМодуля");
	СоответствиеСвойств.Вставить("compulsory",		"Обязательный");
	СоответствиеСвойств.Вставить("interface",		"Интерфейс");
	СоответствиеСвойств.Вставить("description",		"ОписаниеПолное");
	
	Возврат СоответствиеСвойств;
	
КонецФункции

Функция ПолучитьСоответствиеТиповСвойствРасширения()
	                                                          
	СоответствиеТиповСвойств = Новый Структура;
	СоответствиеТиповСвойств.Вставить("id",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	СоответствиеТиповСвойств.Вставить("name",			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	СоответствиеТиповСвойств.Вставить("version",		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	СоответствиеТиповСвойств.Вставить("moduleVersion",	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	СоответствиеТиповСвойств.Вставить("compulsory",		Новый ОписаниеТипов("Булево"));
	СоответствиеТиповСвойств.Вставить("interface",		Новый ОписаниеТипов("Булево"));
	СоответствиеТиповСвойств.Вставить("description",	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));	
	
	Возврат СоответствиеТиповСвойств;
	
КонецФункции

Процедура ДобавитьДанныеОРасширениях(ЭлементДанных, СоответствиеСвойств, ТаблицаДанныеОРасширениях)
	
	НоваяСтрока = ТаблицаДанныеОРасширениях.Добавить();
	//переделать на xsd
	Для Каждого Соответствие Из СоответствиеСвойств Цикл
		Попытка
			Если Соответствие.Значение= "ApplicationTypes"Тогда 
				НоваяСтрока.ТипФорм=Новый СписокЗначений;
			ИначеЕсли Соответствие.Значение= "Nets"Тогда 
				НоваяСтрока.ТорговыеСети=Новый СписокЗначений;
			ИначеЕсли Соответствие.Значение= "Configurations"Тогда 
				НоваяСтрока.Конфигурации = Новый СписокЗначений;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементДанных[Соответствие.Значение]) = Тип("ОбъектXDTO") Тогда
				Если Соответствие.Значение= "ApplicationTypes"Тогда 
					НоваяСтрока.ТипФорм=Новый СписокЗначений;
					СписокФормXDTO = ЭлементДанных[Соответствие.Значение].ApplicationType;
					Если ТипЗнч(СписокФормXDTO) = Тип("СписокXDTO") Тогда 
						Для Каждого ТипФормы Из СписокФормXDTO Цикл
							НоваяСтрока.ТипФорм.Добавить(ТипФормы);
						КонецЦикла;
					Иначе
						НоваяСтрока.ТипФорм.Добавить(СписокФормXDTO);
					КонецЕсли;
					
				ИначеЕсли Соответствие.Значение= "Nets"Тогда 
					НоваяСтрока.ТорговыеСети=Новый СписокЗначений;
					СписокСетейXDTO = ЭлементДанных[Соответствие.Значение].Net;
					Если ТипЗнч(СписокСетейXDTO) = Тип("СписокXDTO") Тогда 
						Для Каждого ТС Из СписокСетейXDTO Цикл
							НоваяСтрока.ТорговыеСети.Добавить(ТС);
						КонецЦикла;
					Иначе
						НоваяСтрока.ТорговыеСети.Добавить(СписокСетейXDTO);
					КонецЕсли;
					
				ИначеЕсли Соответствие.Значение= "Configurations"Тогда 
					НоваяСтрока.Конфигурации = Новый СписокЗначений;
					СписокКонфигурацийXDTO = ЭлементДанных[Соответствие.Значение].Configuration;
					Если ТипЗнч(СписокКонфигурацийXDTO) = Тип("СписокXDTO") Тогда 
						Для Каждого Конфигурация Из СписокКонфигурацийXDTO Цикл
							НоваяСтрока.Конфигурации.Добавить(Конфигурация);
						КонецЦикла;
					Иначе
						НоваяСтрока.Конфигурации.Добавить(СписокКонфигурацийXDTO);
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				НоваяСтрока[Соответствие.Ключ] = ЭлементДанных[Соответствие.Значение];
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

//конвертация XML

Функция КонвертироватьДанныеСпискаРасширений(ДанныеСпискаРасширений) Экспорт
	//переделать на xsd
	ТаблицаДанныеОРасширениях = ИнициализироватьТаблицуДанныхОРасширениях();
		
	РезультатКонвертации = Новый Структура("Успешно,ОписаниеОшибки,ТаблицаДанныеОРасширениях",Ложь,"",ТаблицаДанныеОРасширениях);
	
	Данные = ДанныеСпискаРасширений.extension;
	
	СоответствиеСвойств = ПолучитьСоответствиеСвойствСпискаРасширений();
		
	Если ТипЗнч(Данные) = Тип("ОбъектXDTO") Тогда
		ДобавитьДанныеОРасширениях(Данные,СоответствиеСвойств,ТаблицаДанныеОРасширениях);		
	ИначеЕсли ТипЗнч(Данные) = Тип("СписокXDTO") Тогда
		Для Каждого ЭлементДанных Из Данные Цикл
			Если ТипЗнч(ЭлементДанных) = Тип("ОбъектXDTO") Тогда
				ДобавитьДанныеОРасширениях(ЭлементДанных,СоответствиеСвойств,ТаблицаДанныеОРасширениях);
			Иначе
				РезультатКонвертации.ОписаниеОшибки = "Невозможно сконвертировать данные списка расширений: неверный формат данных.";
				Возврат РезультатКонвертации; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РезультатКонвертации.Успешно = Истина;
	РезультатКонвертации.ТаблицаДанныеОРасширениях = ТаблицаДанныеОРасширениях;
	
	Возврат РезультатКонвертации;
	
КонецФункции

Функция ПроверитьВозможностьУстановкиРасширения(ПараметрыПроверки) Экспорт
	
	РезультатПроверки = Новый Структура("Успешно,ОписаниеОшибки",Ложь,"");
	
	РезультатПроверки.Успешно = Истина;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ДобавитьДанныеОСобытии(ОбработчикСобытия, ТаблицаДанныеРасширения)
	
	НовоеСобытие = ТаблицаДанныеРасширения.Добавить();
	НовоеСобытие.ИмяРеквизита	= "ИсполняемыйКод";
	НовоеСобытие.Значение		= ОбработчикСобытия.name;
	НовоеСобытие.ЗначениеСтрока = ЗаменитьСимволыXML(ОбработчикСобытия.code);
	
	НовоеСобытие = ТаблицаДанныеРасширения.Добавить();
	НовоеСобытие.ИмяРеквизита	= "ИсходныйИсполняемыйКод";
	НовоеСобытие.Значение		= ОбработчикСобытия.name;
	НовоеСобытие.ЗначениеСтрока = ЗаменитьСимволыXML(ОбработчикСобытия.code);
		
КонецПроцедуры

Функция КонвертироватьДанныеРасширения(Идентификатор,ДанныеРасширения) Экспорт
	
	НаименованиеРасширения  = "";
	ТаблицаДанныеРасширения = ИнициализироватьТаблицуДополнительныхРеквизитовРасширения();
		
	РезультатКонвертации = Новый Структура("Успешно,ОписаниеОшибки,ТаблицаДанныеРасширения",Ложь,"",ТаблицаДанныеРасширения);
	
	СоответствиеСвойствРасширения 		 			 = ПолучитьСоответствиеСвойствРасширения();
	СоответствиеТиповСвойствРасширения				 = ПолучитьСоответствиеТиповСвойствРасширения();
	
	Если Не ТипЗнч(ДанныеРасширения) = Тип("ОбъектXDTO") Тогда
		РезультатКонвертации.ОписаниеОшибки = "Невозможно сконвертировать данные расширения: неверный формат данных.";
		Возврат РезультатКонвертации;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из ДанныеРасширения.Свойства() Цикл
		      		
		ТекущиеДанные		= ДанныеРасширения[ЭлементДанных.Имя];
		ТипЗнчТекущиеДанных = ТипЗнч(ТекущиеДанные); 
		
		Если ТипЗнчТекущиеДанных = Тип("ОбъектXDTO") Тогда
			
			//конвертация данных обработчиков событий
			Если ЭлементДанных.Имя = "events" Тогда
				ТекЗначение 	= ДанныеРасширения[ЭлементДанных.Имя].event;
				ТипТекЗначения  = ТипЗнч(ТекЗначение);
				Если ТипТекЗначения = Тип("ОбъектXDTO") Тогда
					ДобавитьДанныеОСобытии(ТекЗначение, ТаблицаДанныеРасширения);	
				ИначеЕсли ТипТекЗначения = Тип("СписокXDTO") Тогда
					Для Каждого ОбработчикСобытия Из ТекЗначение Цикл
						ДобавитьДанныеОСобытии(ОбработчикСобытия, ТаблицаДанныеРасширения);	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			//конвертация данных о файлах
			Если ЭлементДанных.Имя = "files" Тогда
				ТекЗначение 	= ДанныеРасширения[ЭлементДанных.Имя].file;
				ТипТекЗначения  = ТипЗнч(ТекЗначение);
				Если ТипТекЗначения = Тип("ОбъектXDTO") Тогда
					ДобавитьДанныеОФайле(Идентификатор, ТекЗначение, ТаблицаДанныеРасширения);	
				ИначеЕсли ТипТекЗначения = Тип("СписокXDTO") Тогда
					Для Каждого Файл Из ТекЗначение Цикл
						ДобавитьДанныеОФайле(Идентификатор, Файл, ТаблицаДанныеРасширения);	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
						
		Иначе
			
			//конвертация свойств расширения
			Имя 	 = СоответствиеСвойствРасширения[ЭлементДанных.Имя];
			Значение = СоответствиеТиповСвойствРасширения[ЭлементДанных.Имя].ПривестиЗначение(ДанныеРасширения[ЭлементДанных.Имя]);
			НовоеСвойство = ТаблицаДанныеРасширения.Добавить();
			НовоеСвойство.ИмяРеквизита = Имя;
			Если Имя = "ОписаниеПолное" Тогда
				НовоеСвойство.ЗначениеСтрока = Значение;
			Иначе
				НовоеСвойство.Значение = Значение;
			КонецЕсли;
			Если Имя = "Интерфейс" Тогда
				НовоеСвойство.ЗначениеХранилищеЗначения = ПолучитьКаталогРасширений("Локальный") + Идентификатор + "\" + "interface.epf";	
			КонецЕсли;
			
		КонецЕсли;
						
	КонецЦикла;
	
	ПорядокВыполнения = ТаблицаДанныеРасширения.Добавить();
	ПорядокВыполнения.ИмяРеквизита 			= "ПорядокВыполнения";
	ПорядокВыполнения.Значение 				= ПолучитьСледующийПорядокВыполненияРасширения();
	Использование = ТаблицаДанныеРасширения.Добавить();
	Использование.ИмяРеквизита 				= "Использование";
	Использование.Значение 					= Истина;
	
	РезультатКонвертации.Успешно = Истина;
	РезультатКонвертации.ТаблицаДанныеРасширения = ТаблицаДанныеРасширения;
	
	Возврат РезультатКонвертации;
	
КонецФункции

Функция ПолучитьСледующийПорядокВыполненияРасширения() Экспорт
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(МАКСИМУМ(КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение) КАК ЧИСЛО(5,0)) КАК Значение
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""ПорядокВыполнения""
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = ""Расширения""";
	Если ВнешнееХранилище Тогда
		СтрокаПоследнегоПорядка = ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить());
	Иначе
		СтрокаПоследнегоПорядка = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	ЗаключительныйПорядокВыполнения = СтрокаПоследнегоПорядка.Получить(0).Значение;
	Если ЗаключительныйПорядокВыполнения = Неопределено или ЗаключительныйПорядокВыполнения = Null Тогда
		ЗаключительныйПорядокВыполнения = 0;	
 	КонецЕсли;
	Возврат ЗаключительныйПорядокВыполнения + 1;
	
КонецФункции

//подготовка исполняемого кода

Процедура ОбновитьКэшИсполняемогоКодаРасширений() Экспорт
	
	//проверяем доступность механизма расширений 
	ЕстьМетаданныеХраненияРасширений = ПроверитьНаличиеМетаданныхХраненияРасширений();

	Если Не ЕстьМетаданныеХраненияРасширений Тогда
		ТаблицаКэшИсполняемогоКодаРасширений = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли;
	
	//получаем массив событий расширений	
	МассивСобытийРасширений = ПолучитьМассивСобытийРасширений();
	
	//создаем кэш кода без настроек
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ АктивныеРасширения
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Использование""
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧДопРеквизиты_ИсполняемыйКод.Ссылка КАК РасширениеСсылка,
	|	ВЫРАЗИТЬ(ТЧДопРеквизиты_ИсполняемыйКод.Значение КАК СТРОКА) КАК ИмяСобытия,
	|	ТЧДопРеквизиты_ИсполняемыйКод.ЗначениеСтрока КАК ИсполняемыйКод,
	|	ВЫРАЗИТЬ(ТЧДопРеквизиты_ПорядокВыполнения.Значение КАК ЧИСЛО(5,0)) КАК ПорядокВыполнения
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ТЧДопРеквизиты_ИсполняемыйКод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ТЧДопРеквизиты_ПорядокВыполнения
	|		ПО ТЧДопРеквизиты_ИсполняемыйКод.Ссылка = ТЧДопРеквизиты_ПорядокВыполнения.Ссылка
	|ГДЕ
	|	ТЧДопРеквизиты_ИсполняемыйКод.Ссылка В
	|			(ВЫБРАТЬ
	|				АктивныеРасширения.Ссылка
	|			ИЗ
	|				АктивныеРасширения)
	|	И ТЧДопРеквизиты_ИсполняемыйКод.ИмяРеквизита = ""ИсполняемыйКод""
	|	И ТЧДопРеквизиты_ПорядокВыполнения.ИмяРеквизита = ""ПорядокВыполнения""
	|	И НЕ &УсловиеСобытияРасширений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТЧДопРеквизиты_ИсполняемыйКод.Ссылка КАК РасширениеСсылка,
	|	ВЫРАЗИТЬ(ТЧДопРеквизиты_ИсполняемыйКод.Значение КАК СТРОКА) КАК ИмяСобытия,
	|	ТЧДопРеквизиты_ИсполняемыйКод.ЗначениеСтрока КАК ИсполняемыйКод,
	|	1 КАК ПорядокВыполнения
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ТЧДопРеквизиты_ИсполняемыйКод
	|ГДЕ
	|	&УсловиеСобытияРасширений
	|	И ТЧДопРеквизиты_ИсполняемыйКод.ИмяРеквизита = ""ИсполняемыйКод""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокВыполнения";
	
	УсловиеСобытияРасширений = "(";
	Для Каждого Элемент Из МассивСобытийРасширений Цикл
		УсловиеСобытияРасширений = УсловиеСобытияРасширений + "ТЧДопРеквизиты_ИсполняемыйКод.Значение = """ + Элемент + """" + " ИЛИ ";
	КонецЦикла;
	УсловиеСобытияРасширений = Сред(УсловиеСобытияРасширений, 1, СтрДлина(УсловиеСобытияРасширений)-5);	
	УсловиеСобытияРасширений = УсловиеСобытияРасширений + ")";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСобытияРасширений", УсловиеСобытияРасширений);

	Если ВнешнееХранилище Тогда
		ТаблицаКэшИсполняемогоКодаРасширений = ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить());
	Иначе
		ТаблицаКэшИсполняемогоКодаРасширений = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если ТаблицаКэшИсполняемогоКодаРасширений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//получаем настройки кэшированных расширений
	ТаблицаРасширений = ТаблицаКэшИсполняемогоКодаРасширений.Скопировать(,"РасширениеСсылка");
	ТаблицаРасширений.Свернуть("РасширениеСсылка");
	МассивРасширений  = ТаблицаРасширений.ВыгрузитьКолонку("РасширениеСсылка");
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка КАК РасширениеСсылка,
	|	ВЫРАЗИТЬ(КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита КАК СТРОКА(50)) КАК Имя,
	|	ВЫРАЗИТЬ(КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение КАК СТРОКА(255)) КАК Вариант,
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ЗначениеСтрока КАК Значение
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка В(&МассивРасширений)
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита ПОДОБНО ""Настройка_%""";
	Если ВнешнееХранилище Тогда
		МассивРасширенийВХ = СоединениеСХранилищем.NewObject("Массив");
		Для Каждого Элемент Из МассивРасширений Цикл
			МассивРасширенийВХ.Добавить(СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Элемент));				
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивРасширений",МассивРасширенийВХ);
		ТаблицаНастроек = ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить());
	Иначе
		Запрос.УстановитьПараметр("МассивРасширений",МассивРасширений);
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	//устанавливаем	настройки в исполняемый код и форматируем
	Для Каждого Расширение Из ТаблицаРасширений Цикл
		
		КодыРасширения = ТаблицаКэшИсполняемогоКодаРасширений.НайтиСтроки(Новый Структура("РасширениеСсылка",Расширение.РасширениеСсылка));
		Если КодыРасширения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиРасширения = ТаблицаНастроек.НайтиСтроки(Новый Структура("РасширениеСсылка",Расширение.РасширениеСсылка));
				
		Для Каждого СтрокаКод Из КодыРасширения Цикл
			
			Для Каждого СтрокаНастройка Из НастройкиРасширения Цикл
				
				ИмяНастройки  		= СтрокаНастройка.Имя;                       	//например, "Настройка_СуммаАкциза"
				ИмяПеременной 		= СтрЗаменить(ИмяНастройки,"Настройка_","");    //например, "СуммаАкциза"
				ШаблонПеременной	= "//" + "[" + ИмяПеременной + "]";             //например, "//[СуммаАкциза]
				
				Если Не Найти(СтрокаКод.ИсполняемыйКод, ШаблонПеременной) = 0 Тогда
					КодНастройки				= СтрокаНастройка.Значение;
					КодНастройки				= СтрЗаменить(КодНастройки, "Результат", ИмяПеременной);
					СтрокаКод.ИсполняемыйКод	= СтрЗаменить(СтрокаКод.ИсполняемыйКод, ШаблонПеременной, КодНастройки);
				КонецЕсли;
				
			КонецЦикла;
			
			ФорматироватьИсполняемыйКод(СтрокаКод.ИсполняемыйКод);
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

//валидации

Функция ПроверитьНаличиеМетаданныхХраненияРасширений() Экспорт
	
	Результат = Ложь;
	
	Если ВнешнееХранилище Тогда
		
		Если Не СоединениеСХранилищем.Метаданные.Справочники.КонтурEDI_ДополнительныеСправочники.ТабличныеЧасти.Найти("ДополнительныеРеквизиты")  										= Неопределено и
			 Не СоединениеСХранилищем.Метаданные.Справочники.КонтурEDI_ДополнительныеСправочники.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.Найти("ЗначениеХранилищеЗначения") 	= Неопределено Тогда
			 
			Результат = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если Не Метаданные.Справочники.КонтурEDI_ДополнительныеСправочники.ТабличныеЧасти.Найти("ДополнительныеРеквизиты")  									= Неопределено и
			 Не Метаданные.Справочники.КонтурEDI_ДополнительныеСправочники.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.Найти("ЗначениеХранилищеЗначения") 	= Неопределено Тогда
			 
			Результат = Истина;
			
		КонецЕсли;			
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура ДобавитьДанныеОФайле(Идентификатор, Файл, ТаблицаДанныеРасширения)
	
	НовоеСобытие = ТаблицаДанныеРасширения.Добавить();
	НовоеСобытие.ИмяРеквизита				= "Файл";
	НовоеСобытие.Значение					= Файл.name;
	НовоеСобытие.ЗначениеСтрока 			= Файл.description;
	НовоеСобытие.ЗначениеХранилищеЗначения 	= ПолучитьКаталогРасширений("Локальный") + Идентификатор + "\" + Файл.name;
	
КонецПроцедуры

Функция ЗаменитьСимволыXML(Текст)
	
	Текст = СтрЗаменить(Текст,"СимволМеньше",		"<");
	Текст = СтрЗаменить(Текст,"СимволМеньшеРавно",	"<=");
	Текст = СтрЗаменить(Текст,"СимволНеРавно",		"<>");
	Текст = СтрЗаменить(Текст,"СимволБольше",		">");
	Текст = СтрЗаменить(Текст,"СимволБольшеРавно",	">=");
    Текст = СтрЗаменить(Текст,"СимволАмперсанд",	"&");
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьКаталогРасширений(Тип)
	
	Если Тип = "НаСервере" Тогда
		Возврат "/1c/KonturEDI_82/extensions/";
	ИначеЕсли Тип = "Локальный" Тогда
		Возврат мРабочийКаталог + "КонтурEDI_Extensions" + "\";
	КонецЕсли;
	
КонецФункции

//}#КонецОбласти 04_Работа_С_Подключаемым_Модулем


//{#Область 04_1_Работа_С_Расширениями

//************************************************************
// РАБОТА С РАСШИРЕНИЯМИ

//действия над расширениями

Функция УстановитьРасширение(Наименование,Идентификатор,Интерфейс,Знач РасширениеСсылка = Неопределено) Экспорт
	
	РезультатУстановки = Новый Структура("Успешно,ОписаниеОшибки,РасширениеСсылка",Ложь,"",Неопределено);
		
	//проверка возможности установки расширения	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("РасширениеСсылка",РасширениеСсылка);
	РезультатПроверки = ПроверитьВозможностьУстановкиРасширения(ПараметрыПроверки);	//написать проверку: конфы, что-то еще
	Если Не РезультатПроверки.Успешно Тогда
		РезультатУстановки.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат РезультатУстановки;
	КонецЕсли;
	
	//загружаем файл-список расширений
	МассивИменФайлов = Новый Массив;
	МассивИменФайлов.Добавить(Идентификатор+"/content.xml");
    РезультатЗагрузки = ЗагрузитьФайлыРасширенийВЛокальныйКаталог(МассивИменФайлов);
	Если Не РезультатЗагрузки.Успешно Тогда
		РезультатУстановки.ОписаниеОшибки = РезультатЗагрузки.ОписаниеОшибки;
		Возврат РезультатУстановки;
	ИначеЕсли РезультатЗагрузки.МассивЗагруженныхФайлов.Количество() = 0 Тогда
		РезультатУстановки.ОписаниеОшибки = "Не получены файлы расширения.";
		Возврат РезультатУстановки;
	КонецЕсли;
	ИмяФайлаДанных = РезультатЗагрузки.МассивЗагруженныхФайлов[0];
	
	//читаем файл-список расширений
	РезультатЧтения = ПрочитатьФайлДанныхРасширений(ИмяФайлаДанных);
	Если Не РезультатЧтения.Успешно Тогда
		РезультатУстановки.ОписаниеОшибки = РезультатЧтения.ОписаниеОшибки;
		Возврат РезультатУстановки;
	КонецЕсли;
	ДанныеРасширения = РезультатЧтения.ДанныеЧтения;
	
	//ковертируем данные объекта XDTO в таблицу значений
	РезультатКонвертации = КонвертироватьДанныеРасширения(Идентификатор,ДанныеРасширения);
	Если Не РезультатКонвертации.Успешно Тогда
		РезультатУстановки.ОписаниеОшибки = РезультатКонвертации.ОписаниеОшибки;
		Возврат РезультатУстановки;
	КонецЕсли;
	ТаблицаДанныеРасширения = РезультатКонвертации.ТаблицаДанныеРасширения;
    	
	//загружаем интерфейс и доп. файлы (если они есть)
	МассивИменФайлов 		= Новый Массив;
	МассивЗагруженныхФайлов = Новый Массив;	
	ДанныеОДопФайлах 		= ТаблицаДанныеРасширения.НайтиСтроки(Новый Структура("ИмяРеквизита","Файл"));
	ДанныеОИнтерфейсе 		= ТаблицаДанныеРасширения.НайтиСтроки(Новый Структура("ИмяРеквизита","Интерфейс"));
	Если Не ДанныеОДопФайлах.Количество() = 0 Тогда
		Для Каждого Элемент Из ДанныеОДопФайлах Цикл
			МассивИменФайлов.Добавить(Идентификатор+"/"+Элемент.Значение);	
		КонецЦикла;
	КонецЕсли;
	Если Не ДанныеОИнтерфейсе.Количество() = 0 И ДанныеОИнтерфейсе[0].Значение = Истина Тогда
		МассивИменФайлов.Добавить(Идентификатор+"/"+"interface.epf");	
	КонецЕсли; 
	Если Не МассивИменФайлов.Количество() = 0 Тогда
		РезультатЗагрузки = ЗагрузитьФайлыРасширенийВЛокальныйКаталог(МассивИменФайлов);
		Если Не РезультатЗагрузки.Успешно Тогда
			РезультатУстановки.ОписаниеОшибки = РезультатЗагрузки.ОписаниеОшибки;
			Возврат РезультатУстановки;
		ИначеЕсли РезультатЗагрузки.МассивЗагруженныхФайлов.Количество() = 0 Тогда
			РезультатУстановки.ОписаниеОшибки = "Не получены дополнительные файлы расширения.";
			Возврат РезультатУстановки;
		КонецЕсли;
		МассивЗагруженных = РезультатЗагрузки.МассивЗагруженныхФайлов;
	КонецЕсли;
	
	//создаем элемент доп. справочника расширения
	СохранитьЭлементСправочника("Расширения",РасширениеСсылка,ТаблицаДанныеРасширения);
	Если РасширениеСсылка = Неопределено Тогда
		РезультатУстановки.ОписаниеОшибки = "Не удалось записать расширение в базу данных.";
		Возврат РезультатУстановки;
	КонецЕсли;
	
	ОбновитьКэшИсполняемогоКодаРасширений();
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеУстановкиРасширения",,Новый Структура("РасширениеСсылка, Успешно", РасширениеСсылка, Истина));
	
	РезультатУстановки.Успешно = Истина;
	РезультатУстановки.РасширениеСсылка = РасширениеСсылка;
	
	Возврат РезультатУстановки;
	
КонецФункции

Функция УдалитьРасширение(РасширениеСсылка) Экспорт
	
	РезультатУдаления = Новый Структура("Успешно,ОписаниеОшибки",Ложь,"");
	
	РезультатОбработки = ОбработкаСобытияПодключаемогоМодуля("ПередУдалениемРасширения",,Новый Структура("РасширениеСсылка", РасширениеСсылка));
	Если Не РезультатОбработки = Неопределено Тогда
		Если РезультатОбработки.Свойство("Отказ") И РезультатОбработки.Отказ = Истина Тогда
			Если РезультатОбработки.Свойство("Описание") И ЗначениеЗаполнено(РезультатОбработки.Описание) Тогда
				РезультатУдаления.ОписаниеОшибки = РезультатОбработки.Описание; 	
			КонецЕсли;
			Возврат РезультатУдаления;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		УдалитьЭлементСправочника("Расширения",РасширениеСсылка);
		РезультатУдаления.Успешно = Истина;
	Исключение
		_ОписаниеОшибки = ОписаниеОшибки();
		РезультатУдаления.ОписаниеОшибки = _ОписаниеОшибки;
	КонецПопытки;
	
	Возврат РезультатУдаления;
	
КонецФункции

//настройки расширений
Функция ПолучитьДанныеОРасширенияхССервера(Отфильтровать=Истина,ТолькоРекомендуемые=Ложь) Экспорт
			
	РезультатПолученияДанных = Новый Структура("Успешно,ОписаниеОшибки,ДанныеОРасширениях",Ложь,"",Неопределено);
	
	//загружаем файл-список расширений
	МассивИменФайлов = Новый Массив;
	МассивИменФайлов.Добавить("list.xml");
	РезультатЗагрузки = ЗагрузитьФайлыРасширенийВЛокальныйКаталог(МассивИменФайлов);
	Если Не РезультатЗагрузки.Успешно Тогда
		РезультатПолученияДанных.ОписаниеОшибки = РезультатЗагрузки.ОписаниеОшибки;
		Возврат РезультатПолученияДанных;
	ИначеЕсли РезультатЗагрузки.МассивЗагруженныхФайлов.Количество() = 0 Тогда
		РезультатПолученияДанных.ОписаниеОшибки = "Не получен файл списка доступных расширений.";
		Возврат РезультатПолученияДанных;
	КонецЕсли;
	ИмяФайлаСписка = РезультатЗагрузки.МассивЗагруженныхФайлов[0];
	
	//читаем файл-список расширений
	РезультатЧтения = ПрочитатьФайлДанныхРасширений(ИмяФайлаСписка);
	Если Не РезультатЧтения.Успешно Тогда
		РезультатПолученияДанных.ОписаниеОшибки = РезультатЧтения.ОписаниеОшибки;
		Возврат РезультатПолученияДанных;
	КонецЕсли;
	ДанныеСписка = РезультатЧтения.ДанныеЧтения;
	
	//удаляем файл-список расширений
	ФайлСписка = Новый Файл(ИмяФайлаСписка);
	Попытка
		УдалитьФайлы(ФайлСписка.Путь,ФайлСписка.Имя);
	Исключение
	КонецПопытки;
	ФайлСписка = Неопределено;
		
	//ковертируем данные объекта XDTO в таблицу значений
	РезультатКонвертации = КонвертироватьДанныеСпискаРасширений(ДанныеСписка);
	Если Не РезультатКонвертации.Успешно Тогда
		РезультатПолученияДанных.ОписаниеОшибки = РезультатКонвертации.ОписаниеОшибки;
		Возврат РезультатПолученияДанных;
	КонецЕсли;
	ТаблицаДанныеСписка = РезультатКонвертации.ТаблицаДанныеОРасширениях;
	
	//добавим ТаблицуДанныхСписка дополнительные колонки
	ДополнитьТаблицуДанныхСпискаКолонками(ТаблицаДанныеСписка);
			
	//получаем данные об установленных расширениях
	ИсключитьКастомныеРасширения = Истина;
	ТаблицаУстановленныеРасширения = ПолучитьДанныеОбУстановленныхРасширениях(ИсключитьКастомныеРасширения);
		
	//дополним данные списка расширений информацией об установленных расширениях
	ДополнитьДанныеСпискаРасширений(ТаблицаДанныеСписка, ТаблицаУстановленныеРасширения);
	
	//дополнить данные списка информацией о загрузке/обновлении
	УстановитьДанныеДействий(ТаблицаДанныеСписка);
	
	//отсортируем: сначала новые, потом установленные, затем кастомные и по наименованию
	ТаблицаДанныеСписка.Сортировать("Наименование");
	
	РезультатПолученияДанных.Успешно = Истина;
	
	ТаблицаДанныеСписка.Колонки.Добавить("ТипРасширения");
	
	ФильтрованныеДанные = ОтфильтроватьПОдходящиеРасширения(ТаблицаДанныеСписка); //здесь же заполним в табличке ТипРасширения
	Если Отфильтровать Тогда //по применимости к конфигурации/УФ-ОФ/Сетям
		РезультатПолученияДанных.ДанныеОРасширениях = ФильтрованныеДанные;
	Иначе
		РезультатПолученияДанных.ДанныеОРасширениях = ТаблицаДанныеСписка;
	КонецЕсли;
	ОтображениеТолькоРекомендуемых(РезультатПолученияДанных.ДанныеОРасширениях,ТолькоРекомендуемые);
	
	Возврат РезультатПолученияДанных;
	
КонецФункции

Процедура ОтображениеТолькоРекомендуемых(ДанныеОРасширениях,ТолькоРекомендуемые=Ложь)
	
	Если ТолькоРекомендуемые Тогда 
		МассивПодходящихСтрок=Новый Массив;
		
		Для Каждого СтрокаРасширения Из ДанныеОРасширениях Цикл
			Если СтрокаРасширения.Обязательный Тогда
				МассивПодходящихСтрок.Добавить(СтрокаРасширения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеОРасширениях=ДанныеОРасширениях.Скопировать(МассивПодходящихСтрок)
	
КонецПроцедуры

Функция ОтфильтроватьПодходящиеРасширения(ТаблицаДанныеСписка)
	//отфильтруем чужие конфигурации
	//отфильтруем по ОФ/УФ
	//отфильтруем чужие сети
	МассивПодходящихСтрок=Новый Массив;
	Для Каждого СтрокаРасширения Из ТаблицаДанныеСписка Цикл
		СтрокаРасширения.ТипРасширения = "3.Общие для всех режимов и конфигураций"; //Дефолт
		
		Если  СтрокаРасширения.Конфигурации.Количество()>0 Тогда 
			Если СтрокаРасширения.Конфигурации.НайтиПоЗначению(ИмяКонфигурации1С)=Неопределено Тогда
				СтрокаРасширения.ТипРасширения="Не подходящая конфигурация 1С";
				Продолжить //не подошла по указанной непустой конфигурации
			Иначе
				СтрокаРасширения.ТипРасширения="2.Для вашей конфигурации";
			КонецЕсли;
		КонецЕсли;
		#Если Клиент Тогда
			РежимФорм="ОФ";
		#Иначе
			РежимФорм="УФ";
		#КонецЕсли
		Если СтрокаРасширения.ТипФорм.НайтиПоЗначению(РежимФорм)=Неопределено И СтрокаРасширения.ТипФорм.Количество()>0 Тогда 
				СтрокаРасширения.ТипРасширения="Не подходящий режим УФ/ОФ";
			Продолжить //не подошла по указанному непустому режиму
		КонецЕсли;
		Если СтрокаРасширения.ТорговыеСети.Количество()>0 Тогда //Указаны Конкретные сети
			МассивПсевдонимовТекСетей=ПолучитьМассивПсевдонимовТекущихСетей();
			ЕстьСеть=Ложь;
			Для Каждого ПсевдонимСети Из МассивПсевдонимовТекСетей Цикл
				Если СтрокаРасширения.ТорговыеСети.НайтиПоЗначению(ПсевдонимСети)<>Неопределено Тогда
					ЕстьСеть=Истина;
					СтрокаРасширения.ТипРасширения="1.Для ваших торговых сетей";
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьСеть Тогда
					СтрокаРасширения.ТипРасширения="Не подходящие сети";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивПодходящихСтрок.Добавить(СтрокаРасширения);
	КонецЦикла;
	
	Возврат ТаблицаДанныеСписка.Скопировать(МассивПодходящихСтрок);
КонецФункции


Функция ПолучитьМассивПсевдонимовТекущихСетей()
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеРеквизиты.Значение
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство = ""КодСети""
	|	И КонтурEDI_ДополнительныеРеквизиты.Значение <> """"";
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Значение");	
	
КонецФункции // ПолучитьПсевдонимыТекущихСетей()

Процедура УстановитьДанныеДействий(ТаблицаДанныеСписка)
	
	Для Каждого СтрокаСписка Из ТаблицаДанныеСписка Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписка.ТекВерсияРасширения) Тогда
			СтрокаСписка.Установить = "установить";
		ИначеЕсли ЗначениеЗаполнено(СтрокаСписка.ТекВерсияРасширения) И СтрокаСписка.ТекВерсияРасширения = "0.0" Тогда
			СтрокаСписка.Установить = "подключен";
		ИначеЕсли СтрокаСписка.ВерсияРасширения > СтрокаСписка.ТекВерсияРасширения Тогда
			СтрокаСписка.Установить = "обновить";
		Иначе
			СтрокаСписка.Установить = "подключен";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуДанныхСпискаКолонками(ТаблицаДанныеСписка)

	ТаблицаДанныеСписка.Колонки.Добавить("Установить",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("Использование",					Новый ОписаниеТипов("Булево"));
	ТаблицаДанныеСписка.Колонки.Добавить("Удаление",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекВерсияРасширения",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекРекомендуемаяВерсияМодуля",	Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекОписаниеПолное",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекОбязательный",					Новый ОписаниеТипов("Булево"));
	ТаблицаДанныеСписка.Колонки.Добавить("ТекИнтерфейс",					Новый ОписаниеТипов("Булево"));
	Если ВнешнееХранилище Тогда
		ТаблицаДанныеСписка.Колонки.Добавить("Ссылка",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(80, ДопустимаяДлина.Переменная)));
	Иначе
		ТаблицаДанныеСписка.Колонки.Добавить("Ссылка",						Справочники.ТипВсеСсылки());	
	КонецЕсли;
	ТаблицаДанныеСписка.Колонки.Добавить("Настройка",						Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10, ДопустимаяДлина.Переменная)));	
	
КонецПроцедуры

Процедура ДополнитьДанныеСпискаРасширений(ТаблицаДанныеСписка, ТаблицаУстановленныеРасширения)
	
	ТаблицаУстановленныеРасширения.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));	
	
	//дополняем информацию по установленным расширениям
	Для Каждого СтрокаСписка Из ТаблицаДанныеСписка Цикл
		
		СтрокаУстановлено = ТаблицаУстановленныеРасширения.Найти(СтрокаСписка.Идентификатор, "Идентификатор");
		Если СтрокаУстановлено = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка.Использование 	= СтрокаУстановлено.Использование;
		СтрокаСписка.Ссылка 		= СтрокаУстановлено.Ссылка;
		СтрокаСписка.Настройка		= СтрокаУстановлено.Настройка;
		Для Каждого КолонкаСписка Из ТаблицаДанныеСписка.Колонки Цикл
			Если Лев(КолонкаСписка.Имя,3) = "Тек" Тогда
				СтрокаСписка[КолонкаСписка.Имя] = СтрокаУстановлено[СтрЗаменить(КолонкаСписка.Имя,"Тек","")];	
			КонецЕсли;
		КонецЦикла;
		
		СтрокаУстановлено.Обработан = Истина;
		
	КонецЦикла;
	
	//дополняем информацию по расширениям, созданным самостоятельно
	Для Каждого СтрокаУстановлено Из ТаблицаУстановленныеРасширения Цикл
		
		Если СтрокаУстановлено.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка = ТаблицаДанныеСписка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСписка,СтрокаУстановлено);
		
		Для Каждого КолонкаСписка Из ТаблицаДанныеСписка.Колонки Цикл
			Если Лев(КолонкаСписка.Имя,3) = "Тек" Тогда
				СтрокаСписка[КолонкаСписка.Имя] = СтрокаУстановлено[СтрЗаменить(КолонкаСписка.Имя,"Тек","")];	
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСписка.Конфигурации = Неопределено Тогда
			СтрокаСписка.Конфигурации = Новый СписокЗначений;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьТаблицуНастроекРасширения(Знач РасширениеСсылка) Экспорт
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита КАК СТРОКА(50)) КАК Имя,
	|	ВЫРАЗИТЬ(КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение КАК СТРОКА(100)) КАК Вариант,
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ЗначениеСтрока КАК Значение
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка = &РасширениеСсылка
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита ПОДОБНО ""Настройка"" + ""%""";
	
	Запрос.УстановитьПараметр("РасширениеСсылка", ПреобразоватьЗначениеДляВнешнегоХранилища(РасширениеСсылка));
	Если ВнешнееХранилище Тогда
		ТаблицаНастроек = ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить());
	Иначе
		ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
 	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ИнициализироватьТаблицуНастроекРасширения() Экспорт
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("Имя");
	ТаблицаНастроек.Колонки.Добавить("Вариант");
	ТаблицаНастроек.Колонки.Добавить("Значение");
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция СохранитьНастройкиРасширения(РасширениеСсылка, ТаблицаНастроек) Экспорт
	
	РезультатСохранения = Новый Структура("Успешно,ОписаниеОшибки",Ложь,"");
	
	Если РасширениеСсылка = Неопределено 					 или
		 Не ТипЗнч(ТаблицаНастроек) = Тип("ТаблицаЗначений") или
		 ТаблицаНастроек.Количество() = 0 					 Тогда 
		РезультатСохранения.ОписаниеОшибки = "Не удалось сохранить настройки: переданы некорректные данные.";
		Возврат РезультатСохранения;
	КонецЕсли;
	
	СтруктураЭлемента = ИнициализироватьТаблицуДополнительныхРеквизитовРасширения();
	Для Каждого Строка Из ТаблицаНастроек Цикл
		Настройка = СтруктураЭлемента.Добавить();
		Настройка.ИмяРеквизита 		= Строка.Имя;
		Настройка.Значение 	  		= Строка.Вариант;
		Настройка.ЗначениеСтрока    = Строка.Значение;
	КонецЦикла;
	
	Попытка
		СохранитьЭлементСправочника("Расширения",РасширениеСсылка,СтруктураЭлемента);
		РезультатСохранения.Успешно = Истина;
	Исключение
		_ОписаниеОшибки = ОписаниеОшибки();
		РезультатСохранения.ОписаниеОшибки = "Не удалось сохранить настройки: " + _ОписаниеОшибки + ".";
	КонецПопытки;
	
	Возврат РезультатСохранения;
			
КонецФункции

Функция СохранитьРасширение(Форма,Управляемая=ложь) Экспорт
	
	РезультатСохранения = Новый Структура("Успешно,ОписаниеОшибкиСохранения,ТаблицаОшибокПроверки,Идентификатор",Ложь,"","");
	
	РезультатПроверки = ПроверитьКорректностьДанныхРасширения(Форма,Управляемая);
	Если Не РезультатПроверки.Успешно Тогда
		РезультатСохранения.ТаблицаОшибокПроверки = РезультатПроверки.ТаблицаОшибок;
		Возврат РезультатСохранения;
	КонецЕсли;
	
	ТаблицаДанныеРасширения = ИнициализироватьТаблицуДополнительныхРеквизитовРасширения();
	
	ИдентификаторРасширения = Неопределено;
	
	Если Форма.РасширениеСсылка = Неопределено Тогда
		
		//добавляем данные нового события
		Идентификатор = ТаблицаДанныеРасширения.Добавить();
		Идентификатор.ИмяРеквизита 				= "Идентификатор";
		Идентификатор.Значение 					= Формат(ТекущаяДата(),"ДФ=ггггММддЧЧммсс");;
		НаименованиеРасширения = ТаблицаДанныеРасширения.Добавить();
		НаименованиеРасширения.ИмяРеквизита 	= "Наименование";
		НаименованиеРасширения.Значение 		= Форма.Наименование;
		ВерсияРасширения = ТаблицаДанныеРасширения.Добавить();
		ВерсияРасширения.ИмяРеквизита 			= "ВерсияРасширения";
		ВерсияРасширения.Значение 				= "0.0";
		РекомендуемаяВерсияМодуля = ТаблицаДанныеРасширения.Добавить();
		РекомендуемаяВерсияМодуля.ИмяРеквизита 	= "РекомендуемаяВерсияМодуля";
		РекомендуемаяВерсияМодуля.Значение 		= "0.00.000.00";
		Обязательный = ТаблицаДанныеРасширения.Добавить();
		Обязательный.ИмяРеквизита 				= "Обязательный";
		Обязательный.Значение 					= Ложь;
		Интерфейс = ТаблицаДанныеРасширения.Добавить();
		Интерфейс.ИмяРеквизита 					= "Интерфейс";
		Интерфейс.Значение 						= Ложь;
		ПорядокВыполнения = ТаблицаДанныеРасширения.Добавить();
		ПорядокВыполнения.ИмяРеквизита 			= "ПорядокВыполнения";
		ПорядокВыполнения.Значение 				= ПолучитьСледующийПорядокВыполненияРасширения();
		Использование = ТаблицаДанныеРасширения.Добавить();
		Использование.ИмяРеквизита 				= "Использование";
		Использование.Значение 					= Истина;
		
		ИдентификаторРасширения	= Идентификатор.Значение;
		
	КонецЕсли;
	
	//добавляем даные обработчиков событий
	Для Каждого Событие Из Форма.События Цикл
		НовыйРеквизит = ТаблицаДанныеРасширения.Добавить();
		НовыйРеквизит.ИмяРеквизита 		= "ИсполняемыйКод";
		НовыйРеквизит.Значение 			= Событие.Имя;
		НовыйРеквизит.ЗначениеСтрока 	= Событие.Код;
	КонецЦикла;
	
	//добавляем данные описания
	НовыйРеквизит = ТаблицаДанныеРасширения.Добавить();
	НовыйРеквизит.ИмяРеквизита 		= "ОписаниеПолное";
	НовыйРеквизит.ЗначениеСтрока 	= Форма.ОписаниеПолное;
	
	СохранитьЭлементСправочника("Расширения",Форма.РасширениеСсылка,ТаблицаДанныеРасширения);
	Если Форма.РасширениеСсылка = Неопределено Тогда
		РезультатСохранения.ОписаниеОшибкиСохранения = "Не удалось записать расширение в базу данных.";
		Возврат РезультатСохранения;
	КонецЕсли;
		
	РезультатСохранения.Успешно 		= Истина;
	РезультатСохранения.Идентификатор	= ИдентификаторРасширения;
	
	Возврат РезультатСохранения;
	 
КонецФункции

Функция ПроверитьКорректностьДанныхРасширения(Форма,Управляемая=Ложь) Экспорт
			
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ОписаниеОшибки");
	
	РезультатПроверки = Новый Структура("Успешно,ТаблицаОшибок",Ложь,ТаблицаОшибок);
		
	//наличие наименование
	Если Не ЗначениеЗаполнено(Форма.Наименование) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не заполнено поле ""Наименование"".";
		РезультатПроверки.Успешно = Ложь;
		//Форма.ЭлементыФормы.Наименование.ЦветФонаПоля = WebЦвета.СветлоРозовый;
		УстановитьЦветЭлементаФормы(Форма,"Наименование",Ложь,Управляемая);
	Иначе
		//Форма.ЭлементыФормы.Наименование.ЦветФонаПоля = WebЦвета.Белый;
		УстановитьЦветЭлементаФормы(Форма,"Наименование",Истина,Управляемая);
	КонецЕсли;
	
	//наличие обработчиков
	Если Форма.События.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Расширение не содержит ни одного события.";
		РезультатПроверки.Успешно = Ложь;
		//Форма.ЭлементыФормы.События.ЦветФонаПоля = WebЦвета.СветлоРозовый;
		УстановитьЦветЭлементаФормы(Форма,"События",Ложь,Управляемая);
	Иначе
		//Форма.ЭлементыФормы.События.ЦветФонаПоля = WebЦвета.Белый;
		УстановитьЦветЭлементаФормы(Форма,"События",Истина,Управляемая);
	КонецЕсли;
	
	//наличие описания
	Если Не ЗначениеЗаполнено(Форма.ОписаниеПолное) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не заполнено поле ""Описание"".";
		РезультатПроверки.Успешно = Ложь;
		//Форма.ЭлементыФормы.ОписаниеПолное.ЦветФонаПоля = WebЦвета.СветлоРозовый;
		УстановитьЦветЭлементаФормы(Форма,"ОписаниеПолное",Ложь,Управляемая);
	Иначе
		//Форма.ЭлементыФормы.ОписаниеПолное.ЦветФонаПоля = WebЦвета.Белый;
		УстановитьЦветЭлементаФормы(Форма,"ОписаниеПолное",Истина,Управляемая);
	КонецЕсли;
	
	Если ТаблицаОшибок.Количество() = 0 Тогда
		РезультатПроверки.Успешно = Истина;
	Иначе
		РезультатПроверки.ТаблицаОшибок = ТаблицаОшибок;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура УстановитьЦветЭлементаФормы(Форма,ИмяЭлемента,Хороший=Истина,Управляемая=Ложь)Экспорт
	
	Если Управляемая Тогда
		Элемент=Форма.Элементы.Найти(ИмяЭлемента);	
		Если Элемент<>Неопределено Тогда
			Элемент.ЦветФона = ?(Хороший,WebЦвета.Белый,WebЦвета.СветлоРозовый);
		КонецЕсли;
	Иначе
		Элемент=Форма.ЭлементыФормы.Найти(ИмяЭлемента);	
		Если Элемент<>Неопределено Тогда
			Элемент.ЦветФонаПоля = ?(Хороший,WebЦвета.Белый,WebЦвета.СветлоРозовый);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


//}#КонецОбласти //04_1_Работа_С_Расширениями


//{#Область 05_Хранение_Данных

// основные

//Возвращает текущий файл обновления для конфигурации в виде двоичных данны (с целью потом отправиь их на клиент)
Функция ДвоичныеДанныеФайлаОбновленияКонфигурацииСервер(файлСохранен=Ложь) Экспорт
	
	ДвоичныеДанные = Неопределено;
	
	ИмяВременного=ПолучитьИмяВременногоФайла("cf");
	
	Попытка
		ЭтотОбъект.ПолучитьМакет("ОбновлениеДляХраненияДанных").Записать(ИмяВременного);
		файлСохранен = истина;
	Исключение
		файлСохранен = Ложь;
	КонецПопытки;
	
	Если файлСохранен Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременного);
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

//Смотрит, все ли необходимые типы указаны в реквизите "Документ" справочника "КонтурEDI_Сообщения"/
Функция ПроверитьРеквизитДокументСправочникаСообщений() Экспорт
	
	МыПоставщик = (ПолучитьКонстантуEDI("МыПоставщик")=Истина);
	МыПокупатель = (ПолучитьКонстантуEDI("МыТорговаяСеть")=Истина);
	
	//Определим, какие типы документов у нас вообще используются
	МассивСторон = Новый Массив;
	Если МыПоставщик Тогда
		МассивСторон.Добавить("Поставщик");
	КонецЕсли;
	Если МыПокупатель Тогда
		МассивСторон.Добавить("Покупатель");
	КонецЕсли;
	
	МассивНеобходимыхТипов = Новый Массив;
	Для Каждого Сторона Из МассивСторон Цикл
		
		///можно вообще отобрать по стороне (поставщик/покупатель)
		Для Каждого СтрокаТипа Из ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",Сторона)) Цикл
		
			Если СтрокаТипа.Имяобъекта = "ИсходящийКСФ" и Не ЕстьКоррИспрСФ Тогда
				//не добавляем
			ИначеЕсли Лев(СтрокаТипа.ИмяТипа,15) = "ДокументСсылка."
				И МассивНеобходимыхТипов.Найти(СтрокаТипа.ИмяТипа)=Неопределено	Тогда
				//проверить необходимость RETANN в данном режиме
				МассивНеобходимыхТипов.Добавить(СтрокаТипа.ИмяТипа);
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;	
	
	ТекстНеобходимыхТипов = "";
	Для Каждого Эл Из МассивНеобходимыхТипов Цикл
		ТекстНеобходимыхТипов = ТекстНеобходимыхТипов + Символы.ПС + " - " + Эл;
	КонецЦикла;	
	
	ТипРеквизитаДокумент = Метаданные.Справочники.КонтурEDI_Сообщения.Реквизиты.Документ.Тип;
	Если ТипРеквизитаДокумент = Документы.ТипВсеСсылки() Тогда
		//многовато разных типов
		ТекстПредупреждения = 
		"В справочнике ""КонтурEDI_Сообщения"" реквизит ""Документ"" имеет тип ""ДокументСсылка"".
		|Это может серьезно замедлить работу модуля.
		|
		|Необходимо установить составной тип данных, указав только необходимые документы:
		|"+ТекстНеобходимыхТипов;
	Иначе
		
		//проверим, все ли типы присутствуют в метаданных
		
		МассивНедостающихТипов = Новый Массив;
		Для Каждого НеобходимыйТип Из МассивНеобходимыхТипов Цикл
			//здесь можно сломаться при первом запуске на кастомной конфигурации
			//признаки: нет типов; нет ПМ (либо криво написан)
			Если Не ТипРеквизитаДокумент.СодержитТип(Тип(НеобходимыйТип)) Тогда
				//проверить необходимость RETANN в данном режиме
				МассивНедостающихТипов.Добавить(НеобходимыйТип);
			КонецЕсли;	
		КонецЦикла;
		
		Если МассивНедостающихТипов.Количество()>0 Тогда
			ТекстПредупреждения = 
			"В справочнике ""КонтурEDI_Сообщения"" реквизит ""Документ"" должен иметь составной тип, включающий в себя: 
			|"+ТекстНеобходимыхТипов+"
			|
			|Добавьте недостающие типы в конфигураторе.";
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции	

Функция ПреобразоватьЗначениеДляВнешнегоХранилища(Значение)

	Если Не ВнешнееХранилище Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Возврат ЗначениеВСтрокуВнутр(Значение);
	ИначеЕсли ТипЗначения = Тип("Строка") 
		И Лев(Значение,4)="{""#""" Тогда //скорей всего, это ссылка
		
		Если ЭтоПредставлениеМассива(Значение) Тогда // не ссылка
			Возврат Значение;
		Иначе
			_Значение = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Значение);
			Если НЕ _Значение = Неопределено Тогда
				Возврат _Значение;
			Иначе
				Возврат Значение;
			КонецЕсли;
		КонецЕсли;
			
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКонстантуEDI(ИмяКонстанты) Экспорт
	
	Возврат ПолучитьЗначениеСвойстваОбъектаEDI(Неопределено, ИмяКонстанты);
	
КонецФункции

Функция УстановитьКонстантуEDI(ИмяКонстанты,ЗначениеКонстанты) Экспорт
	
	УстановитьЗначениеСвойстваОбъекта(Неопределено,ИмяКонстанты,ЗначениеКонстанты);
	
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъектаEDI(Объект, ИмяСвойства) Экспорт 
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	//+ Костыль для длинных токенов
	Если ИмяСвойства="Токен" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеРеквизиты.Значение
		|ИЗ
		|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|ГДЕ
		|	(КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Токен_01""
		|			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Токен_02"")
		|	И КонтурEDI_ДополнительныеРеквизиты.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтурEDI_ДополнительныеРеквизиты.Свойство";
		
		Запрос.УстановитьПараметр("Свойство",	ИмяСвойства);
		Запрос.УстановитьПараметр("Объект",		?(ВнешнееХранилище,ПреобразоватьЗначениеДляВнешнегоХранилища(Объект),Объект));
		
		Значение = "";
		ТабЗапроса = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаРезультата Из ТабЗапроса Цикл
			Значение=Значение+СокрЛП(СтрокаРезультата.Значение);
		КонецЦикла;	
		
		Возврат Значение;
				
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтурEDI_ДополнительныеРеквизиты.Значение,
	|	КонтурEDI_ДополнительныеРеквизиты.ЗначениеСтрока
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство
	|	И КонтурEDI_ДополнительныеРеквизиты.Объект = &Объект";
	
	Если НЕ ЕстьМетаданныеХраненияОрганизации=истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КонтурEDI_ДополнительныеРеквизиты.ЗначениеСтрока",""""" КАК ЗначениеСтрока");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство",	ИмяСвойства);
	Запрос.УстановитьПараметр("Объект",		?(ВнешнееХранилище,ПреобразоватьЗначениеДляВнешнегоХранилища(Объект),Объект));
	
	ТекЗначение = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекЗначение = ПреобразоватьСохраненноеЗначение(Выборка.Значение,Выборка.ЗначениеСтрока);

	КонецЕсли;
	
	Возврат ТекЗначение;
	
КонецФункции

Функция НайтиОбъектПоЗначениюСвойства(ИмяСвойства, Знач Значение) Экспорт 
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
	Если ИмяСвойства = "GLN_ТочкиДоставки" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_ТочкиДоставки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
		|ГДЕ
		|	КонтурEDI_ТочкиДоставки.GLN = &GLN";
		
		Запрос.УстановитьПараметр("GLN", Значение);	

	ИначеЕсли ИмяСвойства = "ЮрФизЛицо_ТочкиДоставки" 
		  ИЛИ ИмяСвойства = "СвойСправочник_ТочкиДоставки" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_ТочкиДоставки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
		|ГДЕ
		|	КонтурEDI_ТочкиДоставки.СвязанныйСправочник1 = &ЮрФизЛицо";
					   
		Запрос.УстановитьПараметр("ЮрФизЛицо", ПреобразоватьЗначениеДляВнешнегоХранилища(Значение));	
		
		Если ИмяСвойства = "СвойСправочник_ТочкиДоставки" Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СвязанныйСправочник1","СвязанныйСправочник2");//Для своего справочника точек доставки используется второй слот
		КонецЕсли;

	ИначеЕсли ИмяСвойства = "GLN_Партнера" Тогда
		
		//У партнеров могут быть GLN-синонимы
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_ДополнительныеРеквизиты.Объект КАК Ссылка
		|ИЗ
		|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|ГДЕ
		|	(КонтурEDI_ДополнительныеРеквизиты.Свойство = ""GLN_Партнера""
		|				И КонтурEDI_ДополнительныеРеквизиты.Значение = &Значение
		|			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""GLN_Партнера_Синонимы""
		|				И КонтурEDI_ДополнительныеРеквизиты.Значение ПОДОБНО &Синоним)";
		
		Запрос.УстановитьПараметр("Значение",Значение);
		Запрос.УстановитьПараметр("Синоним","%"+Значение+"%");
		
	ИначеЕсли ИмяСвойства = "GLN_Организации" Тогда
		
		//У наших юр.лиц тоже могут быть GLN-синонимы
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_ДополнительныеРеквизиты.Объект КАК Ссылка
		|ИЗ
		|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|ГДЕ
		|	(КонтурEDI_ДополнительныеРеквизиты.Свойство = ""GLN_Организации""
		|				И КонтурEDI_ДополнительныеРеквизиты.Значение = &Значение
		|			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""GLN_Организации_Синонимы""
		|				И КонтурEDI_ДополнительныеРеквизиты.Значение ПОДОБНО &Синоним)";
		
		Запрос.УстановитьПараметр("Значение",Значение);
		Запрос.УстановитьПараметр("Синоним","%"+Значение+"%");
					
	Иначе

		Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	КонтурEDI_ДополнительныеРеквизиты.Объект КАК Ссылка
		|ИЗ
		|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|ГДЕ
		|	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство
		|	И КонтурEDI_ДополнительныеРеквизиты.Значение = &Значение";
		
		Запрос.УстановитьПараметр("Свойство",ИмяСвойства);
		Запрос.УстановитьПараметр("Значение",ПреобразоватьЗначениеДляВнешнегоХранилища(Значение));
		
	КонецЕсли;
	
	Объект = ПолучитьРезультатЗапроса(Запрос, "Ссылка");
	
	Если ТипЗнч(Объект)=Тип("COMОбъект") Тогда
		Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Объект);
	Иначе
		Возврат Объект;
	КонецЕсли;
		
КонецФункции

Функция УстановитьЗначениеСвойстваОбъекта(Объект, ИмяСвойства,Знач Значение,Отказ = Ложь) Экспорт 

	//+ Костыль для длинных токенов
	//в будущем убрать
	Если ИмяСвойства = "Токен" Тогда
		//Разбить токен на 2 части по 255 байт
		//Пока предполагаем, что в 510 байт он уложится
		//Каждую часть записать отдельно - можно этой же функцией
		
		УстановитьЗначениеСвойстваОбъекта(Объект,"Токен_01",Лев(Значение,255));
		УстановитьЗначениеСвойстваОбъекта(Объект,"Токен_02",Сред(Значение,256));
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	ЗначениеНеограниченнаяСтрока = "";
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Если СтрДлина(Значение)>255 Тогда
			ЗначениеНеограниченнаяСтрока = Значение;
			Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ВнешнееХранилище Тогда
		
		Запись = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		
		Запись.Объект			= ПреобразоватьЗначениеДляВнешнегоХранилища(Объект);
		Запись.Свойство			= ИмяСвойства;
		Запись.Значение			= ПреобразоватьЗначениеДляВнешнегоХранилища(Значение);
		
		ЗначениеНеограниченнаяСтрока	= ПреобразоватьЗначениеДляВнешнегоХранилища(ЗначениеНеограниченнаяСтрока);
		
	Иначе
		
		Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		
		Запись.Объект			= Объект;
		Запись.Свойство			= ИмяСвойства;
		Запись.Значение			= Значение;
	
	КонецЕсли;
	
	Если ЕстьМетаданныеХраненияОрганизации Тогда
		Запись.ЗначениеСтрока = ЗначениеНеограниченнаяСтрока;
	КонецЕсли;	
		
	Попытка
		Запись.Записать();
	Исключение
		Сообщить_КонтурEDI(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
		
КонецФункции

Функция УдалитьЗначениеСвойстваОбъекта(Объект, ИмяСвойства, Отказ = Ложь) Экспорт 

	Если ВнешнееХранилище Тогда
		
		Запись = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		Запись.Объект	= ПреобразоватьЗначениеДляВнешнегоХранилища(Объект);

	Иначе
		
		Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		Запись.Объект	= Объект;
		
	КонецЕсли;
	
	Запись.Свойство = ИмяСвойства;
	
	Попытка
		Запись.Прочитать();
		Запись.Удалить();
	Исключение
		Сообщить_КонтурEDI(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
	
КонецФункции

//оставлено для совместимости со старыми ПМ, не рекомендуется к использованию
Функция УстановитьГлобальноеСвойство(ИмяСвойства,Значение) Экспорт
	
	УстановитьЗначениеСвойстваОбъекта(Неопределено,ИмяСвойства,Значение);
	
КонецФункции

//оставлено для совместимости со старыми ПМ, не рекомендуется к использованию
Функция ПолучитьГлобальноеСвойство(ИмяСвойства) Экспорт
	Возврат ПолучитьЗначениеСвойстваОбъектаEDI(Неопределено,ИмяСвойства);
КонецФункции

//Ускорение функции получитьЗначениеСвойстваОбъекта
Функция ПолучитьСписокСвойствEDI(Свойства,Объект=Неопределено) Экспорт
	
	Если ТипЗнч(Свойства)=Тип("Строка") Тогда
		//преобразуем в Массив
		МассивСвойств = Новый Массив;
		СтрокаСвойств = СтрЗаменить(Свойства,",",Символы.ПС);
		Для Сч=1 По СтрЧислоСтрок(СтрокаСвойств) Цикл
			МассивСвойств.Добавить(СтрПолучитьСтроку(СтрокаСвойств,Сч));
		КонецЦикла;
		
	Иначе
		МассивСвойств = Свойства;
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	КонтурEDI_ДополнительныеРеквизиты.Значение КАК Значение,
	|	КонтурEDI_ДополнительныеРеквизиты.ЗначениеСтрока
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство В(&Свойства)
	|	И КонтурEDI_ДополнительныеРеквизиты.Объект = &Объект";
	
	Если НЕ ЕстьМетаданныеХраненияОрганизации Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КонтурEDI_ДополнительныеРеквизиты.ЗначениеСтрока",""""" КАК ЗначениеСтрока");
	КонецЕсли;
	
	Если ВнешнееХранилище Тогда
		Запрос.УстановитьПараметр("Свойства",	СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивСвойств)));
		Запрос.УстановитьПараметр("Объект",		ПреобразоватьЗначениеДляВнешнегоХранилища(Объект));
	Иначе 	
		Запрос.УстановитьПараметр("Свойства",	МассивСвойств);
		Запрос.УстановитьПараметр("Объект",		Объект);
	КонецЕсли;
	
	Выб = Запрос.Выполнить().Выбрать();
	
	//пусть будет массив
	Рез = Новый Структура;
	Для Каждого Эл из МассивСвойств Цикл
		Рез.Вставить(Эл);
	КонецЦикла;	
	
	Пока Выб.Следующий() Цикл
		
		Рез[Выб.Свойство] = ПреобразоватьСохраненноеЗначение(Выб.Значение,Выб.ЗначениеСтрока);
		
	КонецЦикла;	
	
	Возврат Рез;
	
КонецФункции	

//сохраняет внешний файл в базу. ИмяФайлаНаДиске - полный путь к файлу. 
//ИмяФайлаВБазе - имя, по которому потом этот файл можно из базы извлечь
//возвращает Истина, если сохранение удалось, иначе - Ложь.
Функция СохранитьФайлВБазу(ИмяФайлаНаДиске,ИмяФайлаВБазе) Экспорт
	Синоним = Метаданные.Синоним;
	ИмяСохраненнойНастройки = ИмяФайлаВБазе;
	Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаНаДиске));
	
	Если Найти(Синоним,"ТКПТ")>0 Тогда
		
		Возврат Ложь;
		
	ИначеЕсли Найти(Синоним,"Бухгалтерия предприятия")>0 или Найти(Синоним,"Бухгалтерия сельскохозяйственного предприятия")>0 Тогда
		
		Если Метаданные.Справочники.Найти("СохраненныеНастройки")=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Ссылка=Неопределено;
		Если ПолучитьФайлИзБазы(ИмяФайлаВБазе,Ссылка)<>Неопределено Тогда
			СпрОбъект=Ссылка.ПолучитьОбъект();
		Иначе	
			СпрОбъект=Справочники.СохраненныеНастройки.СоздатьЭлемент();
		КонецЕсли;
		
		СпрОбъект.Наименование=ИмяСохраненнойНастройки;
		СпрОбъект.ХранилищеНастроек=Хранилище;
		
		Попытка
			//а вдруг прав не хватит?
			СпрОбъект.Записать();
		Исключение
			Возврат Ложь;
		КонецПопытки;	
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		Возврат Ложь; //в УТ 10.2 нет внешних обработок	
		
	Иначе//УТ, КА, УПП, .... надо проверить все конфиги!!!
		Ссылка=Неопределено;
		
		Если Метаданные.Справочники.Найти("ХранилищеДополнительнойИнформации")=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПолучитьФайлИзБазы(ИмяФайлаВБазе,Ссылка)<>Неопределено Тогда
			СпрОбъект=Ссылка.ПолучитьОбъект();
		Иначе	
			СпрОбъект=Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		КонецЕсли;
		
		СпрОбъект.Наименование=ИмяСохраненнойНастройки;
		СпрОбъект.Хранилище=Хранилище;
		Попытка
			//а вдруг прав не хватит?
			СпрОбъект.Записать();
		Исключение
			Возврат Ложь;
		КонецПопытки;	
		
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции	

//возвращает объект ДвоичныеДанные по имени файла или Неопределено, 
//если такого файла нет или если хранение файлов в данной конфигурации не поддерживается
//СсылканаСправочник - получает ссылку на справочник, содержащий сохраненный файл, если такой уже есть в базе
Функция ПолучитьФайлИзБазы(ИмяФайлаВБазе,СсылкаНаСправочник=Неопределено) Экспорт

	Синоним = Метаданные.Синоним;
	
	Если Найти(Синоним,"ТКПТ")>0 Тогда

		Возврат Неопределено;
		
	ИначеЕсли Найти(Синоним,"Бухгалтерия предприятия")>0 или Найти(Синоним,"Бухгалтерия сельскохозяйственного предприятия")>0 Тогда
		
		Если Метаданные.Справочники.Найти("СохраненныеНастройки")=Неопределено 
			Или Метаданные.Перечисления.Найти("ТипыНастроек")=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		




		Запрос=Новый Запрос(
		"ВЫБРАТЬ Разрешенные Первые 1
		|	СохраненныеНастройки.Ссылка,
		|	СохраненныеНастройки.ХранилищеНастроек как Хранилище
		|ИЗ
		|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = Значение(Перечисление.ТипыНастроек.)
		|	И СохраненныеНастройки.Наименование = &Наименование"
		);
		Запрос.УстановитьПараметр("Наименование",ИмяФайлаВБазе);
		Выб=Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			СсылкаНаСправочник=Выб.Ссылка;
			Возврат Выб.Хранилище.Получить();
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
		
	ИначеЕсли Найти(Синоним,"Управление торговлей, редакция 10.2") Тогда
		Возврат Неопределено; //в УТ 10.2 нет внешних обработок	
		
	Иначе
		
		Если Метаданные.Справочники.Найти("ХранилищеДополнительнойИнформации")=Неопределено 
			Или Метаданные.Перечисления.Найти("ВидыДополнительнойИнформацииОбъектов")=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		
		Запрос=Новый Запрос(
		"ВЫБРАТЬ Разрешенные Первые 1
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.Хранилище
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.ВидДанных = Значение(Перечисление.ВидыДополнительнойИнформацииОбъектов.)
		|	И ХранилищеДополнительнойИнформации.Наименование = &Наименование"
		);
		Запрос.УстановитьПараметр("Наименование",ИмяФайлаВБазе);
		Выб=Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			СсылкаНаСправочник=Выб.Ссылка;
			Возврат Выб.Хранилище.Получить();
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	



//***************************************************************
// Управление деревом настроек (той частью, которая заполняется из макета НастройкиПараметры)

Функция ПолучитьТекстЯчейкиОбласти(Область,Строка,Колонка) Экспорт
	Возврат Строка(Область.ПолучитьОбласть("R"+Формат(Строка,"ЧГ=0")+"C"+Формат(Колонка,"ЧГ=0")).ТекущаяОбласть.Текст);
КонецФункции	

//находит в макете из параметра Макет область ИмяСписка, и из первой колонки этой области вытаскивает список возможных значений
Функция ПолучитьСписокЗначенийИзМакета(Макет,ИмяСписка)
	Область=Макет.ПолучитьОбласть(ИмяСписка);
	СЗ=Новый СписокЗначений;
	Для Сч=1 По Область.ВысотаТаблицы Цикл
		СЗ.Добавить(ПолучитьТекстЯчейкиОбласти(Область,Сч,1));
	КонецЦикла;		
	Возврат СЗ;
КонецФункции	

//создает дерево настроек, заданных в макете НастройкиПараметры
//ВидСправочника может принимать значения: 
//Партнеры - в этом случае берем настройки, описанные в области НастройкиПартнеров. Используется в ФормаПартнеры_Элемент
//Общие - "НастройкиОбщие". Используется в ФормаСервис_Настройка
Процедура СоздатьДеревоНастроек(ДеревоНастроек,ВидСправочника,СтруктураСвойств) Экспорт
	
	СоотвГрупп=Новый Соответствие;
	СоотвГрупп.Вставить("",ДеревоНастроек);
	
	Макет=ПолучитьМакет("НастройкиПараметры");
	
	Если ВидСправочника="Партнеры" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиПартнеров");
	ИначеЕсли ВидСправочника="Общие" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиОбщие");
	Иначе
		Возврат;
	КонецЕсли;
	
	//Область ПМ
	ПрисоединитьКастомныеНастройки(ВидСправочника,Область);
	
	Для Сч=1 По Область.ВысотаТаблицы Цикл
		НастройкаИД					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,1);
		НастройкаНаименование		=	ПолучитьТекстЯчейкиОбласти(Область,Сч,2);
		ЭтоГруппа					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,3);
		ТекГруппа					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,4);
		_Тип						=	ПолучитьТекстЯчейкиОбласти(Область,Сч,5);
		ЗначениеПоУмолчанию			=	ПолучитьТекстЯчейкиОбласти(Область,Сч,7);
		Подсказка					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,8);
		Если ЭтоГруппа="Истина" Тогда
			Нов=СоотвГрупп[ТекГруппа].Строки.Добавить();
			Нов.ЭтоГруппа=ЭтоГруппа;
			Нов.НастройкаИД				=	НастройкаИД;
			Нов.НастройкаНаименование	=	НастройкаНаименование;
			Нов.Подсказка				=	Подсказка;
			СоотвГрупп.Вставить(НастройкаИД,Нов);
		Иначе
			
			Если ВидСправочника = "Партнеры" Тогда
				Если НастройкаИД = "COINVOIC" Тогда
					Если НЕ ЕстьКоррИспрСФ Тогда
						Продолжить;
					КонецЕсли;
					Если СтруктураСвойств = Неопределено или СтруктураСвойств.Свойство("ТорговаяСеть") И СтруктураСвойств.ТорговаяСеть = Ложь Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Нов=СоотвГрупп[ТекГруппа].Строки.Добавить();
			Нов.ЭтоГруппа=ЭтоГруппа;
			Нов.НастройкаИД				=	НастройкаИД;
			Нов.НастройкаНаименование	=	НастройкаНаименование;
			Нов.Подсказка				=	Подсказка;
			Если Лев(_Тип,7) = "_Список" Тогда
				//вытащим список доступных значений из того же макета, из отдельной области
				Нов.ОписаниеТипа	=	Новый ОписаниеТипов("СписокЗначений");
				Нов.Список=ЗначениеВСтрокуВнутр(ПолучитьСписокЗначенийИзМакета(Макет,_Тип));
			ИначеЕсли _Тип="Метаданные.Справочники" Тогда
				Нов.ОписаниеТипа	=	Новый ОписаниеТипов("СписокЗначений");
				СписокМетаданных=Новый СписокЗначений;
				СписокМетаданных.Добавить("","<ОЧИСТИТЬ>");
				Для Каждого ЭлМетаданных Из Метаданные.Справочники Цикл
					НовЭлементСписка=СписокМетаданных.Добавить(ЭлМетаданных.Имя,ЭлМетаданных.Синоним);
				КонецЦикла;	
				Нов.Список=ЗначениеВСтрокуВнутр(СписокМетаданных);
			Иначе	
				//предполагаем, что все типы заданы корректно
				Нов.ОписаниеТипа	=	Новый ОписаниеТипов(_Тип);
			КонецЕсли;	
			
			_Значение=Неопределено;
			ЕстьСохраненноеСвойство = (СтруктураСвойств=неопределено) //в тех случаях, когда добавляем новую торговую сеть или поставщика
									или СтруктураСвойств.Свойство(Нов.НастройкаИД,_Значение);
			Если ЕстьСохраненноеСвойство И ЗначениеЗаполнено(_Значение) Тогда
				Нов.Значение			=	СтруктураСвойств[Нов.НастройкаИД];
			Иначе
				Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
					Нов.Значение			=	Нов.ОписаниеТипа.ПривестиЗначение(ЗначениеПоУмолчанию);//если в макете в колонке "ЗначениеПоУмолчанию" пусто, то получим пустое значение данного типа
				Иначе	
					Нов.Значение			=	Нов.ОписаниеТипа.ПривестиЗначение(Неопределено);//получим пустое значение нужного типа
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

//рекурсивная процедура, обслуживающая СоздатьДеревоНастроек
Процедура ДобавитьСтрокиДереваВСтруктуру(СтрокаДерева,СтруктураПолейПартнера) Экспорт
	
	//блок для совместимости с 8.1
	ЭтоДанныеДерева = Ложь;
	Попытка
		Выполнить("ЭтоДанныеДерева = (ТипЗнч(Строкадерева) = Тип(""ДанныеФормыДерево"") или ТипЗнч(Строкадерева) = Тип(""ДанныеФормыЭлементДерева""))");
	Исключение
	КонецПопытки;	
	
	Если ЭтоДанныеДерева Тогда
		Для Каждого Стр Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ДобавитьСтрокиДереваВСтруктуру(Стр,СтруктураПолейПартнера);//обойдем рекурсивно все вложенные строки
			Если Не Стр.ЭтоГруппа Тогда
				СтруктураПолейПартнера.Вставить(Стр.НастройкаИД,Стр.Значение);
			КонецЕсли;	
		КонецЦикла;	
	Иначе 
		
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ДобавитьСтрокиДереваВСтруктуру(Стр,СтруктураПолейПартнера);//обойдем рекурсивно все вложенные строки
			Если Не Стр.ЭтоГруппа Тогда
				СтруктураПолейПартнера.Вставить(Стр.НастройкаИД,Стр.Значение);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПрисоединитьКастомныеНастройки(ВидСправочника,Область)

	//Область ПМ
	Если ВнешнийМодуль<>Неопределено и  ВидСправочника="Партнеры"
		И ВнешнийМодуль.Метаданные().Макеты.Найти("НастройкиПараметры")<>Неопределено Тогда
		ДопНастройкиПартнераМакет = ВнешнийМодуль.ПолучитьМакет("НастройкиПараметры");
		Область.Присоединить(ДопНастройкиПартнераМакет.ПолучитьОбласть("НастройкиПартнеров"));
	КонецЕсли;

    ОбработкаСобытияПодключаемогоМодуля("ДобавитьКастомныеНастройкиПартнера",,Новый Структура("ВидСправочника,ИсходныйТабДокНастроекДляДобавления",ВидСправочника,Область));
	
КонецПроцедуры

//получает из макета НастройкиПараметры область, и выбирает из нее массив доступных настроек. 
//Используется в Модуль_Интеграция_УТ_УПП_КА в ПолучитьЭлементСправочника и в СохранитьЭлементСправочника
//а также в ФормаСервис_Настройка
Функция ПолучитьМассивДополнительныхНастроекИзМакета(ВидСправочника) Экспорт
	МассивНастроек=Новый Массив;
	Макет=ПолучитьМакет("НастройкиПараметры");
	Если ВидСправочника="Партнеры" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиПартнеров");
	ИначеЕсли ВидСправочника="Общие" Тогда
		Область=Макет.ПолучитьОбласть("НастройкиОбщие");
	Иначе
		Возврат МассивНастроек;
	КонецЕсли;
	
	//Область ПМ
	ПрисоединитьКастомныеНастройки(ВидСправочника,Область);
	
	Для Сч=1 По Область.ВысотаТаблицы Цикл
		НастройкаИД					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,1);
		ЭтоГруппа					=	ПолучитьТекстЯчейкиОбласти(Область,Сч,3);
		Если ЭтоГруппа<>"Истина" Тогда
			МассивНастроек.Добавить(НастройкаИД);
		КонецЕсли;	
	КонецЦикла;		
	Возврат МассивНастроек;
КонецФункции

Функция ПолучитьТаблицуСчетовФактурНаПодписание(МассивСообщений) Экспорт
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Ссылка как Ссылка,
	|	ВЫРАЗИТЬ(Реквизит_boxId.Значение КАК СТРОКА(36)) КАК boxId,
	|	ВЫРАЗИТЬ(Реквизит_messageId.Значение КАК СТРОКА(36)) КАК messageId,
	|	КонтурEDI_Сообщения.Документ как Документ
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК Реквизит_boxId
	|		ПО КонтурEDI_Сообщения.Документ = Реквизит_boxId.Объект
	|			И (Реквизит_boxId.Свойство = ""boxId"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК Реквизит_messageId
	|		ПО КонтурEDI_Сообщения.Документ = Реквизит_messageId.Объект
	|			И (Реквизит_messageId.Свойство = ""messageId"")
	|ГДЕ
	|	КонтурEDI_Сообщения.Ссылка В(&Сообщения)
	|	И КонтурEDI_Сообщения.ТребуемоеДействие = ""ПодписатьВДиадок"""
	;
	Если ВнешнееХранилище Тогда
		МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
		Для Каждого Эл Из МассивСообщений Цикл
			МассивВнешнейБазы.Добавить(СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Эл));
		КонецЦикла;
		Запрос.УстановитьПараметр("Сообщения",МассивВнешнейБазы);
	Иначе	
		Запрос.УстановитьПараметр("Сообщения",МассивСообщений);
	КонецЕсли;
	
	Таб = Запрос.Выполнить().Выгрузить();
	Если ВнешнееХранилище Тогда
		Таб = ПолучитьТаблицуИзВнешнейБазы(Таб,Новый Структура("Документ",Документы.ТипВсеСсылки()));
	КонецЕсли;
	
	//теперь заполним строковые представления документов
	ЗапросПредставленияДокументов = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таб.Ссылка,
	|	_Таб.boxId,
	|	_Таб.messageId,
	|	_Таб.Документ
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Таб КАК _Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка,
	|	ВТ.boxId,
	|	ВТ.messageId,
	|	ВЫБОР
	|		КОГДА ВТ.Документ ЕСТЬ NULL 
	|			ТОГДА """"
	|		КОГДА ВТ.Документ = НЕОПРЕДЕЛЕНО
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВТ.Документ)
	|	КОНЕЦ КАК ДокументПредставление
	|ИЗ
	|	ВТ КАК ВТ"
	);
	ЗапросПредставленияДокументов.УстановитьПараметр("Таб",Таб);
	ТабСПредставлениями = ЗапросПредставленияДокументов.Выполнить().Выгрузить();
	//теперь надо заполнить представления документов
	
	Возврат ТабСПредставлениями;
	
КонецФункции

Функция ПроверитьОтсутствиеДублейВходящегоСообщения(ID)
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_Сообщения.Ссылка
	               |ИЗ
	               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |ГДЕ
	               |	КонтурEDI_Сообщения.ID = &ID
	               |
	               |ДЛЯ ИЗМЕНЕНИЯ";
	
	Запрос.УстановитьПараметр("ID",ID);
	
	Если Запрос.Выполнить().Выбрать().Количество() = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьДоговорКонтрагентаДляСообщения(Сообщение,КтоМы) Экспорт
	
	//В документах, создаваемых по входящим документам, необходимо проставить какой-либо договор.
	//По умолчанию мы ищем первый подходящий по условиям: контрагент, организация, вид договора.
	//Затем в форме сообщения позволяем пользователю его выбрать.
	//После создания документа сохраняем выбор кользователя в записи с полем "ИмяРеквизита" = "GUIDДоговораПоУмолчанию" для данного контрагента.
	//Если существует какая-то особая логика определения договора (например, в зависимости от товара, от GLN точки доставки, от поля ContractIdentificator), 
	//	то можно воспользоваться событием "ПолучитьДоговорКонтрагентаДляСообщения" в подключаемом модуле.
	
	СтандартнаяОбработкаEDI = Истина;
	Договор = ОбработкаСобытияПодключаемогоМодуля("ПолучитьДоговорКонтрагентаДляСообщения",СтандартнаяОбработкаEDI,Новый Структура("Сообщение,КтоМы",Сообщение,КтоМы));
	Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Договор;
	КонецЕсли;
	
	Если ИмяКонфигурации1С = "Розница" Тогда//в Рознице нет договоров
		Возврат Неопределено;
	КонецЕсли;
	
	//1. Определим параметры для запроса
	Если ЗначениеЗаполнено(Сообщение.Покупатель1С) Тогда
		
		GUIDДоговораПоУмолчанию = ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Покупатель1С, "GUIDДоговораПоУмолчанию");
		Если ЗначениеЗаполнено(GUIDДоговораПоУмолчанию) Тогда
			
			НовыйGUID = Новый УникальныйИдентификатор(GUIDДоговораПоУмолчанию);
			Тип_Договоры = ПолучитьТипЗначенияОбъекта("Договор",,Истина);
			СсылкаНаДоговор = Справочники[Тип_Договоры].ПолучитьСсылку(НовыйGUID);
			
			Если ЗначениеЗаполнено(СсылкаНаДоговор) Тогда
				ИмяРеквизитаОрганизация = ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
				Если СсылкаНаДоговор[ИмяРеквизитаОрганизация] = Сообщение.Продавец1С
					И СсылкаНаДоговор.Владелец = Сообщение.Покупатель1С Тогда
					
					Возврат СсылкаНаДоговор;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда//договор удалось "вспомнить" на предыдущем шаге
		Возврат Договор;
	КонецЕсли;
	
	//Если вспоминалка не отработала, то пытаемся вызвать какие-то типовые варианты заполнения.
	Если Не ЗначениеЗаполнено(Сообщение.Продавец1С)
		Или Не ЗначениеЗаполнено(Сообщение.Покупатель1С)	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//2. Поищем нужный договор запросом
	
	Запрос = Новый Запрос;
	
	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорВзаиморасчетов = ДоговорыКонтрагентов.Ссылка
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ";
		
	ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Договоры.Ссылка
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.Фирма = &Организация
		|	И Договоры.Владелец = &Владелец
		|	И Договоры.ВидДоговора = &ВидДоговора";
		
	ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Договоры.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|ГДЕ
		|	Договоры.Фирма = &Организация
		|	И Договоры.Владелец = &Владелец
		|	И Договоры.ВидДоговора = &ВидДоговора";
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Договоры.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договоры
		|ГДЕ
		|	Договоры.Организация = &Организация
		|	И Договоры.Контрагент = &Владелец
		|	И Договоры.ТипДоговора = &ВидДоговора";
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Владелец.ДоговорПоУмолчанию = ДоговорыКонтрагентов.Ссылка
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ";
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ";
		
	КонецЕсли;
	
	//определим ВидДоговора для запроса
	Если ИмяКонфигурации1С="УФ_УТ" Тогда
		
		Если НЕ ЕстьНеобходимыеМетаданные("Перечисления.ТипыДоговоров",Истина) Тогда
			Возврат Неопределено;//В ут 11.0.8 или древнее нет перечисления ТипыДоговоров
		КонецЕсли;
		
		ВидДоговора = ?(КтоМы = "Поставщик",	Перечисления.ТипыДоговоров.СПокупателем,				Перечисления.ТипыДоговоров.СПоставщиком);
		
	ИначеЕсли ИмяКонфигурации1С="УФ_УНФ" Тогда
		
		ВидДоговора = ?(КтоМы = "Поставщик",	Перечисления.ВидыДоговоров.СПокупателем,				Перечисления.ВидыДоговоров.СПоставщиком);
		
	ИначеЕсли ИмяКонфигурации1С="ТКПТ" Тогда
		
		ВидДоговора = ?(КтоМы = "Поставщик",	Перечисления.ВидыДоговоров.Продажа,						Перечисления.ВидыДоговоров.Покупка);
		
	Иначе//остальные более-менее типовые конфигурации
		
		ВидДоговора = ?(КтоМы = "Поставщик",	Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,	Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДоговора",	ВидДоговора);
	
	Если ЭтоОбратнаяОтгрузка(Сообщение.ТипСообщения) Тогда
		Если КтоМы = "Поставщик" Тогда
			Запрос.УстановитьПараметр("Организация",	Сообщение.Покупатель1С);
			Запрос.УстановитьПараметр("Владелец",		Сообщение.Продавец1С);
		Иначе
			Запрос.УстановитьПараметр("Организация",	Сообщение.Продавец1С);
			Запрос.УстановитьПараметр("Владелец",		Сообщение.Покупатель1С);
		КонецЕсли;
	Иначе
		Если КтоМы = "Поставщик" Тогда
			Запрос.УстановитьПараметр("Организация",	Сообщение.Продавец1С);
			Запрос.УстановитьПараметр("Владелец",		Сообщение.Покупатель1С);
		Иначе
			Запрос.УстановитьПараметр("Организация",	Сообщение.Покупатель1С);
			Запрос.УстановитьПараметр("Владелец",		Сообщение.Продавец1С);
		КонецЕсли;
	КонецЕсли;
	
	Договор = ПолучитьРезультатЗапроса(Запрос);	
	
	Возврат Договор;
	
КонецФункции

Функция КэшШаблоновЗапросов() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("КэшШаблоновЗапросов");
	
	Если Результат = Неопределено Тогда
		
		//переинициализируем кэш
		Если НЕ ВнешнийМодуль=Неопределено
			И НЕ ВнешнийМодуль.Метаданные().Макеты.Найти("ШаблоныЗапросов")=Неопределено Тогда
			СКД = ВнешнийМодуль.ПолучитьМакет("ШаблоныЗапросов");
			_ИмяКонфигурации = "ПодключаемыйМодуль";
		Иначе	
			СКД = ПолучитьМакет("ШаблоныЗапросов");
			_ИмяКонфигурации = ПолучитьИмяКонфигурацииДляЗапроса();
		КонецЕсли;
		
		Результат = СКД.НаборыДанных[_ИмяКонфигурации];
		
		ЭДО_Кэш_Поместить("КэшШаблоновЗапросов",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстЗапросаКонвертацииТоваровEDIв1С()
	
	Возврат КэшШаблоновЗапросов().Элементы.Покупатель.Элементы.КонвертироватьТоварыEDIВ1С.Запрос;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоШтрихкодамНоменклатуры()
	
	Возврат КэшШаблоновЗапросов().Элементы.Покупатель.Элементы.КонвертироватьТовары1СВEDIВ_GTIN.Запрос;
	
КонецФункции

Процедура ПредложитьОбновитьОбъектыМетаданныхКонтурEDI(ИмяМакетаОбновления = Неопределено,ТекстВопроса = Неопределено) Экспорт
	#Если Клиент Тогда
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		
		Если НЕ (Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Заголовок		= "Укажите файл, в который нужно сохранить обновление для вашей конфигурации";
	ДиалогВыбора.Фильтр			= "Файл конфигурации 1С (*.cf)|*.cf";      
	ДиалогВыбора.ПолноеИмяФайла = "КонтурEDI_upd.cf";
	
	Если ДиалогВыбора.Выбрать() Тогда      
		
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяМакетаОбновления = Неопределено Тогда
		ИмяМакетаОбновления = ?(ВнешнееХранилище,"ОбновлениеДляХраненияДанных_ВнешнееХранилище","ОбновлениеДляХраненияДанных");
	КонецЕсли;
	
	ПолучитьМакет(ИмяМакетаОбновления).Записать(ПутьКФайлу);
	
	//еще высветим на экране текстовый документ с описанием того, что надо делать
	Чтиво=Новый ТекстовыйДокумент;
	Чтиво.УстановитьТекст(
	"ВНИМАНИЕ! 
	|При добавлении оптимизированных объектов хранения данных в окне ""Сравнение, объединение"" НЕОБХОДИМО снять флажок с раздела ""Свойства""!"
	);
	Чтиво.Показать();
	
	Предупреждение("Запустите модуль после обновления конфигурации базы из файла");
	#КонецЕсли
КонецПроцедуры

Функция ПреобразоватьСохраненноеЗначение(Значение,ЗначениеСтрока)
	
	ТекЗначение = Значение;
	
	Если ТипЗнч(Значение) = Тип("COMОбъект") Тогда
		ТекЗначение = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Значение);
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		Если Лев(Значение,3)="{""#" Тогда
			ТекЗначение = ЗначениеИзСтрокиВнутр(Значение);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСтрока) Тогда
		ТекЗначение = ЗначениеСтрока;
		Если Лев(ЗначениеСтрока,3)="{""#" Тогда
			ТекЗначение = ЗначениеИзСтрокиВнутр(ЗначениеСтрока);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТекЗначение;
	
КонецФункции

Функция ЭтоПредставлениеМассива(Строка)
	
	Если СтрДлина(Строка)>40 Тогда
		
		Массив = Новый Массив();
		ПредставлениеМассива = ЗначениеВСтрокуВнутр(Массив);
		
		// сравниваем на начало представления строк вида {"#",51e7a0d2-530b-11d4-b98a-008048da3034
		
		Если Лев(Строка,41)=Лев(ПредставлениеМассива,41) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьНеобходимыеМетаданные(СтрокаМетаданных, НеИскатьВоВХ = Ложь) Экспорт
	
	Если ВнешнееХранилище И НеИскатьВоВХ = Ложь Тогда
		ТекПолеМетаданных = СоединениеСХранилищем.Метаданные;
	Иначе
		ТекПолеМетаданных = Метаданные;
	КонецЕсли;
	
	МассивИмен = EDI_РазложитьСтрокуВМассивСлов(СтрокаМетаданных,".");

	КоличествоИмен = МассивИмен.Количество();
	
	// КоличествоИмен = 2 для проверки наличия объекта, например 					Справочники.КонтурEDI_Сообщения
	// КоличествоИмен = 4 для проверки наличия реквизита\ресурса и т.д., например	Справочники.КонтурEDI_Сообщения.Реквизиты.Организация
	// КоличествоИмен = 6 для проверки наличия реквизита таб. части, например		Справочники.КонтурEDI_Сообщения.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.ЗначениеСтрока
	
	Если НЕ (КоличествоИмен = 2 ИЛИ КоличествоИмен = 4 ИЛИ КоличествоИмен = 6) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоПоисков = КоличествоИмен/2;
	Для н = 1 По КоличествоПоисков Цикл
		ТекПолеМетаданных = ТекПолеМетаданных[МассивИмен[н*2-2]].Найти(МассивИмен[н*2-1]);
		Если ТекПолеМетаданных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

Процедура ПроверкаНовойВерсии_ЗаполнениеОрганизации()
	
	Если ЕстьМетаданныеХраненияОрганизации Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		//проверим, есть ли хоть одно сообщение, у которого заполнено поле "Организация".
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	КонтурEDI_Сообщения.Ссылка
		               |ИЗ
		               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		               |ГДЕ
		               |	НЕ КонтурEDI_Сообщения.Организация = &ПустаяОрганизация";
		
		Запрос.УстановитьПараметр("ПустаяОрганизация",?(ВнешнееХранилище,"",Неопределено));
		
		Если Запрос.Выполнить().Пустой() Тогда
			
			// ни у одного сообщения не заполнен реквизит "Организация". Проставим в тех, которые активны на данный момент.
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтурEDI_Сообщения.Ссылка
			|ИЗ
			|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			|ГДЕ
			|	НЕ КонтурEDI_Сообщения.Архив
			|	И ПОДСТРОКА(КонтурEDI_Сообщения.ТипСообщения, 1, 1) <> ""#""
			|	И КонтурEDI_Сообщения.ДатаДокумента >= &МесяцНазад
			|
			|УПОРЯДОЧИТЬ ПО
			|	КонтурEDI_Сообщения.Код УБЫВ";

			Запрос.УстановитьПараметр("МесяцНазад",ТекущаяДата()-60*60*24*30);//ограничим: слишком старые сообщения обрабатывать не будем.
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			КоличествоСтрок = Выборка.Количество();
			
			сч = 0;
			
			Пока Выборка.Следующий() Цикл
				
				сч=сч+1;
				
				Состояние_КонтурEDI("Заполняются организации "+сч+" из "+КоличествоСтрок);
				
				СтруктураСообщения = Выборка.Ссылка.Хранилище.Получить();
				Если ВнешнееХранилище Тогда
					СтруктураСообщения = ЗначениеИзСтрокиВнутр(СтруктураСообщения);
				КонецЕсли;	
				
				Если ТипЗнч(СтруктураСообщения) = Тип("Структура") Тогда
					
					ТекОрганизация = Неопределено;
					
					Если ОпределитьКемМыЯвляемся(СтруктураСообщения) = "Поставщик" Тогда
						СтруктураСообщения.Свойство("Продавец1С",ТекОрганизация);
					Иначе
						СтруктураСообщения.Свойство("Покупатель1С",ТекОрганизация);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекОрганизация) Тогда
						СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
						СообщениеОбъект.Организация = ПреобразоватьЗначениеДляВнешнегоХранилища(ТекОрганизация);
						СообщениеОбъект.Записать();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСообщениеСохраненнымиДанными(Сообщение, Параметры)
		
	//дополним сообщение сохраненными данными о распределении товаров по упаковкам (SSCC) --------------------------	
	Если Сообщение.ТипСообщения = "DESADV" 		И Сообщение.Свойство("ТранспортныеУпаковки")	И					
		ЗначениеЗаполнено(Параметры) 			И ТипЗнч(Параметры) = Тип("Структура") 			И 
		Параметры.Свойство("СообщениеСсылка") 	И ЗначениеЗаполнено(Параметры.СообщениеСсылка) 	Тогда
		СообщениеСсылка = ?(ВнешнееХранилище, СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Параметры.СообщениеСсылка),Параметры.СообщениеСсылка);
		Если СообщениеСсылка.ТипСообщения = "DESADV" Тогда
			СохраненноеСообщение = СообщениеСсылка.Хранилище.Получить();
			Если ВнешнееХранилище Тогда
				СохраненноеСообщение = ЗначениеИзСтрокиВнутр(СохраненноеСообщение);	
			КонецЕсли;
			Сообщение.ДатаПоставки = СохраненноеСообщение.ДатаПоставки;
			Если ТипЗнч(СохраненноеСообщение) = Тип("Структура") 							И
				СохраненноеСообщение.Свойство("ТранспортныеУпаковки") 						И
				ТипЗнч(СохраненноеСообщение.ТранспортныеУпаковки) = Тип("ДеревоЗначений") 	И
				СохраненноеСообщение.ТранспортныеУпаковки.Строки.Количество() > 0			Тогда       
				Сообщение.ТранспортныеУпаковки  = СохраненноеСообщение.ТранспортныеУпаковки.Скопировать();  // восстановим транспортные упаковки из сохраненного сообщения;
				СкорректироватьСоставУпаковокПоТоварнымПозициям(СохраненноеСообщение, Сообщение); 			// скорректируем транспортные упаковки сформированного сообщения
			КонецЕсли;                                                                                  	// при сравнении состава товаров сохраненного и сформированного сообщений;
			Сообщение.СообщениеСсылка 		= Параметры.СообщениеСсылка;								// дополним ссылкой на существующее сообщение (здесь может быть и ссылка и строка(80)) 
		КонецЕсли;
	КонецЕсли;
	
    //дополним сообщение другими сохраненными данными ... ----------------------------------------------------------
	//...
	
КонецПроцедуры

Процедура СкорректироватьСоставУпаковокПоТоварнымПозициям(СохраненноеСообщение, Сообщение);

	//процедура исключает из упаковок те позиции, у которых:
	// - изменилось количество или
	// - изменилось наличие самих товаров или
	// - изменилась позиция с списке товаров или
	// - не совпадает хотя бы один из идентификаторов (GTIN, КТПокупателя, КТПоставщика).
	
	_Товары   = СохраненноеСообщение.Товары;
	Товары 	  = Сообщение.Товары;
		
	КоличествоТовары = Товары.Количество();
	
	//обойдем все сохраненные товары
	_НомерПозиции = 1;
	Для Каждого _СтрокаТовар Из _Товары Цикл
		
		//попробуем для каждого из них по номеру позиции получить соответствующий в текущих товарах
		ИсключитьПозицию = Ложь;
		Если Не _НомерПозиции > КоличествоТовары Тогда
			СтрокаТовар = Товары.Получить(_НомерПозиции-1);
			Если Не СтрокаТовар.GTIN 				= _СтрокаТовар.GTIN 			   или 
				 //Не СтрокаТовар.КодТовараПоставщика = _СтрокаТовар.КодТовараПоставщика или  //т.к процедура используется только для ИСХОДЯЩЕГО DESADV, то из проверки следует исключить код товара поставщика
				 Не СтрокаТовар.КодтовараПокупателя = _СтрокаТовар.КодтовараПокупателя или      //считаем, товар был заменен, удален, переставлен ...
				 Не СтрокаТовар.Количество 			= _СтрокаТовар.Количество 		   Тогда    //считаем, что количество товара этой позиции изменилось
				ИсключитьПозицию = Истина;
			КонецЕсли;
		Иначе																					//считаем, что товар с этой позицией отсутствует
			ИсключитьПозицию = Истина;
		КонецЕсли;
		
		//находим и удаляем изменившиеся позиции
		Если ИсключитьПозицию Тогда
			ИсключаемыеПозиции = Сообщение.ТранспортныеУпаковки.Строки.НайтиСтроки(Новый Структура("НомерСтроки",_НомерПозиции),Истина);
			Для Каждого ИсключаемаяПозиция Из ИсключаемыеПозиции Цикл
				ИсключаемаяПозиция.Родитель.Строки.Удалить(ИсключаемаяПозиция);
			КонецЦикла;
		КонецЕсли;
		
		_НомерПозиции = _НомерПозиции + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОписаниеСобытийПодключаемогоМодуляРасширений() Экспорт
	
	//инициализируем
	ТаблицаСобытий = Новый ТаблицаЗначений();                   //полные данные о всех событиях
	ТаблицаСобытий.Колонки.Добавить("Имя");                     //"Имя"[Строка]
	ТаблицаСобытий.Колонки.Добавить("Описание");                //"Описание"[Строка]
	ТаблицаСобытий.Колонки.Добавить("Параметры");               //структура параметров, представленных структурами: поля "Имя"[Строка],"Тип"[Тип],"Описание"[Строка],"Представление"[Строка]
	ТаблицаСобытий.Колонки.Добавить("ВозвращаемоеЗначение");	//структура: поля "Наличие"[Булево],"Тип"[Тип],"Описание"[Строка]
	ТаблицаСобытий.Колонки.Добавить("СтандартнаяОбработкаEDI"); //наличе параметра СтандартнаяОбработкаEDI[Булево]
	ТаблицаСобытий.Колонки.Добавить("ТипСобытия");              //принимает 2 значения: "ПМ", "Расширение"
		
	ТаблицаПараметров = Новый ТаблицаЗначений;                  //описание параметров событий
	ТаблицаПараметров.Колонки.Добавить("Имя");                  //"Имя"[Строка]
	ТаблицаПараметров.Колонки.Добавить("Тип");                  //"Тип"[Тип]
	ТаблицаПараметров.Колонки.Добавить("Описание");             //"Описание"[Строка]
	ТаблицаПараметров.Колонки.Добавить("Представление");        //"Представление"[Строка] (как параметр именован в коде)
	
	Макет = ПолучитьМакет("СобытияПодключаемогоМодуляРасширений");
	
	//события подключаемого модуля -------------------------------------------------------------------------
	
	//заполняем параметры событий ПМ
	ТабДокПараметры = Новый ТабличныйДокумент;
	ТабДокПараметры.Вывести(Макет.ПолучитьОбласть("ПараметрыСобытийПМ"));
	сч = 1;
	Пока Истина Цикл
		НомерСтроки 						= Формат(сч,"ЧГ=");
		Если ПустаяСтрока(ТабДокПараметры.Область("R"+НомерСтроки+"C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		НоваяСтрока 						= ТаблицаПараметров.Добавить();
		НоваяСтрока.Имя 					= ТабДокПараметры.Область("R"+НомерСтроки+"C1").Текст;
		НоваяСтрока.Тип 					= ТабДокПараметры.Область("R"+НомерСтроки+"C2").Текст;
		НоваяСтрока.Описание 				= ТабДокПараметры.Область("R"+НомерСтроки+"C3").Текст;
		НоваяСтрока.Представление			= ТабДокПараметры.Область("R"+НомерСтроки+"C4").Текст;
		сч = сч+1;
	КонецЦикла;
	ТабДокПараметры = Неопределено;
	
	//заполняем события ПМ
	ТабДокСобытия = Новый ТабличныйДокумент;
	ТабДокСобытия.Вывести(Макет.ПолучитьОбласть("СобытияПМ"));
	сч = 1;
	Пока Истина Цикл
		НомерСтроки = Формат(сч,"ЧГ=");
		Если ПустаяСтрока(ТабДокСобытия.Область("R"+НомерСтроки+"C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		//имя
		Имя = СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C1").Текст);
		//описание
		Описание = СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C2").Текст);
		//параметры
		СтрокаПараметры = СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C3").Текст);
		МассивПараметров = Новый Массив;
		ПозицияЗапятой = Найти(СтрокаПараметры,",");
		Пока Не ПозицияЗапятой = 0 Цикл
			ИмяПараметра = Лев(СтрокаПараметры,ПозицияЗапятой-1);
			МассивПараметров.Добавить(ИмяПараметра);
			СтрокаПараметры = Прав(СтрокаПараметры,СтрДлина(СтрокаПараметры)-ПозицияЗапятой);
			ПозицияЗапятой = Найти(СтрокаПараметры,",");
		КонецЦикла;
		МассивПараметров.Добавить(СтрокаПараметры);
		Параметры = Новый Структура;
		Для Каждого Элемент Из МассивПараметров Цикл
			СтрокаПараметра = ТаблицаПараметров.Найти(Элемент,"Имя");
			Если Не СтрокаПараметра = Неопределено Тогда
				СтруктураПараметра = Новый Структура;
				СтруктураПараметра.Вставить("Имя",					СтрокаПараметра.Имя);
				СтруктураПараметра.Вставить("Тип",					СтрокаПараметра.Тип);
				СтруктураПараметра.Вставить("Описание",				СтрокаПараметра.Описание);
				СтруктураПараметра.Вставить("Представление",		СтрокаПараметра.Представление);
				Параметры.Вставить(СтрокаПараметра.Представление,	СтруктураПараметра);
			КонецЕсли;
		КонецЦикла;
		//возвращаемое значение
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Наличие",	Булево(ТабДокСобытия.Область("R"+НомерСтроки+"C4").Текст));
		ВозвращаемоеЗначение.Вставить("Тип",		СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C5").Текст));
		ВозвращаемоеЗначение.Вставить("Описание",	СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C6").Текст));
		//стандартная обработка EDI
		СтандартнаяОбработкаEDI = Булево(ТабДокСобытия.Область("R"+НомерСтроки+"C7").Текст);
		//заполняем
		НоваяСтрока 						= ТаблицаСобытий.Добавить();
		НоваяСтрока.Имя						= Имя;
		НоваяСтрока.Описание				= Описание;
		НоваяСтрока.Параметры				= Параметры;
		НоваяСтрока.ВозвращаемоеЗначение	= ВозвращаемоеЗначение;
		НоваяСтрока.СтандартнаяОбработкаEDI	= СтандартнаяОбработкаEDI;
		НоваяСтрока.ТипСобытия				= "ПМ";
		сч = сч+1;
	КонецЦикла;
	
	ТаблицаСобытий.Сортировать("Имя");
	
	ТаблицаПараметров.Очистить();
	
	//события расширений ------------------------------------------------------------------------------------
	
	//заполняем параметры событий расширений
	
	ТабДокПараметры = Новый ТабличныйДокумент;
	ТабДокПараметры.Вывести(Макет.ПолучитьОбласть("ПараметрыСобытийРасширений"));
	сч = 1;
	Пока Истина Цикл
		НомерСтроки 						= Формат(сч,"ЧГ=");
		Если ПустаяСтрока(ТабДокПараметры.Область("R"+НомерСтроки+"C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		НоваяСтрока 						= ТаблицаПараметров.Добавить();
		НоваяСтрока.Имя 					= ТабДокПараметры.Область("R"+НомерСтроки+"C1").Текст;
		НоваяСтрока.Тип 					= ТабДокПараметры.Область("R"+НомерСтроки+"C2").Текст;
		НоваяСтрока.Описание 				= ТабДокПараметры.Область("R"+НомерСтроки+"C3").Текст;
		НоваяСтрока.Представление			= ТабДокПараметры.Область("R"+НомерСтроки+"C4").Текст;
		сч = сч+1;
	КонецЦикла;
	ТабДокПараметры = Неопределено;	
	
	//заполняем события расширений
	ТабДокСобытия = Новый ТабличныйДокумент;
	ТабДокСобытия.Вывести(Макет.ПолучитьОбласть("СобытияРасширений"));
	сч = 1;
	Пока Истина Цикл
		НомерСтроки = Формат(сч,"ЧГ=");
		Если ПустаяСтрока(ТабДокСобытия.Область("R"+НомерСтроки+"C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		//имя
		Имя = СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C1").Текст);
		//описание
		Описание = СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C2").Текст);
		//параметры
		СтрокаПараметры = СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C3").Текст);
		МассивПараметров = Новый Массив;
		ПозицияЗапятой = Найти(СтрокаПараметры,",");
		Пока Не ПозицияЗапятой = 0 Цикл
			ИмяПараметра = Лев(СтрокаПараметры,ПозицияЗапятой-1);
			МассивПараметров.Добавить(ИмяПараметра);
			СтрокаПараметры = Прав(СтрокаПараметры,СтрДлина(СтрокаПараметры)-ПозицияЗапятой);
			ПозицияЗапятой = Найти(СтрокаПараметры,",");
		КонецЦикла;
		МассивПараметров.Добавить(СтрокаПараметры);
		Параметры = Новый Структура;
		Для Каждого Элемент Из МассивПараметров Цикл
			СтрокаПараметра = ТаблицаПараметров.Найти(Элемент,"Имя");
			Если Не СтрокаПараметра = Неопределено Тогда
				СтруктураПараметра = Новый Структура;
				СтруктураПараметра.Вставить("Имя",					СтрокаПараметра.Имя);
				СтруктураПараметра.Вставить("Тип",					СтрокаПараметра.Тип);
				СтруктураПараметра.Вставить("Описание",				СтрокаПараметра.Описание);
				СтруктураПараметра.Вставить("Представление",		СтрокаПараметра.Представление);
				Параметры.Вставить(СтрокаПараметра.Представление,	СтруктураПараметра);
			КонецЕсли;
		КонецЦикла;
		//возвращаемое значение
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Наличие",	Булево(ТабДокСобытия.Область("R"+НомерСтроки+"C4").Текст));
		ВозвращаемоеЗначение.Вставить("Тип",		СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C5").Текст));
		ВозвращаемоеЗначение.Вставить("Описание",	СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C6").Текст));
		//заполняем
		НоваяСтрока 						= ТаблицаСобытий.Добавить();
		НоваяСтрока.Имя						= Имя;
		НоваяСтрока.Описание				= Описание;
		НоваяСтрока.Параметры				= Параметры;
		НоваяСтрока.ВозвращаемоеЗначение	= ВозвращаемоеЗначение;
		НоваяСтрока.СтандартнаяОбработкаEDI	= Ложь;
		НоваяСтрока.ТипСобытия				= "Расширение";
		сч = сч+1;
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

Функция ПолучитьТаблицуСвойстваРасширений() Экспорт
	
	ТаблицаОписанияСвойств = Новый ТаблицаЗначений;
	
	ТаблицаОписанияСвойств.Колонки.Добавить("Представление");
	ТаблицаОписанияСвойств.Колонки.Добавить("Наименование");
	ТаблицаОписанияСвойств.Колонки.Добавить("ИмяРеквизита");
	
	НоваяСтрока = ТаблицаОписанияСвойств.Добавить();
	НоваяСтрока.Представление = "Идентификатор:";
	НоваяСтрока.Наименование = "Идентификатор";
	НоваяСтрока.ИмяРеквизита = "Значение";
	НоваяСтрока = ТаблицаОписанияСвойств.Добавить();
	НоваяСтрока.Представление = "Версия:";
	НоваяСтрока.Наименование = "ВерсияРасширения";
	НоваяСтрока.ИмяРеквизита = "Значение";
	НоваяСтрока = ТаблицаОписанияСвойств.Добавить();
	НоваяСтрока.Представление = "Версия модуля:";
	НоваяСтрока.Наименование = "РекомендуемаяВерсияМодуля";
	НоваяСтрока.ИмяРеквизита = "Значение";
	НоваяСтрока = ТаблицаОписанияСвойств.Добавить();
	НоваяСтрока.Представление = "Обязательный:";
	НоваяСтрока.Наименование = "Обязательный";
	НоваяСтрока.ИмяРеквизита = "Значение";
	НоваяСтрока = ТаблицаОписанияСвойств.Добавить();
	НоваяСтрока.Представление = "Есть интерфейс:";
	НоваяСтрока.Наименование = "Интерфейс";
	НоваяСтрока.ИмяРеквизита = "Значение";

	Возврат ТаблицаОписанияСвойств;
	
КонецФункции

Процедура ПоказатьСвойстваРасширения(ТабДокумент,РасширениеСсылка)Экспорт
	
	Если РасширениеСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементРасширение = ПолучитьЭлементСправочника("Расширения",РасширениеСсылка);
	
	ТаблицаСвойства = Новый ТаблицаЗначений;
	ТаблицаСвойства.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20, ДопустимаяДлина.Переменная)));
	ТаблицаСвойства.Колонки.Добавить("Значение", 	 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(35, ДопустимаяДлина.Переменная)));
	
	ТаблицаОписанияСвойств = ПолучитьТаблицуСвойстваРасширений();
	Реквизиты = ЭлементРасширение.ДополнительныеРеквизиты;
	
	Для Каждого ОписаниеСвойства Из ТаблицаОписанияСвойств Цикл
		Реквизит = Реквизиты.Найти(ОписаниеСвойства.Наименование,"ИмяРеквизита");
		Если Не Реквизит = Неопределено Тогда
			НовоеСвойство = ТаблицаСвойства.Добавить();
			НовоеСвойство.Наименование 	= ОписаниеСвойства.Представление;
			НовоеСвойство.Значение 		= Строка(Реквизит[ОписаниеСвойства.ИмяРеквизита]);
		КонецЕсли;
	КонецЦикла;
	
	Построитель = Новый ПостроительОтчета(); 
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаСвойства);
	Построитель.ТекстЗаголовка = "Свойства расширения """ + ЭлементРасширение.Наименование + """"; 
	Построитель.Вывести(ТабДокумент);
	
КонецПроцедуры

Функция ПолучитьМассивСобытийРасширений()
	
	МассивСобытийРасширений = Новый Массив;
	
	Макет = ПолучитьМакет("СобытияПодключаемогоМодуляРасширений");
	
	ТабДокСобытия = Новый ТабличныйДокумент;
	ТабДокСобытия.Вывести(Макет.ПолучитьОбласть("СобытияРасширений"));
	сч = 1;
	Пока Истина Цикл
		НомерСтроки = Формат(сч,"ЧГ=");
		Если ПустаяСтрока(ТабДокСобытия.Область("R"+НомерСтроки+"C1").Текст) Тогда
			Прервать;
		КонецЕсли;
		Имя = СокрЛП(ТабДокСобытия.Область("R"+НомерСтроки+"C1").Текст);
		МассивСобытийРасширений.Добавить(Имя);
		сч = сч+1;
	КонецЦикла;
	
	Возврат МассивСобытийРасширений;
	
КонецФункции

Процедура ОтправитьПодготовленноеСообщение(СообщениеСсылка)
	//декомпозиция метода ОтправитьСообщение
	
	Сообщение = ПрочитатьСообщение(СообщениеСсылка,,,"Исходящее");
	РезультатКонвертации = КонвертироватьИсходящееСообщениеПоНовому(Сообщение);//запишем XML
	
	Если Не РезультатКонвертации.Успешно Тогда//не записалось
		ОповеститьОбОшибках(РезультатКонвертации,"");
		Возврат;
	КонецЕсли;
	
	//Дополнительно проверим, не было ли отправлено это сообщение.
	
	СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
	
	//дополнительно проверим, что с сообщением. Если уже передано на сервер или доставлено, то не надо больше ничего делать.
	Если СообщениеОбъект.Заблокирован() Тогда
		Возврат;//соседний поток отправляет это же сообщение
	ИначеЕсли СообщениеОбъект.Статус = "Отправлен" или СообщениеОбъект.Статус = "Доставлен" Тогда//а статус про подписание в Диадоке?
		Возврат;//соседний поток его уже отправил
	КонецЕсли;
	
	СообщениеОбъект.Заблокировать();
	//второй вариант - блокировать сам документ в 1С.
	
	РезультатОтправки = ПередатьСообщениеНаСервер(РезультатКонвертации);
	
	Если НЕ СообщениеОбъект=Неопределено Тогда
		СообщениеОбъект.Разблокировать();
		СообщениеОбъект = Неопределено;
	КонецЕсли;
	
	Если РезультатОтправки.Успешно = Истина Тогда
		ПослеОтправкиИсходящегоСообщения(Сообщение,РезультатОтправки);//обновим статус отправленного сообщения
	Иначе
		ОповеститьОбОшибках(РезультатОтправки,"");
	КонецЕсли;
	
КонецПроцедуры

//}#КонецОбласти //05_Хранение_Данных


//{#Область 06_Транспорт
	
//Документация по API: https://edi-api.kontur.ru/Documentation/V1/Index.html

//*********************************************************************
//							ТРАНСПОРТ  



Функция ЭтоТестовыйAPI() Экспорт
	//Возврат Истина;//Включить для работы через test-edi-api.kontur.ru
	Возврат Ложь;//По умолчанию работаем через edi-api.kontur.ru
КонецФункции

//валидации, приемки, смены статусов, отмены ORDERS/RECADV, проверки дублей
//может, валидации выполнять ДО сохранения сообщения в базу? Так меньше записей будет.
Процедура ДействияПослеСохраненияВходящегоСообщения(Сообщение)
	
	ТипСообщения = Сообщение.ТипСообщения;//вытащим поближе
	
	//обработаем сообщение ORDERS со статусом Canceled
	//на будущее в форме сообщения светить статус/показывать требуемое действие, для интерактивной отмены
	Если ТипСообщения = "ORDERS" 
		И ВРег(Сообщение.Статус) = "CANCELED" 
	Тогда
		РезультатОбработки = ОбработатьОтменуЗаказа(Сообщение);
		Возврат;
	КонецЕсли;	
			
	//Дальше попробуем валидировать сообщение алгоритмами подключаемого модуля (цены, сроки поставки, ...)
	ВалидироватьВходящиеСообщения = (ПолучитьКонстантуEDI("ВалидироватьВходящиеСообщения")=Истина);
	Если ВалидироватьВходящиеСообщения Тогда
		//валидация выполняется только в этом месте
		РезультатВалидации = ОбработкаСобытияПодключаемогоМодуля("ПолучитьРезультатВалидацииСообщения",,
			Новый Структура("Сообщение",
			Сообщение));
		
		Если РезультатВалидации <> Неопределено
			И Не РезультатВалидации.Успешно	Тогда
			//РезультатВалидации = Новый Структура("Успешно,ТаблицаОшибок", Истина, Новый ТаблицаЗначений);//эмулируем успешный результат
			Сообщение.Статус = "ВходящийНеПрошелВалидацию";
			ОписаниеОшибок = "";
			Для Каждого Ошибка Из РезультатВалидации.ТаблицаОшибок Цикл
				ОписаниеОшибок = ОписаниеОшибок + Ошибка.ОписаниеОшибки + Символы.ПС;
			КонецЦикла;
			Сообщение.Комментарий = ОписаниеОшибок;
			
			СообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
			СообщениеОбъект.ОписаниеОшибки = ОписаниеОшибок;
			СохранитьОбъектСообщения(СообщениеОбъект);
			
			УстановитьСтатусСообщения(Сообщение.СообщениеСсылка,Сообщение.ДокументСсылка,ТипСообщения,"ВходящийНеПрошелВалидацию");
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;


	//успешная проверка данных, продолжаем. 
	//проверим наличие дублей у данного ORDERS
	Если ТипСообщения = "ORDERS"
		И ВРег(Сообщение.Статус) <> "CANCELED" //параноидально, но пусть будет
	Тогда
	
		Дубли = ПолучитьДублирующиеСообщения(Сообщение.СообщениеСсылка);
		Если Дубли.Количество()>1 Тогда
			МагическиОбработатьДублиORDERS(Сообщение,"НоваяВерсия");
			УстановитьСтатусСообщения_БМИ(Сообщение.СообщениеСсылка, Сообщение.ДокументСсылка, ТипСообщения, "НоваяВерсия");
			Возврат;//больше ничего не будем делать
		КонецЕсли;	
		
		//логика такова: если у данного ORDERS есть дубли, то мы не будем создавать заказ, поскольку пользователю все равно надо будет выбрать нужный документ
	КонецЕсли;
	
	
	// теперь проверим поля - все ли соответствия заполнены: грузополучатель, покупатель, товары
	РезультатПроверкиДанных = ПроверитьПоля1С(Сообщение);
	Если Не РезультатПроверкиДанных.Успешно Тогда
		
		ОбработкаСобытияПодключаемогоМодуля("ОбработатьОшибкиЗагрузкиСообщения",,
			Новый Структура("Сообщение,СписокОшибок,ЭтоАвтообмен",
				Сообщение, РезультатПроверкиДанных.СписокОшибок, ПараметрыПользователяEDI.ЭтоАвтообмен));
		
		УстановитьСтатусСообщения_БМИ(Сообщение.СообщениеСсылка, Сообщение.ДокументСсылка, ТипСообщения, "ВходящийОжидаетУстановкиСоответствий");
		Возврат;//нет соответствий, выходим отсюда
		
	КонецЕсли;	
	
		
	//теперь постараемся обработать сообщение: создать по нему документ, установить статус или еще что
	Если НастройкиМодуля=неопределено Тогда 
		НастройкиМодуля=ПолучитьНастройкиМодуля();
	КонецЕсли;
	
	//Если 
	//	(ЗначениеЗаполнено(Сообщение.Партнер) И ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"АвтоматическиПриниматьORDERS")=Истина) //Старая настройка при обновлении должна была сконвертироваться
	//	ИЛИ 
	//	(ТипСообщения = "ORDERS" И Сообщение.Свойство("ОбратныйЗаказ1С") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказ1С)) Тогда
	//	//Автоматически у нас не принимаются: PORDERS и иногда ORDERS. Остальные - автоматически. 
	//	
	//	ПринятьВходящееСообщение(Сообщение);
	Если НастройкиМодуля[ТипСообщения].ПриниматьАвтоматически 
		ИЛИ 
		(ТипСообщения = "ORDERS" И ЗначениеЗаполнено(Сообщение.Партнер) И ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"АвтоматическиПриниматьORDERS")=Истина)
		ИЛИ 
		(ТипСообщения = "ORDERS" И Сообщение.Свойство("ОбратныйЗаказ1С") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказ1С)) Тогда
		//Автоматически у нас не принимаются: PORDERS и иногда ORDERS. Остальные - автоматически. 
		
		ПринятьВходящееСообщение(Сообщение);
		
	КонецЕсли;
	
КонецПроцедуры	


//Загружает статусные сообщения, загружает основные сообщения, отправляет отчеты о доставке и исходящие сообщения, вызывает подключаемый модуль при необходимости
//из минусов - не дает вернуться на тонкий клиент при загрузке сообщений транзакциями
Процедура ВыполнитьОбменССервером(ИмяСписка="") Экспорт
	//ИмяСписка - устаревший параметр, оставлен для совместимости со старыми подключаемыми модулями
	
	ОбработкаСобытияПодключаемогоМодуля("ПередВыполнениемОбмена",,
			Новый Структура("ИмяСписка",
			ИмяСписка));
	
	Если Не ЗагрузитьНовыеСообщения(ИмяСписка) Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьАвтоматическиОтправляемыеСообщения();
	ОтправитьУведомленияОПрочтенииСообщений();
	ОтправитьСообщенияОжидающиеОтправки();
	ОтправитьALCRPT();
	
	УстановитьКонстантуEDI("ДатаПоследнегоВыполненияОбмена",Формат(ТекущаяДата(),"ДФ='dd.MM.yyyy HH:mm:ss'"));
	//пишем строкой, т.к. по умолчанию в РС Дата+Время обрезается до Даты
	
	КэшСоединений_КонтурEDI = Неопределено;//сбросим кэш, чтобы не держать FTP соединения
	
КонецПроцедуры


//Смотрит в настройки партнеров и пытается отправить сообщения ORDRSP, DESADV,INVOIC в случае, если такие настройки указаны.
//Экспериментально.
Процедура ПодготовитьАвтоматическиОтправляемыеСообщения()
	
	Если НЕ НастройкиМодуля.МыПоставщик Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочники.Ссылка КАК Партнер,
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство КАК ИмяНастройки
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = КонтурEDI_ДополнительныеРеквизиты.Объект
	|			И (КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Автоотправка_PORDERS""
	|				ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Автоотправка_ORDRSP""
	|				ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Автоотправка_DESADV""
	|				ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Автоотправка_INVOIC"")
	|			И (КонтурEDI_ДополнительныеРеквизиты.Значение = ИСТИНА)"
	;
	ТаблицаПартнеровСообщений = Запрос.Выполнить().Выгрузить();
	Если ВнешнееХранилище Тогда
		ТаблицаПартнеровСообщений = ПолучитьТаблицуИзВнешнейБазы(ТаблицаПартнеровСообщений);
	КонецЕсли;
	
	Если ТаблицаПартнеровСообщений.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПартнеров			= ТаблицаПартнеровСообщений.ВыгрузитьКолонку("Партнер");
	
	МассивТребуемыхДействий	= EDI_РазложитьСтрокуВМассивСлов(
		"Отправить обратный заказ
		|Отправить подтверждение заказа
		|Отправить уведомление об отгрузке
		|Отправить счет-фактуру"
		);
	
	МассивТиповСообщений = EDI_РазложитьСтрокуВМассивСлов("PORDERS,ORDRSP,DESADV,INVOIC",",");
	
	МассивОрганизаций = Новый Массив;
	СписокЮрЛиц = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
	Для каждого Стр ИЗ СписокЮрЛиц Цикл
		Если ЗначениеЗаполнено(ПараметрыПользователяEDI.НедоступныеОрганизации) Тогда
			Если НЕ ПараметрыПользователяEDI.НедоступныеОрганизации.Найти(Стр.ЮрФизЛицо) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		МассивОрганизаций.Добавить(Стр.ЮрФизЛицо);
	КонецЦикла;
	
	РежимРаботы		= "Поставщик";
	НачалоПериода	= НачалоДня(ТекущаяДата() - 60*60*24*3);//3 дня назад
	КонецПериода	= КонецДня(ТекущаяДата() + 60*60*24*3);//и 3 дня вперед, документы из будущего уже появились
	ПоказыватьЗавершенные	= Ложь;
	
	//теперь перестроим список
	ОбновитьКэшПартнеров();
	
	//поместим сюда кэш партнеров
	ЗапросСКэшемПартнеров = ИнициализироватьЗапросСКэшемПартнеров(ВнешнееХранилище,НачалоПериода,КонецПериода,МассивПартнеров);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТребуемыеДействия",	?(ВнешнееХранилище,СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивТребуемыхДействий)),МассивТребуемыхДействий));
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТипыСообщений",		?(ВнешнееХранилище,СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивТиповСообщений)),МассивТиповСообщений));
	Если ВнешнееХранилище Тогда
		ЗапросСКэшемПартнеров_Внутренний = ИнициализироватьЗапросСКэшемПартнеров(Ложь,НачалоПериода,КонецПериода,МассивПартнеров);//локальная копия запроса
		ЗапросСКэшемПартнеров_Внутренний.УстановитьПараметр("ТребуемыеДействия",МассивТребуемыхДействий);
		ЗапросСКэшемПартнеров_Внутренний.УстановитьПараметр("ТипыСообщений",МассивТиповСообщений);
	КонецЕсли;	
	
	МассивВременныхТаблиц = Новый Массив;
	
	СформироватьВременныеТаблицыДокументов(РежимРаботы,ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний);
	
	ВывестиСписокЗаказов_ДляОтправкиPORDERS(ЗапросСКэшемПартнеров,МассивВременныхТаблиц);
	СформироватьСписокДокументов_ДляОтправкиОжиданияСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,"ORDRSP");
	СформироватьСписокДокументов_ДляОтправкиОжиданияСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,"DESADV");
	СформироватьСписокДокументов_ДляОтправкиОжиданияСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,"INVOIC");
	
	ТаблицаДокументовСообщений = Новый ТаблицаЗначений;//выгрузим все сюда
	
	//выведем содержимое временных таблиц, полученных предыдущими запросами
	ВывестиСписокДокументовСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,МассивТребуемыхДействий,МассивОрганизаций,ТаблицаДокументовСообщений);
	
	ТаблицаТребуемыхДействий = ПолучитьТаблицуТребуемыхДействий(РежимРаботы,ПоказыватьЗавершенные);
	
	Для Каждого НастройкаАвтоотправки Из ТаблицаПартнеровСообщений Цикл

		ТипСообщения = Сред(НастройкаАвтоотправки.ИмяНастройки,14);
		СтрокаТребуемогоДействия = ТаблицаТребуемыхДействий.Найти("Отправить_"+ТипСообщения,"КодДействия");
		Если СтрокаТребуемогоДействия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиНаОтправку = ТаблицаДокументовСообщений.НайтиСтроки(Новый Структура("Партнер,ТребуемоеДействие",НастройкаАвтоотправки.Партнер,СтрокаТребуемогоДействия.Значение));
		
		Для каждого СтрокаСообщения Из СтрокиНаОтправку Цикл
			
			Сообщение = ПодготовитьИсходящееСообщение(ТипСообщения, СтрокаСообщения.Документ);
			Если НЕ (Сообщение.СодержитОшибки = Истина) Тогда
				
				Параметры = Новый Структура();
				Параметры.Вставить("ОтправитьСообщениеИзФормы",	Истина);
				Параметры.Вставить("Сообщение",					Сообщение);
				
				ОтправитьСообщение(ТипСообщения,СтрокаСообщения.Документ,Параметры);
				
				Сообщить_КонтурEDI("Создано сообщение: "+ТипСообщения+" по документу: "+СтрокаСообщения.Документ);
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

//возвращает Истина, если загрузка новых сообщений прошла успешно или была перехвачена в подключаемом модуле
Функция ЗагрузитьНовыеСообщения(ИмяСписка="")
	
	СтандартнаяОбработкаEDI = Истина;
			
	ОбработкаСобытияПодключаемогоМодуля("ПередЗагрузкойНовыхСообщений",СтандартнаяОбработкаEDI,
			Новый Структура("ИмяСписка",
			ИмяСписка));
			
	Если СтандартнаяОбработкаEDI=Ложь Тогда
		Возврат Истина;
	КонецЕсли;		
			
	УчетныеЗаписи = ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");
	
	Для Каждого СтрокаУчетнойЗаписи Из УчетныеЗаписи Цикл//+
		
		Если СтрокаУчетнойЗаписи.НеАктивна=Истина Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не ПроверитьАктивностьПодключения(СтрокаУчетнойЗаписи,Неопределено) Тогда
			ВывестиПредупреждение_КонтурEDI("Не удалось подключиться к серверу."+Символы.ПС
					+"Проверьте наличие доступа в интернет, настройки подключения модуля и правильность логина/пароля учетной записи "+СтрокаУчетнойЗаписи.GLN);
				//раз нет подключения, значит, у нас либо кривой логин/пароль, либо проблемы с FTP/связью. В этом случае нет смысла продолжать.
			Продолжить;//пойдем на следующую учетку.
		КонецЕсли;
			
		ТаблицаТранспортныхЯщиков = Новый ТаблицаЗначений;
		ТаблицаТранспортныхЯщиков.Колонки.Добавить("Каталог",		Новый ОписаниеТипов("Строка"));//для FTP/каталога/DialMail
		ТаблицаТранспортныхЯщиков.Колонки.Добавить("boxId",			Новый ОписаниеТипов("Строка"));//для API
		ТаблицаТранспортныхЯщиков.Колонки.Добавить("lastEventId",	Новый ОписаниеТипов("Строка"));//для API
		ТаблицаТранспортныхЯщиков.Колонки.Добавить("Ссылка");//для API
		
		Если ПротоколОбмена_КонтурEDI="API" Тогда

			ТабОрганизацийAPI = ПолучитьСписокЭлементовСправочника("НашиОрганизации");
			СтрокиОрганизаций = ТабОрганизацийAPI.НайтиСтроки(Новый Структура("УчетнаяЗапись,Неактивная",СтрокаУчетнойЗаписи.Ссылка,Ложь));
			
			Для Каждого СтрокаОрганизации Из СтрокиОрганизаций Цикл
				
				СтрокиЯщиков = ПолучитьСписокЭлементовСправочника("ТранспортныеЯщики",СтрокаОрганизации.Ссылка);
				
				//В этом событии можно убрать лишние ящики, если работаем в РБД с маршрутизацией, отличной от Party
				//Обмен будет выполняться только по тем ящикам, у которых "НеАктивный = Ложь"
				ОбработкаСобытияПодключаемогоМодуля("ОтфильтроватьЯщикиДляПолученияСообщений",,Новый Структура("СтрокиЯщиков",СтрокиЯщиков));

				Для Каждого СтрокаЯщика Из СтрокиЯщиков Цикл
					
					Если Не СтрокаЯщика.НеАктивный Тогда
						НовЯщик = ТаблицаТранспортныхЯщиков.Добавить();
						НовЯщик.boxId		= СтрокаЯщика.id;
						НовЯщик.lastEventId	= СтрокаЯщика.lastEventId;
						НовЯщик.Ссылка		= СтрокаЯщика.Ссылка;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе//FTP, Каталог, DialMail
			//для FTP сделаем виртуальную таблицу транспортных ящиков - фиксированную: Inbox, Reports.
			Для Каждого ИмяЯщика Из EDI_РазложитьСтрокуВМассивСлов("reports,inbox",",") Цикл
				НовЯщик = ТаблицаТранспортныхЯщиков.Добавить();
				НовЯщик.Каталог = ИмяЯщика;
			КонецЦикла;
			
		КонецЕсли;
		
		//получили список ящиков, теперь обойдем их всех
		Для Каждого СтрокаЯщика Из ТаблицаТранспортныхЯщиков Цикл
			//при работе через API сообщения загружаем пачками по несколько штук
			Пока Истина Цикл
				РезультатЗагрузки = ЗагрузитьНовыеСообщенияИзЯщика(СтрокаУчетнойЗаписи,СтрокаЯщика);
				Если Не РезультатЗагрузки.Успешно Тогда
					Возврат Ложь;
				КонецЕсли;
				Если Не РезультатЗагрузки.ВызватьПовторно Тогда
					Прервать;
				КонецЕсли;
				#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
				#КонецЕсли
			КонецЦикла;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//возвращает СтруктураВозврата с 2 свойствами:
//Успешно - если удалось загрузить
//ВызватьПовторно - если в ящике остались еще сообщения (для API)
//под ящиком подразумевается конкретный box_id для API либо имя каталога (inbox/reports) для режимов FTP/DialMail/Каталог
Функция ЗагрузитьНовыеСообщенияИзЯщика(СтрокаУчетнойЗаписи,ТранспортныйЯщик)
	
	СтруктураВозврата = Новый Структура("Успешно,ВызватьПовторно",Ложь,Ложь);

	УчетнаяЗапись = ПолучитьЭлементСправочника("УчетныеЗаписи",СтрокаУчетнойЗаписи.Ссылка);
	
	ЭтоСтатусные = (ТранспортныйЯщик.Каталог="reports");
	//имена файлов на FTP:
	//ok_ fail_
	//https://wiki.skbkontur.ru/pages/viewpage.action?pageId=819427#id-Статусныесообщения-Названиефайлассообщением
	
	КаталогОбмена = ПолучитьЛокальныйКаталогОбменаСFTP(ТранспортныйЯщик.Каталог,УчетнаяЗапись.GLN);
	
	ДанныеТранспортногоЯщика = Новый Структура;
	ДанныеТранспортногоЯщика.Вставить("ЭтоЯщикДляСтатусныхСообщений",	ЭтоСтатусные);
	ДанныеТранспортногоЯщика.Вставить("Каталог",						ТранспортныйЯщик.Каталог);
	ДанныеТранспортногоЯщика.Вставить("box_id",							ТранспортныйЯщик.boxId);
	ДанныеТранспортногоЯщика.Вставить("event_id",						ТранспортныйЯщик.lastEventId);
	
	//РезультатЗагрузки - Структура, передающаяся из функции в функцию
	РезультатЗагрузки = ИнициализироватьСтруктуруРезультатаЗагрузкиСообщений();
	
	//найдем список новых сообщений на сервере/в каталоге
	ПолучитьСписокНовыхСообщений(РезультатЗагрузки,УчетнаяЗапись,ДанныеТранспортногоЯщика);
	
	Если Не РезультатЗагрузки.Успешно Тогда
		ОповеститьОбОшибках(РезультатЗагрузки,"Ошибки при обмене с сервером");
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	Сч=0;
	Для Каждого СтрокаСообщения Из РезультатЗагрузки.ТаблицаСообщений Цикл
		
		Сч = Сч+1;
		Состояние_КонтурEDI("Обрабатываем новые сообщения: "+СокрЛП(сч)+" из "+СокрЛП(РезультатЗагрузки.ТаблицаСообщений.Количество()));
		
		//1. Обработать статусное сообщение из ленты API
		Если ПротоколОбмена_КонтурEDI="API"
			И СтрокаСообщения.EventType<>"NewInboxMessage" Тогда //NewInboxMessage мы будем загружать во врем.файл, а все остальное - замена статусных сообщений, их грузить не надо.
			
			ОбработатьСтатусноеСообщение_API(СтрокаСообщения);
			
			УстановитьЗначениеСвойстваОбъекта(ТранспортныйЯщик.Ссылка,"lastEventId",СтрокаСообщения.event_id);
			Продолжить;
		КонецЕсли;	
		
		//2. Загрузить сообщение во врем.файл
		ИмяВремФайла = ЗагрузитьСообщениеВоВременныйФайл(СтрокаСообщения,КаталогОбмена,УчетнаяЗапись);
		
		Если ИмяВремФайла="" Тогда
			ЗарегистрироватьОшибку(РезультатЗагрузки,"Не удалось получить с сервера сообщение "+СтрокаСообщения.ИмяФайла);
			ОповеститьОбОшибках(РезультатЗагрузки,"Ошибки при обмене с сервером");
			Возврат СтруктураВозврата;
		КонецЕсли;	
		
		//3. Конвертировать сообщение в структуру
		Сообщение = ПрочитатьСообщениеПоНовому(ИмяВремФайла,СтрокаСообщения.ТипСообщения,"Входящее");
		
		Если ТипЗнч(Сообщение)<>Тип("Структура") Тогда
			ЗарегистрироватьОшибку(РезультатЗагрузки,"Не удалось прочитать сообщение "+СтрокаСообщения.ИмяФайла);
			ОповеститьОбОшибках(РезультатЗагрузки,"Ошибки при обмене с сервером");
			Возврат СтруктураВозврата;
		КонецЕсли;	
		
		//4. Сохранить сообщение в базе
		РезультатСохранения = ОбработатьВходящееСообщение(Сообщение);
		
		Если РезультатСохранения.Свойство("Сообщение") Тогда
			//провалидируем, создадим документы и т.д.
			ДействияПослеСохраненияВходящегоСообщения(РезультатСохранения.Сообщение);
		КонецЕсли;	
		
		//5. Удалить сохраненное сообщение с FTP
		//	Не будем удалять сообщения, которые не прошли фильтр точек доставки и т.д.
		Если РезультатСохранения.МожноУдалятьСообщение Тогда
			
			//удалить файл с FTP
			ПараметрыЗагрузки = Новый Структура;
			ПараметрыЗагрузки.Вставить("ПутьКФайлу", Сообщение.ПутьКФайлу);
			ПараметрыЗагрузки.Вставить("GLN",УчетнаяЗапись.GLN);
			
			ПослеУспешнойЗагрузкиСообщения(ПараметрыЗагрузки,ТранспортныйЯщик.Каталог);
			
		КонецЕсли;
		
		//и удалим локальный временный файл
		Ф = Новый Файл(Сообщение.ПутьКФайлу);
		Если Ф.Существует() Тогда
			УдалитьФайлы(Сообщение.ПутьКФайлу);
		КонецЕсли;
		
		//6. сдвинуть границу API
		Если ПротоколОбмена_КонтурEDI="API" Тогда
			УстановитьЗначениеСвойстваОбъекта(ТранспортныйЯщик.Ссылка,"lastEventId",СтрокаСообщения.event_id);
		КонецЕсли;	
		
	КонецЦикла;
	
	//7. Сдвиг границы API
	Если ПротоколОбмена_КонтурEDI="API" Тогда
		
		//если ВызватьПовторно = Истина, то необходимо будет вызвать функцию из интерфейса еще раз. Это только для API
		СтруктураВозврата.ВызватьПовторно = (ТранспортныйЯщик.lastEventId <> РезультатЗагрузки.ИдентификаторПоследнегоСообщения);
		
		//продублируем сдвиг границы, т.к. в НайтиФайлы_API мы могли получить большое количество ИСХОДЯЩИХ, которые мы не грузим
		УстановитьЗначениеСвойстваОбъекта(ТранспортныйЯщик.Ссылка,"lastEventId",РезультатЗагрузки.ИдентификаторПоследнегоСообщения);
		ТранспортныйЯщик.lastEventId = РезультатЗагрузки.ИдентификаторПоследнегоСообщения;

	КонецЕсли;	
	
	СтруктураВозврата.Успешно = Истина;
	Возврат СтруктураВозврата;
	
КонецФункции

//Для сообщения, отправляемого от имени организации с "GLN", возвращает boxId нужного транспортного ящика в API
Функция ПолучитьЯщикДляОтправкиСообщения(GLN)

	//торговые сети с РБД могут переопределить здесь ящики для отправки исходящих сообщений
	СтандартнаяОбработкаEDI = Истина;
	Результат = ОбработкаСобытияПодключаемогоМодуля("ПолучитьЯщикДляОтправкиСообщения",СтандартнаяОбработкаEDI,Новый Структура("GLN",GLN));
	Если СтандартнаяОбработкаEDI=Ложь Тогда
		Возврат Результат;
	КонецЕсли;
	
	СписокОрганизаций = ПолучитьСписокЭлементовСправочника("НашиОрганизации");
	
	СтрокиОрганизаций = СписокОрганизаций.НайтиСтроки(Новый Структура("GLN,Неактивная",GLN,Ложь));
	Если СтрокиОрганизаций.Количество()<>1 Тогда
		Возврат "";
	КонецЕсли;
	
	ОсновнойЯщик = ПолучитьЗначениеСвойстваОбъектаEDI(СтрокиОрганизаций[0].Ссылка, "ОсновнойЯщик");
	Если ОсновнойЯщик=Неопределено Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат ПолучитьЗначениеСвойстваОбъектаEDI(ОсновнойЯщик, "id");

	
КонецФункции	

Функция ОтправитьСообщение(ТипСообщения,ДокументСсылка,Параметры = Неопределено,ОтправитьСразу = Ложь) Экспорт
	
	СообщениеОтправляетсяИзФормы = (НЕ Параметры = Неопределено И Параметры.Свойство("ОтправитьСообщениеИзФормы"));
	
	//Пачка костылей для совместимости со старыми подключаемыми модулями. Видимо, навсегда.
	Если ОтправитьСразу Тогда // сообщения уже созданы, нужно их только отправить
		Сообщение = ПрочитатьСообщение(,ДокументСсылка,ТипСообщения,"Исходящее");
	ИначеЕсли СообщениеОтправляетсяИзФормы Тогда	
		Сообщение = Параметры.Сообщение;//отправляем сообщение, которое уже заполнено, но еще не записано в базу. Надо его сначала записать.
	Иначе
		Сообщение = ПодготовитьИсходящееСообщение(ТипСообщения,ДокументСсылка,Параметры);//сообщение еще не подготовлено, надо подготовить его здесь.
	КонецЕсли;
	
	Если Сообщение = Неопределено
		Или Сообщение.СодержитОшибки = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ОтправитьСразу Тогда
		СохранитьСообщение(Сообщение);
	КонецЕсли;
	
	//Блок для ORDRSP в случае множественных заказов - на рефакторинг в следующих релизах
	Если ТипСообщения = "ORDRSP" Тогда
		
		ОтклоняетсяНезагруженныйЗаказ = 
				(ТипЗнч(Параметры) = Тип("Структура") 
				И Параметры.Свойство("Статус")
				И Параметры.Статус = "Отклонить");
				
		//Если ОтклоняетсяНезагруженныйЗаказ, тогда в Сообщение.ДокументСсылка будет ничего.
		Если Не ОтклоняетсяНезагруженныйЗаказ Тогда
			//продублируем ORDRSP на все связанные сообщения
			ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(Сообщение.ДокументСсылка);
			
			Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
				Если Не ЗначениеЗаполнено(Стр.ORDRSP) 
					И Стр.ORDERS <> Сообщение.СообщениеСсылка
					Тогда
					//создадим копию
					_НовВиртуальноеСообщение			= ПреобразоватьЗначениеДляВнешнегоХранилища(Сообщение.СообщениеСсылка).Скопировать();
					_НовВиртуальноеСообщение.Документ	= ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Документ);
					_НовВиртуальноеСообщение.Статус		= "Отправлен";
					_НовВиртуальноеСообщение.УстановитьНовыйКод();

					СохранитьОбъектСообщения(_НовВиртуальноеСообщение);
					
					//и еще статус документа продублируем
					Если ВнешнееХранилище Тогда
						МЗ = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
					Иначе
						МЗ = РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
					КонецЕсли;	
					МЗ.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Документ);
					
					МЗ.ИмяСтатуса = "Заказ";
					МЗ.Статус = Сообщение.Статус;
					МЗ.Записать();
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
		
		//Возможно, в пачке связанных ORDRSP текущее сообщение уже было отправлено
		СтатусДоставки = ПолучитьСтатусСообщения(Сообщение.СообщениеСсылка, , "ORDRSP");
		Если СтатусДоставки = "Ожидает отправки"
			Или СтатусДоставки = "Отправляется" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	//Здесь сообщение подготовлено, сохранено в базу с нужным статусом.
	//Можем отправить его сразу или дождаться нажатия кнопки "Выполнить обмен".
	
	Если ПараметрыПользователяEDI.ВариантОбмена = "Автоматический" Или ОтправитьСразу Тогда 
		ОтправитьПодготовленноеСообщение(Сообщение.СообщениеСсылка);
	Иначе
		Возврат Неопределено;//сообщение будет передано на сервер после нажатия "Выполнить обмен"
	КонецЕсли;
	
КонецФункции

//возвращает HTTP соединение для скачивания какого-либо файла
//имеется в виду соединение с нашим сайтом edi.kontur.ru или тестовый локальный сервер
Функция ПолучитьСоединениеHTTP(Адрес) Экспорт
	
	мПараметрыТранспорта = ПолучитьПараметрыИнтернетСоединения_KE();
	
	Прокси = Новый ИнтернетПрокси;
	Если мПараметрыТранспорта.ИспользуетсяПрокси Тогда
		Прокси.Пользователь	= мПараметрыТранспорта.ЛогинПрокси;
		Прокси.Пароль		= мПараметрыТранспорта.ПарольПрокси;
		Если ЗначениеЗаполнено(мПараметрыТранспорта.СерверПрокси) Тогда
			Прокси.Установить("http", мПараметрыТранспорта.СерверПрокси, мПараметрыТранспорта.ПортПрокси);
		КонецЕсли;
	КонецЕсли;
	
	СоединениеHTTP = Новый HTTPСоединение(Адрес, , , ,Прокси , Истина);//HTTPS - 443
//	СоединениеHTTP = Новый HTTPСоединение(Адрес, , , ,Прокси , Ложь);//HTTP - 80
	Возврат СоединениеHTTP;
	
КонецФункции	

//получает файл ИмяФайлаНаСервере с Соединения в ИмяЛокальногоФайла
//при обрыве связи возвращает Ложь и удаляет частично скачанный файл
Функция ПолучитьФайлHTTP(мСоединение,ИмяФайлаНаСервере,ИмяЛокальногоФайла) Экспорт
	Попытка
		мСоединение.Получить(ИмяФайлаНаСервере, ИмяЛокальногоФайла);
		мСоединение=Неопределено;
		Возврат Истина;
	Исключение
		Ф=новый Файл(ИмяЛокальногоФайла);
		Если Ф.Существует() Тогда
			УдалитьФайлы(ИмяЛокальногоФайла);
		КонецЕсли;	
		мСоединение=Неопределено;
		Возврат Ложь;
	КонецПопытки;
КонецФункции	

//**********************************************************
//	ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


//Декомпозиция метода "ПередатьСообщениенаСервер"
//Определим по GLN отправителя нужные параметры:
//	учетная запись, каталог обмена (для offline), boxId (для API)
//И допишем их в Структуру "Результат"
Процедура ОпределитьПараметрыОтправкиСообщения(Знач GLN,Результат)
	
	//в Результат добавляются:
	//УчетнаяЗапись
	//boxId
	//АдресКаталогаОбменаEDI
	
	Если УчетныеЗаписи=Неопределено Тогда 
		УчетныеЗаписи = ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");//обновим кэш
	КонецЕсли;
	
	//найдем, по какой учетной записи отправлять
	СтрокиУчетныхЗаписей = УчетныеЗаписи.НайтиСтроки(Новый Структура("GLN,НеАктивна",GLN,Ложь));
	
	Если СтрокиУчетныхЗаписей.Количество()=0 Тогда
		
		ОрганизацияСинонима = НайтиОбъектПоЗначениюСвойства("GLN_Организации",GLN);
		
		Если ОрганизацияСинонима=Неопределено Тогда
			ЗарегистрироватьОшибку(Результат,"Не найдена учетная запись для GLN "+GLN);
			Возврат;
		Иначе
			GLN = ПолучитьЗначениеСвойстваОбъектаEDI(ОрганизацияСинонима,"GLN_Организации");
			СтрокаУчетнойЗаписи = УчетныеЗаписи.Найти(GLN,"GLN");
		КонецЕсли;
		
	Иначе
		СтрокаУчетнойЗаписи = СтрокиУчетныхЗаписей[0];//возьмем первую
	КонецЕсли;
	
	Результат.Вставить("УчетнаяЗапись",			ПолучитьЭлементСправочника("УчетныеЗаписи",СтрокаУчетнойЗаписи.Ссылка));
	
	Если ПротоколОбмена_КонтурEDI = "API" Тогда
		
		Результат.Вставить("boxId",ПолучитьЯщикДляОтправкиСообщения(GLN));
		
		Если Не ЗначениеЗаполнено(Результат.boxId) Тогда
			ЗарегистрироватьОшибку(Результат,"Не найден активный транспортный ящик для отправки сообщения от GLN "+GLN);
			Возврат;
		КонецЕсли;	
		
	ИначеЕсли ПротоколОбмена_КонтурEDI = "Каталог" Тогда
		
		Результат.Вставить("АдресКаталогаОбменаEDI",	ПолучитьПараметрыИнтернетСоединения_KE().АдресКаталогаОбменаEDI);
		
	КонецЕсли;	
	
КонецПроцедуры


//**********************************************************
//	ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//в Параметры должны быть:
//GLN - от чьего имени отправляем сообщение
//ИмяФайла - имя готового файла с сообщением (обычно формируется в %TEMP%, после успешной отправки удаляется)
Функция ПередатьСообщениеНаСервер(Параметры) Экспорт
	
	Результат = ИнициализироватьСтруктуруРезультатаФункции();
	
	ОпределитьПараметрыОтправкиСообщения(Параметры.GLN,Результат);
	
	Если Результат.ТаблицаОшибок.Количество()>0 Тогда
		//не удалось найти учетную запись или boxId для отправки сообщения
		Возврат Результат;
	КонецЕсли;

	ТекущееСоединение = Неопределено;
	
	Файл = Новый Файл(Параметры.ПутьКФайлу);

	Для НомерПопытки=1 По 2 Цикл//у нас 2 прохода: если в первый раз что-то пошло не так, то попробуем переподключиться и уйдем на второй круг. После второго выходим насовсем.
		
		Попытка
			
			ПроверитьАктивностьПодключения(Результат.УчетнаяЗапись,ТекущееСоединение);
			
			Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
				
				Если ТекущееСоединение.ОтправитьФайл(Параметры.ПутьКФайлу,"outbox/"+Файл.Имя) = 0 Тогда
					РазорватьСоединениеDialMail(ТекущееСоединение);
				КонецЕсли;
				
			ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP" Тогда
				
				ТекущееСоединение.Записать(Параметры.ПутьКФайлу,"outbox/"+Файл.Имя);	
				
			ИначеЕсли ПротоколОбмена_КонтурEDI = "Каталог" Тогда
				
				КопироватьФайл(Параметры.ПутьКФайлу,Результат.АдресКаталогаОбменаEDI+"/outbox/"+Файл.Имя);
				
			ИначеЕсли ПротоколОбмена_КонтурEDI = "API" Тогда
				
				ТД = Новый ТекстовыйДокумент;
				ТД.Прочитать(Параметры.ПутьКФайлу,"UTF8");
				_Результат = API_ВыполнитьHTTPЗапрос("/V1/Messages/SendMessage?boxId="+Результат.boxId,"POST",Результат.УчетнаяЗапись,ТД.ПолучитьТекст());
				_РезультатРазобранный = Прочитать_XML_API(_Результат);
				Результат.Вставить("MessageId",	_РезультатРазобранный.MessageId);//сервер назначает нам новый MessageId
				Результат.Вставить("BoxId",		_РезультатРазобранный.BoxId);
				
			КонецЕсли;	
			Результат.Успешно = Истина;
			Прервать;//все успешно
		Исключение
			_Ошибка = ОписаниеОшибки();
			ТекущееСоединение=Неопределено; 
			Если НомерПопытки=2 Тогда
				Сообщить(_Ошибка);
				Результат.Успешно = Ложь;
				ЗарегистрироватьОшибку(Результат,"Не получилось подключиться к серверу");
				Возврат Результат;
			КонецЕсли;	
		КонецПопытки;
	КонецЦикла;
	
	УдалитьФайлы(Параметры.ПутьКФайлу);
	
	Результат.Успешно = Истина;
		
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьСтруктуруРезультатаЗагрузкиСообщений()
	
	РезультатЗагрузки = ИнициализироватьСтруктуруРезультатаФункции();
	
	РезультатЗагрузки.Вставить("ПутьКЗагруженнымФайлам");
	РезультатЗагрузки.Вставить("КаталогОбмена");//похоже, дубль
	РезультатЗагрузки.Вставить("ИдентификаторПоследнегоСообщения");//только для API.
	РезультатЗагрузки.Вставить("ВсеСообщенияЗагружены",	Ложь);
	РезультатЗагрузки.Вставить("ТаблицаСообщений",		Новый ТаблицаЗначений);//основная таблица, куда пишется информация о загруженных сообщениях
	
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("ИмяФайла",				Новый ОписаниеТипов("Строка"));
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("ИмяФайлаНаСервере",	Новый ОписаниеТипов("Строка"));	//только для FTP, DialMail, Каталог
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("box_id",				Новый ОписаниеТипов("Строка"));	//только для API	
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("event_id",				Новый ОписаниеТипов("Строка"));	//только для API
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("message_id",			Новый ОписаниеТипов("Строка"));	//только для API
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("ТипСообщения",			Новый ОписаниеТипов("Строка"));
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("EventType",			Новый ОписаниеТипов("Строка"));	//только для API - вид события (новое сообщение / событие доставки)
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("EventContent",			);	//только для API - новое, для статусных. Сюда будут писаться ОбъектXDTO
	РезультатЗагрузки.ТаблицаСообщений.Колонки.Добавить("Дата",					Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	//С этой же таблицей лучше и использовать ПослеУспешнойЗагрузкиСообщения в будущем. 
	Возврат РезультатЗагрузки;
	
КонецФункции	


Функция ЗагрузитьСообщениеВоВременныйФайл(СтрокаСообщения,КаталогОбмена,УчетнаяЗапись)

	ТекущееСоединение = Неопределено;
	
	ВременныйФайл = Новый Файл(КаталогОбмена + СтрокаСообщения.ИмяФайла);
	Если ВременныйФайл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл.ПолноеИмя);//Если такой файл уже есть в temp, значит, он остался от предыдущей сессии, когда чо-то пошло не так. Удалим его.
	КонецЕсли;	
		
	Для НомерПопытки=1 По 2 Цикл//у нас 2 прохода: если в первый раз что-то пошло не так, то попробуем переподключиться и уйдем на второй круг. После второго выходим насовсем.
		
		Попытка
			ПроверитьАктивностьПодключения(УчетнаяЗапись,ТекущееСоединение);
			Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
				
				Если ТекущееСоединение.ПолучитьФайл("/"+СтрокаСообщения.ИмяФайлаНаСервере, КаталогОбмена + СтрокаСообщения.ИмяФайла) = 0 Тогда
					РазорватьСоединениеDialMail(ТекущееСоединение);
				КонецЕсли;
				
			ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP" Тогда
				
				ТекущееСоединение.Получить(СтрокаСообщения.ИмяФайлаНаСервере, КаталогОбмена + СтрокаСообщения.ИмяФайла);
				
			ИначеЕсли ПротоколОбмена_КонтурEDI = "Каталог" Тогда
				
				КопироватьФайл(СтрокаСообщения.ИмяФайлаНаСервере, КаталогОбмена + СтрокаСообщения.ИмяФайла);
				
			ИначеЕсли ПротоколОбмена_КонтурEDI = "API" Тогда
				
				АдресСообщения = "/V1/Messages/GetInboxMessage?boxId="+СтрокаСообщения.box_id+"&messageId="+СтрокаСообщения.message_id;
				РезультатЗапроса = API_ВыполнитьHTTPЗапрос(АдресСообщения,"GET",УчетнаяЗапись);
				Сообщение = Прочитать_XML_API(РезультатЗапроса);
				BASE64Значение(Сообщение.Data.MessageBody).Записать(КаталогОбмена + СтрокаСообщения.ИмяФайла);
				
			КонецЕсли;
			
			//установить файлу дату изменения равной дате этого файла на FTP
			ВремФайл= новый Файл(КаталогОбмена + СтрокаСообщения.ИмяФайла);
			Если ВремФайл.Существует() Тогда
				ВремФайл.УстановитьВремяИзменения(СтрокаСообщения.Дата);
			КонецЕсли;
			
			Возврат КаталогОбмена + СтрокаСообщения.ИмяФайла;//успешно загрузили, вернем имя полученного файла
			
		Исключение
			
			_Ошибка = ОписаниеОшибки();
			Если НомерПопытки=2 Тогда
				Возврат "";
			КонецЕсли;	
			
		КонецПопытки;
		
	КонецЦикла;	//2 попытки переподключения
	
	Возврат "";
	
КонецФункции


Функция ПослеУспешнойЗагрузкиСообщения(Параметры,Папка = "inbox") //удаляет либо фтп файл либо локальный фтп файл
	
	Перем ПутьКФайлу;
	
	Если Не Параметры.Свойство("ПутьКФайлу",ПутьКФайлу) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПротоколОбмена_КонтурEDI = "API" Тогда
		//не надо больше ничего делать, файлы из API не удаляются
		Возврат Неопределено;
	КонецЕсли;	
	
	УчетнаяЗапись = НайтиУчетнуюЗаписьДляУдаленияСообщения(УчетныеЗаписи,Параметры.GLN,Параметры.ПутьКФайлу);
	Если УчетнаяЗапись=Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда
		
		Если ПроверитьАктивностьПодключения(УчетнаяЗапись) Тогда
			
			Файл = Новый Файл(ПутьКФайлу);
			Попытка 
				УдалитьФайлы(ПолучитьПараметрыИнтернетСоединения_KE().АдресКаталогаОбменаEDI+"\"+Папка+"\"+Файл.Имя); //с псевдо фтп
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ПротоколОбмена_КонтурEDI = "DialMail" Или ПротоколОбмена_КонтурEDI = "FTP" Тогда
		
		ТекущееСоединение = Неопределено;
		Файл = Новый Файл(ПутьКФайлу);
		
		Для НомерПопытки=1 По 2 Цикл//у нас 2 прохода: если в первый раз что-то пошло не так, то попробуем переподключиться и уйдем на второй круг. После второго выходим насовсем.
		
			Попытка
				
				ПроверитьАктивностьПодключения(УчетнаяЗапись,ТекущееСоединение);
				Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
					Если ТекущееСоединение.УдалитьФайл("/"+Папка+"/"+Файл.Имя) = 0
						И СокрЛП(ТекущееСоединение.lastserveranswer)<>"550 File not found" Тогда
						//файла могло уже и не быть на сервере. 
						//На самом деле это костыль, т.к. в ОбработатьВходящиеСообщения сохранение сообщения иногда вызывается дважды
						РазорватьСоединениеDialMail(ТекущееСоединение);	
				    КонецЕсли;	
				Иначе
					ТекущееСоединение.Удалить(Папка+"/"+Файл.Имя);
				КонецЕсли;
				Прервать; //все успешно
				
			Исключение
				
				_Ошибка = ОписаниеОшибки();
				
				Если Найти(_Ошибка,"Путь не найден")<>0 Тогда
					Прервать;//все ок, просто файл был уже удален кем-то, например, с соседнего компа при обмене
				КонецЕсли;	
				
				Если НомерПопытки=2 Тогда
					Возврат Неопределено;
				КонецЕсли;	
				
			КонецПопытки;
			
		КонецЦикла;//2 попытки переподключения
			
	КонецЕсли;
	
КонецФункции

Функция НайтиУчетнуюЗаписьДляУдаленияСообщения(УчетныеЗаписи,GLN,ПутьКФайлу)
	
	УчетнаяЗапись = неопределено;
	 
	//найдем, по какой учетной записи удалять
	ЕстьАктивнаяУЗДляУдаления = истина;
	УчетнаяЗапись=Неопределено;
	
	ПараметрыОтбораУЗ = Новый Структура;
	ПараметрыОтбораУЗ.Вставить("GLN",GLN);
	ПараметрыОтбораУЗ.Вставить("НеАктивна",ложь);
	
	ПодходящиеУчетныеЗаписи = УчетныеЗаписи.НайтиСтроки(ПараметрыОтбораУЗ);
	Если ПодходящиеУчетныеЗаписи.Количество()>0 Тогда 
		УчетнаяЗапись = ПодходящиеУчетныеЗаписи[0];
	иначе
		УчетнаяЗапись = УчетныеЗаписи.Найти(GLN,"GLN");
		ЕстьАктивнаяУЗДляУдаления = ложь;
	КонецЕсли;
	
	Если УчетнаяЗапись = Неопределено 
		Или (УчетнаяЗапись.НеАктивна = Истина и ЕстьАктивнаяУЗДляУдаления)
	Тогда
		Сообщить_КонтурEDI("Сообщение "+ПутьКФайлу+" не было удалено с сервера. Проверьте настройки учетной записи с GLN "+GLN);
		//такое может возникнуть, если в учетной записи указали неправильный GLN. В будущем будем пересматривать логику работы с учетными записями.
		Возврат Неопределено;
	КонецЕсли;
	
	 Возврат УчетнаяЗапись;
КонецФункции


//**********************************************************
//	ПОЛУЧЕНИЕ СПИСКОВ СООБЩЕНИЙ

Процедура ПолучитьСписокНовыхСообщений(РезультатЗагрузки,УчетнаяЗапись,ДанныеТранспортногоЯщика)
	                    
	ТекущееСоединение = Неопределено;
	РезультатЗагрузки.Успешно = Истина;
	
	Если ДанныеТранспортногоЯщика.ЭтоЯщикДляСтатусныхСообщений Тогда
		Состояние_КонтурEDI("Запрашиваем статусные сообщения");
		ЯщикПоискаФайлов = "reports";
		ЭтоСтатусные = Истина;
	Иначе
		Состояние_КонтурEDI("Запрашиваем новые сообщения");
		ЯщикПоискаФайлов = "inbox";
		ЭтоСтатусные = Ложь;
	КонецЕсли;
	
	//сначала получим список сообщений
	
	Для НомерПопытки=1 По 2 Цикл//у нас 2 прохода: если в первый раз что-то пошло не так, то попробуем переподключиться и уйдем на второй круг. После второго выходим насовсем.
		
		Попытка
			ПроверитьАктивностьПодключения(УчетнаяЗапись,ТекущееСоединение);
			//маску поиска файлов оставить внутри функций поиска
			Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
				НайтиФайлы_DialMail(ЯщикПоискаФайлов, "*.xml",ТекущееСоединение,РезультатЗагрузки);
			ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP"
				Или ПротоколОбмена_КонтурEDI = "Каталог" Тогда
				НайтиФайлы_FTP_Каталог(ЯщикПоискаФайлов, "*.xml",ТекущееСоединение,РезультатЗагрузки);
			ИначеЕсли ПротоколОбмена_КонтурEDI = "API" Тогда
				НайтиФайлы_API(УчетнаяЗапись,ДанныеТранспортногоЯщика,РезультатЗагрузки);
			КонецЕсли;
			
			Если ПротоколОбмена_КонтурEDI = "DialMail"
				Или ПротоколОбмена_КонтурEDI = "FTP"
				Или ПротоколОбмена_КонтурEDI = "Каталог"
			Тогда
			    РезультатЗагрузки.ВсеСообщенияЗагружены = Истина;
			КонецЕсли;	
			
			Прервать;//успешно нашли, идем дальше за цикл
			
		Исключение
			РезультатЗагрузки.ТаблицаСообщений.Очистить();
			_Ошибка = ОписаниеОшибки();
			Сообщить_КонтурEDI(_Ошибка);
			
			Если НомерПопытки=2 Тогда
				РезультатЗагрузки.Успешно = Ложь;
				ЗарегистрироватьОшибку(РезультатЗагрузки,"Не получилось подключиться к серверу");
				Возврат;
			КонецЕсли;	
		КонецПопытки;
	КонецЦикла;	
	
	//проставим типы сообщений - это времянка, потом будем определять тип сообщения по содержимому
	Для Каждого СтрокаСообщения Из РезультатЗагрузки.ТаблицаСообщений Цикл
		Если ПротоколОбмена_КонтурEDI = "API" Тогда
			СтрокаСообщения.ТипСообщения	= СтрокаСообщения.ТипСообщения;
		Иначе
			Если ЭтоСтатусные Тогда
				СтрокаСообщения.ТипСообщения = "reports";
			Иначе	
				ПозицияРазделителя = Найти(СтрокаСообщения.ИмяФайла,"_");
				СтрокаСообщения.ТипСообщения	= ВРЕГ(Лев(СтрокаСообщения.ИмяФайла,ПозицияРазделителя-1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Функция НайтиФайлы_FTP_Каталог(Каталог, МаскаФильтра,Соединение,РезультатЗагрузки)
	
	//работа с FTP и каталогом очень похожа, поэтому оставим их в единой функции
	Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда //добавить тут автоопределение каталога - эмулятора FTP
		НайденныеФайлы = НайтиФайлы(ПолучитьПараметрыИнтернетСоединения_KE().АдресКаталогаОбменаEDI+"\"+Каталог, МаскаФильтра);
	Иначе	
		НайденныеФайлы = Соединение.НайтиФайлы("/"+Каталог, МаскаФильтра);
	КонецЕсли;	
	
	Для Каждого ТекущийФайл Из НайденныеФайлы Цикл
		Если ТекущийФайл.ЭтоФайл() 
			И ТекущийФайл.Размер()>0
			//пропускаем каталоги и пустые файлы
		Тогда
			
			НоваяСтрока						= РезультатЗагрузки.ТаблицаСообщений.Добавить();
			НоваяСтрока.ИмяФайлаНаСервере	= ТекущийФайл.ПолноеИмя;
			НоваяСтрока.ИмяФайла			= ТекущийФайл.ИмяБезРасширения+ТекущийФайл.Расширение;
			НоваяСтрока.Дата				= ТекущийФайл.ПолучитьВремяИзменения();
			//на рефакторинг: тип сообщения определять по имени файла здесь так же, как в API по метаданным
			
		КонецЕсли;
	КонецЦикла;
	
	РезультатЗагрузки.ТаблицаСообщений.Сортировать("Дата Возр");
	
	Возврат РезультатЗагрузки.ТаблицаСообщений;
	
КонецФункции

Функция НайтиФайлы_DialMail(Каталог, МаскаФильтра,Соединение,РезультатЗагрузки)
	
	РезультатПолученияСписка = Соединение.Лист("/"+Каталог, МаскаФильтра);
	
	Если РезультатПолученияСписка = 1 Тогда
		
		КоличествоФайлов = Соединение.КоличествоФайлов();
		
		Для к = 1 По КоличествоФайлов Цикл
			Если Соединение.ЭтоКаталог(к) = 0 Тогда
				
				ИмяТекущегоФайла = Соединение.ПолучитьИмяФайла(к);
				ТекущийФайл = Новый Файл("/"+Каталог+"/"+ИмяТекущегоФайла);
									
				Дата  = Соединение.ПолучитьДатуФайла(к);
				Время = Соединение.ПолучитьВремяФайла(к);
				
				НоваяСтрока = РезультатЗагрузки.ТаблицаСообщений.Добавить();
				НоваяСтрока.ИмяФайлаНаСервере	= "/"+Каталог+"/"+ИмяТекущегоФайла;
				НоваяСтрока.ИмяФайла			= ИмяТекущегоФайла;
				НоваяСтрока.Дата				= Дата( Число(Прав(Дата, 4)), Число(Сред(Дата,4,2)),  Число(Лев(Дата,2)),   Число(Лев(Время,2)), Число(Сред(Время,4,2)), Число(Прав(Время,2)) );
				//на рефакторинг: тип сообщения определять по имени файла здесь так же, как в API по метаданным
				
			КонецЕсли;
		КонецЦикла;
		
		РезультатЗагрузки.ТаблицаСообщений.Сортировать("Дата Возр");
		
	Иначе
		
		//считаем, что соединение пропало, вызываем исключение
		РазорватьСоединениеDialMail(Соединение);	
		
	КонецЕсли;
	
	Возврат Истина;//убрать
	
КонецФункции

Функция НайтиФайлы_API(УчетнаяЗапись,ДанныеТранспортногоЯщика,РезультатЗагрузки)
	
	РазмерБуфера = 100;//сколько сообщений грузить за один раз
	
	ТекНачальноеСобытие = Неопределено; //точка отсчета, с которой будем грузить сообщения
	
	Если СтрДлина(ДанныеТранспортногоЯщика.event_id) = 8 Тогда
		//есть возможность в настройках учетной записи прописать сюда дату в формате ГГГГММДД
		//тогда первые сообщения будем грузить с этой даты, а не с ID сообщения
		//так можно перезагружать потерянные сообщения
		
		Попытка
			НачалоПериода = Дата(ДанныеТранспортногоЯщика.event_id);
		Исключение
			ВызватьИсключение "Неправильная дата в настройках транспортного ящика";
		КонецПопытки;
		
	Иначе
		
		Попытка
			_ТестИД = Новый УникальныйИдентификатор(ДанныеТранспортногоЯщика.event_id);
			ТекНачальноеСобытие = ДанныеТранспортногоЯщика.event_id;
		Исключение
			ВызватьИсключение "Неправильный ID последнего сообщения в настройках транспортного ящика";
		КонецПопытки;
		
	КонецЕсли;
	
	Состояние_КонтурEDI("Получение сообщений...");
		
	Если Не ЗначениеЗаполнено(ТекНачальноеСобытие) Тогда
		//			АдресЗапросаСобытий = "/V1/Messages/GetEventsFrom?boxId="+boxId+"&fromDateTime="+Формат(НачалоПериода,"ДФ=yyyy-MM-ddTHH:mm:ss.0000000Z")+"&count=20";
		РазмерБуфера = 1; //с ограничением GetEventsFrom срабатывает быстрее
		АдресЗапросаСобытий = "/V1/Messages/GetEventsFrom?boxId="+ДанныеТранспортногоЯщика.box_id+"&fromDateTime="+Формат(НачалоПериода,"ДФ=yyyy-MM-dd; ДП=00010101")+"&count="+Формат(РазмерБуфера,"ЧГ=0");
	Иначе	
		АдресЗапросаСобытий = "/V1/Messages/GetEvents?boxId="+ДанныеТранспортногоЯщика.box_id+"&exclusiveEventId="+ТекНачальноеСобытие+"&count="+Формат(РазмерБуфера,"ЧГ=0");
	КонецЕсли;
	
	РезультатЗапроса = API_ВыполнитьHTTPЗапрос(АдресЗапросаСобытий,"GET",УчетнаяЗапись);
	мСобытия = Прочитать_XML_API(РезультатЗапроса,"BoxEventBatch");
	МассивСобытий = мСобытия.Events.BoxEvent;
	КоличествоСобытий = МассивСобытий.Количество();
	ТекНачальноеСобытие = Неопределено;
	
	Для н = 1 по КоличествоСобытий Цикл
		
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ИДСообщения = Неопределено;
		
		ТекущееСобытие = МассивСобытий[н-1];
		ТекНачальноеСобытие = ТекущееСобытие.EventId;//отметка, с которой будем грузить следующую пачку сообщений
		Если ЗначениеЗаполнено(ТекНачальноеСобытие) Тогда
			РезультатЗагрузки.ИдентификаторПоследнегоСообщения = Строка(ТекНачальноеСобытие);
			//запомним ID сообщения, с которого надо выполнять обмен в следующий раз
		КонецЕсли;	
		
		Если ТекущееСобытие.EventType = "NewInboxMessage" Тогда
			
			Если ТекущееСобытие.EventContent.InboxMessageMeta.MessageFormat<>"KonturXml" Тогда
				Сообщить_КонтурEDI("Получено сообщение в неправильном формате. Обратитесь в техподдержку.");
				Продолжить;//нет смысла читать сообщения в чужом формате, если они вдруг сюда попали
			КонецЕсли;
			
			Если ВРЕГ(ТекущееСобытие.EventContent.InboxMessageMeta.DocumentDetails.DocumentType)="STSMSG" Тогда
				
				Если ПолучитьПараметрыИнтернетСоединения_KE().НеЗагружатьСтатусныеСообщения=Истина Тогда
					//это статусные, через API их можно не грузить
					//пока что оставим, т.к. на момент перехода могут быть необработанные счета-фактуры
					Продолжить;
				КонецЕсли;
				
				ТипСообщения = "reports";
				ТипСообщенияКаталог = "reports";
				ИДСообщения = ТекущееСобытие.EventContent.InboxMessageMeta.MessageId;
				_boxid = ТекущееСобытие.EventContent.InboxMessageMeta.boxId;
				
			Иначе
				
				//это входящие, их грузим
				ТипСообщения = ВРЕГ(ТекущееСобытие.EventContent.InboxMessageMeta.DocumentDetails.DocumentType);
				
				Если Найти("/PORDERS/ORDERS/ORDRSP/DESADV/RECADV/INVOIC/RETANN/ALCRPT/RETDES/","/"+ТипСообщения+"/")=0 Тогда
					Продолжить;//остальные сообщения не обрабатываем
				КонецЕсли;
				
				ТипСообщенияКаталог = "inbox";
				ИДСообщения = ТекущееСобытие.EventContent.InboxMessageMeta.MessageId;
				_boxid = ТекущееСобытие.EventContent.InboxMessageMeta.boxId;

			КонецЕсли;
			
			//создадим запись в списке сообщений на загрузку
			НовСтрока = РезультатЗагрузки.ТаблицаСообщений.Добавить();
			НовСтрока.box_id				= _boxid;
			НовСтрока.message_id			= ИДСообщения;
			НовСтрока.event_id				= ТекущееСобытие.EventId;
			НовСтрока.ТипСообщения			= ТипСообщения;
			НовСтрока.ИмяФайлаНаСервере		= ""+ТипСообщения+"_"+ИДСообщения+"_"+_boxid+".xml";//надо ли это здесь?
			НовСтрока.ИмяФайла				= НовСтрока.ИмяФайлаНаСервере;
			НовСтрока.Дата					= ДатаXML_в_ДатаВремя1С(ТекущееСобытие.EventDateTime);
			НовСтрока.EventType				= ТекущееСобытие.EventType;
			НовСтрока.EventContent			= ТекущееСобытие.EventContent;
			
		ИначеЕсли ТекущееСобытие.EventType = "NewOutboxMessage" Тогда
			//Это следы исходящих сообщений, они нам не нужны
			Продолжить;
		
		Иначе// не NewInboxMessage, не NewOutboxMessage, значит, событие доставки
			
			НовСтрока = РезультатЗагрузки.ТаблицаСообщений.Добавить();
			НовСтрока.EventContent			= ТекущееСобытие.EventContent;
			НовСтрока.EventType				= ТекущееСобытие.EventType;
			НовСтрока.event_id				= ТекущееСобытие.EventId;
		
		КонецЕсли;	
		
	КонецЦикла;
	
	Если КоличествоСобытий<РазмерБуфера Тогда
		РезультатЗагрузки.ВсеСообщенияЗагружены = Истина;
	КонецЕсли;	
		
	Если КоличествоСобытий=0 Тогда//нет новых сообщений
		РезультатЗагрузки.ИдентификаторПоследнегоСообщения = ДанныеТранспортногоЯщика.event_id;//оставим входящий ID последнего сообщения
		РезультатЗагрузки.ВсеСообщенияЗагружены = Истина;
	Иначе
		РезультатЗагрузки.ИдентификаторПоследнегоСообщения = мСобытия.LastEventId;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//**********************************************************
//	ИНИЦИАЛИЗАЦИЯ ПОДКЛЮЧЕНИЙ

//Проверяет, живо ли соединение для УчетнаяЗапись, и при необходимости переподключает.
//Новое соединение передает в СоединениеОбъект, а возвращает Истина или Ложь, в зависимости от того, живо ли соединение и удалось ли переподключиться
Функция ПроверитьАктивностьПодключения(УчетнаяЗапись,СоединениеОбъект=Неопределено)
	
	Если ПротоколОбмена_КонтурEDI=Неопределено Тогда 
		ПротоколОбмена_КонтурEDI=ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI");
	КонецЕсли;
	
	мПараметрыТранспорта = ПолучитьПараметрыИнтернетСоединения_KE();
	
	Если ПротоколОбмена_КонтурEDI = "Каталог" Тогда
		
		АдресКаталогаОбменаEDI				= мПараметрыТранспорта.АдресКаталогаОбменаEDI;
		
		Если НЕ ЗначениеЗаполнено(АдресКаталогаОбменаEDI) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если  ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI) и 
			ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI+"\Inbox")
			и ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI+"\Outbox")
			и ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI+"\Reports")
			и ПроверитьСуществованиеФайлаКаталога(АдресКаталогаОбменаEDI+"\Settings")
			Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	//остались 2 варианта - FTP и  DialMail
	
	СоединениеОбъект = ПолучитьОбъектСоединенияИзКэша(УчетнаяЗапись);
	
	Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
		
		Если (Строка(ТипЗнч(СоединениеОбъект)) = "НеизвестныйОбъект"//похоже на объект DialMail
			или Строка(ТипЗнч(СоединениеОбъект)) = "AddIn.FTP")//точно DialMail
			И СокрЛП(СоединениеОбъект.Команда("noop")) = ("200 OK") Тогда
			Возврат Истина;
		КонецЕсли;	
		
	ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP" Тогда
		
		Если СоединениеОбъект <> Неопределено
			И ТипЗнч(СоединениеОбъект) = Тип("FTPСоединение") Тогда
			Возврат Истина;  // соединение активно, заново не подключаемся
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись.Логин) Тогда
	//		Или ПустаяСтрока(мПараметрыТранспорта.Сервер) //для API сервер не нужен, он фиксированный.
	//Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Сч=1 По 5 Цикл //пробуем 5 раз переподключиться
	
		СоединениеОбъект = Неопределено;//сбросим объект соединения
		
		Попытка
			
			Если ПротоколОбмена_КонтурEDI = "DialMail" Тогда
				СоединениеОбъект = ПолучитьСоединениеDialMail(УчетнаяЗапись.Логин, УчетнаяЗапись.Пароль);
			ИначеЕсли ПротоколОбмена_КонтурEDI = "FTP" Тогда
				СоединениеОбъект = Новый FTPСоединение(
							СокрЛП(мПараметрыТранспорта.Сервер), 
							мПараметрыТранспорта.Порт, 
							СокрЛП(УчетнаяЗапись.Логин), 
							СокрЛП(УчетнаяЗапись.Пароль),
							, 
							мПараметрыТранспорта.ПассивныйРежим,);
			КонецЕсли;
			
			ПоместитьОбъектСоединенияВКэш(УчетнаяЗапись,СоединениеОбъект);//и кэшируем сразу
			Возврат Истина;

		Исключение
			
			Состояние_КонтурEDI("Потеряно соединение с ФТП сервером, восстанавливаю...");
			_ОписаниеОшибки = ОписаниеОшибки(); //Встроенный механизм FTP выдаст "Login denied", DialMail - "530 Login or password incorrect!"
			Если Найти(_ОписаниеОшибки,"Login denied")<>0 Тогда
				ВывестиПредупреждение_КонтурEDI("Неправильный пароль для логина "+УчетнаяЗапись.Логин);
				Возврат Ложь;//Прервать;
			КонецЕсли;	
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСоединениеDialMail(ЛогинFTP, ПарольFTP, КоличествоПопыток = 10)
	
	мПараметрыТранспорта = ПолучитьПараметрыИнтернетСоединения_KE();
	
	Если КомпонентаDialMailПодключена <> Истина Тогда
		
		КомпонентаDialMailПодключена = ПодключитьВнешнююКомпоненту_КонтурEDI("AddIn.FTP");
				
	КонецЕсли;
	
	Если КомпонентаDialMailПодключена Тогда
	
		Соединение = Новый("Addin.FTP");
		
		Если мПараметрыТранспорта.ИспользуетсяПрокси Тогда
			Соединение.ХостПрокси 			 = СокрЛП(мПараметрыТранспорта.СерверПрокси);
			Соединение.ПортПрокси 			 = СокрЛП(мПараметрыТранспорта.ПортПрокси);
			Соединение.ИмяПользователяПрокси = СокрЛП(мПараметрыТранспорта.ЛогинПрокси);
			Соединение.ПарольПрокси 		 = СокрЛП(мПараметрыТранспорта.ПарольПрокси);
			Соединение.ИспользоватьПрокси 	 = мПараметрыТранспорта.ТипПрокси;
		КонецЕсли;
			
		Если Соединение.Подключиться(
				СокрЛП(мПараметрыТранспорта.Сервер), 
				мПараметрыТранспорта.Порт, 
				СокрЛП(ЛогинFTP), 
				СокрЛП(ПарольFTP), 
				мПараметрыТранспорта.ПассивныйРежим, 
				КоличествоПопыток)
				= 1 Тогда
			Возврат Соединение;
		Иначе
			Если СокрЛП(Соединение.lastserveranswer)="530 Login or password incorrect!" Тогда
				Соединение = Неопределено;
				ВызватьИсключение "Login denied";//эмулируем ошибку FTP, встроенного в платформу
			КонецЕсли;	
			РазорватьСоединениеDialMail(Соединение);
		КонецЕсли;
		
	Иначе
	    РазорватьСоединениеDialMail(Соединение);
	КонецЕсли;
	
КонецФункции

Процедура РазорватьСоединениеDialMail(Соединение)
	
	Соединение = Неопределено;
	ВызовИсключения = 1/0;	
	
КонецПроцедуры

//при работе с несколькими учетными записями будем кэшировать подключения для обмена по FTP
Функция ПолучитьОбъектСоединенияИзКэша(УчетнаяЗапись)
	//переделать на ТаблицуЗначений, или, возможно, писать прямо в УчетнуюЗапись
	Если КэшСоединений_КонтурEDI=Неопределено Тогда
		КэшСоединений_КонтурEDI = Новый Структура;
	КонецЕсли;
	
	ТекОбъект = Неопределено;
	КэшСоединений_КонтурEDI.Свойство("_"+УчетнаяЗапись.GLN,ТекОбъект);
		
	Возврат ТекОбъект;
КонецФункции	

Процедура ПоместитьОбъектСоединенияВКэш(УчетнаяЗапись,ОбъектСоединения)
	Если КэшСоединений_КонтурEDI=Неопределено Тогда
		КэшСоединений_КонтурEDI = Новый Структура;
	КонецЕсли;
	
	Если КэшСоединений_КонтурEDI.Свойство("_"+УчетнаяЗапись.GLN) Тогда
		КэшСоединений_КонтурEDI.Удалить("_"+УчетнаяЗапись.GLN);
	КонецЕсли;	
	
	КэшСоединений_КонтурEDI.Вставить("_"+УчетнаяЗапись.GLN,ОбъектСоединения);
КонецПроцедуры

Функция ПолучитьЛокальныйКаталогОбменаСFTP(ВидКаталога,GLN_УчетнойЗаписи)
	
	_Разделитель = "\";
	ПутьКВременномуКаталогу =  КаталогВременныхФайлов()+"КонтурEDI_"+GLN_УчетнойЗаписи+_Разделитель+ВидКаталога;
	КаталогНаДиске = Новый Файл(ПутьКВременномуКаталогу);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПутьКВременномуКаталогу);
	КонецЕсли;
	
	Возврат ПутьКВременномуКаталогу+?(Прав(ПутьКВременномуКаталогу,1)=_Разделитель,"",_Разделитель);
	
КонецФункции

//Возвращает Структуру с параметрами прокси, сервером FTP, адресом каталога обмена и т.д.
Функция ПолучитьПараметрыИнтернетСоединения_KE() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("ПолучитьПараметрыИнтернетСоединения_KE");
	
	Если Результат = Неопределено Тогда
		
		Результат = ПолучитьСписокСвойствEDI(
				"ИспользуетсяПрокси
				|ЛогинПрокси
				|ПарольПрокси
				|СерверПрокси
				|ПортПрокси
				|ТипПрокси
				|Сервер
				|Порт
				|НеЗагружатьСтатусныеСообщения
				|АдресКаталогаОбменаEDI"
			);
		
		Результат.ИспользуетсяПрокси = (Результат.ИспользуетсяПрокси = Истина);
		Результат.Вставить("ПассивныйРежим",			Истина);//никто не снимает этот флаг, и правильно.
		
		Если Не ЗначениеЗаполнено(Результат.Порт) Тогда
			Результат.Порт = 21;
		КонецЕсли;
	
		ЭДО_Кэш_Поместить("ПолучитьПараметрыИнтернетСоединения_KE",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

//**********************************************************
//	API

Функция API_КлючРазработчика() Экспорт
	
	Если ЭтоТестовыйAPI() Тогда
		Возврат "Volodkin-a5e22f98-1b52-425f-bc53-f63046e5b662";
	Иначе
		Возврат "1c_4_03_012-3954e2b9-f430-4264-87bf-4475d5d8bc57";
	КонецЕсли;

КонецФункции

//передает на сервер логин и пароль учетной записи вместе с ключом разработчика. При успешной авторизации записывает в УчетнаяЗапись полученный токен
Функция API_Авторизоваться(УчетнаяЗапись)
	
	Заголовки="Authorization: KonturEdiAuth konturediauth_api_client_id="+API_КлючРазработчика()+" , konturediauth_login="""+УчетнаяЗапись.Логин+""" , konturediauth_password="""+УчетнаяЗапись.Пароль+"""";
	
	ИмяФайлаЗапроса=ПолучитьИмяВременногоФайла();
	ТД=Новый ТекстовыйДокумент;
	ТД.Записать(ИмяФайлаЗапроса,КодировкаТекста.UTF8);//чтоб хоть что-то туда записалось
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	Попытка
		Состояние_КонтурEDI("Авторизация на сервере...");
		СоединениеАПИ.ОтправитьДляОбработки(ИмяФайлаЗапроса,"/V1/Authenticate",ИмяФайлаОтвета,Заголовки);
		ТД=Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);
		Токен=ТД.ПолучитьТекст();
		УдалитьФайлы(ИмяФайлаОтвета);
	Исключение
		Сообщить_КонтурEDI(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
	
	УчетнаяЗапись.Токен = Токен;
	УстановитьЗначениеСвойстваОбъекта(УчетнаяЗапись.Ссылка,"Токен",Токен);//сразу закинем в базу
	
	Возврат Истина; //удалось
	
КонецФункции

//выдает список сообщений для каждого партнера, подключенного в админке к этой организации
//под организацией пока что понимаем учетную запись и предполагаем, что она одна-единственная
Функция API_ПолучитьПараметрыСообщений(УчетнаяЗапись) Экспорт
	
	МассивBoxID = Новый Массив;
	//Если Не ЗначениеЗаполнено(УчетнаяЗапись.box_id_inbox) Тогда
		ТаблицаBoxID = API_ПолучитьТаблицуBoxID(УчетнаяЗапись.GLN,"inbox",УчетнаяЗапись);
		МассивBoxID = ТаблицаBoxID.ВыгрузитьКолонку("boxId");
	//Иначе
	//	МассивBoxID.Добавить(УчетнаяЗапись.box_id_inbox);
	//КонецЕсли;	
	
	Для Каждого Эл Из МассивBoxID Цикл
		//вернем первый попавшийся пока
		АдресЗапроса = "/V1/Messages/GetBoxDocumentsSettings?boxId="+Эл;
		
		ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапроса,"GET",УчетнаяЗапись);
		
		Если ОтветСтрокой = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ОтветРазобранный = Прочитать_XML_API(ОтветСтрокой,"BoxDocumentsSettings");
		
		Возврат ОтветРазобранный.DocumentsSettingsForPartner;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

//ТипЯщика = "reports" / "inbox" 
Функция API_ПолучитьТаблицуBoxID(GLN,ТипЯщика,УчетнаяЗапись) Экспорт
	
	АдресЗапросаBoxesInfo = "/V1/Boxes/GetBoxesInfo";
	
	ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапросаBoxesInfo,"GET",УчетнаяЗапись);
	Если ОтветСтрокой = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	СведенияОЯщиках = Прочитать_XML_API(ОтветСтрокой,"BoxesInfo");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("boxId");
	Таблица.Колонки.Добавить("partyId");
	
	МассивPartyID = Новый Массив;
	
	Для Каждого Ящик Из СведенияОЯщиках.Boxes.BoxInfo Цикл
		
		Если 
			//ВРЕГ(Ящик.BoxSettings.InboxRelativePath) = ВРЕГ(ТипЯщика) 
			
			Ящик.BoxSettings.TransportType = "Api"
			Или ВРЕГ(Ящик.BoxSettings.InboxRelativePath) = ВРЕГ(ТипЯщика) 
			
			Тогда
			
			Нов = Таблица.Добавить();
			Нов.boxId = Строка(Ящик.id);
			Нов.partyId = Строка(Ящик.partyId);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	//удалено: сейчас нет необходимости разделять по доступным организациям
	//ТабPartyID = Таблица.Скопировать(,"partyId");
	//ТабPartyID.Свернуть("partyId");
	//Если ТабPartyID.Количество()<>1 Тогда
	//	//пока мы не можем получить GLN из Boxes, будем проверять: если пользователю доступно более одного ящика, то не будем грузить ничего
	//	Возврат Новый ТаблицаЗначений;//вернем пустую таблицу
	//КонецЕсли;	
	
	Возврат Таблица;
	
КонецФункции

//Эмуляция объекта HTTPЗапрос для 8.1
//Функция вызывается при любом получении/отправке данных с/на сервер
//переподключение вызывается тут же - продумать, как вынести отдельно.
Функция API_ВыполнитьHTTPЗапрос(АдресЗапроса,Метод,УчетнаяЗапись,ТекстФайла="") Экспорт
	
	Если СоединениеАПИ=Неопределено Тогда
		//соединение порвалось, создадим заново
		Попытка
			СоединениеАПИ = ПолучитьСоединениеHTTP(?(ЭтоТестовыйAPI(),"test-edi-api.kontur.ru","edi-api.kontur.ru"));
		Исключение
			Сообщить_КонтурEDI(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;	
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(УчетнаяЗапись.Токен) Тогда
		
		API_Авторизоваться(УчетнаяЗапись);
		Если не ЗначениеЗаполнено(УчетнаяЗапись.Токен) Тогда
			ВызватьИсключение "Не удалось авторизоваться с учетной записью "+УчетнаяЗапись.Логин;
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	
	
	ИмяФайлаОтвета=ПолучитьИмяВременногоФайла();
	
	Для НомерПопытки=1 По 2 Цикл//после первой попытки можем переподключиться
		
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Authorization","Authorization:KonturEdiAuth konturediauth_api_client_id="+API_КлючРазработчика()+" , konturediauth_token="+УчетнаяЗапись.Токен);
		Заголовки.Вставить("Accept","application/xml");//без этого вернется JSON
		
		//Заголовки = Заголовки+"1";//эмулируем кривой токен
		
		Попытка//еще проверить на активность соединения
			Если Метод = "GET" Тогда
				СоединениеАПИ.Получить(АдресЗапроса,ИмяФайлаОтвета,Заголовки);
			ИначеЕсли Метод = "POST" Тогда
				ИмяФайлаЗапроса=ПолучитьИмяВременногоФайла();
				ТД=Новый ТекстовыйДокумент;
				ТД.УстановитьТекст(ТекстФайла);
				ТД.Записать(ИмяФайлаЗапроса,КодировкаТекста.UTF8);//чтоб хоть что-то туда записалось
				СоединениеАПИ.ОтправитьДляОбработки(ИмяФайлаЗапроса,АдресЗапроса,ИмяФайлаОтвета,Заголовки);
				УдалитьФайлы(ИмяФайлаЗапроса);
			КонецЕсли;
			
			ТД=Новый ТекстовыйДокумент;
			ТД.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);
			ОтветСтрокой=ТД.ПолучитьТекст();
			API_ЗаписатьЛогОтветов(АдресЗапроса,ИмяФайлаОтвета);
			УдалитьФайлы(ИмяФайлаОтвета);
			Прервать;//все хорошо
		Исключение
			//здесь может вернуться 403 (истек срок действия токена), надо заново авторизоваться
			_Ошибка = ОписаниеОшибки();
			Если Найти(_Ошибка,"User")>0 и Найти(_Ошибка,"has no access to box")>0 Тогда
				ВызватьИсключение "У пользователя с логином """ + УчетнаяЗапись.Логин + """ отсутствует доступ.";
			ИначеЕсли //Найти(_Ошибка,"(403)")<>0 И 
				НомерПопытки = 1 Тогда
				API_Авторизоваться(УчетнаяЗапись);
			Иначе//другая ошибка - ее вернем как есть
				Сообщить_КонтурEDI(_Ошибка);
				Возврат Неопределено;//не очень удачно, но что ж
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;	//Попытки
		
	Возврат ОтветСтрокой;
	
КонецФункции	

//Отладочный механизм
//Сохраняет ответы API в виде файлов в отдельном каталоге
Процедура API_ЗаписатьЛогОтветов(АдресЗапроса,ИмяФайлаОтвета)
	Возврат;//закомментировать при необходимости отладки
	КаталогОтладки = "c:\temp\api_log\";
	ИмяФайлаОтладки = ""+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-HH-mm-ss")+"_"+ПолучитьСтрокуБезСпецсимволов(АдресЗапроса)+"_"+Строка(Новый УникальныйИдентификатор);
	КопироватьФайл(ИмяФайлаОтвета,КаталогОтладки+ИмяФайлаОтладки);
КонецПроцедуры

Функция Прочитать_XML_API(ТекстXML, ТипКорневогоЭлемента="") Экспорт	
	
	СтруктураТипов = Новый Структура;
	
	Для Каждого Пакет Из ФабрикаXDTO_API().Пакеты Цикл
		Если Пакет.URIПространстваИмен = "http://edi-api.kontur.ru" Тогда
			Для Сч=0 По Пакет.Количество()-1 Цикл
				Свойство = Пакет.Получить(Сч);
				СтруктураТипов.Вставить(Свойство.Имя,Свойство);
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТипКорневогоЭлемента<>"" Тогда					 
		ТекстTNS_Исходный = "xmlns:xsd=""http://www.w3.org/2001/XMLSchema""";
		ТекстTNS_Нужный = "xmlns=""http://edi-api.kontur.ru"" "+ТекстTNS_Исходный;
		ТекстXML=СтрЗаменить(
				ТекстXML,
				ТекстTNS_Исходный,
				ТекстTNS_Нужный
				);
	КонецЕсли;	
	
	ТекстXML = СтрЗаменить(ТекстXML," xsi:nil=""true"" ","");//костыль для платформ ниже 8.2.16
	//3. собственно чтение
	Чтение=Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	Чтение.ПерейтиКСодержимому();
//	Чтение.ОткрытьФайл(ИмяФайла);
	
    Если ТипКорневогоЭлемента="" Тогда
		Данные=ФабрикаXDTO_API().ПрочитатьXML(Чтение);
	Иначе
		Данные=ФабрикаXDTO_API().ПрочитатьXML(Чтение,СтруктураТипов[ТипКорневогоЭлемента]);
	КонецЕсли;	
	
	Чтение.Закрыть();
	Возврат Данные;
	
КонецФункции
		
//заполняет справочник "НашиОрганизации", "ТранспортныеЯщики" и привязывает организации в 1С к справочнику "НашиОрганизации"
//транспортные ящики создаются только в том случае, если в админке настроен обмен именно по API.
Функция ОбновитьСписокОрганизацийПоУчетнымЗаписям() Экспорт
	
	//сначала получим из ядра организации, доступные этим учетным записям, и запишем их в наш справочник.
	//в этот же момент прикрепим к ним учетные записи.
	УчетныеЗаписи = ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");//обновим кэш

	ТаблицаОрганизацийAPI = Новый ТаблицаЗначений;
	ТаблицаОрганизацийAPI.Колонки.Добавить("partyId");
	ТаблицаОрганизацийAPI.Колонки.Добавить("GLN");
	ТаблицаОрганизацийAPI.Колонки.Добавить("Наименование");
	ТаблицаОрганизацийAPI.Колонки.Добавить("УчетнаяЗапись");
	
	Для Каждого СтрокаУчетнойЗаписи Из УчетныеЗаписи Цикл
		
		Если СтрокаУчетнойЗаписи.НеАктивна Тогда
			Продолжить;
		КонецЕсли;	
		УчетнаяЗапись = ПолучитьЭлементСправочника("УчетныеЗаписи",СтрокаУчетнойЗаписи.Ссылка);
		
		АдресЗапроса = "/V1/Parties/GetAccessiblePartiesInfo";

		ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапроса,"GET",УчетнаяЗапись);
		Если ОтветСтрокой = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	

		ДоступныеОрганизации = Прочитать_XML_API(ОтветСтрокой,"PartiesInfo");
		Для Каждого ДоступнаяОрганизация Из ДоступныеОрганизации.Parties.PartyInfo Цикл
			Если ТаблицаОрганизацийAPI.Найти(ДоступнаяОрганизация.ID,"partyId")=Неопределено Тогда
				НовСтрока = ТаблицаОрганизацийAPI.Добавить();
				НовСтрока.partyId		= ДоступнаяОрганизация.Id;
				НовСтрока.GLN			= ДоступнаяОрганизация.GLN;
				НовСтрока.Наименование	= ДоступнаяОрганизация.Name;
				НовСтрока.УчетнаяЗапись	= СтрокаУчетнойЗаписи.Ссылка;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЦикла;
	
	//теперь пройтись по ТаблицаОрганизацийAPI и записать недостающее
	НашиОрганизации = ПолучитьСписокЭлементовСправочника("НашиОрганизации");
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизацийAPI Цикл
		Если НашиОрганизации.Найти(СтрокаОрганизации.partyId,"partyId")=Неопределено Тогда
			//запишем
			СтруктураПолей = Новый Структура();
			СтруктураПолей.Вставить("partyId", 			СтрокаОрганизации.partyId);
			СтруктураПолей.Вставить("Наименование", 	СтрокаОрганизации.Наименование);
			СтруктураПолей.Вставить("GLN", 				СтрокаОрганизации.GLN);
			СтруктураПолей.Вставить("УчетнаяЗапись",	СтрокаОрганизации.УчетнаяЗапись);
			СтруктураПолей.Вставить("ОсновнойЯщик",		Неопределено);
			СтруктураПолей.Вставить("Неактивная",		Ложь);
			СохранитьЭлементСправочника("НашиОрганизации", Неопределено, СтруктураПолей);
		КонецЕсли;
	КонецЦикла;	
	
	//Проставим соответствие юр.лиц и организаций API
	ЮрФизЛица = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
	НашиОрганизации = ПолучитьСписокЭлементовСправочника("НашиОрганизации");//обновим, если перед этим что-то добавилось
	Для Каждого СтрокаОрганизации Из НашиОрганизации Цикл
		
		Если ТаблицаОрганизацийAPI.Найти(СтрокаОрганизации.partyId,"partyId")=Неопределено Тогда
			//у нас пропал доступ к этой организации, пометим ее как неактивную
			УстановитьЗначениеСвойстваОбъекта(СтрокаОрганизации.Ссылка, "Неактивная", Истина);
			Продолжить;
		Иначе
//			УстановитьЗначениеСвойстваОбъекта(СтрокаОрганизации.Ссылка, "Неактивная", Ложь);
		КонецЕсли;	
		
		Если СтрокаОрганизации.Неактивная Тогда
			Продолжить;
		КонецЕсли;	
		//надо по каждой учетной записи отдельно
		УчетнаяЗапись = ПолучитьЭлементСправочника("УчетныеЗаписи",СтрокаОрганизации.УчетнаяЗапись);
		
		АдресЗапроса = "/V1/Organizations/GetOrganizationCatalogueInfo?partyId="+СокрЛП(СтрокаОрганизации.partyId);
		ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапроса,"GET",УчетнаяЗапись);
		СтруктураОрганизации = Прочитать_XML_API(ОтветСтрокой,"OrganizationCatalogueInfo");
		
		Для Каждого ОрганизацияAPI Из СтруктураОрганизации.Organizations.Organization Цикл
			ТекGLN = ОрганизацияAPI.OrganizationInfo.GLN;
			
			СтрокаЮрФизЛица = ЮрФизЛица.Найти(ТекGLN,"GLN");
			Если СтрокаЮрФизЛица<>Неопределено Тогда
				Отказ = Ложь;
				УстановитьЗначениеСвойстваОбъекта(СтрокаЮрФизЛица.ЮрФизЛицо, "ОрганизацияAPI", СтрокаОрганизации.Ссылка, Отказ);
			КонецЕсли;	
			//получить таблицу юр/физ лиц своих
		КонецЦикла;	
	
	КонецЦикла;
	
	Если НастройкиМодуля.МыТорговаяСеть
		И Не НастройкиМодуля.МыПоставщик Тогда
		ТаблицаСвоихТочекДоставки = ПолучитьСписокЭлементовСправочника("ТочкиДоставкиСвои");
	КонецЕсли;
	
	//теперь создадим транспортные ящики организаций
	НашиОрганизации = ПолучитьСписокЭлементовСправочника("НашиОрганизации");//обновим, если перед этим что-то добавилось
	Для Каждого СтрокаОрганизации Из НашиОрганизации Цикл
		
		Если СтрокаОрганизации.Неактивная Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекущийСписокЯщиков = ПолучитьСписокЭлементовСправочника("ТранспортныеЯщики",СтрокаОрганизации.Ссылка);
		
		//надо по каждой учетной записи отдельно
		УчетнаяЗапись = ПолучитьЭлементСправочника("УчетныеЗаписи",СтрокаОрганизации.УчетнаяЗапись);
		
		//Получим все доступные ящики
		АдресЗапроса = "/V1/Boxes/GetBoxesInfo";
		ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапроса,"GET",УчетнаяЗапись);
		СведенияОЯщиках = Прочитать_XML_API(ОтветСтрокой,"BoxesInfo");
		
		ТаблицаЯщиковССервера = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(ТаблицаЯщиковССервера,"id,isTest,GLN");
		
		ЕстьЯщикиFTP = Ложь;
		//отберем те ящики, которые относятся к текущей организации
		Для Каждого Ящик Из СведенияОЯщиках.Boxes.BoxInfo Цикл
			Если Ящик.partyId = СтрокаОрганизации.partyId Тогда 
				
				//МассивЯщиковССервера.Добавить(Ящик.id);
				НовСтрокаЯщика = ТаблицаЯщиковССервера.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаЯщика,Ящик,"id,IsTest,Gln");
				
				Если Ящик.BoxSettings.TransportType <> "Api" Тогда
					ЕстьЯщикиFTP = Истина;
					ВывестиПредупреждение_КонтурEDI("Организация """+СтрокаОрганизации.Наименование+""" работает по FTP.
						|Обратитесь в техподдержку для переключения на обмен через API");
					//не будем давать возможность работать через API, если в админке настроен режим обмена FTP
					Возврат Ложь;
				КонецЕсли;	

			КонецЕсли;	
		КонецЦикла;	
		
		//Теперь сравним между собой список ящиков с сервера и список ящиков в базе
		//Те, что есть в базе, но не показываются на сервере, пометим как не активные
		Для Каждого СтрокаТекущегоЯщика Из ТекущийСписокЯщиков Цикл
			Если ТаблицаЯщиковССервера.Найти(СтрокаТекущегоЯщика.id,"id")=Неопределено Тогда
				УстановитьЗначениеСвойстваОбъекта(СтрокаТекущегоЯщика.Ссылка,"НеАктивный",Истина);
			КонецЕсли;	
		КонецЦикла;	
		
		//Определим, какую дату указывать начальной для загрузки сообщений из API.
		//Вытащим ее из справочника "КонтурEDI_Сообщения". Возьмем максимальную для каждого из полей: ДатаДокумента,ДатаЗагрузки.
		//Добавим к ним вчерашний день (на всякий случай) и возьмем минимальную из этих 3.
		//С большой долей вероятности предполагаем, что этого хватит.
		
		ЗапросПоСообщениям = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		ЗапросПоСообщениям.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ВложенныйЗапрос.ПоследняяДата) КАК ПоследняяДата
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(КонтурEDI_Сообщения.ДатаДокумента) КАК ПоследняяДата
		|	ИЗ
		|		Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|	ГДЕ
		|		КонтурEDI_Сообщения.Направление = ""Входящее""
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(КонтурEDI_Сообщения.ДатаЗагрузки)
		|	ИЗ
		|		Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|	ГДЕ
		|		КонтурEDI_Сообщения.Направление = ""Входящее""
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МАКСИМУМ(&ТекущаяДата)) КАК ВложенныйЗапрос";
		ЗапросПоСообщениям.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата())-60*60*24);
		ДатаНачалаЗагрузкиСообщений = ПолучитьРезультатЗапроса(ЗапросПоСообщениям,"ПоследняяДата");
		
		//Те, что есть на сервере, но отсутствуют в базе, добавим в справочник
		Для Каждого Эл Из ТаблицаЯщиковССервера Цикл
			СтрокаТекущегоЯщика = ТекущийСписокЯщиков.Найти(Эл.id,"ID");
			
			Если НастройкиМодуля.МыТорговаяСеть
				И Не НастройкиМодуля.МыПоставщик Тогда
				ОтключитьТекущийЯщик = (ТаблицаСвоихТочекДоставки.Найти(Эл.Gln,"GLN")=Неопределено);
				//Если мы - только торговая сеть, то наверняка маршрутизация будет идти по точкам доставки.
				//В базе магазина, как правило, задают только одну точку доставки в справочнике. Все остальные ящики мы отключим для этого магазина.
			Иначе
				ОтключитьТекущийЯщик = Ложь;
			КонецЕсли;
			
			Если СтрокаТекущегоЯщика=Неопределено Тогда
				СтруктураЭлемента = Новый Структура;
				СтруктураЭлемента.Вставить("id",				Эл.id);
				СтруктураЭлемента.Вставить("Наименование",		Эл.id);
				СтруктураЭлемента.Вставить("ОрганизацияAPI",	СтрокаОрганизации.Ссылка);
				СтруктураЭлемента.Вставить("lastEventId",		Формат(ДатаНачалаЗагрузкиСообщений,"ДФ=yyyyMMdd"));
				СтруктураЭлемента.Вставить("НеАктивный",		Эл.IsTest или ОтключитьТекущийЯщик);//тестовые ящики будем отключать по умолчанию.
				СтруктураЭлемента.Вставить("Тестовый",			Эл.IsTest);
				СтруктураЭлемента.Вставить("GLNЯщика",			Эл.Gln);
				
				СохранитьЭлементСправочника("ТранспортныеЯщики",Неопределено,СтруктураЭлемента);
			Иначе
				СтруктураЭлемента = ПолучитьЭлементСправочника("ТранспортныеЯщики",СтрокаТекущегоЯщика.Ссылка);
				СтруктураЭлемента.Вставить("НеАктивный",		Эл.IsTest или ОтключитьТекущийЯщик);//тестовые ящики будем отключать по умолчанию.
				СтруктураЭлемента.Вставить("Тестовый",			Эл.IsTest);
				СтруктураЭлемента.Вставить("GLNЯщика",			Эл.Gln);
				
				СохранитьЭлементСправочника("ТранспортныеЯщики",СтрокаТекущегоЯщика.Ссылка,СтруктураЭлемента);
			КонецЕсли;	
		КонецЦикла;	
		
		ТекущийСписокЯщиков = ПолучитьСписокЭлементовСправочника("ТранспортныеЯщики",СтрокаОрганизации.Ссылка);
		
		Если Не ЕстьЯщикиFTP Тогда
			АдресЗапроса = "/V1/Boxes/GetMainApiBox?partyId="+СокрЛП(СтрокаОрганизации.partyId);
			ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапроса,"GET",УчетнаяЗапись);
			ОсновнойЯщикСтруктура = Прочитать_XML_API(ОтветСтрокой,"BoxInfo");
			id = ОсновнойЯщикСтруктура.Id;
			
			СтрокаОсновногоЯщика = ТекущийСписокЯщиков.Найти(id,"id");
			Если СтрокаОсновногоЯщика<>Неопределено Тогда
				УстановитьЗначениеСвойстваОбъекта(СтрокаОрганизации.Ссылка,"ОсновнойЯщик",СтрокаОсновногоЯщика.Ссылка);
			Иначе	
				//установим основным любой активный ящик - будет актуально в периферийной базе при паршрутизации DeliveryParty
				Для Каждого СтрокаЯщика Из ТекущийСписокЯщиков Цикл
					Если не СтрокаЯщика.НеАктивный Тогда
						УстановитьЗначениеСвойстваОбъекта(СтрокаОрганизации.Ссылка,"ОсновнойЯщик",СтрокаЯщика.Ссылка);
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
			
		Иначе
			//MainApiBox недоступна, т.к. есть ящики на FTP. Установим основным ящиком любой активный.
			Для Каждого СтрокаЯщика Из ТекущийСписокЯщиков Цикл
				Если не СтрокаЯщика.НеАктивный Тогда
					УстановитьЗначениеСвойстваОбъекта(СтрокаОрганизации.Ссылка,"ОсновнойЯщик",СтрокаЯщика.Ссылка);
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция УстановитьПризнакУспешнойВалидацииСообщений() Экспорт
	
	Успешно = Ложь;
	
	Состояние_КонтурEDI("Выполняется поиск ранее принятых сообщений...");			   
	ТаблицаСообщений = ПолучитьСообщенияПоКоторымНеОтправленыУведомления();
	КоличествоСообщенийChecking = ТаблицаСообщений.НайтиСтроки(Новый Структура("СостояниеОбработки", "Checking")).Количество();
	НомерСтроки = 0;
	Для Каждого Строка Из ТаблицаСообщений Цикл
		Если Строка.СостояниеОбработки = "Checking" Тогда
			ПослеОтправкиУведомленияОПрочтении(Строка.СообщениеСсылка);
			НомерСтроки = НомерСтроки + 1;	
			Состояние_КонтурEDI("Выполняется обработка ранее принятых сообщений: " + Строка(НомерСтроки) + " из " + Строка(КоличествоСообщенийChecking));
		КонецЕсли;
	КонецЦикла;
	Состояние_КонтурEDI("");
	
	Успешно = Истина;
	Возврат Успешно;
	
КонецФункции

//проверим, все ли сообщения, отправленные старыми модулями, завершены
Функция ПроверитьВозможностьОтключенияСтатусныхСообщений() Экспорт
	
	//поищем все исходящие сообщения, в которых отсутствует реквизит "OriginalId", т.е. отправленные старым модулем.
	//1) Если это INVOIC - нас интересует, есть ли неподписанные в Диадоке сообщения.
	//2) Если это любое исходящее сообщение, то нам надо проверить, не висит ли оно в статусе "Отправлен", т.е. еще не получено статусное сообщение
	//3) Также проверим, есть ли у нас исходящие сообщения за последнюю неделю, которые успешно доставлены. Предполагаем, что в течение 1-2 дней можем получить статусное Checking_fail, которое необходимо будет обработать старым способом.
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|		ПО (КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка = КонтурEDI_Сообщения.Ссылка)
	|			И (КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""OriginalId"")
	|ГДЕ
	|	КонтурEDI_Сообщения.Направление = ""Исходящее""
	|	И КонтурEDI_Сообщения.ТребуемоеДействие = ""ПодписатьВДиадок""
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|		ПО (КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка = КонтурEDI_Сообщения.Ссылка)
	|			И (КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""OriginalId"")
	|ГДЕ
	|	КонтурEDI_Сообщения.Направление = ""Исходящее""
	|	И (КонтурEDI_Сообщения.Статус = ""Доставлен""
	|			ИЛИ КонтурEDI_Сообщения.Статус = ""Отправлен"")
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита ЕСТЬ NULL 
	|	И КонтурEDI_Сообщения.ДатаЗагрузки >= &ДатаПроверки"
	;
	Запрос.УстановитьПараметр("ДатаПроверки",ТекущаяДата()-86400*7);//предполагаем, что все возможные статусные delivery и checking приедут в течение недели, все, что старше, уже не интересно.
	Рез = Запрос.Выполнить();
	
	Возврат Рез.Пустой();
	
КонецФункции

//**********************************************************
//}#КонецОбласти //Транспорт


//{#Область 07_Конвертация_EdiXml

//***********************************************************
//	ОСНОВНЫЕ ФУНКЦИИ

Функция СформироватьУведомлениеОПрочтенииСообщения(Сообщение,Этап = "read",Статус = "ok") Экспорт
	
	Результат = ИнициализироватьРезультатКонвертацииИсходящегоСообщения();
	
	Если Сообщение = Неопределено Тогда
		
		Результат.Успешно = Ложь;
		
		Возврат Результат;
		
	КонецЕсли;

	ID				= Сообщение.ID;
	
	ТипСообщения	= Сообщение.ТипСообщения;
	НомерСообщения	= Сообщение.ДокументEDI.Номер;
	ДатаСообщения	= Сообщение.ДокументEDI.Дата;
	
	GLN_Отправителя = Сообщение.ОтправительEDI.GLN;
	GLN_Получателя	= Сообщение.ПолучательEDI.GLN;
	
	ID_Уведомления = Новый УникальныйИдентификатор();
	ID_Уведомления = СтрЗаменить(ID_Уведомления,"-","");
	
	ДатаУведомления = ТекущаяДата();
	ДатаЗаголовка	= Формат(ДатаУведомления, "ДФ=yyyyMMddhhmmss");
	
	ПутьКФайлу = мРабочийКаталог+"report_ok_"+ДатаЗаголовка+"_"+ТипСообщения+"_"+ПолучитьСтрокуБезСпецсимволов(НомерСообщения)+"_"+ID_Уведомления+".xml";
	
	ЗаписьХМЛ = Новый ЗаписьXML;

	ЗаписьХМЛ.ОткрытьФайл(ПутьКФайлу);
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
    ЗаписьХМЛ.ЗаписатьНачалоЭлемента("statusReport");
	
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"reportDateTime",	Дата1С_в_ДатаВремяXML(ДатаУведомления));
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"reportRecipient",	GLN_Отправителя);
	
	    ЗаписьХМЛ.ЗаписатьНачалоЭлемента("reportItem");
		
			СтатусныйТипСообщений = Лев(ТипСообщения,1)+Сред(НРег(ТипСообщения),2);
		
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"messageId",		ID);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"messageSender",	GLN_Отправителя);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"messageRecepient",	GLN_Получателя);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"documentType",		СтатусныйТипСообщений);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"documentNumber",	НомерСообщения);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"documentDate",		Дата1С_в_ДатаXML(ДатаСообщения));
			
	    	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("statusItem");
			
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"dateTime",		Дата1С_в_ДатаВремяXML(ДатаУведомления));
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"stage",		Этап);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"state",		Статус);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"description",	"Сообщение загружено в учетную систему.");
		
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
			
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.Закрыть();

	Результат.Успешно		= Истина;
	Результат.ПутьКФайлу	= ПутьКФайлу;
	Результат.Вставить("GLN",GLN_Получателя);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьУведомлениеОВалидацииСообщения(Сообщение)
	
	Результат = ИнициализироватьРезультатКонвертацииИсходящегоСообщения();
	
	Если Сообщение = Неопределено Тогда
		
		Результат.Успешно = Ложь;
		
		Возврат Результат;
		
	КонецЕсли;

	ID				= Сообщение.ID;
		
	ТипСообщения	= Сообщение.ТипСообщения;
	НомерСообщения	= Сообщение.ДокументEDI.Номер;
	ДатаСообщения	= Сообщение.ДокументEDI.Дата;
	
	GLN_Отправителя = Сообщение.ОтправительEDI.GLN;
	GLN_Получателя	= Сообщение.ПолучательEDI.GLN;
	
	ID_Уведомления = Новый УникальныйИдентификатор();
	ID_Уведомления = СтрЗаменить(ID_Уведомления,"-","");
	
	ДатаУведомления = ТекущаяДата();
	ДатаЗаголовка	= Формат(ДатаУведомления, "ДФ=yyyyMMddhhmmss");
	
	Если (ТипСообщения = "ORDRSP" или ТипСообщения = "DESADV" или ТипСообщения = "ALCRPT") И Сообщение.СтатусСсылки = "ВходящийНеПрошелВалидацию" Тогда
		РезультатВалидации = "fail";
	Иначе
		РезультатВалидации = "ok";
	КонецЕсли;
			
	ПутьКФайлу = мРабочийКаталог+"report_"+РезультатВалидации+"_"+ДатаЗаголовка+"_"+ТипСообщения+"_"+ПолучитьСтрокуБезСпецсимволов(НомерСообщения)+"_"+ID_Уведомления+".xml";
	
	ЗаписьХМЛ = Новый ЗаписьXML;

	ЗаписьХМЛ.ОткрытьФайл(ПутьКФайлу);
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
    ЗаписьХМЛ.ЗаписатьНачалоЭлемента("statusReport");
	
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"reportDateTime",	Дата1С_в_ДатаВремяXML(ДатаУведомления));
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"reportRecipient",	GLN_Отправителя);
	
	    ЗаписьХМЛ.ЗаписатьНачалоЭлемента("reportItem");
		
			СтатусныйТипСообщений = Лев(ТипСообщения,1)+Сред(НРег(ТипСообщения),2);
		
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"messageId",		ID);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"messageSender",	GLN_Отправителя);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"messageRecepient",	GLN_Получателя);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"documentType",		СтатусныйТипСообщений);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"documentNumber",	НомерСообщения);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"documentDate",		Дата1С_в_ДатаXML(ДатаСообщения));
			
	    	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("statusItem");
			
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"dateTime",		Дата1С_в_ДатаВремяXML(ДатаУведомления));
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"stage",		"Checking");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"state",		ВРег(Лев(РезультатВалидации,1))+Сред(РезультатВалидации,2));
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"description",	"Сообщение "+? (РезультатВалидации="ok","","не")+" прошло проверку на корректность.");
				
				Если ВнешнееХранилище Тогда
               		ОписаниеОшибки = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Сообщение.СообщениеСсылка).ОписаниеОшибки;
               	Иначе
               		ОписаниеОшибки = Сообщение.СообщениеСсылка.ОписаниеОшибки;
               	КонецЕсли;
				Если Найти(ОписаниеОшибки,Символы.ПС)>0 Тогда
					Пока Найти(ОписаниеОшибки,Символы.ПС)>0 Цикл
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"error",	Лев(ОписаниеОшибки, Найти(ОписаниеОшибки,Символы.ПС)-1));
						ОписаниеОшибки = Сред(ОписаниеОшибки, Найти(ОписаниеОшибки,Символы.ПС)+1);
					КонецЦикла;
				ИначеЕсли СтрДлина(ОписаниеОшибки)>0 Тогда
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ,	"error",	ОписаниеОшибки);		
				КонецЕсли;
		
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
			
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ЗаписьХМЛ.Закрыть();

	Результат.Успешно		= Истина;
	Результат.ПутьКФайлу	= ПутьКФайлу;
	Результат.Вставить("GLN",GLN_Получателя);
	
	Возврат Результат;
	
КонецФункции

//В разных сообщениях есть похожие по смыслу реквизиты с разными именами. Определим их список.
Процедура ОпределитьИменаРеквизитовСообщения(ТипСообщения,ИмяДокумента,ИмяКоличества,ДатаПоставки)
	
	Если ТипСообщения = "ORDERS" Тогда
		ИмяДокумента	= "order";
		ИмяКоличества	= "requestedQuantity";
		ДатаПоставки	= "requestedDeliveryDateTime";
	ИначеЕсли ТипСообщения = "PORDERS" Тогда
		ИмяДокумента	= "proposalOrder";
		ИмяКоличества	= "requestedQuantity";
		ДатаПоставки	= "requestedDeliveryDateTime";
	ИначеЕсли ТипСообщения = "ORDRSP" Тогда
		ИмяДокумента	= "orderResponse";
		ИмяКоличества	= "confirmedQuantity";
		ДатаПоставки	= "estimatedDeliveryDateTime";
	ИначеЕсли ТипСообщения = "DESADV" Тогда
		ИмяДокумента	= "despatchAdvice";
		ИмяКоличества	= "despatchedQuantity";
		ДатаПоставки	= "estimatedDeliveryDateTime";
	ИначеЕсли ТипСообщения = "RECADV" Тогда
		ИмяДокумента	= "receivingAdvice";
		ИмяКоличества	= "acceptedQuantity";
		ДатаПоставки	= "receptionDateTime";
	ИначеЕсли ТипСообщения = "INVOIC" Тогда
		ИмяДокумента	= "invoice";
		ИмяКоличества	= "quantity";
		ДатаПоставки	= "actualDeliveryDateTime";
	ИначеЕсли ТипСообщения = "ALCRPT" Тогда
		ИмяДокумента	= "alcoholReport";
		ИмяКоличества	= "volume";
		ДатаПоставки	= "";
	ИначеЕсли ТипСообщения = "RETANN" Тогда
		ИмяДокумента	= "announcementForReturns";
		ИмяКоличества	= "returnQuantity";
		ДатаПоставки	= "deliveryDate";
	ИначеЕсли ТипСообщения = "COINVOIC" Тогда
		ИмяДокумента	= "correctiveInvoice";
		ИмяКоличества	= "";
		ДатаПоставки	= "";
	ИначеЕсли ТипСообщения = "PRICELIST" Тогда
		ИмяДокумента	= "priceCatalogue";
		ИмяКоличества	= "";
		ДатаПоставки	= "";
	ИначеЕсли ТипСообщения = "RETDES" Тогда
		ИмяДокумента	= "returnDespatchAdvice";
		ИмяКоличества	= "despatchedQuantity";
		ДатаПоставки	= "";
	ИначеЕсли ТипСообщения = "RETREC" Тогда
		ИмяДокумента	= "returnReceivingAdvice";
		ИмяКоличества	= "acceptedQuantity";
		ДатаПоставки	= "";		
	КонецЕсли;	
	
КонецПроцедуры

Функция КонвертироватьИсходящееСообщениеПоНовому(Сообщение) Экспорт
	
	ТипСообщения = Сообщение.ТипСообщения;
	
	НеОтправлятьКодПоставщика = (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер, "НеОтправлятьКодПоставщика") = Истина);
	
	Если Сообщение.Свойство("ДатаСоздания")	И Сообщение.Направление = "Исходящее" Тогда
		Если Сообщение.Свойство("Архив") И Сообщение.Архив Тогда
			//Не перезаписываем дату создания
		Иначе
			Сообщение.ДатаСоздания = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайла = СокрЛП(Сообщение.ТипСообщения)+"_"+СокрЛП(Сообщение.ID)+"_"+СокрЛП(Сообщение.ОтправительEDI.GLN)+"_"+СокрЛП(Сообщение.ПолучательEDI.GLN)+".xml";
	ПутьКФайлу = мРабочийКаталог+ИмяФайла;
	
	ЗаписьХМЛ = Новый ЗаписьXML;

	//ЗаписьХМЛ.ОткрытьФайл(ПутьКФайлу);
	ЗаписьХМЛ.УстановитьСтроку();
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
	//корень сообщения
	xmlЗаписатьEdiMessage(ЗаписьХМЛ,Сообщение,НеОтправлятьКодПоставщика);
	
	ТекстСообщения = ЗаписьХМЛ.Закрыть();
	
	//вычистить лишнее на переходный период
	ТекстСообщения = СтрЗаменить(ТекстСообщения," xmlns="""+xmlПространствоИменСообщений()+""" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""","");
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ТекстСообщения);
	ТД.Записать(ПутьКФайлу,"UTF-8");
	
	Сообщение.ПутьКФайлу = ПутьКФайлу;
	
	Результат = Новый Структура("Успешно, ПутьКФайлу, ИмяФайла");
	
	Результат.Успешно		= Истина;
	Результат.ПутьКФайлу	= ПутьКФайлу;
	Результат.ИмяФайла		= ИмяФайла;
	
	Результат.Вставить("GLN",?(Сообщение.Направление = "Исходящее",Сообщение.ОтправительEDI.GLN,Сообщение.ПолучательEDI.GLN));//при отправке по этому полю поймем, с какой учетной записи отправлять
	
	Возврат Результат;
	
КонецФункции

//PRICELIST пока будет стоять немного сбоку.
Функция ЗаполнитьОбъектСообщения_PRICELIST(СообщениеОбъект,Сообщение)
	
	Отправитель = Сообщение.ОтправительEDI.GLN;
	Получатель = Сообщение.ПолучательEDI.GLN;
	
	ДанныеПродавца   = ПреобразоватьЮрФизЛицо_1С_в_EDI(Сообщение.Продавец1С,"Юридический",Ложь);
	ДанныеПокупателя = ПреобразоватьЮрФизЛицо_1С_в_EDI(Сообщение.Покупатель1С,"Юридический",Ложь);
	
	ДляМелкойРозницы = (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"КодСети") = "small_retail");
	
	СообщениеОбъект.id = Сообщение.id;
	
	xmlСоздатьДочернийЭлементXDTO(СообщениеОбъект, "interchangeHeader");
	xmlЗаписатьInterchangeHeader_XDTO(СообщениеОбъект.interchangeHeader,Сообщение);
	
	//сам документ
	priceCatalogue = xmlСоздатьДочернийЭлементXDTO(СообщениеОбъект, "priceCatalogue");
	xmlЗаписатьДанныеДокумента_XDTO(priceCatalogue, Сообщение.ДокументEDI.Номер, Сообщение.ДокументEDI.Дата);//номер/дата документа
	
	priceCatalogue.type = "Catalogue";
	priceCatalogue.status = "Original";

	Если ДляМелкойРозницы И ЗначениеЗаполнено(Сообщение.ТипЦен) Тогда
		priceCatalogue.name = Сообщение.ТипЦен.Наименование;
	КонецЕсли;
	
	xmlЗаполнитьЗначениеXDTO(priceCatalogue,	"startDate",	Сообщение.ДатаНачалаДействияЦен);
	xmlЗаполнитьЗначениеXDTO(priceCatalogue,	"endDate",		Сообщение.ДатаОкончанияДействияЦен);

	xmlЗаполнитьDocumentIdentificator(priceCatalogue, "contractIdentificator", Сообщение, "Контракт");
	
	ВыгружатьТолькоОрганизацию = Истина;

	xmlСоздатьДочернийЭлементXDTO(priceCatalogue,		"seller");
	xmlЗаписатьContractor_XDTO(priceCatalogue.seller,	"seller", 	ДанныеПродавца, 	ВыгружатьТолькоОрганизацию);

	Если ЗначениеЗаполнено(Сообщение.Покупатель1С) Тогда
		xmlСоздатьДочернийЭлементXDTO(priceCatalogue,		"buyer");
		xmlЗаписатьContractor_XDTO(priceCatalogue.buyer,	"buyer", 	ДанныеПокупателя, 	ВыгружатьТолькоОрганизацию);
	КонецЕсли;	

	xmlСоздатьДочернийЭлементXDTO(СообщениеОбъект.priceCatalogue,		"lineItems");
	СообщениеОбъект.priceCatalogue.lineItems.currencyISOCode = "RUB";
	
	Для Каждого СтрокаТоваров ИЗ Сообщение.Товары Цикл
		
		lineItem = ДобавитьЭлементСпискаXDTO(СообщениеОбъект.priceCatalogue.lineItems.lineItem,ФабрикаXDTO_EdiXml());
		
		Если ЗначениеЗаполнено(СтрокаТоваров.Статус) Тогда
			lineItem.status = СтрокаТоваров.Статус;
		Иначе
			lineItem.status = "Changed";
		КонецЕсли;
		
		xmlЗаполнитьЗначениеXDTO(lineItem,	"gtin",						СтрокаТоваров.GTIN);
		xmlЗаполнитьЗначениеXDTO(lineItem,	"internalBuyerCode",		СтрокаТоваров.КодТовараПокупателя);
		xmlЗаполнитьЗначениеXDTO(lineItem,	"internalSupplierCode",		СтрокаТоваров.КодТовараПоставщика);
		xmlЗаполнитьЗначениеXDTO(lineItem,	"description",				СтрокаТоваров.Наименование);
		
		Если ЗначениеЗаполнено(СтрокаТоваров.КоличествоВОдномМесте) Тогда
			xmlЗаписатьQuantityType_XDTO(lineItem,"onePlaceQuantity", 		 СтрокаТоваров.КоличествоВОдномМесте, СтрокаТоваров.КодЕдиницыИзмеренияEDI,	Истина); 
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТоваров.КвантПоставки) Тогда
			xmlЗаписатьQuantityType_XDTO(lineItem,"incrementalOrderQuantity",СтрокаТоваров.КвантПоставки,         СтрокаТоваров.КодЕдиницыИзмеренияEDI,	Истина);
		КонецЕсли;
		xmlЗаписатьQuantityType_XDTO(lineItem,	"netPrice",				СтрокаТоваров.ЦенаБезНДС, СтрокаТоваров.КодЕдиницыИзмеренияEDI,	Истина);
		xmlЗаписатьQuantityType_XDTO(lineItem,	"netPriceWithVAT",		СтрокаТоваров.ЦенаСНДС, СтрокаТоваров.КодЕдиницыИзмеренияEDI,	Истина);
		
		Если ЗначениеЗаполнено(СтрокаТоваров.СрокГодности) Тогда
			xmlЗаписатьShelfLifeType_XDTO(lineItem, "shelfLife",		СтрокаТоваров.СрокГодности, СтрокаТоваров.ЕдИзмСрокаГодности,	Истина);
		КонецЕсли;	
		Если ЗначениеЗаполнено(СтрокаТоваров.СтранаEDI) Тогда
			xmlЗаполнитьЗначениеXDTO(lineItem, "countryOfOriginISOCode",СтрокаТоваров.СтранаEDI);
		КонецЕсли;
		xmlЗаполнитьЗначениеXDTO(lineItem,	"vATRate",		СтрокаТоваров.СтавкаНДСEDI);

		Если ДляМелкойРозницы Тогда
			xmlЗаполнитьЗначениеXDTO(lineItem,	"productCategory", СтрокаТоваров.Каталог);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СообщениеОбъект;
	
КонецФункции

//используется только для выгрузки отчетов о продаже алкоголя
Функция ПодготовитьПакетСообщений(СтруктураПараметров) Экспорт
	
	ТаблицаСообщений = СтруктураПараметров.ТаблицаСообщений;
	
	Если ТаблицаСообщений.Колонки.Найти("ПутьКФайлу") = Неопределено Тогда
		ТаблицаСообщений.Колонки.Добавить("ПутьКФайлу");
	КонецЕсли;
	Если ТаблицаСообщений.Колонки.Найти("ИмяФайла") = Неопределено Тогда
		ТаблицаСообщений.Колонки.Добавить("ИмяФайла");
	КонецЕсли;
	
	Для каждого Стр Из ТаблицаСообщений Цикл
		
		РезультатКонвертации = КонвертироватьИсходящееСообщениеПоНовому(Стр.Сообщение);
		
		Стр.ПутьКФайлу	= РезультатКонвертации.ПутьКФайлу;
		Стр.ИмяФайла	= РезультатКонвертации.ИмяФайла;
		
	КонецЦикла;
	
	ПутьКФайлуОписанияПакета = мРабочийКаталог+"Description.xml";
	
	ЗаписьХМЛ = Новый ЗаписьXML;

	ЗаписьХМЛ.ОткрытьФайл(ПутьКФайлуОписанияПакета);
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
    ЗаписьХМЛ.ЗаписатьНачалоЭлемента("description");
	
		ЗаписьХМЛ.ЗаписатьАтрибут("creationDateTime",Дата1С_в_ДатаВремяXML(ТекущаяДата()));
	
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("sender");
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "gln",	СтруктураПараметров.GLNОтправителя);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		xmlЗаписатьContractor(ЗаписьХМЛ, "recipient",	СтруктураПараметров.ЮрФизЛицо, Истина);

		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("packageObjects");
		
		Для каждого Стр ИЗ ТаблицаСообщений Цикл
			
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("packageObject");
				ЗаписьХМЛ.ЗаписатьАтрибут("fileName",	Стр.ИмяФайла);
				
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "documentType",	"ALCRPT");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "dataType",		"KonturXML");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "encodingType",	"utf-8");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "objectType",		"application");
			
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
	ЗаписьХМЛ.Закрыть();
	
	Архив = СтруктураПараметров.ПутьКФайлу;
	
	ЗаписьАрхива = Новый ЗаписьZipФайла(Архив);
	
	ЗаписьАрхива.Добавить(ПутьКФайлуОписанияПакета);
	
	Для каждого Стр Из ТаблицаСообщений Цикл
		ЗаписьАрхива.Добавить(Стр.ПутьКФайлу);
	КонецЦикла;
	
	ЗаписьАрхива.Записать();
	
	// удалим файлики
	
	УдалитьФайлы(ПутьКФайлуОписанияПакета);
		
	Для каждого Стр Из ТаблицаСообщений Цикл
		УдалитьФайлы(Стр.ПутьКФайлу);
	КонецЦикла;
	
КонецФункции

Функция КонвертироватьВходящееСообщение_REPORTS(Параметры,ТипСообщения)
	//на рефакторинг: фактически используется только для чтения REPORTS
	
	Перем ПутьКФайлу;
	
	РезультатКонвертации = ИнициализироватьСтруктуруРезультатаКонвертации();
	
	Если Параметры.Свойство("ПутьКФайлу", ПутьКФайлу) Тогда
		
		СтруктураСообщения = ПолучитьСтруктуруСообщения_Объект_REPORTS();

		Шапка				= СтруктураСообщения.Шапка;
		СтруктураШапки		= СтруктураСообщения.ШапкаСтруктура;
		
		ПрочитатьФайлXML_REPORTS(ПутьКФайлу,ТипСообщения,1,Шапка,СтруктураШапки,Неопределено,Неопределено);
		
		РезультатКонвертации.Шапка	= Шапка;
		
	КонецЕсли;
	
	Возврат РезультатКонвертации;
	
КонецФункции

Функция ПолучитьМаппингПолейXML(ИмяСтруктуры,ТипСообщения)
	
	ТабОписания = Новый ТаблицаЗначений;
	ТабОписания.Колонки.Добавить("ИмяПоля");
	ТабОписания.Колонки.Добавить("Путь");
	ТабОписания.Колонки.Добавить("ИмяСтруктуры");
	ТабОписания.Колонки.Добавить("ЭтоСписок");
	
	ТабОписания.Индексы.Добавить("Путь");
	
	ИмяДокумента = "";
	ИмяКоличества = "";
	ДатаПоставки = "";
	ОпределитьИменаРеквизитовСообщения(ТипСообщения,ИмяДокумента,ИмяКоличества,ДатаПоставки);
	
	Если ИмяСтруктуры = "Документ" Тогда	
		
		// Документ
		ДобавитьОписаниеПоля(ТабОписания,"ID",					"id");
		ДобавитьОписаниеПоля(ТабОписания,"Отправитель",			"interchangeHeader.sender");
		ДобавитьОписаниеПоля(ТабОписания,"Получатель",			"interchangeHeader.recipient");
		ДобавитьОписаниеПоля(ТабОписания,"ДатаСоздания",		"interchangeHeader.creationDateTime");
		
		ДобавитьОписаниеПоля(ТабОписания,"НомерДокумента",		ИмяДокумента+".number");
		ДобавитьОписаниеПоля(ТабОписания,"ДатаДокумента",		ИмяДокумента+".date");
		ДобавитьОписаниеПоля(ТабОписания,"Статус",				ИмяДокумента+".status");
		
		ДобавитьОписаниеПоля(ТабОписания,"НомерСерииЗаказов",	ИмяДокумента+".blanketOrderIdentificator.number");
		ДобавитьОписаниеПоля(ТабОписания,"НомерЗаказа",			ИмяДокумента+".originOrder.number");
		ДобавитьОписаниеПоля(ТабОписания,"ДатаЗаказа",			ИмяДокумента+".originOrder.date");
		ДобавитьОписаниеПоля(ТабОписания,"НомерКонтракта",		ИмяДокумента+".contractIdentificator.number");
		ДобавитьОписаниеПоля(ТабОписания,"ДатаКонтракта",		ИмяДокумента+".contractIdentificator.date");
		ДобавитьОписаниеПоля(ТабОписания,"НомерНакладной",		ИмяДокумента+".despatchIdentificator.number");
		ДобавитьОписаниеПоля(ТабОписания,"ДатаНакладной",		ИмяДокумента+".despatchIdentificator.date");
		ДобавитьОписаниеПоля(ТабОписания,"НомерПриемки",		ИмяДокумента+".receivingIdentificator.number");
		ДобавитьОписаниеПоля(ТабОписания,"ДатаПриемки",			ИмяДокумента+".receivingIdentificator.date");
		ДобавитьОписаниеПоля(ТабОписания,"НомерСчетФактуры",	ИмяДокумента+".invoiceIdentificator.number");
		ДобавитьОписаниеПоля(ТабОписания,"ДатаСчетФактуры",		ИмяДокумента+".invoiceIdentificator.date");
		ДобавитьОписаниеПоля(ТабОписания,"НомерОбратногоЗаказа",ИмяДокумента+".proposalOrdersIdentificator.number");
		ДобавитьОписаниеПоля(ТабОписания,"ДатаОбратногоЗаказа",	ИмяДокумента+".proposalOrdersIdentificator.date");
		
		ДобавитьОписаниеПоля(ТабОписания,"НомерПриемкиПокупателя",	ИмяДокумента+".receivingAdviceIdentificatorInBuyerSystem.number");
		
		ДобавитьОписаниеПоля(ТабОписания,"ДатаВремяПоставки",	ИмяДокумента+".deliveryInfo."+ДатаПоставки);
//врата		
		Если (ТипСообщения = "ORDERS") или (ТипСообщения = "ORDRSP") Тогда
			ДобавитьОписаниеПоля(ТабОписания,"Транспортировка", ИмяДокумента+".deliveryInfo.transportation","Транспортировка",истина);
		КонецЕсли;
//				

		Если (ТипСообщения = "ORDERS") или (ТипСообщения = "ORDRSP") или (ТипСообщения = "DESADV") Тогда  //+Для Магнита
			ДобавитьОписаниеПоля(ТабОписания,"ДатаВывозаОтПоставщика",				ИмяДокумента+".deliveryInfo.exportDateTimeFromSupplier");
			ДобавитьОписаниеПоля(ТабОписания,"ТочкиСамовывоза",			ИмяДокумента+".deliveryInfo.despatchParty"	, "ТочкиСамовывоза",Истина);  //E1C_in-29815 еще раз Магнит
			ДобавитьОписаниеПоля(ТабОписания,"ОтветственныйЗаДоставку",	ИмяДокумента+".deliveryInfo.transportBy");
		КонецЕсли;

		Если ТипСообщения = "DESADV" Тогда
			ДобавитьОписаниеПоля(ТабОписания,"ДатаОтгрузки",				ИмяДокумента+".deliveryInfo.shippingDateTime");
			ДобавитьОписаниеПоля(ТабОписания,"РежимПеревозки",				ИмяДокумента+".deliveryInfo.transportation.transportMode");
			ДобавитьОписаниеПоля(ТабОписания,"ИмяВодителя",					ИмяДокумента+".deliveryInfo.transportation.nameOfCarrier");
			ДобавитьОписаниеПоля(ТабОписания,"НомерТранспортногоСредства",	ИмяДокумента+".deliveryInfo.transportation.vehicleNumber");
			ДобавитьОписаниеПоля(ТабОписания,"МаркаТранспортногоСредства",	ИмяДокумента+".deliveryInfo.transportation.vehicleBrand");
		КонецЕсли;
		
		ДобавитьОписаниеПоля(ТабОписания,"Валюта",				ИмяДокумента+".lineItems.currencyISOCode");
		ДобавитьОписаниеПоля(ТабОписания,"СуммаВсего",			ИмяДокумента+".lineItems.totalAmount");
		ДобавитьОписаниеПоля(ТабОписания,"СуммаВсегоБезНДС",	ИмяДокумента+".lineItems.totalSumExcludingTaxes");
		ДобавитьОписаниеПоля(ТабОписания,"СуммаВсегоНДС",		ИмяДокумента+".lineItems.totalVATAmount");
		
		ДобавитьОписаниеПоля(ТабОписания,"ПромоНомер",			ИмяДокумента+".promotionDealNumber");
		ДобавитьОписаниеПоля(ТабОписания,"Комментарий",			ИмяДокумента+".comment");
		
		ДобавитьОписаниеПоля(ТабОписания,"Продавец",			ИмяДокумента+".seller"					, "ЮрФизЛицо");
		//ДобавитьОписаниеПоля(ТабОписания,"ПродавецКодВсистемеПокупателя",			ИмяДокумента+".seller.additionalIdentificator");  
		ДобавитьОписаниеПоля(ТабОписания,"Покупатель",			ИмяДокумента+".buyer"					, "ЮрФизЛицо");
		ДобавитьОписаниеПоля(ТабОписания,"Плательщик",			ИмяДокумента+".invoicee"				, "ЮрФизЛицо");
		ДобавитьОписаниеПоля(ТабОписания,"Грузоотправитель",	ИмяДокумента+".deliveryInfo.shipFrom"	, "ЮрФизЛицо");
		ДобавитьОписаниеПоля(ТабОписания,"Грузополучатель",		ИмяДокумента+".deliveryInfo.shipTo"		, "ЮрФизЛицо");
		//ДобавитьОписаниеПоля(ТабОписания,"ГрузополучательКодВсистемеПокупателя",		ИмяДокумента+".deliveryInfo.shipTo.additionalIdentificator");
		ДобавитьОписаниеПоля(ТабОписания,"КонечныйГрузополучатель", ИмяДокумента+".deliveryInfo.ultimateCustomer", "ЮрФизЛицо");
		ДобавитьОписаниеПоля(ТабОписания,"ПромежуточныйГрузополучатель", ИмяДокумента+".deliveryInfo.warehouseKeeper", "ЮрФизЛицо");
		
		ДобавитьОписаниеПоля(ТабОписания,"Товары",				ИмяДокумента+".lineItems.lineItem"		, "Товары", Истина);
		
	ИначеЕсли ИмяСтруктуры = "ЮрФизЛицо" Тогда
		
		// ЮрФизЛицо
		ДобавитьОписаниеПоля(ТабОписания,"GLN"				, "gln");
		ДобавитьОписаниеПоля(ТабОписания,"КодВСистемеПокупателя","additionalIdentificator");
		ДобавитьОписаниеПоля(ТабОписания,"ИНН_ФЛ"			, "selfEmployed.inn");
		ДобавитьОписаниеПоля(ТабОписания,"ИНН_ЮЛ"			, "organization.inn");
		ДобавитьОписаниеПоля(ТабОписания,"КПП"				, "organization.kpp");
		ДобавитьОписаниеПоля(ТабОписания,"Наименование"		, "organization.name");
		ДобавитьОписаниеПоля(ТабОписания,"Фамилия"			, "selfEmployed.fullName.lastName");
		ДобавитьОписаниеПоля(ТабОписания,"Имя"				, "selfEmployed.fullName.firstName");
		ДобавитьОписаниеПоля(ТабОписания,"Отчество"			, "selfEmployed.fullName.middleName");
		
		ДобавитьОписаниеПоля(ТабОписания,"КодРегиона"			, "russianAddress.regionISOCode");
		ДобавитьОписаниеПоля(ТабОписания,"Район"			, "russianAddress.district");
		ДобавитьОписаниеПоля(ТабОписания,"Город"			, "russianAddress.city");
		ДобавитьОписаниеПоля(ТабОписания,"НаселенныйПункт"	, "russianAddress.settlement");
		ДобавитьОписаниеПоля(ТабОписания,"Улица"			, "russianAddress.street");
		ДобавитьОписаниеПоля(ТабОписания,"Дом"				, "russianAddress.house");
		ДобавитьОписаниеПоля(ТабОписания,"Квартира"			, "russianAddress.flat");
		ДобавитьОписаниеПоля(ТабОписания,"Индекс"			, "russianAddress.postalCode");
		
		ДобавитьОписаниеПоля(ТабОписания,"КодСтраны"		, "foreignAddress.countryISOCode");
		ДобавитьОписаниеПоля(ТабОписания,"Адрес"			, "foreignAddress.address");
		
		ДобавитьОписаниеПоля(ТабОписания,"Телефон"			, "additionalInfo.phone");
		ДобавитьОписаниеПоля(ТабОписания,"НомерСчета"		, "additionalInfo.bankAccountNumber");
		ДобавитьОписаниеПоля(ТабОписания,"Банк"				, "additionalInfo.bankName");
		ДобавитьОписаниеПоля(ТабОписания,"БИК"				, "additionalInfo.BIK");
		ДобавитьОписаниеПоля(ТабОписания,"Руководитель"		, "additionalInfo.nameOfCEO");
		ДобавитьОписаниеПоля(ТабОписания,"ГлавныйБухгалтер"	, "additionalInfo.nameOfAccountant");
//врата		
	ИначеЕсли ИмяСтруктуры = "Транспортировка" тогда
		ДобавитьОписаниеПоля(ТабОписания,"ДатаВремяПрибытия", "vehicleArrivalDateTime");
//
	ИначеЕсли ИмяСтруктуры = "КонечныйГрузополучательGLN" тогда  //21.10.2016 Теперь такой структуры не существует. Поле КонечныйГрузополучательGLN строковое
		ДобавитьОписаниеПоля(ТабОписания,"GLN", "gln");
		
	ИначеЕсли ИмяСтруктуры = "ТочкиСамовывоза" Тогда
		
		// ТочкаСамовывоза
		ДобавитьОписаниеПоля(ТабОписания,"Наименование"		, "organization.name");
		ДобавитьОписаниеПоля(ТабОписания,"Регион"			, "russianAddress.regionISOCode"); //В буфере поле называется Регион а не КодРегиона!
		ДобавитьОписаниеПоля(ТабОписания,"Город"			, "russianAddress.city");
		ДобавитьОписаниеПоля(ТабОписания,"Улица"			, "russianAddress.street");
		ДобавитьОписаниеПоля(ТабОписания,"Дом"				, "russianAddress.house");
		ДобавитьОписаниеПоля(ТабОписания,"Индекс"			, "russianAddress.postalCode");
		ДобавитьОписаниеПоля(ТабОписания,"Идентификатор"	, "additionalIdentificator");
		
	ИначеЕсли ИмяСтруктуры = "Товары" Тогда
		
		// Товары
		ДобавитьОписаниеПоля(ТабОписания,"GTIN"					, "gtin");
		ДобавитьОписаниеПоля(ТабОписания,"КодТовараПокупателя"	, "internalBuyerCode");
		ДобавитьОписаниеПоля(ТабОписания,"КодТовараПоставщика"	, "internalSupplierCode");
		ДобавитьОписаниеПоля(ТабОписания,"Наименование"			, "description");
		ДобавитьОписаниеПоля(ТабОписания,"Количество"			, ИмяКоличества);
		ДобавитьОписаниеПоля(ТабОписания,"КодЕдиницыИзмерения"	, ИмяКоличества+".unitOfMeasure");
		ДобавитьОписаниеПоля(ТабОписания,"КоличествоВОдномМесте", "onePlaceQuantity");
		ДобавитьОписаниеПоля(ТабОписания,"ЦенаБезНДС"			, "netPrice");
		ДобавитьОписаниеПоля(ТабОписания,"СуммаБезНДС"			, "netAmount");
		ДобавитьОписаниеПоля(ТабОписания,"ЦенаСНДС"				, "netPriceWithVAT");
		ДобавитьОписаниеПоля(ТабОписания,"СуммаСНДС"			, "amount");
		ДобавитьОписаниеПоля(ТабОписания,"СуммаНДС"				, "vATAmount");
		ДобавитьОписаниеПоля(ТабОписания,"СтавкаНДС"			, "vATRate");
		ДобавитьОписаниеПоля(ТабОписания,"КодСтраны"			, "countryOfOriginISOCode");
		ДобавитьОписаниеПоля(ТабОписания,"НомерГТД"				, "customsDeclarationNumber");
		
		ДобавитьОписаниеПоля(ТабОписания,"Статус"				, "status");
		ДобавитьОписаниеПоля(ТабОписания,"ТипПоставки"			, "flowType");
		ДобавитьОписаниеПоля(ТабОписания,"Комментарий"			, "comment");
		
		Если ТипСообщения = "ORDERS" 
			  //ИЛИ ТипСообщения = "ORDRSP" 
			  ИЛИ ТипСообщения = "DESADV" Тогда
		ДобавитьОписаниеПоля(ТабОписания,"КонечныйГрузополучательGLN", "ultimateCustomer");
		КонецЕсли;

		Если ТипСообщения = "RETANN" Тогда
			ДобавитьОписаниеПоля(ТабОписания, "ПричинаВозврата", "physicalOrLogicalState.stateDescription");
		КонецЕсли;
		
		Если ТипСообщения = "RECADV" Тогда
			ДобавитьОписаниеПоля(ТабОписания, "ТипЕдиницы", "typeOfUnit");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТабОписания;
	
КонецФункции

//***********************************************************
//	ЧТЕНИЕ XML

Процедура ПоместитьЗначение(Значение,НовоеСообщение,СтруктураШапки,Заголовок)
	
	НайденнаяСтрока = СтруктураШапки.Найти(Заголовок,"Путь");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		
		Если НайденнаяСтрока.Имя = "ОписаниеОшибки" Тогда // костылик для RETANN
			Если ЗначениеЗаполнено(НовоеСообщение.ОписаниеОшибки) Тогда
				НовоеСообщение.ОписаниеОшибки = НовоеСообщение.ОписаниеОшибки + Символы.ПС + СокрЛП(Значение);
			Иначе
				НовоеСообщение.ОписаниеОшибки = СокрЛП(Значение);
			КонецЕсли;
		Иначе
			
			НовоеСообщение[НайденнаяСтрока.Имя] = Значение;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

//дублируется с РаспарситьXMLРекурсивно
Процедура РазобратьXML(Чтение, НовоеСообщение, СтруктураШапки, ТаблицаТоваров, СтруктураТоваров, Заголовок, ЭтоПерваяСтрока = Ложь,НомерСтроки=0)
	
	Если Чтение.КоличествоАтрибутов()>0 Тогда
		
		Пока Чтение.ПрочитатьАтрибут() Цикл
			
			Если ЭтоПерваяСтрока Тогда
				ПоместитьЗначение(СокрЛП(Чтение.Значение),НовоеСообщение,СтруктураШапки,Чтение.Имя);
			Иначе
				ПоместитьЗначение(СокрЛП(Чтение.Значение),НовоеСообщение,СтруктураШапки,Заголовок+"."+Чтение.Имя);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
	ТипXML_НачалоЭлемента	= ТипУзлаXML.НачалоЭлемента;
	ТипXML_Текст			= ТипУзлаXML.Текст;
	ТипXML_КонецЭлемента	= ТипУзлаXML.КонецЭлемента;
	
	Пока Чтение.Прочитать() Цикл
		
		ТипУзла = Чтение.ТипУзла;
		
		Если ТипУзла = ТипXML_КонецЭлемента Тогда
			
			Прервать;
			
		ИначеЕсли ТипУзла = ТипXML_Текст Тогда
			
			ПоместитьЗначение(СокрЛП(Чтение.Значение),НовоеСообщение,СтруктураШапки,Заголовок);
				
		ИначеЕсли ТипУзла = ТипXML_НачалоЭлемента Тогда
			
			СтарЗаголовок = Заголовок;
			
			Если ЭтоПерваяСтрока Тогда
				Заголовок = Чтение.Имя;
			Иначе
				Заголовок = Заголовок + "." + Чтение.Имя;
			КонецЕсли;
			
			ЗаполняемаяСтрока	= НовоеСообщение;
			СтруктураСтроки		= СтруктураШапки;
			
			НачалоНовойСтроки = Ложь;
			
			НайденнаяСтрока = СтруктураШапки.Найти(Заголовок,"Путь");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Если НЕ НайденнаяСтрока.ИмяТаблицы = "" Тогда
					
					ЗаполняемаяСтрока	= ТаблицаТоваров.Добавить();
					ЗаполняемаяСтрока.КлючСообщения = НовоеСообщение.КлючСообщения;
					
					СтруктураСтроки		= СтруктураТоваров;
					
					НачалоНовойСтроки = Истина;
					
					НомерСтроки = НомерСтроки+1;
					
					ЗаполняемаяСтрока.Номер = НомерСтроки;
					
					Заголовок = "";
					
				КонецЕсли;
			КонецЕсли;
			
			РазобратьXML(Чтение, ЗаполняемаяСтрока, СтруктураСтроки, ТаблицаТоваров, СтруктураТоваров, Заголовок, НачалоНовойСтроки, НомерСтроки);
			
			Заголовок = СтарЗаголовок;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Разбирает XML в потоковом режиме и помещает содержимое в промежуточный буфер 
Функция РаспарситьXMLРекурсивно(Чтение,СтруктураДанных,ВидСтруктуры,Сообщение,Заголовок,ТипСообщения)
	
	Если Чтение.КоличествоАтрибутов()>0 Тогда
		
		Пока Чтение.ПрочитатьАтрибут() Цикл
			
			Если Заголовок = "" Тогда
				ПоместитьЗначениеПоля(Сообщение,СокрЛП(Чтение.Значение),СтруктураДанных,ВидСтруктуры,Чтение.Имя);
			Иначе
				ПоместитьЗначениеПоля(Сообщение,СокрЛП(Чтение.Значение),СтруктураДанных,ВидСтруктуры,Заголовок+"."+Чтение.Имя);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
	ТипXML_НачалоЭлемента	= ТипУзлаXML.НачалоЭлемента;
	ТипXML_Текст			= ТипУзлаXML.Текст;
	ТипXML_КонецЭлемента	= ТипУзлаXML.КонецЭлемента;
	
	Пока Чтение.Прочитать() Цикл
		
		ТипУзла = Чтение.ТипУзла;
		
		Если ТипУзла = ТипXML_КонецЭлемента Тогда
			
			Прервать;
			
		ИначеЕсли ТипУзла = ТипXML_Текст Тогда
			
			ПоместитьЗначениеПоля(Сообщение,СокрЛП(Чтение.Значение),СтруктураДанных,ВидСтруктуры,Заголовок);
				
		ИначеЕсли ТипУзла = ТипXML_НачалоЭлемента Тогда
			
			СтарыйЗаголовок = Заголовок;
			
			Если Заголовок = "" Тогда
				Заголовок = Чтение.Имя;
			Иначе
				Заголовок = Заголовок + "." + Чтение.Имя;
			КонецЕсли;
			
			СтруктураДанныхПоля = СтруктураДанных;
			СтруктураПоля = Сообщение;
			
			ВидСтруктуры = "Структура";
			
			НайденноеПолеСтруктуры = СтруктураДанных.Найти(Заголовок,"Путь");
			Если НЕ НайденноеПолеСтруктуры = Неопределено Тогда
				Если НЕ НайденноеПолеСтруктуры.ИмяСтруктуры = Неопределено Тогда
					
					Если НайденноеПолеСтруктуры.ЭтоСписок Тогда
						ВидСтруктуры = "ТаблицаЗначений";
						СтруктураПоля = Сообщение[НайденноеПолеСтруктуры.ИмяПоля].Добавить();
						XML_ОбработатьКолонкиСТипомСтруктура(НайденноеПолеСтруктуры,ТипСообщения,СтруктураПоля);
					Иначе
						СтруктураПоля = Сообщение[НайденноеПолеСтруктуры.ИмяПоля];
					КонецЕсли;
						
					СтруктураДанныхПоля = ПолучитьМаппингПолейXML(НайденноеПолеСтруктуры.ИмяСтруктуры,ТипСообщения);
					
					Заголовок = "";
					
				КонецЕсли;
			КонецЕсли;
			
			РаспарситьXMLРекурсивно(Чтение,СтруктураДанныхПоля,ВидСтруктуры,СтруктураПоля,Заголовок,ТипСообщения);

			Заголовок = СтарыйЗаголовок;
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

//Транслирует содержимое XDTO в промежуточный буфер аналогично функции "РаспарситьXMLРекурсивно".
Процедура РаспарситьXDTOРекурсивно(ОбъектXDTO,Маппинг,ВидСтруктуры,Буфер,Заголовок,ТипСообщения)
	
	Для Каждого ОписаниеПоля Из Маппинг Цикл
		
			//следующая проблема. Если в ОбъектXDTO или дальше внутри находится массив, то что мы будем брать? Первый попавшийся?
			ТекущийУзелXDTO = ВычислитьXDTO(ОбъектXDTO,ОписаниеПоля.Путь);
			Если ТекущийУзелXDTO = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОписаниеПоля.ИмяСтруктуры) Тогда
				//"конечное" значение
				
				//костыль для QuantityType и ultimateCustomer                                     
				Если ТипЗнч(ТекущийУзелXDTO) = Тип("ОбъектXDTO") Тогда
					Если ОписаниеПоля.Путь="ultimateCustomer" тогда
						Буфер[ОписаниеПоля.ИмяПоля] = ТекущийУзелXDTO.gln;
					Иначе  //QuantityType
						Буфер[ОписаниеПоля.ИмяПоля] = ТекущийУзелXDTO.__content;
					КонецЕсли;
				Иначе
					Буфер[ОписаниеПоля.ИмяПоля] = ТекущийУзелXDTO;
				КонецЕсли;
				
			Иначе
				//вложенная структура
				ВложенныйМаппинг = ПолучитьМаппингПолейXML(ОписаниеПоля.ИмяСтруктуры,ТипСообщения);
				Если НЕ ОписаниеПоля.ЭтоСписок=Истина Тогда
					РаспарситьXDTOРекурсивно(ТекущийУзелXDTO,ВложенныйМаппинг,ОписаниеПоля.ИмяСтруктуры,Буфер[ОписаниеПоля.ИмяПоля],Заголовок,ТипСообщения)
				КонецЕсли;
				//что за Заголовок???
			КонецЕсли;
			
			//еще надо решать со Списками.
			Если ОписаниеПоля.ЭтоСписок
				И ТипЗнч(ТекущийУзелXDTO) = Тип("СписокXDTO") Тогда
				//
				Для Каждого ЭлементСпискаXDTO Из ТекущийУзелXDTO Цикл
					НоваяСтрока = Буфер[ОписаниеПоля.ИмяПоля].Добавить();//здесь у нас ТаблицаЗначений, я надеюсь
					РаспарситьXDTOРекурсивно(ЭлементСпискаXDTO,ВложенныйМаппинг,ОписаниеПоля.ИмяСтруктуры,НоваяСтрока,Заголовок,ТипСообщения)
					
				КонецЦикла;
				
			КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьФайлXML_REPORTS(ПутьКФайлуXML,ТипСообщения,КлючСообщения,ТаблицаШапки,СтруктураШапки,ТаблицаТоваров,СтруктураТоваров) 
	//только для REPORTS
	Чтение = Новый ЧтениеXML;
	
	Попытка
		Чтение.ОткрытьФайл(ПутьКФайлуXML);
		Чтение.Прочитать();
	Исключение
		
		Возврат "При чтении сообщения "+ТипСообщения+" из файла """+ПутьКФайлуXML+""" возникла ошибка: "+ОписаниеОшибки();
		
	КонецПопытки;
	
	Если ТипЗнч(ТаблицаШапки) = Тип("ТаблицаЗначений") Тогда
		НовоеСообщение = ТаблицаШапки.Добавить();
	Иначе
		НовоеСообщение = ТаблицаШапки;
	КонецЕсли;
	
    НовоеСообщение.ТипСообщения		= ТипСообщения;
	НовоеСообщение.КлючСообщения	= КлючСообщения;
	НовоеСообщение.ПутьКФайлу		= ПутьКФайлуXML;
		
	РазобратьXML(Чтение, НовоеСообщение, СтруктураШапки, ТаблицаТоваров, СтруктураТоваров, "", Истина);
	
	// Обработка загруженных полей, преобразования типов
	
	НовоеСообщение.ДатаДокумента = ДатаXML_в_Дата1С(НовоеСообщение.ДатаДокумента);
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьДанныеПоТорговойСети(ПутьКФайлу)
	
	//на рефакторинг: в будущем разбить на 2 отдельных метода.
	ЗагружаетсяСписокСетей = Ложь;
	Если Прав(ПутьКФайлу, 8) = "list.xml" Тогда 
		ЗагружаетсяСписокСетей = Истина;
	КонецЕсли;
	
	Если ЗагружаетсяСписокСетей Тогда
		
		СтруктураТС = Новый Структура("Сети");

		ТаблицаСетей = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(ТаблицаСетей,"Код,Наименование,GLN,Подключена,ДатаОбновления,НастройкиПоУмолчанию");//,ТребуемыеВерсии - пока не трогаем

	Иначе
		
		СтруктураТС = Новый Структура("GLN,Подразделения,ЮрФизЛица,ТочкиДоставки,НастройкиПоУмолчанию");
	
		ТаблицаПодразделений = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(ТаблицаПодразделений,"id,GLN,Наименование");
		
		ТаблицаЮрФизЛиц = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(ТаблицаЮрФизЛиц,"id,GLN,Наименование,ИНН,КПП,id_Подразделения");
		
		ТаблицаТочекДоставки = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(ТаблицаТочекДоставки,"id,GLN,КодРегиона,Наименование,Адрес,id_ЮрФизЛица,id_Подразделения,Индекс");
		
		ТаблицаНастроекПоУмолчанию = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(ТаблицаНастроекПоУмолчанию,"ИмяНастройки,Значение");//все-таки это будет в файле сети или в общем списке?
		
	КонецЕсли;

	// получаем объект XDTO из XML
	
	Чтение=Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ПутьКФайлу);
	
	СтруктураТиповФабрики = ПолучитьСтруктуруТиповФабрики(ФабрикаXDTO_PARTIN());
	
	ТипДанных = ?(ЗагружаетсяСписокСетей,СтруктураТиповФабрики.organizationList,СтруктураТиповФабрики.company);
	Данные=ФабрикаXDTO_PARTIN().ПрочитатьXML(Чтение,ТипДанных);
	
	Чтение.Закрыть();
	
	Если ЗагружаетсяСписокСетей Тогда
		
		Для Каждого ОписаниеОрганизации Из Данные.org Цикл
			
			НоваяСтрока = ТаблицаСетей.Добавить();
			
			НоваяСтрока.GLN						= ОписаниеОрганизации.gln;
			НоваяСтрока.Код						= ОписаниеОрганизации.code;
			НоваяСтрока.Наименование			= ОписаниеОрганизации.name;
			НоваяСтрока.ДатаОбновления			= ОписаниеОрганизации.dateUpd;
//			НоваяСтрока.НастройкиПоУмолчанию	= ОписаниеОрганизации.default1Csettings.SettingsItem;//пока не используем
			
		КонецЦикла;
		
		СтруктураТС.Сети			= ТаблицаСетей;

	Иначе //грузим отдельную сеть
		
		СтруктураТС.GLN				= Данные.gln;
		
		Для Каждого ОписаниеОрганизации Из Данные.org Цикл

			НоваяСтрока = ТаблицаЮрФизЛиц.Добавить();
			
			НоваяСтрока.GLN				= ОписаниеОрганизации.gln;
			НоваяСтрока.Наименование	= ОписаниеОрганизации.name;
			НоваяСтрока.ИНН				= ОписаниеОрганизации.inn;
			НоваяСтрока.КПП				= ОписаниеОрганизации.kpp;
			
		КонецЦикла;
		
		Для Каждого ОписаниеТочкиДоставки Из Данные.DP Цикл

			НоваяСтрока = ТаблицаТочекДоставки.Добавить();
			
			НоваяСтрока.GLN				= ОписаниеТочкиДоставки.gln;
			НоваяСтрока.Наименование	= ОписаниеТочкиДоставки.name;
			НоваяСтрока.КодРегиона		= ОписаниеТочкиДоставки.region;
			НоваяСтрока.Адрес			= ОписаниеТочкиДоставки.address;
			НоваяСтрока.Индекс			= ОписаниеТочкиДоставки.index;

		КонецЦикла;
		
		Для Каждого НастройкаПоУмолчанию Из Данные.default1Csettings.settingsItem Цикл
			
			НоваяСтрока = ТаблицаНастроекПоУмолчанию.Добавить();
			
			НоваяСтрока.ИмяНастройки				= НастройкаПоУмолчанию.name;
			НоваяСтрока.Значение					= НастройкаПоУмолчанию.value;
			
		КонецЦикла;

		СтруктураТС.Подразделения			= ТаблицаПодразделений;
		СтруктураТС.ЮрФизЛица				= ТаблицаЮрФизЛиц;
		СтруктураТС.ТочкиДоставки			= ТаблицаТочекДоставки;
		СтруктураТС.НастройкиПоУмолчанию	= ТаблицаНастроекПоУмолчанию;
		
	КонецЕсли;
	
	Возврат СтруктураТС;
	
КонецФункции

//используется в стартовом помощнике при определении реквизитов текущей организации (читает файл Settings/Party.xml)
Функция ПрочитатьФайлНастроек(ПутьКФайлу) Экспорт
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("GLN");
	СтруктураНастроек.Вставить("КемЯвляется");
	СтруктураНастроек.Вставить("Наименование");
	СтруктураНастроек.Вставить("box_id");
	
	Чтение = Новый ЧтениеXML;
	
	Попытка
		
		Чтение.ОткрытьФайл(ПутьКФайлу);
		Чтение.Прочитать();
		
	Исключение

		Возврат Неопределено;
		
	КонецПопытки;
	
//	Чтение.Прочитать();	 
	
	ТипXML_НачалоЭлемента	= ТипУзлаXML.НачалоЭлемента;
	ТипXML_Текст			= ТипУзлаXML.Текст;
	ТипXML_КонецЭлемента	= ТипУзлаXML.КонецЭлемента;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипXML_КонецЭлемента Тогда
			Продолжить;
		КонецЕсли;
		
		Если Чтение.ТипУзла = ТипXML_НачалоЭлемента Тогда
			
			 ТекИмя = Чтение.Имя;
			 
		Иначе
			
			ЗначениеПоля = СокрЛП(Чтение.Значение);
			
			Если ТекИмя = "Gln" Тогда
				СтруктураНастроек.GLN = ЗначениеПоля;
			ИначеЕсли ТекИмя = "PartyTypeCode" Тогда
				СтруктураНастроек.КемЯвляется = ЗначениеПоля;
			ИначеЕсли ТекИмя = "PartyName" Тогда
				СтруктураНастроек.Наименование = ЗначениеПоля;
			ИначеЕсли нрег(ТекИмя) = "id" Тогда
				СтруктураНастроек.box_id = ЗначениеПоля;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Чтение.Закрыть();
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ПолучитьКоличествоСтрокСпискаXDTO(СписокXDTO)
	
	Если ТипЗнч(СписокXDTO) = Тип("ОбъектXDTO") Тогда
		Возврат 1;
	ИначеЕсли ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		Возврат СписокXDTO.Количество();
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПолучитьЭлементСпискаXDTO(СписокXDTO,Сч)
	
	Если ТипЗнч(СписокXDTO) = Тип("ОбъектXDTO") Тогда
		Если Сч=0 Тогда // он всегда один
			Возврат СписокXDTO;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		Возврат СписокXDTO.Получить(Сч);
	КонецЕсли;
			
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьСообщениеEDIизXDTO(СообщениеXDTO,СообщениеEDI,ТипСообщения,Направление)
	
	// только ALCRPT
	
	ИмяДокумента = "alcoholReport";
	
	СообщениеEDI.ID = СообщениеXDTO.ID;
	
	СообщениеEDI.ТипСообщения = ТипСообщения;
	СообщениеEDI.Направление  = Направление;
	
	ШапкаСообщенияXDTO = СообщениеXDTO[ИмяДокумента];
	
    СообщениеEDI.ДокументEDI.Номер	= ШапкаСообщенияXDTO.number;
	СообщениеEDI.ДокументEDI.Дата	= ДатаXML_в_Дата1С(ШапкаСообщенияXDTO.date);
	
	
	Если НЕ ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO,"originOrder") = Неопределено Тогда
		СообщениеEDI.ЗаказEDI.Номер		= ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO.originOrder,"number");
		ДатаЗаказа = ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO.originOrder,"date");
		Если ЗначениеЗаполнено(ДатаЗаказа) Тогда
			СообщениеEDI.ЗаказEDI.Дата		= ДатаXML_в_Дата1С(ДатаЗаказа);
		КонецЕсли;		
	КонецЕсли;
	Если НЕ ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO,"receivingIdentificator") = Неопределено Тогда
		СообщениеEDI.НакладнаяEDI.Номер = ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO.receivingIdentificator,"number");
		ДатаНакладной = ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO.receivingIdentificator,"date");
		Если ЗначениеЗаполнено(ДатаНакладной) Тогда
			СообщениеEDI.НакладнаяEDI.Дата		= ДатаXML_в_Дата1С(ДатаНакладной);
		КонецЕсли;	
	КонецЕсли;	
		
	Если НЕ ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO.deliveryInfo,"waybill") = Неопределено Тогда
		
		СообщениеEDI.ТранспортнаяНакладнаяEDI.Номер	= ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO.deliveryInfo.waybill,"number");
		Если НЕ ПолучитьЗначениеСвойстваXDTO(ШапкаСообщенияXDTO.deliveryInfo.waybill,"date") = Неопределено Тогда
			СообщениеEDI.ТранспортнаяНакладнаяEDI.Дата	= ДатаXML_в_Дата1С(ШапкаСообщенияXDTO.deliveryInfo.waybill.date);
		КонецЕсли;
			
	КонецЕсли;
	
	СообщениеEDI.ОтправительEDI.GLN = СообщениеXDTO.interchangeHeader.sender;
	СообщениеEDI.ПолучательEDI.GLN	= СообщениеXDTO.interchangeHeader.recipient;
	
	ЗаполнитьЮрФизЛицоXDTO(СообщениеEDI.ПродавецEDI,			ШапкаСообщенияXDTO.seller);
	ЗаполнитьЮрФизЛицоXDTO(СообщениеEDI.ПокупательEDI,			ШапкаСообщенияXDTO.buyer);
	ЗаполнитьЮрФизЛицоXDTO(СообщениеEDI.ГрузоотправительEDI,	ШапкаСообщенияXDTO.deliveryInfo.shipFrom);
	ЗаполнитьЮрФизЛицоXDTO(СообщениеEDI.ГрузополучательEDI,		ШапкаСообщенияXDTO.deliveryInfo.shipTo);                                    
	
	КоличествоСтрокТоваров = ПолучитьКоличествоСтрокСпискаXDTO(ШапкаСообщенияXDTO.lineItems.lineItem);

	сч = 0;
	
	Для н = 1 По КоличествоСтрокТоваров Цикл
		
		СтрокаТоваровXDTO = ПолучитьЭлементСпискаXDTO(ШапкаСообщенияXDTO.lineItems.lineItem,н-1);
		
		Если ТипСообщения = "ALCRPT" Тогда
			
			КоличествоСтрокПартий = ПолучитьКоличествоСтрокСпискаXDTO(СтрокаТоваровXDTO.lot);

			Для п = 1 По КоличествоСтрокПартий Цикл
				
				СтрокаПартийXDTO = ПолучитьЭлементСпискаXDTO(СтрокаТоваровXDTO.lot,п-1);
				
				сч = сч+1;
				
				НоваяСтрока = СообщениеEDI.Товары.Добавить();
				НоваяСтрока.НомерСтроки = сч;
				
				НоваяСтрока.GTIN				= ПолучитьЗначениеСвойстваXDTO(СтрокаТоваровXDTO,"gtin");
				НоваяСтрока.КодТовараПокупателя = ПолучитьЗначениеСвойстваXDTO(СтрокаТоваровXDTO,"internalBuyerCode");
				НоваяСтрока.КодТовараПоставщика = ПолучитьЗначениеСвойстваXDTO(СтрокаТоваровXDTO,"internalSupplierCode");
				
				НоваяСтрока.Наименование			= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"description");
				НоваяСтрока.Количество				= СтрокаПартийXDTO.volume.__content;
				НоваяСтрока.КодЕдиницыИзмеренияEDI	= СтрокаПартийXDTO.volume.unitOfMeasure;
				
				// Алко поля
				
				НоваяСтрока.АлкоКодПродукции			= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"typeOfAlco");
				НоваяСтрока.АлкоОбъем					= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"volumeOfUnitInLiter");
				НоваяСтрока.АлкоПризнакТипаПродукции	= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"signOfAlco");
				
				ДатаРозлива = ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"bottlingDate");
				Если ЗначениеЗаполнено(ДатаРозлива) Тогда
					НоваяСтрока.АлкоДатаРозлива		= ДатаXML_в_Дата1С(ДатаРозлива);
				КонецЕсли;
				
				// Алко. Производитель
				
				АлкоПроизводитель = ПолучитьСтруктуруПоляСообщения("ЮрФизЛицо");
				Если НЕ ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"manufacturer") = Неопределено Тогда
					ЗаполнитьЮрФизЛицоXDTO(АлкоПроизводитель, СтрокаПартийXDTO.manufacturer);
				КонецЕсли;	
				НоваяСтрока.АлкоПроизводительEDI = АлкоПроизводитель;
				
				// Алко. Иностранный производитель
				
				АлкоИностранныйПроизводитель = ПолучитьСтруктуруПоляСообщения("ЮрФизЛицо");
				Если НЕ ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"foreignManufacturer") = Неопределено Тогда
					ЗаполнитьЮрФизЛицоXDTO(АлкоИностранныйПроизводитель, СтрокаПартийXDTO.foreignManufacturer);
				КонецЕсли;
				НоваяСтрока.АлкоИностранныйПроизводительEDI = АлкоИностранныйПроизводитель;

				// Алко. Лицензия поставщика
				
				АлкоЛицензияПоставщика = ПолучитьСтруктуруПоляСообщения("АлкоЛицензия");
				
				Если НЕ ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"licenseSeller") = Неопределено Тогда
					АлкоЛицензияПоставщика.Серия			= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO.licenseSeller,"seriesNumber");
					ДатаНачала		= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO.licenseSeller,"startdate");
					ДатаОкончания	= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO.licenseSeller,"enddate");
					Если ЗначениеЗаполнено(ДатаНачала) Тогда
						АлкоЛицензияПоставщика.ДатаНачала		= ДатаXML_в_Дата1С(ДатаНачала);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДатаОкончания) Тогда
						АлкоЛицензияПоставщика.ДатаОкончания	= ДатаXML_в_Дата1С(ДатаОкончания);
					КонецЕсли;
					АлкоЛицензияПоставщика.КемВыдана		= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO.licenseSeller,"issuerOf");
				КонецЕсли;
			
				НоваяСтрока.АлкоЛицензияПоставщика = АлкоЛицензияПоставщика; 
				
				// Алко. Сертификат продукции
				
				АлкоСертификатПродукции = ПолучитьСтруктуруПоляСообщения("АлкоСертификат");
				
				Если НЕ ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO,"certificate") = Неопределено Тогда
					АлкоСертификатПродукции.Серия			= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO.certificate,"number");
					ДатаНачала		= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO.certificate,"startdate");
					ДатаОкончания	= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO.certificate,"enddate");
					Если ЗначениеЗаполнено(ДатаНачала) Тогда
						АлкоСертификатПродукции.ДатаНачала		= ДатаXML_в_Дата1С(ДатаНачала);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДатаОкончания) Тогда
						АлкоСертификатПродукции.ДатаОкончания	= ДатаXML_в_Дата1С(ДатаОкончания);
					КонецЕсли;
					АлкоСертификатПродукции.КемВыдана		= ПолучитьЗначениеСвойстваXDTO(СтрокаПартийXDTO.certificate,"issuerOf");
				КонецЕсли;
			
				НоваяСтрока.АлкоСертификатПродукции = АлкоСертификатПродукции; 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// поля от других сообщений, которые не протянуты
	
	//СообщениеEDI.ДатаПоставки		= ДатаXML_в_ДатаВремя1С(СообщениеXML.ДатаВремяПоставки);
	
	//Если СообщениеEDI.ТипСообщения = "DESADV" Тогда
	//	
	//	СообщениеEDI.ДатаОтгрузки	= СообщениеXML.ДатаОтгрузки;
	//	
	//	СообщениеEDI.Транспортировка.РежимПеревозки				= СообщениеXML.РежимПеревозки;
	//	СообщениеEDI.Транспортировка.ИмяВодителя				= СообщениеXML.ИмяВодителя;
	//	СообщениеEDI.Транспортировка.НомерТранспортногоСредства	= СообщениеXML.НомерТранспортногоСредства;
	//	СообщениеEDI.Транспортировка.МаркаТранспортногоСредства	= СообщениеXML.МаркаТранспортногоСредства;
	//	
	//КонецЕсли;
	
	//СообщениеEDI.НомерСерииЗаказов	= СообщениеXML.НомерСерииЗаказов;
	
	//СообщениеEDI.ПриемкаEDI.Номер	= СообщениеXML.НомерПриемки;
	//СообщениеEDI.ПриемкаEDI.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаПриемки);
	//СообщениеEDI.СчетФактураEDI.Номер	= СообщениеXML.НомерСчетФактуры;
	//СообщениеEDI.СчетФактураEDI.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаСчетФактуры);
	//Если ТипСообщения = "ORDERS" Тогда
	//	СообщениеEDI.ОбратныйЗаказEDI.Номер	= СообщениеXML.НомерОбратногоЗаказа;
	//	СообщениеEDI.ОбратныйЗаказEDI.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаОбратногоЗаказа);
	//КонецЕсли;	
//врата	
	//Если (ТипСообщения = "ORDERS") или (ТипСообщения = "ORDRSP") Тогда
	//	массив=СообщениеXML.Транспортировка.ВыгрузитьКолонку("ДатаВремяПрибытия");
	//	СообщениеEDI.Транспортировка.ДатаВремяПрибытия.ЗагрузитьЗначения(массив);
	//	Если ТипСообщения = "ORDERS" тогда
	//		СообщениеEDI.Транспортировка.ДатаВремяПрибытия.ЗаполнитьПометки(Истина);
	//	конецесли;
	//	//г=1/0;
	//конецесли;
//	
	//СообщениеEDI.ВалютаEDI			= СообщениеXML.Валюта;
	//СообщениеEDI.СуммаВсего 		= СообщениеXML.СуммаВсего;
	//СообщениеEDI.СуммаВсегоБезНДС	= СообщениеXML.СуммаВсегоБезНДС;
	//СообщениеEDI.СуммаВсегоНДС		= СообщениеXML.СуммаВсегоНДС;
	//
	//СообщениеEDI.Статус				= СообщениеXML.Статус;
	//
	//СообщениеEDI.ПромоНомер			= СообщениеXML.ПромоНомер;
	//СообщениеEDI.Комментарий		= СообщениеXML.Комментарий;
	
	//ЗаполнитьЮрФизЛицо(СообщениеXML.Плательщик,			СообщениеEDI.ПлательщикEDI);
	
	
КонецПроцедуры

Функция ПрочитатьСообщениеXDTO(ПутьКФайлуXML,ТипСообщения,Направление)
	
	СообщениеEDI = ПолучитьСтруктуруСообщения(ТипСообщения,Направление);
	
	// получаем объект XDTO из XML
	ТекстXML=Новый ТекстовыйДокумент;
	ТекстXML.Прочитать(ПутьКФайлуXML);
	
	ТекстXML = ТекстXML.ПолучитьТекст();
	
	ТекстXML=(СтрЗаменить(ТекстXML,
		"<eDIMessage ",
		"<eDIMessage xmlns="""+xmlПространствоИменСообщений()+""" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" "
		));
		
	Чтение=Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	Чтение.ПерейтиКСодержимому();
	
	СтруктураТиповФабрики = ПолучитьСтруктуруТиповФабрики(ФабрикаXDTO_EdiXml());
	
	Данные=ФабрикаXDTO_EdiXml().ПрочитатьXML(Чтение,СтруктураТиповФабрики.eDIMessageType);
	Чтение.Закрыть();
	
	// помещаем все теги в структуру сообщения
	
	ЗаполнитьСообщениеEDIизXDTO(Данные,СообщениеEDI,ТипСообщения,Направление);
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеЧтенияСообщения_XDTO",,Новый Структура("Сообщение,Данные",СообщениеEDI,Данные));
	
	Возврат СообщениеEDI;
	
КонецФункции

//альтернативный вариант, не лучший, но позволяет перейти на XDTO очень быстро.
Функция ПрочитатьСообщениеXDTO_2(ПутьКФайлуXML,ТипСообщения,Направление)
	
	// получаем объект XDTO из XML
	ТекстXML=Новый ТекстовыйДокумент;
	ТекстXML.Прочитать(ПутьКФайлуXML);
	
	ТекстXML = ТекстXML.ПолучитьТекст();
	
	ТекстXML=(СтрЗаменить(ТекстXML,
		"<eDIMessage ",
		"<eDIMessage xmlns="""+xmlПространствоИменСообщений()+""" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" "
		));
		
	Чтение=Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	
	//СтруктураТиповФабрики = ПолучитьСтруктуруТиповФабрики(ФабрикаXDTO_EdiXml());
	
	_ТипEDIMessage = ФабрикаXDTO_EdiXml().Тип(xmlПространствоИменСообщений(),"eDIMessageType");
	Чтение.ПерейтиКСодержимому();
	Данные=ФабрикаXDTO_EdiXml().ПрочитатьXML(Чтение,_ТипEDIMessage);
	Чтение.Закрыть();
	
	// помещаем все теги в структуру сообщения
	
	БуферXML = ПодготовитьБуферXML(ТипСообщения);
	Маппинг = ПолучитьМаппингПолейXML("Документ", ТипСообщения);//это маппинг полей XML и полей промежуточного буфера.
	
	РаспарситьXDTOРекурсивно(Данные,Маппинг,"Структура",БуферXML,"",ТипСообщения);//здесь Сообщение - это промежуточный буфер, в который мы сгружаем дерево XML
	//проблема: в терминах XDTO преобразования дат выполняются сами собой. Чисел - тоже.
	//а даты еще и смещаются при наличии Z на конце
	
	СообщениеEDI = ПолучитьСтруктуруСообщения(ТипСообщения,Направление);//это заготовка, куда перекинем все содержимое из Сообщение
	ЗаполнитьСообщениеEDI(БуферXML,СообщениеEDI,ТипСообщения,Направление);
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеЧтенияСообщения_XDTO",,Новый Структура("Сообщение,Данные",СообщениеEDI,Данные));
	
	Возврат СообщениеEDI;
	
КонецФункции

Функция ПолучитьСтруктуруТиповФабрики(ФабрикаXDTO_EdiXml) Экспорт
	
	СтруктураТипов = Новый Структура;
	
	Для Каждого Пакет Из ФабрикаXDTO_EdiXml.Пакеты Цикл
		Если Найти(ВРЕГ(Пакет.URIПространстваИмен),".KONTUR.RU")>0 Тогда //берем только наши фабрики
			Для Сч=0 По Пакет.Количество()-1 Цикл
				Свойство = Пакет.Получить(Сч);
				СтруктураТипов.Вставить(Свойство.Имя,Свойство);
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СтруктураТипов;
	
КонецФункции	

Функция ПрочитатьСообщениеПоНовому(ПутьКФайлуXML,ТипСообщения,Направление)
	
	Если ТипСообщения = "reports" Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("ПутьКФайлу",ПутьКФайлуXML);
		РезультатКонвертации = КонвертироватьВходящееСообщение_REPORTS(Параметры,"reports");
		//на рефакторинг: возможно, это единственное место, где мы обращаемся к функциям ПолучитьСтруктуруСообщения_... в текущем модуле. И только для REPORTS
		
		Возврат РезультатКонвертации.Шапка;
		
	Иначе
		
		Если ТипСообщения = "ALCRPT" Тогда
			
			СообщениеEDI = ПрочитатьСообщениеXDTO(ПутьКФайлуXML,ТипСообщения,Направление);
			//ALCRPT оставляем пока отдельным алгоритмом
			
		ИначеЕсли НастройкиМодуля.ИспользоватьXDTOПарсинг Тогда
			// через XDTO
			
			СообщениеEDI = ПрочитатьСообщениеXDTO_2(ПутьКФайлуXML,ТипСообщения,Направление);
			
		Иначе
			// через разбор XML
			
			Чтение = Новый ЧтениеXML;
			
			Попытка
				
				Чтение.ОткрытьФайл(ПутьКФайлуXML);
				Чтение.Прочитать();
				
			Исключение
				
				Возврат "При чтении сообщения "+ТипСообщения+" из файла """+ПутьКФайлуXML+""" возникла ошибка: "+ОписаниеОшибки();
				
			КонецПопытки;
			
			БуферXML = ПодготовитьБуферXML(ТипСообщения);
			МаппингПолейXML = ПолучитьМаппингПолейXML("Документ", ТипСообщения);//это маппинг полей XML и полей промежуточного буфера.
			
			РаспарситьXMLРекурсивно(Чтение,МаппингПолейXML,"Структура",БуферXML,"",ТипСообщения);//здесь Сообщение - это промежуточный буфер, в который мы сгружаем дерево XML
			
			СообщениеEDI = ПолучитьСтруктуруСообщения(ТипСообщения,Направление);//это заготовка, куда перекинем все содержимое из Сообщение
			ЗаполнитьСообщениеEDI(БуферXML,СообщениеEDI,ТипСообщения,Направление);
			
		КонецЕсли;
		
		СообщениеEDI.ПутьКФайлу = ПутьКФайлуXML;
		
		ОбработкаСобытияПодключаемогоМодуля("ПослеЧтенияСообщенияИзФайла",,
				Новый Структура("Сообщение",
				СообщениеEDI));
				
		Возврат СообщениеEDI;
		
	КонецЕсли;
	
КонецФункции

// XDTO и XML


Процедура XML_ОбработатьКолонкиСТипомСтруктура(НайденноеПолеСтруктуры,ТипСообщения,СтруктураПоля)
	//теперь проверим, нет ли в этой таблице колонок-структур
	СтруктураДанныхПоля = ПолучитьМаппингПолейXML(НайденноеПолеСтруктуры.ИмяСтруктуры,ТипСообщения);
	Для Каждого КолонкаМетаданныхТЗ Из СтруктураДанныхПоля Цикл
		Если ЗначениеЗаполнено(КолонкаМетаданныхТЗ.ИмяСтруктуры) Тогда 
			//Эта колонка содержит в себе структуру - затолкаем её в ячейку этой колонки по текущей строке
			ОписаниеСтруктурыЯчейкиТЗ=ПолучитьМаппингПолейXML(КолонкаМетаданныхТЗ.ИмяСтруктуры,ТипСообщения);
			ТекстПолей="";
			Для каждого РеквизитЯчейки Из ОписаниеСтруктурыЯчейкиТЗ Цикл
				ТекстПолей=ТекстПолей+?(СтрДлина(ТекстПолей)=0,РеквизитЯчейки.ИмяПоля,","+РеквизитЯчейки.ИмяПоля)
			КонецЦикла;
			Если СтрДлина(ТекстПолей)>0 Тогда 
				ТекстПрисваивания="СтруктураПоля."+КолонкаМетаданныхТЗ.ИмяСтруктуры+" = Новый Структура("""+ТекстПолей+""");";
				Выполнить(ТекстПрисваивания);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//
КонецПроцедуры

//Заглушка для совместимости со старыми ПМ
Функция ЗаписатьДанныеЮрФизЛица(ЗаписьХМЛ,ИмяПоля,ЮрФизЛицо,ВыгрузкаТолькоОрганизации = Ложь) Экспорт
	xmlЗаписатьContractor(ЗаписьХМЛ,ИмяПоля,ЮрФизЛицо,ВыгрузкаТолькоОрганизации = Ложь)
КонецФункции


//Заполнение всего сообщения EdiMessage, точка входа
Процедура xmlЗаписатьEdiMessage(ЗаписьХМЛ,Сообщение,НеОтправлятьКодПоставщика)
	
	Если НастройкиМодуля.ИспользоватьXDTOСериализацию
		Или Сообщение.ТипСообщения="PRICELIST" Тогда//PRICELIST по старым правилам создавать уже не будем.
		
		Тип = ФабрикаXDTO_EdiXml().Тип(xmlПространствоИменСообщений(),"eDIMessageType");
		EdiMessage = СоздатьПустойОбъектXDTO(ФабрикаXDTO_EdiXml(),Тип);  //Разобраться уже наконец с deliveryInfo!
		
		Если Сообщение.ТипСообщения="PRICELIST" Тогда
			КонвертироватьСообщение1СвEDI(Сообщение);
			ЗаполнитьОбъектСообщения_PRICELIST(EdiMessage,Сообщение);
		Иначе
			xmlЗаписатьEdiMessage_XDTO(EdiMessage,Сообщение);
		КонецЕсли;
		
		ОбработкаСобытияПодключаемогоМодуля("ПослеЗаполнения_EdiMessage_XDTO",,Новый Структура("EdiMessage,Сообщение",EdiMessage,Сообщение));
		//Здесь аккуратней, при SSCC разбивка по паллетам меняет таб.часть сообщения
		
		ФабрикаXDTO_EdiXml().ЗаписатьXML(ЗаписьХМЛ,EdiMessage,"eDIMessage");
		
		Возврат;
		
	КонецЕсли;
	
	ИмяДокумента = "";
	ИмяКоличества = "";
	ДатаПоставки = "";
	ОпределитьИменаРеквизитовСообщения(Сообщение.ТипСообщения,ИмяДокумента,ИмяКоличества,ДатаПоставки);
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("eDIMessage");
	ЗаписьХМЛ.ЗаписатьАтрибут("id",Сообщение.ID);
	
		//секция "interchangeHeader"
		xmlЗаписатьInterchangeHeader(ЗаписьХМЛ,Сообщение);

		//секция документа: ORDERS...INVOIC
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента(ИмяДокумента);
			ЗаписьХМЛ.ЗаписатьАтрибут("number",	Сообщение.ДокументEDI.Номер);
			ЗаписьХМЛ.ЗаписатьАтрибут("date",	Дата1С_в_ДатаXML(Сообщение.ДокументEDI.Дата));
			
			Если Сообщение.ТипСообщения = "INVOIC" Тогда
				Если Сообщение.Свойство("Исправление") И Сообщение.Исправление = Истина Тогда
					
					ЗаписьХМЛ.ЗаписатьАтрибут("type",	"Replace");
					ЗаписьХМЛ.ЗаписатьАтрибут("revisionNumber", СокрЛП(Сообщение.НомерИсправления));
					ЗаписьХМЛ.ЗаписатьАтрибут("revisionDate", Дата1С_в_ДатаXML(Сообщение.ДатаИсправления));
					
					Если Сообщение.СчетФактураEDI.Свойство("ДиадокID") И ЗначениеЗаполнено(Сообщение.СчетФактураEDI.ДиадокID) Тогда
						ЗаписьХМЛ.ЗаписатьНачалоЭлемента("revisionedInvoic");
							ЗаписьХМЛ.ЗаписатьАтрибут("id",	Сообщение.СчетФактураEDI.ДиадокID);
						ЗаписьХМЛ.ЗаписатьКонецЭлемента();
					КонецЕсли;

				Иначе
					ЗаписьХМЛ.ЗаписатьАтрибут("type",	"Original");
				КонецЕсли;
			КонецЕсли;
			
			Если Сообщение.ТипСообщения = "ORDERS" Тогда
				Если ЗначениеЗаполнено(Сообщение.Статус) И (Сообщение.Статус = "Отменен" ИЛИ Сообщение.Статус = "Canceled") Тогда
					ЗаписьХМЛ.ЗаписатьАтрибут("status",	"Canceled");
				КонецЕсли;
				Если Сообщение.Свойство("ОбратныйЗаказEDI") Тогда
					xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "proposalOrdersIdentificator", Сообщение.ОбратныйЗаказEDI.Номер, Сообщение.ОбратныйЗаказEDI.Дата);
				КонецЕсли;
			ИначеЕсли Сообщение.ТипСообщения = "ORDRSP" Тогда
				ЗаписьХМЛ.ЗаписатьАтрибут("status",	ПреобразоватьСтатус(Сообщение.Статус));
			ИначеЕсли Сообщение.ТипСообщения = "DESADV" Тогда
				Если ЗначениеЗаполнено(Сообщение.Статус) Тогда
					ЗаписьХМЛ.ЗаписатьАтрибут("status",	ПреобразоватьСтатус(Сообщение.Статус));
				КонецЕсли;
			ИначеЕсли Сообщение.ТипСообщения = "COINVOIC" Тогда
				Если Сообщение.Исправление = Истина Тогда
					ЗаписьХМЛ.ЗаписатьАтрибут("type",	"Replace");
					ЗаписьХМЛ.ЗаписатьАтрибут("revisionNumber", СокрЛП(Сообщение.НомерИсправления));
					ЗаписьХМЛ.ЗаписатьАтрибут("revisionDate", Дата1С_в_ДатаXML(Сообщение.ДатаИсправления));
				Иначе
					ЗаписьХМЛ.ЗаписатьАтрибут("type",	"Original");
				КонецЕсли;	
			ИначеЕсли Сообщение.ТипСообщения = "ALCRPT" Тогда
				Если Сообщение.БылОтправленALCRPT Тогда
					ЗаписьХМЛ.ЗаписатьАтрибут("Status",	"Replace");
				КонецЕсли;
			КонецЕсли;
			
			xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "originOrder",				Сообщение.ЗаказEDI.Номер,		Сообщение.ЗаказEDI.Дата);
			
			Если Сообщение.ТипСообщения = "ALCRPT" Тогда                                                   
				xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "despatchIdentificator",                    Сообщение.НакладнаяEDI.Номер,        Сообщение.НакладнаяEDI.Дата);
				xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "receivingIdentificator",                   Сообщение.НакладнаяEDI.Номер,        Сообщение.НакладнаяEDI.Дата);
			ИначеЕсли Сообщение.ТипСообщения = "RETREC" Тогда   
				xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "returnDespatchIdentificator",              Сообщение.НакладнаяEDI.Номер,      Сообщение.НакладнаяEDI.Дата);
			Иначе
				xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "despatchIdentificator",                    Сообщение.НакладнаяEDI.Номер,      Сообщение.НакладнаяEDI.Дата);
			конецесли;
             			
			Если Сообщение.Свойство("НомерПриемкиПокупателя") Тогда
				Если ЗначениеЗаполнено(Сообщение.НомерПриемкиПокупателя) Тогда
					ЗаписьХМЛ.ЗаписатьНачалоЭлемента("receivingAdviceIdentificatorInBuyerSystem");
					ЗаписьХМЛ.ЗаписатьАтрибут("number",	Сообщение.НомерПриемкиПокупателя);
					ЗаписьХМЛ.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
			
			Если Сообщение.ТипСообщения = "DESADV" Тогда
				xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "invoiceIdentificator",	Сообщение.СчетФактураEDI.Номер,	Сообщение.СчетФактураEDI.Дата);
			КонецЕсли;
			//ЗаписатьДанныеДокумента(ЗаписьХМЛ, "despatchIdentificator",		Сообщение.НакладнаяEDI.Номер,	Сообщение.НакладнаяEDI.Дата);
			
			////  ТС Низкоцен PORDERS contractIdentificator Теперь на все сообщения для всех сетей
			//Если Сообщение.ТипСообщения = "PORDERS" Тогда
			Если Сообщение.Свойство("Контракт") И Сообщение.Контракт.Свойство("Номер") И Сообщение.Контракт.Свойство("Дата")Тогда
				xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "contractIdentificator",		Сообщение.Контракт.Номер,	Сообщение.Контракт.Дата);
			КонецЕсли;	
			//КонецЕсли;

			Если Сообщение.ТипСообщения = "INVOIC" ИЛИ Сообщение.ТипСообщения = "COINVOIC" Тогда
				
				Если Сообщение.Свойство("ОтветНаЗаказEDI",) И Сообщение.ОтветНаЗаказEDI.Свойство("Номер") И Сообщение.ОтветНаЗаказEDI.Свойство("Дата") Тогда
					Если ЗначениеЗаполнено(Сообщение.ОтветНаЗаказEDI.Номер) или ЗначениеЗаполнено(Сообщение.ОтветНаЗаказEDI.Дата) Тогда
						xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "orderResponse",		Сообщение.ОтветНаЗаказEDI.Номер,	Сообщение.ОтветНаЗаказEDI.Дата);			
					КонецЕсли;
				КонецЕсли;
				
				Если Сообщение.Свойство("ПриемкаEDI",) И Сообщение.ПриемкаEDI.Свойство("Номер") И Сообщение.ПриемкаEDI.Свойство("Дата") Тогда
					Если ЗначениеЗаполнено(Сообщение.ПриемкаEDI.Номер) или ЗначениеЗаполнено(Сообщение.ПриемкаEDI.Дата) Тогда
						xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "receivingIdentificator",		Сообщение.ПриемкаEDI.Номер,	Сообщение.ПриемкаEDI.Дата);			
					КонецЕсли;
				КонецЕсли;
				
				//Если Сообщение.Свойство("Контракт") И Сообщение.Контракт.Свойство("Номер") И Сообщение.Контракт.Свойство("Дата")Тогда     
				//	xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "contractIdentificator",		Сообщение.Контракт.Номер,	Сообщение.Контракт.Дата);
				//КонецЕсли; //!!!Теперь на все сообщения для всех сетей	
			КонецЕсли;
			
			Если Сообщение.ТипСообщения = "COINVOIC" Тогда
				Если Сообщение.Свойство("СчетФактураEDI",) И Сообщение.СчетФактураEDI.Свойство("Номер") И Сообщение.СчетФактураEDI.Свойство("Дата") Тогда
					Если ЗначениеЗаполнено(Сообщение.СчетФактураEDI.Номер) или ЗначениеЗаполнено(Сообщение.СчетФактураEDI.Дата) Тогда
						
						ЗаписьХМЛ.ЗаписатьНачалоЭлемента("originInvoic");
							ЗаписьХМЛ.ЗаписатьАтрибут("number",	Сообщение.СчетФактураEDI.Номер);
							ЗаписьХМЛ.ЗаписатьАтрибут("date",	Дата1С_в_ДатаXML(Сообщение.СчетФактураEDI.Дата));
							Если Сообщение.СчетФактураEDI.Свойство("ДиадокID") Тогда
								Если ЗначениеЗаполнено(Сообщение.СчетФактураEDI.ДиадокID) Тогда
									ЗаписьХМЛ.ЗаписатьАтрибут("diadocInvoicId",	Сообщение.СчетФактураEDI.ДиадокID);
								КонецЕсли;		
							КонецЕсли;	
							Если Сообщение.СчетФактураEDI.Свойство("Исправление") Тогда
								Если Сообщение.СчетФактураEDI.Исправление = Истина Тогда
									ЗаписьХМЛ.ЗаписатьАтрибут("revisionNumber",	Сообщение.СчетФактураEDI.НомерИсправления);
									ЗаписьХМЛ.ЗаписатьАтрибут("revisionDate",	Дата1С_в_ДатаXML(Сообщение.СчетФактураEDI.ДатаИсправления));
								КонецЕсли;
							КонецЕсли;
								
						ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение.НомерСерииЗаказов) Тогда
				
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("blanketOrderIdentificator");
					ЗаписьХМЛ.ЗаписатьАтрибут("number",	Сообщение.НомерСерииЗаказов);
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
			Если Сообщение.ТипСообщения = "DESADV" Тогда
				Если Сообщение.Свойство("ТТНвЕГАИС") И ЗначениеЗаполнено(Сообщение.ТТНвЕГАИС) Тогда
					xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "egaisRegistrationIdentificator", Сообщение.ТТНвЕГАИС.Номер, Сообщение.ТТНвЕГАИС.Дата);
				КонецЕсли;
				Если Сообщение.Свойство("ФиксацияВЕГАИС") И ЗначениеЗаполнено(Сообщение.ФиксацияВЕГАИС) Тогда
					xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "egaisFixationIdentificator", Сообщение.ФиксацияВЕГАИС.Номер, Сообщение.ФиксацияВЕГАИС.Дата);
				КонецЕсли;
			КонецЕсли;
			
			ВыгружатьТолькоОрганизацию = (Сообщение.ТипСообщения = "ALCRPT");
			
			//факторинг: уступочная надпись
			Если Сообщение.ТипСообщения = "INVOIC" ИЛИ Сообщение.ТипСообщения = "COINVOIC" Тогда
				Если Сообщение.Свойство("ФакторингУступочнаяНадпись") И ЗначениеЗаполнено(Сообщение.ФакторингУступочнаяНадпись) Тогда
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"factoringEncription",	Лев(СокрЛП(Сообщение.ФакторингУступочнаяНадпись),2000));
				КонецЕсли;
			КонецЕсли;
			
			xmlЗаписатьContractor(ЗаписьХМЛ, "seller",		Сообщение.ПродавецEDI,		ВыгружатьТолькоОрганизацию);
			xmlЗаписатьContractor(ЗаписьХМЛ, "buyer",		Сообщение.ПокупательEDI,	ВыгружатьТолькоОрганизацию);
			xmlЗаписатьContractor(ЗаписьХМЛ, "invoicee",	Сообщение.ПлательщикEDI,	ВыгружатьТолькоОрганизацию);
			
			//секция "deliveryInfo"
			xmlЗаписатьDeliveryInfo(ЗаписьХМЛ,Сообщение,ДатаПоставки,ВыгружатьТолькоОрганизацию);

			Если Сообщение.ТипСообщения = "ORDERS" Тогда 
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ,"comment",	Лев(СокрЛП(Сообщение.Комментарий),2560));
			КонецЕсли;
						
			//данные об упаковках DESADV
			КоличествоУпаковок = 0;
			Если Сообщение.ТипСообщения = "DESADV" 
				 И Сообщение.Свойство("ТранспортныеУпаковки")
				 И ЗначениеЗаполнено(Сообщение.ТранспортныеУпаковки) Тогда
				КоличествоУпаковок = Сообщение.ТранспортныеУпаковки.Строки.Количество();
			КонецЕсли;				
			
			Если Не КоличествоУпаковок = 0 Тогда
				
				//секция "packages" (SSCC)
				xmlЗаписатьPackages(ЗаписьХМЛ,Сообщение,КоличествоУпаковок);
				
				//дополнение табличной части данными об упаковках (возможна разбивка строк табличной части)
				ИсходнаяТаблицаТовары = Сообщение.Товары.Скопировать(); //сохраним исходный товарный состав
				ДополнитьТаблицуТоваровДаннымиОбУпаковке(Сообщение);    //скорректируем товарный состав с учетом распределения по упаковкам
				
				//возможно, стоит поменять местами запись XML и разбиение товаров
				
			КонецЕсли;
		
			//секция lineItems - контейнер для массива элементов lineItem (товарных строк)
			xmlЗаписатьLineItemS(ЗаписьХМЛ,Сообщение,НеОтправлятьКодПоставщика,ИмяКоличества);
			
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();  // документ (ORDERS...INVOIC)
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();    // eDIMessage

	//вернем обратно таблицу товаров
	Если Не КоличествоУпаковок = 0 Тогда
		Сообщение.Товары.Очистить();
		Сообщение.Товары = ИсходнаяТаблицаТовары.Скопировать(); //восстановим исходный товарный состав после корректировки с учетом распределения по упаковкам
	КонецЕсли;
	
КонецПроцедуры

//Заполнение всего сообщения EdiMessage, точка входа
Процедура xmlЗаписатьEdiMessage_XDTO(СообщениеОбъект,Сообщение)
	
	ТипСообщения = Сообщение.ТипСообщения;
	
	НеОтправлятьКодПоставщика = (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер, "НеОтправлятьКодПоставщика") = Истина);
	
	ИмяДокумента = "";
	ИмяКоличества = "";
	ДатаПоставки = "";
	ОпределитьИменаРеквизитовСообщения(ТипСообщения,ИмяДокумента,ИмяКоличества,ДатаПоставки);

	СообщениеОбъект.id					= Сообщение.id;
	
    //секция "interchangeHeader"
	xmlСоздатьДочернийЭлементXDTO(СообщениеОбъект, "interchangeHeader");
	xmlЗаписатьInterchangeHeader_XDTO(СообщениеОбъект.interchangeHeader,Сообщение);

	//сам документ
	ОбъектДокумента = xmlСоздатьДочернийЭлементXDTO(СообщениеОбъект, ИмяДокумента);//создали секцию, соответствующую имени документа: PORDERS....INVOIC
	xmlЗаписатьДанныеДокумента_XDTO(ОбъектДокумента, Сообщение.ДокументEDI.Номер, Сообщение.ДокументEDI.Дата);//номер/дата документа

	//статусы документа (атрибуты внутри тега)
	Если Сообщение.ТипСообщения = "INVOIC"
		Или Сообщение.ТипСообщения = "COINVOIC" Тогда
		
		Если Сообщение.Свойство("Исправление") И Сообщение.Исправление = Истина Тогда
			
			ОбъектДокумента.type			= "Replace";
			ОбъектДокумента.revisionNumber	= СокрЛП(Сообщение.НомерИсправления);
			ОбъектДокумента.revisionDate	= Сообщение.ДатаИсправления;
			
		Иначе
			ОбъектДокумента.type = "Original";
		КонецЕсли;
		
	ИначеЕсли Сообщение.ТипСообщения = "ORDERS" Тогда
		
		Если ЗначениеЗаполнено(Сообщение.Статус) И (Сообщение.Статус = "Отменен" ИЛИ Сообщение.Статус = "Canceled") Тогда
			ОбъектДокумента.status = "Canceled";
		КонецЕсли;
		
	ИначеЕсли Сообщение.ТипСообщения = "ORDRSP"
		Или Сообщение.ТипСообщения = "DESADV" Тогда
		
		xmlЗаполнитьЗначениеXDTO(ОбъектДокумента,	"status",	ПреобразоватьСтатус(Сообщение.Статус));
		
	ИначеЕсли Сообщение.ТипСообщения = "ALCRPT" Тогда
		
		Если Сообщение.БылОтправленALCRPT Тогда
			ОбъектДокумента.status = "Replace";
		КонецЕсли;
		
	КонецЕсли;
	
	//теперь запишем идентификаторы предыдущих/связанных документов
	//теги вроде despatchIdentificator, originOrder, contractIdentificator, egaisRegistrationIdentificator и т.е.
	xmlЗаписатьИдентификаторыДокументовВСообщениеXDTO(ОбъектДокумента,Сообщение);

	//факторинг: уступочная надпись
	Если Сообщение.ТипСообщения = "INVOIC" Тогда
		Если Сообщение.Свойство("ФакторингУступочнаяНадпись") И ЗначениеЗаполнено(Сообщение.ФакторингУступочнаяНадпись) Тогда
			ОбъектДокумента.factoringEncription = Лев(СокрЛП(Сообщение.ФакторингУступочнаяНадпись),2000);
		КонецЕсли;
	КонецЕсли;
	
	ВыгружатьТолькоОрганизацию = (Сообщение.ТипСообщения = "ALCRPT");
	
	xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,	"seller");
	xmlЗаписатьContractor_XDTO(ОбъектДокумента.seller,		"seller", 	Сообщение.ПродавецEDI, 		ВыгружатьТолькоОрганизацию);
	xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,	"buyer");
	xmlЗаписатьContractor_XDTO(ОбъектДокумента.buyer,		"buyer", 	Сообщение.ПокупательEDI, 	ВыгружатьТолькоОрганизацию);
	xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,	"invoicee");
	xmlЗаписатьContractor_XDTO(ОбъектДокумента.invoicee,	"invoicee", Сообщение.ПлательщикEDI, 	ВыгружатьТолькоОрганизацию);
		
	
	//секция "deliveryInfo"
	xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,	"deliveryInfo");
	xmlЗаписатьDeliveryInfo_XDTO(ОбъектДокумента.deliveryInfo,Сообщение,ДатаПоставки,ВыгружатьТолькоОрганизацию);
			
	//комментарий в ORDERS
	Если Сообщение.ТипСообщения = "ORDERS" Тогда 
		ОбъектДокумента.comment = Лев(СокрЛП(Сообщение.Комментарий),2560);
	КонецЕсли;
						
	//данные об упаковках DESADV - SSCC
	КоличествоУпаковок = 0;
	Если ТипСообщения = "DESADV" 
		 И Сообщение.Свойство("ТранспортныеУпаковки")
		 И ЗначениеЗаполнено(Сообщение.ТранспортныеУпаковки) Тогда
		КоличествоУпаковок = Сообщение.ТранспортныеУпаковки.Строки.Количество();
		
		Если Не КоличествоУпаковок = 0 Тогда
			
			//секция "packages" (SSCC)
			xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,	"packages");
			xmlЗаписатьPackages_XDTO(ОбъектДокумента.packages,Сообщение,КоличествоУпаковок);

			//дополнение табличной части данными об упаковках (возможна разбивка строк табличной части)
			ИсходнаяТаблицаТовары = Сообщение.Товары.Скопировать(); //сохраним исходный товарный состав
			ДополнитьТаблицуТоваровДаннымиОбУпаковке(Сообщение);    //скорректируем товарный состав с учетом распределения по упаковкам
		КонецЕсли;
		
	КонецЕсли;				
		
	//запишем lineItems - товары сообщения
	lineItems = xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,"lineItems");
	xmlЗаписатьLineItemS_XDTO(lineItems,Сообщение,НеОтправлятьКодПоставщика,ИмяКоличества);
		
КонецПроцедуры


//Заполнение секций с типом DocumentIdentificator
Функция xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, ИмяПоля, НомерДокумента, ДатаДокумента)
	
	Если НЕ ЗначениеЗаполнено(НомерДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента(ИмяПоля);
		ЗаписьХМЛ.ЗаписатьАтрибут("number",	НомерДокумента);
		ЗаписьХМЛ.ЗаписатьАтрибут("date",	Дата1С_в_ДатаXML(ДатаДокумента));
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
КонецФункции

//Заполнение секций с типом DocumentIdentificator
Функция xmlЗаписатьДанныеДокумента_XDTO(ОбъектXDTO, НомерДокумента, ДатаДокумента)
	
	Если ЗначениеЗаполнено(НомерДокумента) Тогда
		ОбъектXDTO.number	= НомерДокумента;
		ОбъектXDTO.date		= ДатаДокумента;
	КонецЕсли;	
	
КонецФункции


//Заполнение секции InterchangeHeader
Процедура xmlЗаписатьInterchangeHeader(ЗаписьХМЛ,Сообщение)

	ЗначениеТипаСообщения=Сообщение.ТипСообщения;
	Если ЗначениеТипаСообщения="PRICELIST" Тогда
		ЗначениеТипаСообщения="PRICAT"; //Формат теперь требует слово PRICAT в сообщении вместо PRICELIST, при этом пользователь будет видеть везде (втч и в веб) PRICELIST
	КонецЕсли;
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("interchangeHeader");
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "sender",			Сообщение.ОтправительEDI.GLN);
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "recipient",		Сообщение.ПолучательEDI.GLN);
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "documentType",	ЗначениеТипаСообщения);
		Если Сообщение.Свойство("ДатаСоздания") И ЗначениеЗаполнено(Сообщение.ДатаСоздания) Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "creationDateTime", Дата1С_в_ДатаВремяXML(Сообщение.ДатаСоздания));
		КонецЕсли;
		
		Если Сообщение.Свойство("isTest") И Сообщение.IsTest = 1 Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "isTest",	"1");
		КонецЕсли;	
		
		Если НЕ Сообщение.ТипСообщения = "ALCRPT" Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("data1C");
				ЗаписьХМЛ.ЗаписатьАтрибут("version",	СокрЛП(ПолучитьНомерРелиза_КонтурEDI()+" "+ПредставлениеОсобенностейМодуля()));
				ЗаписьХМЛ.ЗаписатьАтрибут("name",		ИмяКонфигурации1С);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

КонецПроцедуры

//Заполнение секции InterchangeHeader
Процедура xmlЗаписатьInterchangeHeader_XDTO(ОбъектXDTO,Сообщение)
	
	ЗначениеТипаСообщения=Сообщение.ТипСообщения;
	Если ЗначениеТипаСообщения="PRICELIST" Тогда
		ЗначениеТипаСообщения="PRICAT"; //Формат теперь требует слово PRICAT в сообщении вместо PRICELIST, при этом пользователь будет видеть везде (втч и в веб) PRICELIST
	КонецЕсли;
	
	ОбъектXDTO.sender = Сообщение.ОтправительEDI.GLN;
	ОбъектXDTO.recipient = Сообщение.ПолучательEDI.GLN;
	ОбъектXDTO.documentType = ЗначениеТипаСообщения;
	Если Сообщение.Свойство("ДатаСоздания") И ЗначениеЗаполнено(Сообщение.ДатаСоздания) Тогда
		ОбъектXDTO.creationDateTime = Сообщение.ДатаСоздания;
	КонецЕсли;
	
	Если Сообщение.Свойство("isTest") И Сообщение.IsTest = 1 Тогда
		ОбъектXDTO.isTest = "1";
	КонецЕсли;
	
	Если НЕ Сообщение.ТипСообщения = "ALCRPT" Тогда
		data1C = xmlСоздатьДочернийЭлементXDTO(ОбъектXDTO,"data1C");
		data1C.version = СокрЛП(ПолучитьНомерРелиза_КонтурEDI()+" "+ПредставлениеОсобенностейМодуля());
		data1C.name = ИмяКонфигурации1С;
	КонецЕсли;
	
КонецПроцедуры


//Заполнение секции DeliveryInfo
Процедура xmlЗаписатьDeliveryInfo(ЗаписьХМЛ,Сообщение,ДатаПоставки,ВыгружатьТолькоОрганизацию)
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("deliveryInfo");
	
		Если Сообщение.ТипСообщения = "ALCRPT" Тогда
			xmlЗаписатьДанныеДокумента(ЗаписьХМЛ, "waybill", Сообщение.ТранспортнаяНакладнаяEDI.Номер,	Сообщение.ТранспортнаяНакладнаяEDI.Дата);
		Иначе
			Если ЗначениеЗаполнено(Сообщение.ДатаПоставки) Тогда
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, ДатаПоставки, Дата1С_в_ДатаВремяXML(Сообщение.ДатаПоставки));
			КонецЕсли;	
			
			//+для АТАК
			Если Сообщение.Свойство("ДатаПоставкиФактическая") И ЗначениеЗаполнено(Сообщение.ДатаПоставкиФактическая) Тогда
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "actualDeliveryDateTime", Дата1С_в_ДатаВремяXML(Сообщение.ДатаПоставкиФактическая));
			КонецЕсли;
			//-
			
			//+Для Магнита
			Если Сообщение.Свойство("ДатаВывозаОтПоставщика") И ЗначениеЗаполнено(Сообщение.ДатаВывозаОтПоставщика) Тогда
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "exportDateTimeFromSupplier", Дата1С_в_ДатаВремяXML(Сообщение.ДатаВывозаОтПоставщика));
			КонецЕсли;	
			//-

		КонецЕсли;	
		
		Если Сообщение.ТипСообщения = "DESADV" Тогда
			Если Сообщение.Свойство("ДатаОтгрузки") Тогда
	      		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "shippingDateTime", Дата1С_в_ДатаXML(Сообщение.ДатаОтгрузки));  
			КонецЕсли;		
		КонецЕсли;
			
		xmlЗаписатьContractor(ЗаписьХМЛ, "shipFrom",	Сообщение.ГрузоотправительEDI, ВыгружатьТолькоОрганизацию);
		
		Если Сообщение.ТипСообщения = "ALCRPT" Тогда
			xmlЗаписатьContractor(ЗаписьХМЛ, "shipTo",	Сообщение.ГрузополучательEDI, Истина);
		Иначе
			Если ЗначениеЗаполнено(Сообщение.ГрузополучательEDI.GLN) Тогда
				xmlЗаписатьContractor(ЗаписьХМЛ, "shipTo",	Сообщение.ГрузополучательEDI);
			Иначе
				xmlЗаписатьContractor(ЗаписьХМЛ, "shipTo",	Сообщение.ПокупательEDI);
			КонецЕсли;
		КонецЕсли;
		
		Если Сообщение.Свойство("КонечныйГрузополучательEDI") И ЗначениеЗаполнено(Сообщение.КонечныйГрузополучательEDI.GLN) Тогда
			xmlЗаписатьContractor(ЗаписьХМЛ, "ultimateCustomer",	Сообщение.КонечныйГрузополучательEDI);	
		КонецЕсли;
		
		Если Сообщение.Свойство("ПромежуточныйГрузополучательEDI") И ЗначениеЗаполнено(Сообщение.ПромежуточныйГрузополучательEDI.GLN) Тогда
			xmlЗаписатьContractor(ЗаписьХМЛ, "warehouseKeeper",	Сообщение.ПромежуточныйГрузополучательEDI);	
		КонецЕсли;
		
		Если Сообщение.ТипСообщения = "DESADV" Тогда
			
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("transportation");	
			    ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "transportMode",	Сообщение.Транспортировка.РежимПеревозки);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vehicleNumber",	Сообщение.Транспортировка.НомерТранспортногоСредства);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vehicleBrand",	Сообщение.Транспортировка.МаркаТранспортногоСредства);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "nameOfCarrier",	Сообщение.Транспортировка.ИмяВодителя);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
			
		ИначеЕсли Сообщение.ТипСообщения = "ORDERS" или Сообщение.ТипСообщения = "ORDRSP" Тогда
//врата
			Попытка
				Для Каждого ЭлементВорот Из Сообщение.Транспортировка.ДатаВремяПрибытия Цикл
					Если Сообщение.ТипСообщения = "ORDERS" или (Сообщение.ТипСообщения = "ORDRSP" и ЭлементВорот.Пометка) тогда
						ЗаписьХМЛ.ЗаписатьНачалоЭлемента("transportation");
							ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vehicleArrivalDateTime",	ЭлементВорот.значение);
						ЗаписьХМЛ.ЗаписатьКонецЭлемента();
					КонецЕсли;
				КонецЦикла;
			Исключение	
			КонецПопытки;
		КонецЕсли;
//				
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();//deliveryInfo

КонецПроцедуры


//Заполнение секции DeliveryInfo
Процедура xmlЗаписатьDeliveryInfo_XDTO(ОбъектXDTO,Сообщение,ДатаПоставки,ВыгружатьТолькоОрганизацию)

	Если Сообщение.ТипСообщения = "ALCRPT" Тогда
		
		xmlЗаполнитьDocumentIdentificator(ОбъектXDTO, "waybill", Сообщение, "ТранспортнаяНакладнаяEDI");
		
	Иначе
		
		xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,		ДатаПоставки,			Сообщение.ДатаПоставки);//вариативное название
		
		Если Сообщение.Свойство("ДатаПоставкиФактическая") Тогда
			//+для АТАК
			xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,		"actualDeliveryDateTime",			Сообщение.ДатаПоставкиФактическая);
		КонецЕсли;
		
		Если Сообщение.Свойство("ДатаВывозаОтПоставщика")Тогда
			//+Для Магнита
			xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,		"exportDateTimeFromSupplier",		Сообщение.ДатаВывозаОтПоставщика);
		КонецЕсли;	

	КонецЕсли;	
	
	Если Сообщение.ТипСообщения = "DESADV" Тогда
		Если Сообщение.Свойство("ДатаОтгрузки") Тогда	//проверки на наличие свойства в Структуре тоже можно обернуть
			xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,		"shippingDateTime",		Сообщение.ДатаОтгрузки);
		КонецЕсли;		
	КонецЕсли;
		
	xmlСоздатьДочернийЭлементXDTO(ОбъектXDTO,"shipFrom");
	xmlЗаписатьContractor_XDTO(ОбъектXDTO.shipFrom, "shipFrom",	Сообщение.ГрузоотправительEDI, ВыгружатьТолькоОрганизацию);
	
	xmlСоздатьДочернийЭлементXDTO(ОбъектXDTO,"shipTo");
	Если Сообщение.ТипСообщения = "ALCRPT" Тогда
		xmlЗаписатьContractor_XDTO(ОбъектXDTO.shipTo, "shipTo",	Сообщение.ГрузополучательEDI, Истина);
	Иначе
		Если ЗначениеЗаполнено(Сообщение.ГрузополучательEDI.GLN) Тогда
			xmlЗаписатьContractor_XDTO(ОбъектXDTO.shipTo, "shipTo",	Сообщение.ГрузополучательEDI);
		Иначе
			xmlЗаписатьContractor_XDTO(ОбъектXDTO.shipTo, "shipTo",	Сообщение.ПокупательEDI);
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.Свойство("КонечныйГрузополучательEDI") И ЗначениеЗаполнено(Сообщение.КонечныйГрузополучательEDI.GLN) Тогда
		xmlСоздатьДочернийЭлементXDTO(ОбъектXDTO,"ultimateCustomer");
		xmlЗаписатьContractor_XDTO(ОбъектXDTO.ultimateCustomer, "ultimateCustomer",	Сообщение.КонечныйГрузополучательEDI);
	КонецЕсли;
	
	Если Сообщение.Свойство("ОтветственныйЗаДоставку") И ЗначениеЗаполнено(Сообщение.ОтветственныйЗаДоставку) Тогда
		xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,		"transportBy",			Сообщение.ОтветственныйЗаДоставку);
	КонецЕсли;
	Если Сообщение.Свойство("ТочкиСамовывоза") 
		И Сообщение.ТочкиСамовывоза<>неопределено 
		И Сообщение.ТочкиСамовывоза.Количество()>0 Тогда
		
		НоваяСтрока = ДобавитьЭлементСпискаXDTO(ОбъектXDTO.despatchParty,ФабрикаXDTO_EdiXml());
		xmlСоздатьДочернийЭлементXDTO(НоваяСтрока,"organization");
		xmlЗаполнитьЗначениеXDTO(НоваяСтрока.organization,		"name",			Сообщение.ТочкиСамовывоза[0].Наименование);
		xmlСоздатьДочернийЭлементXDTO(НоваяСтрока,"russianAddress");
		xmlЗаполнитьЗначениеXDTO(НоваяСтрока.russianAddress,		"regionISOCode",Сообщение.ТочкиСамовывоза[0].Регион);
		xmlЗаполнитьЗначениеXDTO(НоваяСтрока.russianAddress,		"city",			Сообщение.ТочкиСамовывоза[0].Город);
		xmlЗаполнитьЗначениеXDTO(НоваяСтрока.russianAddress,		"street",		Сообщение.ТочкиСамовывоза[0].Улица);
		xmlЗаполнитьЗначениеXDTO(НоваяСтрока.russianAddress,		"house",		Сообщение.ТочкиСамовывоза[0].Дом);
		xmlЗаполнитьЗначениеXDTO(НоваяСтрока.russianAddress,		"postalCode",	Сообщение.ТочкиСамовывоза[0].Индекс);
		
		xmlЗаполнитьЗначениеXDTO(НоваяСтрока,		"additionalIdentificator",			Сообщение.ТочкиСамовывоза[0].Идентификатор);
		
	КонецЕсли;
	
	
	Если Сообщение.Свойство("ПромежуточныйГрузополучательEDI") И ЗначениеЗаполнено(Сообщение.ПромежуточныйГрузополучательEDI.GLN) Тогда
		xmlСоздатьДочернийЭлементXDTO(ОбъектXDTO,"warehouseKeeper");
		xmlЗаписатьContractor_XDTO(ОбъектXDTO.warehouseKeeper, "warehouseKeeper",	Сообщение.ПромежуточныйГрузополучательEDI);
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "DESADV" Тогда
		
		НовЭлемент = ДобавитьЭлементСпискаXDTO(ОбъектXDTO.transportation,ФабрикаXDTO_EdiXml());//это массив!!!
		
		xmlЗаполнитьЗначениеXDTO(НовЭлемент,	"transportMode",	Сообщение.Транспортировка.РежимПеревозки);
		xmlЗаполнитьЗначениеXDTO(НовЭлемент,	"vehicleNumber",	Сообщение.Транспортировка.НомерТранспортногоСредства);
		xmlЗаполнитьЗначениеXDTO(НовЭлемент,	"vehicleBrand",		Сообщение.Транспортировка.МаркаТранспортногоСредства);
		xmlЗаполнитьЗначениеXDTO(НовЭлемент,	"nameOfCarrier",	Сообщение.Транспортировка.ИмяВодителя);
		
//врата
	ИначеЕсли Сообщение.ТипСообщения = "ORDERS" или Сообщение.ТипСообщения = "ORDRSP" Тогда
		Попытка
			Для Каждого ЭлементВорот Из Сообщение.Транспортировка.ДатаВремяПрибытия Цикл
					Если Сообщение.ТипСообщения = "ORDERS" или (Сообщение.ТипСообщения = "ORDRSP" и ЭлементВорот.Пометка) тогда
						//здесь явный массив, и костыли тоже есть.
						
						НовЭлемент = ДобавитьЭлементСпискаXDTO(ОбъектXDTO.transportation,ФабрикаXDTO_EdiXml());
						НовЭлемент.vehicleArrivalDateTime = ЭлементВорот.Значение;
						
					КонецЕсли;
			КонецЦикла;
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


//Заполнение секций с типом Contractor (ЮрФизлицо)
Функция xmlЗаписатьContractor(ЗаписьХМЛ,ИмяПоля,ЮрФизЛицо,ВыгрузкаТолькоОрганизации = Ложь)
	
	Если НЕ (ЗначениеЗаполнено(ЮрФизЛицо.GLN) ИЛИ ВыгрузкаТолькоОрганизации ИЛИ ИмяПоля = "manufacturer" ИЛИ ИмяПоля = "foreignManufacturer") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента(ИмяПоля);
	
	ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "gln", ЮрФизЛицо.GLN);
	
	Если ИмяПоля = "seller"
		ИЛИ  ИмяПоля = "shipTo" тогда
		Попытка
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "additionalIdentificator",	ЮрФизЛицо.КодВСистемеПокупателя);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВидКонтрагента = ЮрФизЛицо.Вид;
	
	Если ВидКонтрагента = "ЮрЛицо" Тогда
        
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("organization");
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "inn",	ЮрФизЛицо.ИНН);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "kpp",	ЮрФизЛицо.КПП);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "name",	ЮрФизЛицо.Наименование);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	ИначеЕсли ВидКонтрагента = "ФизЛицо" Тогда
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("selfEmployed");
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "inn",		ЮрФизЛицо.ИНН);
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("fullName");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "lastName",	ЮрФизЛицо.Фамилия);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "firstName",	ЮрФизЛицо.Имя);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "middleName",	ЮрФизЛицо.Отчество);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ВидКонтрагента = "Нерезидент" Тогда
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("foreignOrganization");
		
			КодСтраны = ЮрФизЛицо.Адрес.КодСтраны;
			
			Если ЗначениеЗаполнено(КодСтраны) Тогда
				Если КодСтраны = "398" Тогда
					КодСтраны = "KZ";
				ИначеЕсли КодСтраны = "112" Тогда
					КодСтраны = "BY";
				ИначеЕсли КодСтраны = "051" Тогда
					КодСтраны = "AM";
				КонецЕсли;
			КонецЕсли;
					
			ЗаписьХМЛ.ЗаписатьАтрибут("countryCode",КодСтраны);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "tin",		ЮрФизЛицо.ИНН);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "name",		ЮрФизЛицо.Наименование);	
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();		
		
	КонецЕсли;
	
	Если ИмяПоля = "manufacturer" ИЛИ ИмяПоля = "foreignManufacturer" Тогда
		
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		Возврат "";
		
	КонецЕсли;

	Если ВыгрузкаТолькоОрганизации И (ИмяПоля = "buyer" ИЛИ ИмяПоля = "seller" ИЛИ ИмяПоля = "shipFrom" ИЛИ ИмяПоля = "shipTo") Тогда
		
		Если ЗначениеЗаполнено(ЮрФизЛицо.Адрес) Тогда
			
			СвойствоАдрес = ЮрФизЛицо.Адрес;
			
			ВидАдреса = СвойствоАдрес.ВидАдреса;
			
			Если ВидАдреса = "Российский" Тогда
				
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("russianAddress");
				
					КодРегиона = КонвертироватьКодРегионаВЦифры(СвойствоАдрес.Регион);
					
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "regionISOCode",		КодРегиона);
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "district",		СвойствоАдрес.Район);
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "city",			СвойствоАдрес.Город);
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "settlement",		СвойствоАдрес.НаселенныйПункт);
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "street",			СвойствоАдрес.Улица);
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "house",			СвойствоАдрес.Дом);
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "flat",			СвойствоАдрес.Квартира);
					ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "postalCode",		СвойствоАдрес.Индекс);
				
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе	
		
		Если НЕ ВидКонтрагента = "ТолькоGLN" Тогда
			
			Если ЗначениеЗаполнено(ЮрФизЛицо.Адрес) Тогда
				
				СвойствоАдрес = ЮрФизЛицо.Адрес;
				
				ВидАдреса = СвойствоАдрес.ВидАдреса;
				
				Если ВидАдреса = "Российский" Тогда
					
					ЗаписьХМЛ.ЗаписатьНачалоЭлемента("russianAddress");
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "regionISOCode",	СвойствоАдрес.Регион);
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "district",		СвойствоАдрес.Район);
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "city",			СвойствоАдрес.Город);
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "settlement",		СвойствоАдрес.НаселенныйПункт);
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "street",			СвойствоАдрес.Улица);
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "house",			СвойствоАдрес.Дом);
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "flat",			СвойствоАдрес.Квартира);
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "postalCode",		СвойствоАдрес.Индекс);
					ЗаписьХМЛ.ЗаписатьКонецЭлемента();
					
				КонецЕсли;
			КонецЕсли;
			
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("additionalInfo");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "phone",				СокрЛП(Лев(СокрЛП(ЮрФизЛицо.Телефон),20)));
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "bankAccountNumber",	ЮрФизЛицо.НомерСчета);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "bankName",			ЮрФизЛицо.Банк);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "BIK",				ЮрФизЛицо.БИК);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "nameOfCEO",			ЮрФизЛицо.Руководитель);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "nameOfAccountant",	ЮрФизЛицо.ГлавныйБухгалтер);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

КонецФункции	

//Заполнение секций с типом Contractor (ЮрФизлицо)
Процедура xmlЗаписатьContractor_XDTO(ПолеXDTO,ИмяПоля,ЮрФизЛицо,ВыгрузкаТолькоОрганизации = Ложь)
	
	Если НЕ (ЗначениеЗаполнено(ЮрФизЛицо.GLN) ИЛИ ВыгрузкаТолькоОрганизации ИЛИ ИмяПоля = "manufacturer" ИЛИ ИмяПоля = "foreignManufacturer") Тогда
		ПолеXDTO.Владелец().Сбросить(ИмяПоля);//и дропнем само поле. TODO сделать отдельную обертку
		Возврат;
	КонецЕсли;
	
	xmlЗаполнитьЗначениеXDTO(ПолеXDTO,		"gln",			ЮрФизЛицо.GLN);
	
	Если ИмяПоля = "seller"
		ИЛИ  ИмяПоля = "shipTo" тогда
		
		Если ЮрФизЛицо.Свойство("КодВСистемеПокупателя") Тогда
			xmlЗаполнитьЗначениеXDTO(ПолеXDTO,		"additionalIdentificator",			ЮрФизЛицо.КодВСистемеПокупателя);
		КонецЕсли;
		
	КонецЕсли;
	
	ВидКонтрагента = ЮрФизЛицо.Вид;
	
	Если ВидКонтрагента = "ЮрЛицо" Тогда
		
		xmlСоздатьДочернийЭлементXDTO(ПолеXDTO,"organization");
		
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.organization,		"inn",			ЮрФизЛицо.ИНН);
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.organization,		"kpp",			ЮрФизЛицо.КПП);
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.organization,		"name",			ЮрФизЛицо.Наименование);

	ИначеЕсли ВидКонтрагента = "ФизЛицо" Тогда
		
		xmlСоздатьДочернийЭлементXDTO(ПолеXDTO,"selfEmployed");
		
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.selfEmployed,				"inn",			ЮрФизЛицо.ИНН);
		
		xmlСоздатьДочернийЭлементXDTO(ПолеXDTO.selfEmployed,"fullName");
		
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.selfEmployed.fullName,	"lastName",		ЮрФизЛицо.Фамилия);
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.selfEmployed.fullName,	"firstName",	ЮрФизЛицо.Имя);
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.selfEmployed.fullName,	"middleName",	ЮрФизЛицо.Отчество);
		
	ИначеЕсли ВидКонтрагента = "Нерезидент" Тогда
		
		КодСтраны = ЮрФизЛицо.Адрес.КодСтраны;
		
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			Если КодСтраны = "398" Тогда
				КодСтраны = "KZ";
			ИначеЕсли КодСтраны = "112" Тогда
				КодСтраны = "BY";
			ИначеЕсли КодСтраны = "051" Тогда
				КодСтраны = "AM";
			КонецЕсли;
		КонецЕсли;
				
		xmlСоздатьДочернийЭлементXDTO(ПолеXDTO,"selfEmployed");
		
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.foreignOrganization,	"countryCode",	КодСтраны);
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.foreignOrganization,	"tin",			ЮрФизЛицо.ИНН);
		xmlЗаполнитьЗначениеXDTO(ПолеXDTO.foreignOrganization,	"name",			ЮрФизЛицо.Наименование);
		
	КонецЕсли;
	
	Если ИмяПоля = "manufacturer" ИЛИ ИмяПоля = "foreignManufacturer" Тогда
		
//			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		Возврат;
		
	КонецЕсли;

	Если ВыгрузкаТолькоОрганизации И (ИмяПоля = "buyer" ИЛИ ИмяПоля = "seller" ИЛИ ИмяПоля = "shipFrom" ИЛИ ИмяПоля = "shipTo") Тогда
		
		Если ЗначениеЗаполнено(ЮрФизЛицо.Адрес) Тогда
			
			СвойствоАдрес = ЮрФизЛицо.Адрес;
			
			ВидАдреса = СвойствоАдрес.ВидАдреса;
			
			Если ВидАдреса = "Российский" Тогда
				
				КодРегиона = КонвертироватьКодРегионаВЦифры(СвойствоАдрес.Регион);
					
				xmlСоздатьДочернийЭлементXDTO(ПолеXDTO,"russianAddress");
		
				xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"regionISOCode",КодРегиона);
				xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"district",		СвойствоАдрес.Район);
				xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"city",			СвойствоАдрес.Город);
				xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"settlement",	СвойствоАдрес.НаселенныйПункт);
				xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"street",		СвойствоАдрес.Улица);
				xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"house",		СвойствоАдрес.Дом);
				xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"flat",			СвойствоАдрес.Квартира);
				xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"postalCode",	СвойствоАдрес.Индекс);
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе//гора неочевидных условий, отрефакторить по возможности
		
		Если НЕ ВидКонтрагента = "ТолькоGLN" Тогда
			
			Если ЗначениеЗаполнено(ЮрФизЛицо.Адрес) Тогда
				
				СвойствоАдрес = ЮрФизЛицо.Адрес;
				
				ВидАдреса = СвойствоАдрес.ВидАдреса;
				
				Если ВидАдреса = "Российский" Тогда
					
					xmlСоздатьДочернийЭлементXDTO(ПолеXDTO,"russianAddress");
		
					xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"regionISOCode",	СвойствоАдрес.Регион);
					xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"district",		СвойствоАдрес.Район);
					xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"city",			СвойствоАдрес.Город);
					xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"settlement",	СвойствоАдрес.НаселенныйПункт);
					xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"street",		СвойствоАдрес.Улица);
					xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"house",		СвойствоАдрес.Дом);
					xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"flat",			СвойствоАдрес.Квартира);
					xmlЗаполнитьЗначениеXDTO(ПолеXDTO.russianAddress,	"postalCode",	СвойствоАдрес.Индекс);
					
				КонецЕсли;
			КонецЕсли;
			
			xmlСоздатьДочернийЭлементXDTO(ПолеXDTO,"additionalInfo");
		
			xmlЗаполнитьЗначениеXDTO(ПолеXDTO.additionalInfo,"phone", 				СокрЛП(Лев(СокрЛП(ЮрФизЛицо.Телефон),20)));
			xmlЗаполнитьЗначениеXDTO(ПолеXDTO.additionalInfo,"bankAccountNumber",	ЮрФизЛицо.НомерСчета);
			xmlЗаполнитьЗначениеXDTO(ПолеXDTO.additionalInfo,"bankName",			ЮрФизЛицо.Банк);
			xmlЗаполнитьЗначениеXDTO(ПолеXDTO.additionalInfo,"BIK",					ЮрФизЛицо.БИК);
			xmlЗаполнитьЗначениеXDTO(ПолеXDTO.additionalInfo,"nameOfCEO",			ЮрФизЛицо.Руководитель);
			xmlЗаполнитьЗначениеXDTO(ПолеXDTO.additionalInfo,"nameOfAccountant",	ЮрФизЛицо.ГлавныйБухгалтер);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры


//Заполнение секции packages (SSCC) в DESADV
Процедура xmlЗаписатьPackages(ЗаписьХМЛ,Сообщение,КоличествоУпаковок)
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("packages");
	    ЗаписьХМЛ.ЗаписатьНачалоЭлемента("package");
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "packageLevel", "1");             
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("packageQuantity");
			    ЗаписьХМЛ.ЗаписатьАтрибут("typeOfPackage", "201");
				ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_КоличествоXML(КоличествоУпаковок));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		//когда вложенность увеличится - использовать рекурсию для обхода вложенных упаковок
		//								- изменить механизм получения родителя
		Для Каждого Упаковка Из Сообщение.ТранспортныеУпаковки.Строки Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("package");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "packageLevel", 	Число1С_в_КоличествоXML(Упаковка.НомерУпаковки));             
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "parentLevel",  	"1");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "SSCC",  			Упаковка.SSCC);
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("packageQuantity");
				    ЗаписьХМЛ.ЗаписатьАтрибут("typeOfPackage", "201");
					ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_КоличествоXML(1));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
		КонецЦикла;
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();

КонецПроцедуры

//Заполнение секции packages (SSCC) в DESADV
Процедура xmlЗаписатьPackages_XDTO(ОбъектXDTO,Сообщение,КоличествоУпаковок)
	
	НовЭлементУпаковки = ДобавитьЭлементСпискаXDTO(ОбъектXDTO.package,ФабрикаXDTO_EdiXml());
	xmlСоздатьДочернийЭлементXDTO(НовЭлементУпаковки,"packageQuantity");//напрашивается отдельный метод для QuantityType
	
	НовЭлементУпаковки.packageLevel	= 1;
	
	НовЭлементУпаковки.packageQuantity.typeOfPackage	= "201";
	НовЭлементУпаковки.packageQuantity.__content		= КоличествоУпаковок;
	
	//когда вложенность увеличится - использовать рекурсию для обхода вложенных упаковок
	//								- изменить механизм получения родителя
	Для Каждого Упаковка Из Сообщение.ТранспортныеУпаковки.Строки Цикл
		
		НовЭлементУпаковки = ДобавитьЭлементСпискаXDTO(ОбъектXDTO.package,ФабрикаXDTO_EdiXml());
		xmlСоздатьДочернийЭлементXDTO(НовЭлементУпаковки,"packageQuantity");
		
		НовЭлементУпаковки.parentLevel	= 		"1";
		xmlЗаполнитьЗначениеXDTO(НовЭлементУпаковки,	"packageLevel",	Упаковка.НомерУпаковки);
		xmlЗаполнитьЗначениеXDTO(НовЭлементУпаковки,	"SSCC",			Упаковка.SSCC);
		
		НовЭлементУпаковки.packageQuantity.typeOfPackage	= "201";
		НовЭлементУпаковки.packageQuantity.__content		= 1;
	КонецЦикла;
	
КонецПроцедуры


//Заполнение секции lot внутри lineItem в ALCRPT
Процедура xmlЗаписатьAlcoLot(ЗаписьХМЛ,Стр,ЕстьИностранныйПроизводитель)
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("lot");
	
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "description",	Стр.Наименование);
		
		Если ЗначениеЗаполнено(Стр.ЕГАИС)  Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "codeOfEgais",		Стр.ЕГАИС.КодТовараВЕГАИС);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "lotNumberEgais", 	Стр.ЕГАИС.ИдентификаторТовараВТТНЕГАИС);
		КонецЕсли;
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("volume");
			ЗаписьХМЛ.ЗаписатьАтрибут("volumeTypeQualifier",	"despatchVolume");	
			ЗаписьХМЛ.ЗаписатьАтрибут("unitOfMeasure",			Стр.КодЕдиницыИзмеренияEDI);	
			ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_КоличествоXML(Стр.Количество));
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "volumeOfUnitInLiter",	Число1С_в_СуммаXML(Стр.АлкоОбъем));
		
		//вот это должно быть уже готово
		xmlЗаписатьContractor(ЗаписьХМЛ, "manufacturer",			Стр.АлкоПроизводительEDI);
		Если ЕстьИностранныйПроизводитель Тогда
			xmlЗаписатьContractor(ЗаписьХМЛ, "foreignManufacturer",	Стр.АлкоИностранныйПроизводительEDI);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.АлкоЛицензияПоставщика) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("licenseSeller");
				ЗаписьХМЛ.ЗаписатьАтрибут("issuerOf",		Стр.АлкоЛицензияПоставщика.КемВыдана);
				ЗаписьХМЛ.ЗаписатьАтрибут("enddate",		Дата1С_в_ДатаXML(Стр.АлкоЛицензияПоставщика.ДатаОкончания));
				ЗаписьХМЛ.ЗаписатьАтрибут("startdate",		Дата1С_в_ДатаXML(Стр.АлкоЛицензияПоставщика.ДатаНачала));
				ЗаписьХМЛ.ЗаписатьАтрибут("seriesNumber",	Стр.АлкоЛицензияПоставщика.Серия);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.АлкоСертификатПродукции) Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("certificate");
				ЗаписьХМЛ.ЗаписатьАтрибут("issuerOf",		Стр.АлкоСертификатПродукции.КемВыдана);
				ЗаписьХМЛ.ЗаписатьАтрибут("enddate",		Дата1С_в_ДатаXML(Стр.АлкоСертификатПродукции.ДатаОкончания));
				ЗаписьХМЛ.ЗаписатьАтрибут("startdate",		Дата1С_в_ДатаXML(Стр.АлкоСертификатПродукции.ДатаНачала));
				ЗаписьХМЛ.ЗаписатьАтрибут("number",			Стр.АлкоСертификатПродукции.Серия);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		АлкоКодПродукции = "";
		Если ЗначениеЗаполнено(Стр.АлкоКодПродукции) Тогда
			АлкоКодПродукции = СокрЛП(Стр.АлкоКодПродукции);
		КонецЕсли;
		
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "typeOfAlco", 	СокрЛП(АлкоКодПродукции));

		Если ЗначениеЗаполнено(Стр.АлкоПризнакТипаПродукции) Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "signOfAlco", 	Стр.АлкоПризнакТипаПродукции);  
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.АлкоДатаРозлива) Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "bottlingDate", 	Формат(Стр.АлкоДатаРозлива,"ДФ=yyyy-MM-dd"));
		КонецЕсли;
		
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "countryOfOriginISOCode", 	Стр.СтранаEDI);
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "customsDeclarationNumber", 	Стр.НомерГТДEDI);
		
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

//Заполнение секции lot внутри lineItem в ALCRPT
Процедура xmlЗаписатьAlcoLot_XDTO(НовЛотXDTO,СтрокаЛота,ЕстьИностранныйПроизводитель)
	
	xmlЗаполнитьЗначениеXDTO(НовЛотXDTO,	"description",	СтрокаЛота.Наименование);
	
	Если ЗначениеЗаполнено(СтрокаЛота.ЕГАИС)  Тогда
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO,	"codeOfEgais",		СтрокаЛота.ЕГАИС.КодТовараВЕГАИС);
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO,	"lotNumberEgais",	СтрокаЛота.ЕГАИС.ИдентификаторТовараВТТНЕГАИС);
	КонецЕсли;
	
	xmlСоздатьДочернийЭлементXDTO(НовЛотXDTO,"volume");
	
	НовЛотXDTO.volume.volumeTypeQualifier	= "despatchVolume";
	xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.volume,	"unitOfMeasure",	СтрокаЛота.КодЕдиницыИзмеренияEDI);
	xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.volume,	"__content",		СтрокаЛота.Количество);
	
	НовЛотXDTO.volumeOfUnitInLiter	= СтрокаЛота.АлкоОбъем;
	
	xmlСоздатьДочернийЭлементXDTO(НовЛотXDTO,"manufacturer");
	xmlЗаписатьContractor_XDTO(НовЛотXDTO.manufacturer,	"manufacturer",	СтрокаЛота.АлкоПроизводительEDI);
	
	Если ЕстьИностранныйПроизводитель Тогда
		xmlСоздатьДочернийЭлементXDTO(НовЛотXDTO,"foreignManufacturer");
		xmlЗаписатьContractor_XDTO(НовЛотXDTO.foreignManufacturer, "foreignManufacturer",	СтрокаЛота.АлкоИностранныйПроизводительEDI);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаЛота.АлкоЛицензияПоставщика) Тогда
		
		xmlСоздатьДочернийЭлементXDTO(НовЛотXDTO,"licenseSeller");
		
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.licenseSeller,	"issuerOf",		СтрокаЛота.АлкоЛицензияПоставщика.КемВыдана);
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.licenseSeller,	"enddate",		СтрокаЛота.АлкоЛицензияПоставщика.ДатаОкончания);
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.licenseSeller,	"startdate",	СтрокаЛота.АлкоЛицензияПоставщика.ДатаНачала);
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.licenseSeller,	"seriesNumber",	СтрокаЛота.АлкоЛицензияПоставщика.Серия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаЛота.АлкоСертификатПродукции) Тогда
		
		xmlСоздатьДочернийЭлементXDTO(НовЛотXDTO,"certificate");
		
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.certificate,	"issuerOf",		СтрокаЛота.АлкоСертификатПродукции.КемВыдана);
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.certificate,	"enddate",		СтрокаЛота.АлкоСертификатПродукции.ДатаОкончания);
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.certificate,	"startdate",	СтрокаЛота.АлкоСертификатПродукции.ДатаНачала);
		xmlЗаполнитьЗначениеXDTO(НовЛотXDTO.certificate,	"seriesNumber",	СтрокаЛота.АлкоСертификатПродукции.Серия);
		
	КонецЕсли;
	
	АлкоКодПродукции = "";
	Если ЗначениеЗаполнено(СтрокаЛота.АлкоКодПродукции) Тогда
		АлкоКодПродукции = СокрЛП(СтрокаЛота.АлкоКодПродукции);
	КонецЕсли;
	
	xmlЗаполнитьЗначениеXDTO(НовЛотXDTO,	"typeOfAlco",	СокрЛП(АлкоКодПродукции));
	xmlЗаполнитьЗначениеXDTO(НовЛотXDTO,	"signOfAlco",	СокрЛП(СтрокаЛота.АлкоПризнакТипаПродукции));
	xmlЗаполнитьЗначениеXDTO(НовЛотXDTO,	"bottlingDate",	СтрокаЛота.АлкоДатаРозлива);
	
	xmlЗаполнитьЗначениеXDTO(НовЛотXDTO,	"countryOfOriginISOCode",	СтрокаЛота.СтранаEDI);
	xmlЗаполнитьЗначениеXDTO(НовЛотXDTO,	"customsDeclarationNumber",	СтрокаЛота.НомерГТДEDI);
	
КонецПроцедуры


//Заполнение секции lineItems - контейнер для массива lineItem, не путать с единичным lineItem
Процедура xmlЗаписатьLineItemS(ЗаписьХМЛ,Сообщение,НеОтправлятьКодПоставщика,ИмяКоличества)
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("lineItems");
		
		Если НЕ Сообщение.ТипСообщения = "ALCRPT" Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("currencyISOCode");
				ЗаписьХМЛ.ЗаписатьТекст(Сообщение.ВалютаEDI); 
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		//запись ALCRPT и остальных сообщений разбита отдельными "Если" для удобства отладки
		
		// Табличная часть ALCRPT
		Если Сообщение.ТипСообщения = "ALCRPT" Тогда
			
			ТаблицаТоваров = Сообщение.Товары;
			ТаблицаТоваров.Сортировать("Номенклатура, СерияНоменклатуры");
			
			ЕстьИностранныйПроизводитель = НЕ (ТаблицаТоваров.Колонки.Найти("АлкоИностранныйПроизводительEDI") = Неопределено);
			
			СтараяНоменклатура = Неопределено;
			
			Для Каждого Стр ИЗ ТаблицаТоваров Цикл
				
				Если НЕ СтараяНоменклатура = Стр.Номенклатура Тогда
					
					Если НЕ СтараяНоменклатура = Неопределено Тогда
						
						ЗаписьХМЛ.ЗаписатьКонецЭлемента();   // закрываем lineItem
						
					КонецЕсли;
					
					ЗаписьХМЛ.ЗаписатьНачалоЭлемента("lineItem");
					
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "gtin",	Стр.GTIN);
						ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "internalBuyerCode",		Стр.КодТовараПокупателя);
						Если Не НеОтправлятьКодПоставщика Тогда
							ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "internalSupplierCode",	Стр.КодТовараПоставщика);
						КонецЕсли;
						
						
					СтараяНоменклатура = Стр.Номенклатура;	
						
				КонецЕсли;
				
				//секция "lot"
				xmlЗаписатьAlcoLot(ЗаписьХМЛ,Стр,ЕстьИностранныйПроизводитель);

			КонецЦикла;
			
			Если НЕ СтараяНоменклатура = Неопределено Тогда
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();   // закрываем lineItem
			КонецЕсли;
		КонецЕсли;
		
		// Табличная часть стандартного EDI сообщения
		Если НЕ Сообщение.ТипСообщения = "ALCRPT" Тогда
		
			ЕстьКомментарий	= НЕ (Сообщение.Товары.Колонки.Найти("Комментарий") = Неопределено);
			ЕстьТипЕдиницы	= НЕ (Сообщение.Товары.Колонки.Найти("ТипЕдиницы") = Неопределено);

			Для Каждого Стр ИЗ Сообщение.Товары Цикл
																
				ЕстьЕдиницаИзмеренияКоличества = Истина;
				Если Сообщение.ТипСообщения = "ORDRSP" И Не ЗначениеЗаполнено(Стр.КодЕдиницыИзмерения1С) Тогда
					ЕстьЕдиницаИзмеренияКоличества = Ложь;	
				КонецЕсли;
				
				//секция "lineItem" (все сообщения, кроме ALCRPT)
				xmlЗаписатьLineItem(ЗаписьХМЛ,Стр,Сообщение,НеОтправлятьКодПоставщика,ЕстьЕдиницаИзмеренияКоличества,ИмяКоличества,ЕстьКомментарий,ЕстьТипЕдиницы);
				
			КонецЦикла;//lineItem
			
			Если Сообщение.ТипСообщения = "COINVOIC" Тогда
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalSumExcludingTaxesIncrease", Число1С_в_СуммаXML(Сообщение.СуммаВсегоБезНДСУвеличение));  
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalSumExcludingTaxesDecrease", Число1С_в_СуммаXML(Сообщение.СуммаВсегоБезНДСУменьшение));  
				
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalVATAmountIncrease",			Число1С_в_СуммаXML(Сообщение.СуммаВсегоНДСУвеличение));  
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalVATAmountDecrease",			Число1С_в_СуммаXML(Сообщение.СуммаВсегоНДСУменьшение));  
				
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalAmountIncrease",			Число1С_в_СуммаXML(Сообщение.СуммаВсегоУвеличение));  
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalAmountDecrease",			Число1С_в_СуммаXML(Сообщение.СуммаВсегоУменьшение));  
			Иначе
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalAmount",			Число1С_в_СуммаXML(Сообщение.СуммаВсего,Истина));  
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalSumExcludingTaxes", Число1С_в_СуммаXML(Сообщение.СуммаВсегоБезНДС));  
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "totalVATAmount",			Число1С_в_СуммаXML(Сообщение.СуммаВсегоНДС,Истина));  
			КонецЕсли;
			
			Если Сообщение.ТипСообщения = "INVOIC"
				И Сообщение.Свойство("СуммаТоваровВсего")
				И Сообщение.Свойство("СуммаТоваровВсегоБезНДС")
				И Сообщение.Свойство("СуммаТоваровНДС")
				Тогда
				
				//3 тега "ForIV" для Счет-фактуры
				
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("totalAmountForIV");
					ЗаписьХМЛ.ЗаписатьАтрибут("documentNumber",	Сообщение.ДокументEDI.Номер);	
					ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_СуммаXML(Сообщение.СуммаТоваровВсего,Истина));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
				
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("totalSumExcludingTaxesForIV");
					ЗаписьХМЛ.ЗаписатьАтрибут("documentNumber",	Сообщение.ДокументEDI.Номер);	
					ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_СуммаXML(Сообщение.СуммаТоваровВсегоБезНДС,Истина));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
				
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("totalVATAmountForIV");
					ЗаписьХМЛ.ЗаписатьАтрибут("documentNumber",	Сообщение.ДокументEDI.Номер);	
					ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_СуммаXML(Сообщение.СуммаТоваровНДС,Истина));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
				
				//и еще 3 тега "ForDQ" для ТОРГ12
				
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("totalAmountForDQ");
					ЗаписьХМЛ.ЗаписатьАтрибут("documentNumber",	Сообщение.НакладнаяEDI.Номер);
					ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_СуммаXML(Сообщение.Товары.Итог("СуммаСНДС"),Истина));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
				
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("totalSumExcludingTaxesForDQ");
					ЗаписьХМЛ.ЗаписатьАтрибут("documentNumber",	Сообщение.НакладнаяEDI.Номер);
					ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_СуммаXML(Сообщение.Товары.Итог("СуммаБезНДС"),Истина));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
				
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("totalVATAmountForDQ");
					ЗаписьХМЛ.ЗаписатьАтрибут("documentNumber",	Сообщение.НакладнаяEDI.Номер);
					ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_СуммаXML(Сообщение.Товары.Итог("СуммаНДС"),Истина));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();	

			КонецЕсли;
			
		КонецЕсли;
		
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();//lineItems
	
КонецПроцедуры

//Заполнение секции lineItems - контейнер для массива lineItem, не путать с единичным lineItem
Процедура xmlЗаписатьLineItemS_XDTO(ОбъектlineItems,Сообщение,НеОтправлятьКодПоставщика,ИмяКоличества)
	
	Если НЕ Сообщение.ТипСообщения = "ALCRPT" Тогда
		ОбъектlineItems.currencyISOCode = Сообщение.ВалютаEDI;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ALCRPT" Тогда //разбил на 2 отдельных условия, так удобнее визуально
		
		// Поправил чтобы Номенклатура шла в LineItem, а серия в lot
			//таблица товаров сворачивается: 
			//Номенклатура+Серия пишется в lineItem
			//А номера ГТД и лицензии идут в LOT
		
		ЕстьИностранныйПроизводитель = НЕ (Сообщение.Товары.Колонки.Найти("АлкоИностранныйПроизводительEDI") = Неопределено);
		
		//КолонкиДляСвертки = "Номенклатура,СерияНоменклатуры";
		КолонкиДляСвертки = "Номенклатура";
		
		ТаблицаТоваров_Свернутая = Сообщение.Товары.Скопировать(,КолонкиДляСвертки);
		ТаблицаТоваров_Свернутая.Свернуть(КолонкиДляСвертки);
		Для Каждого СтрокаТовара_Свернутая Из ТаблицаТоваров_Свернутая Цикл
			
			СтруктураПоиска = Новый Структура(КолонкиДляСвертки,СтрокаТовара_Свернутая.Номенклатура);
			СтрокиЛота = Сообщение.Товары.НайтиСтроки(СтруктураПоиска);
			ПерваяСтрокаЛота = СтрокиЛота[0];//отсюда возьмем коды товара. Проверка в данном случае не требуется.
			
			НовСтрокаLineItem = ДобавитьЭлементСпискаXDTO(ОбъектlineItems.lineItem,ФабрикаXDTO_EdiXml());
			
			xmlЗаполнитьЗначениеXDTO(НовСтрокаLineItem, "gtin",					ПерваяСтрокаЛота.GTIN);
			xmlЗаполнитьЗначениеXDTO(НовСтрокаLineItem, "internalBuyerCode",	ПерваяСтрокаЛота.КодТовараПокупателя);
			
			Если Не НеОтправлятьКодПоставщика Тогда
				xmlЗаполнитьЗначениеXDTO(НовСтрокаLineItem, "internalSupplierCode",	ПерваяСтрокаЛота.КодТовараПоставщика);
			КонецЕсли;
			
			Для Каждого СтрокаЛота Из СтрокиЛота Цикл
				
				НовЛотXDTO = ДобавитьЭлементСпискаXDTO(НовСтрокаLineItem.lot,ФабрикаXDTO_EdiXml());
				//секция "lot"
				xmlЗаписатьAlcoLot_XDTO(НовЛотXDTO,СтрокаЛота,ЕстьИностранныйПроизводитель);

			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Если Не Сообщение.ТипСообщения = "ALCRPT" Тогда //разбил на 2 отдельных условия, так удобнее визуально
	
		ЕстьКомментарий	= НЕ (Сообщение.Товары.Колонки.Найти("Комментарий") = Неопределено);
		ЕстьТипЕдиницы	= НЕ (Сообщение.Товары.Колонки.Найти("ТипЕдиницы") = Неопределено);

		Для Каждого Стр ИЗ Сообщение.Товары Цикл
			
			НоваяСтрока = ДобавитьЭлементСпискаXDTO(ОбъектlineItems.lineItem,ФабрикаXDTO_EdiXml());
			
			ЕстьЕдиницаИзмеренияКоличества = Истина;
			Если Сообщение.ТипСообщения = "ORDRSP" И Не ЗначениеЗаполнено(Стр.КодЕдиницыИзмерения1С) Тогда
				ЕстьЕдиницаИзмеренияКоличества = Ложь;
			КонецЕсли;
			
			//секция lineitem
			xmlЗаписатьLineItem_XDTO(НоваяСтрока,Стр,Сообщение,НеОтправлятьКодПоставщика,ЕстьЕдиницаИзмеренияКоличества,ИмяКоличества,ЕстьКомментарий,ЕстьТипЕдиницы);
			
		КонецЦикла;
		
		//lineItems итоги
		Если Сообщение.ТипСообщения = "COINVOIC" Тогда
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalSumExcludingTaxesIncrease",		Сообщение.СуммаВсегоБезНДСУвеличение);
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalSumExcludingTaxesDecrease",		Сообщение.СуммаВсегоБезНДСУменьшение);
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalVATAmountIncrease",			 	Сообщение.СуммаВсегоНДСУвеличение);
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalVATAmountDecrease",			 	Сообщение.СуммаВсегоНДСУменьшение);
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalAmountIncrease",			 	Сообщение.СуммаВсегоУвеличение);
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalAmountDecrease",			 	Сообщение.СуммаВсегоУменьшение);
		Иначе
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalAmount",			 	Сообщение.СуммаВсего, Истина); //эта сумма должна быть всегда
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalSumExcludingTaxes",	 	Сообщение.СуммаВсегоБезНДС);
			xmlЗаполнитьЗначениеXDTO(ОбъектlineItems, "totalVATAmount",	 			Сообщение.СуммаВсегоНДС, Истина); //эта сумма должна быть всегда
		КонецЕсли;
		
		
		
		Если Сообщение.ТипСообщения = "INVOIC"
			И Сообщение.Свойство("СуммаТоваровВсего")
			И Сообщение.Свойство("СуммаТоваровВсегоБезНДС")
			И Сообщение.Свойство("СуммаТоваровНДС")
			Тогда
			
			//3 тега "ForIV" для Счет-фактуры
			
			xmlЗаписатьTotalSumFor_XDTO(ОбъектlineItems,	"totalAmountForIV",				Сообщение.ДокументEDI.Номер,	Сообщение.СуммаТоваровВсего);
			xmlЗаписатьTotalSumFor_XDTO(ОбъектlineItems,	"totalSumExcludingTaxesForIV",	Сообщение.ДокументEDI.Номер,	Сообщение.СуммаТоваровВсегоБезНДС);
			xmlЗаписатьTotalSumFor_XDTO(ОбъектlineItems,	"totalVATAmountForIV",			Сообщение.ДокументEDI.Номер,	Сообщение.СуммаТоваровНДС);
			
			//и еще 3 тега "ForDQ" для ТОРГ12
			
			xmlЗаписатьTotalSumFor_XDTO(ОбъектlineItems,	"totalAmountForDQ",				Сообщение.НакладнаяEDI.Номер,	Сообщение.Товары.Итог("СуммаСНДС"));
			xmlЗаписатьTotalSumFor_XDTO(ОбъектlineItems,	"totalSumExcludingTaxesForDQ",	Сообщение.НакладнаяEDI.Номер,	Сообщение.Товары.Итог("СуммаБезНДС"));
			xmlЗаписатьTotalSumFor_XDTO(ОбъектlineItems,	"totalVATAmountForDQ",			Сообщение.НакладнаяEDI.Номер,	Сообщение.Товары.Итог("СуммаНДС"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


//Заполнение секции lineItem - одна строка товаров
Процедура xmlЗаписатьLineItem(ЗаписьХМЛ,Стр,Сообщение,НеОтправлятьКодПоставщика,ЕстьЕдиницаИзмеренияКоличества,ИмяКоличества,ЕстьКомментарий,ЕстьТипЕдиницы)
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("lineItem");
			
		Если Не Сообщение.Товары.Колонки.Найти("НомерУпаковки") = Неопределено
			И ЗначениеЗаполнено(Стр.НомерУпаковки) Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "packageLevel", Число1С_в_КоличествоXML(Стр.НомерУпаковки));
		КонецЕсли;
	
		Если Сообщение.ТипСообщения = "ORDRSP" Тогда
	    	ЗаписьХМЛ.ЗаписатьАтрибут("status",		ПреобразоватьСтатус(Стр.Статус));
		КонецЕсли;
	
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "gtin", 		 			Стр.GTIN);
		
		Если Сообщение.ТипСообщения = "DESADV" И Не Сообщение.Товары.Колонки.Найти("КодТовараВЕГАИС") = Неопределено Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "codeOfEgais", Стр.КодТовараВЕГАИС);
		КонецЕсли;
		
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "description", 			Стр.Наименование);
		
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "internalBuyerCode",		Стр.КодТовараПокупателя);
		Если Не НеОтправлятьКодПоставщика Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "internalSupplierCode",	Стр.КодТовараПоставщика);
		КонецЕсли;
		
		Если Не Сообщение.Товары.Колонки.Найти("КоличествоЗаказанное") = Неопределено Тогда
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("orderedQuantity");
				ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_КоличествоXML(Стр.КоличествоЗаказанное));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();	
		КонецЕсли;
			
		Если Сообщение.ТипСообщения = "COINVOIC" Тогда
			
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("quantityBefore");
			
				Если ЕстьЕдиницаИзмеренияКоличества Тогда						
					ЗаписьХМЛ.ЗаписатьАтрибут("unitOfMeasure",	Стр.КодЕдиницыИзмеренияEDI);
				КонецЕсли;
				ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_КоличествоXML(Стр.КоличествоДо));
			
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "quantityAfter",		Число1С_в_КоличествоXML(Стр.КоличествоПосле));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "quantityIncrease",	Число1С_в_СуммаXML(Стр.КоличествоУвеличение));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "quantityDecrease",	Число1С_в_СуммаXML(Стр.КоличествоУменьшение));
			//Число1С_в_СуммаXML позволяет избежать записи "0"
			
		Иначе
			
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента(ИмяКоличества);
				
			Если ЕстьЕдиницаИзмеренияКоличества Тогда						
				ЗаписьХМЛ.ЗаписатьАтрибут("unitOfMeasure",	Стр.КодЕдиницыИзмеренияEDI);
			КонецЕсли;
			ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_КоличествоXML(Стр.Количество));
			
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		
		КонецЕсли;
	
		Если Не Сообщение.Товары.Колонки.Найти("КоличествоВОдномМесте") = Неопределено Тогда
			Если Не Стр.КоличествоВОдномМесте = 0 Тогда
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("onePlaceQuantity");
					ЗаписьХМЛ.ЗаписатьТекст(Число1С_в_КоличествоXML(Стр.КоличествоВОдномМесте));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЕсли;

		Если Сообщение.ТипСообщения = "COINVOIC" Тогда
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netPriceBefore", 	Число1С_в_СуммаXML(Стр.ЦенаБезНДСДо,Истина));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netPriceAfter", 		Число1С_в_СуммаXML(Стр.ЦенаБезНДСПосле,Истина));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netPriceIncrease", 	Число1С_в_СуммаXML(Стр.ЦенаБезНДСУвеличение));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netPriceDecrease", 	Число1С_в_СуммаXML(Стр.ЦенаБезНДСУменьшение));
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netPriceWithVAT", 	Число1С_в_СуммаXML(Стр.ЦенаСНДСПосле,Истина));
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netAmountBefore", 	Число1С_в_СуммаXML(Стр.СуммаБезНДСДо,Истина));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netAmountAfter", 	Число1С_в_СуммаXML(Стр.СуммаБезНДСПосле,Истина));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netAmountIncrease", 	Число1С_в_СуммаXML(Стр.СуммаБезНДСУвеличение));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netAmountDecrease", 	Число1С_в_СуммаXML(Стр.СуммаБезНДСУменьшение));
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "amountBefore", 		Число1С_в_СуммаXML(Стр.СуммаСНДСДо,Истина));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "amountAfter", 		Число1С_в_СуммаXML(Стр.СуммаСНДСПосле,Истина));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "amountIncrease", 	Число1С_в_СуммаXML(Стр.СуммаСНДСУвеличение));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "amountDecrease", 	Число1С_в_СуммаXML(Стр.СуммаСНДСУменьшение));
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vatRateBefore",		Стр.СтавкаНДСДоEDI);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vatRateAfter",		Стр.СтавкаНДСПослеEDI);
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vatAmountBefore", 	Число1С_в_СуммаXML(Стр.СуммаНДСДо,Истина));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vatAmountAfter", 	Число1С_в_СуммаXML(Стр.СуммаНДСПосле,Истина));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vatAmountIncrease", 	Число1С_в_СуммаXML(Стр.СуммаНДСУвеличение));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vatAmountDecrease", 	Число1С_в_СуммаXML(Стр.СуммаНДСУменьшение));
			
		Иначе
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netPrice", 			Число1С_в_СуммаXML(Стр.ЦенаБезНДС));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netAmount", 			Число1С_в_СуммаXML(Стр.СуммаБезНДС));
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vATAmount", 			Число1С_в_СуммаXML(Стр.СуммаНДС,Истина));
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "netPriceWithVAT", 	Число1С_в_СуммаXML(Стр.ЦенаСНДС));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "amount", 			Число1С_в_СуммаXML(Стр.СуммаСНДС,Истина));
			
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "vATRate",			Стр.СтавкаНДСEDI);
			
		КонецЕсли;
	
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "countryOfOriginISOCode", 	Стр.СтранаEDI);
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "customsDeclarationNumber", 	Стр.НомерГТДEDI);
		
		Если ЕстьКомментарий Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "comment", 	Стр.Комментарий);  
		КонецЕсли;
		
		Если ЕстьТипЕдиницы 
			И ЗначениеЗаполнено(Стр.ТипЕдиницы)
		Тогда
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "typeOfUnit", 	Строка(Стр.ТипЕдиницы));  
		КонецЕсли;
		
		ОбработкаСобытияПодключаемогоМодуля("ЗаписатьЭлементХМЛ",,Новый Структура("ИмяЭлемента,ЗаписьХМЛ,Параметры,","lineItem",ЗаписьХМЛ,Новый Структура("Сообщение,Строка",Сообщение,Стр)));
		
	ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	
	
КонецПроцедуры

//Заполнение секции lineItem - одна строка товаров
Процедура xmlЗаписатьLineItem_XDTO(lineItem,СтрокаТоваров,Сообщение,НеОтправлятьКодПоставщика,ЕстьЕдиницаИзмеренияКоличества,ИмяКоличества,ЕстьКомментарий,ЕстьТипЕдиницы)
	
	ЕстьКоличествоЗаказанное	= НЕ Сообщение.Товары.Колонки.Найти("КоличествоЗаказанное") = Неопределено;
	ЕстьКоличествоВОдномМесте	= НЕ Сообщение.Товары.Колонки.Найти("КоличествоВОдномМесте") = Неопределено;
	ЕстьКодТовараЕГАИС			= Не Сообщение.Товары.Колонки.Найти("КодТовараВЕГАИС") = Неопределено;
	ЕстьНомерУпаковки			= Не Сообщение.Товары.Колонки.Найти("НомерУпаковки") = Неопределено;
	
	Если ЕстьНомерУпаковки Тогда
		xmlЗаполнитьЗначениеXDTO(lineItem,	"packageLevel",	СтрокаТоваров.НомерУпаковки);
	КонецЕсли;

	Если Сообщение.ТипСообщения = "ORDRSP" Тогда
		xmlЗаполнитьЗначениеXDTO(lineItem,	"status",	ПреобразоватьСтатус(СтрокаТоваров.Статус));
	КонецЕсли;

	xmlЗаполнитьЗначениеXDTO(lineItem,	"gtin",	СтрокаТоваров.GTIN);
	
	Если Сообщение.ТипСообщения = "DESADV" И ЕстьКодТовараЕГАИС Тогда
		xmlЗаполнитьЗначениеXDTO(lineItem,	"codeOfEgais",	СтрокаТоваров.КодТовараВЕГАИС);
	КонецЕсли;
	
	xmlЗаполнитьЗначениеXDTO(lineItem,"description",			СтрокаТоваров.Наименование);
	xmlЗаполнитьЗначениеXDTO(lineItem,"internalBuyerCode",	СтрокаТоваров.КодТовараПокупателя);
	
	Если Не НеОтправлятьКодПоставщика Тогда
		xmlЗаполнитьЗначениеXDTO(lineItem,	"internalSupplierCode",	СтрокаТоваров.КодТовараПоставщика);
	КонецЕсли;
	
	Если ЕстьКоличествоЗаказанное Тогда
		//в Coinvoic вроде не требуется
		xmlЗаписатьQuantityType_XDTO(lineItem,	"orderedQuantity",	СтрокаТоваров.КоличествоЗаказанное);
	КонецЕсли;
	
	_КодЕдиницыИзмеренияEDI = ?(ЕстьЕдиницаИзмеренияКоличества,СтрокаТоваров.КодЕдиницыИзмеренияEDI,"");
	
	_КоличествоВОдномМесте = ?(ЕстьКоличествоВОдномМесте,СтрокаТоваров.КоличествоВОдномМесте,"");
	xmlЗаписатьQuantityType_XDTO(lineItem,	"onePlaceQuantity",	_КоличествоВОдномМесте);
	
	Если Сообщение.ТипСообщения = "COINVOIC" Тогда
		
		//все поля ниже должны обязательно присутствовать в файле, даже если 0
		
		xmlЗаписатьQuantityType_XDTO(lineItem,"quantityBefore",		СтрокаТоваров.КоличествоДо			,_КодЕдиницыИзмеренияEDI,	Истина);
		xmlЗаписатьQuantityType_XDTO(lineItem,"quantityAfter",		СтрокаТоваров.КоличествоПосле		,	,	Истина);
		xmlЗаписатьQuantityType_XDTO(lineItem,"quantityIncrease",	СтрокаТоваров.КоличествоУвеличение);
		xmlЗаписатьQuantityType_XDTO(lineItem,"quantityDecrease",	СтрокаТоваров.КоличествоУменьшение);
		
		lineItem.netPriceBefore		= СтрокаТоваров.ЦенаБезНДСДо;
		lineItem.netPriceAfter		= СтрокаТоваров.ЦенаБезНДСПосле;
		xmlЗаполнитьЗначениеXDTO(lineItem, "netPriceIncrease",		СтрокаТоваров.ЦенаБезНДСУвеличение);
		xmlЗаполнитьЗначениеXDTO(lineItem, "netPriceDecrease",		СтрокаТоваров.ЦенаБезНДСУменьшение);
		
		lineItem.netPriceWithVAT	= СтрокаТоваров.ЦенаСНДСПосле;
		
		lineItem.netAmountBefore	= СтрокаТоваров.СуммаБезНДСДо;
		lineItem.netAmountAfter		= СтрокаТоваров.СуммаБезНДСПосле;
		xmlЗаполнитьЗначениеXDTO(lineItem, "netAmountIncrease",		СтрокаТоваров.СуммаБезНДСУвеличение);
		xmlЗаполнитьЗначениеXDTO(lineItem, "netAmountDecrease",		СтрокаТоваров.СуммаБезНДСУменьшение);
		
		lineItem.amountBefore		= СтрокаТоваров.СуммаСНДСДо;
		lineItem.amountAfter		= СтрокаТоваров.СуммаСНДСПосле;
		xmlЗаполнитьЗначениеXDTO(lineItem, "amountIncrease",		СтрокаТоваров.СуммаСНДСУвеличение);
		xmlЗаполнитьЗначениеXDTO(lineItem, "amountDecrease",		СтрокаТоваров.СуммаСНДСУменьшение);
		
		lineItem.vatRateBefore		= СтрокаТоваров.СтавкаНДСДоEDI;
		lineItem.vatRateAfter		= СтрокаТоваров.СтавкаНДСПослеEDI;
		
		lineItem.vatAmountBefore	= СтрокаТоваров.СуммаНДСДо;
		lineItem.vatAmountAfter		= СтрокаТоваров.СуммаНДСПосле;
		xmlЗаполнитьЗначениеXDTO(lineItem, "vatAmountIncrease",		СтрокаТоваров.СуммаНДСУвеличение);
		xmlЗаполнитьЗначениеXDTO(lineItem, "vatAmountDecrease",		СтрокаТоваров.СуммаНДСУменьшение);
		
	Иначе
		
		xmlЗаписатьQuantityType_XDTO(lineItem,	ИмяКоличества,	СтрокаТоваров.Количество,	_КодЕдиницыИзмеренияEDI);//0?
		
		xmlЗаполнитьЗначениеXDTO(lineItem,	"netPrice",				СтрокаТоваров.ЦенаБезНДС);
		xmlЗаполнитьЗначениеXDTO(lineItem,	"netAmount",			СтрокаТоваров.СуммаБезНДС);
		xmlЗаполнитьЗначениеXDTO(lineItem,	"netPriceWithVAT",		СтрокаТоваров.ЦенаСНДС);
		xmlЗаполнитьЗначениеXDTO(lineItem,	"amount",				СтрокаТоваров.СуммаСНДС);
		xmlЗаполнитьЗначениеXDTO(lineItem,	"vATRate",				СтрокаТоваров.СтавкаНДСEDI);
		
		lineItem.vATAmount = СтрокаТоваров.СуммаНДС;
		
	КонецЕсли;
	
	xmlЗаполнитьЗначениеXDTO(lineItem,	"countryOfOriginISOCode",	СтрокаТоваров.СтранаEDI);
	xmlЗаполнитьЗначениеXDTO(lineItem,	"customsDeclarationNumber",	СтрокаТоваров.НомерГТДEDI);
	
	Если ЕстьКомментарий Тогда
		xmlЗаполнитьЗначениеXDTO(lineItem,	"comment",		СтрокаТоваров.Комментарий);
	КонецЕсли;

	Если ЕстьТипЕдиницы	Тогда
		xmlЗаполнитьЗначениеXDTO(lineItem,	"typeOfUnit",	Строка(СтрокаТоваров.ТипЕдиницы));
	КонецЕсли;

	ОбработкаСобытияПодключаемогоМодуля("ПослеЗаполнения_LineItem_XDTO",,Новый Структура("lineItem,Сообщение,СтрокаТоваров",lineItem,Сообщение,СтрокаТоваров));
		
//				ОбработкаСобытияПодключаемогоМодуля("ЗаписатьЭлементХМЛ",,Новый Структура("ИмяЭлемента,ЗаписьХМЛ,Параметры,","lineItem",ЗаписьХМЛ,Новый Структура("Сообщение,Строка",Сообщение,Стр)));
//		для фарма-тегов. Продумать новый вариант ПМ
	
КонецПроцедуры


//Заполнение секций с типом quantityType
Процедура xmlЗаписатьQuantityType_XDTO(ОбъектXDTO,ИмяРеквизита,Количество,ЕдиницаИзмерения=Неопределено,ЗаписьОбязательна = Ложь)
	
	Если Не ЗначениеЗаполнено(Количество)
		И Не ЗначениеЗаполнено(ЕдиницаИзмерения) 
		И Не ЗаписьОбязательна Тогда
		Возврат;
	КонецЕсли;
	
	xmlСоздатьДочернийЭлементXDTO(ОбъектXDTO,ИмяРеквизита);
	
	ОбъектXDTO[ИмяРеквизита].__content = Количество;
	xmlЗаполнитьЗначениеXDTO(ОбъектXDTO[ИмяРеквизита], "unitOfMeasure",	ЕдиницаИзмерения);
	
КонецПроцедуры

//Заполнение секций с типом shelfLifeType
Процедура xmlЗаписатьShelfLifeType_XDTO(ОбъектXDTO,ИмяРеквизита,Количество,ЕдиницаИзмерения=Неопределено,ЗаписьОбязательна = Ложь)
	
	Если Не ЗначениеЗаполнено(Количество)
		И Не ЗначениеЗаполнено(ЕдиницаИзмерения) 
		И Не ЗаписьОбязательна Тогда
		Возврат;
	КонецЕсли;
	
	xmlСоздатьДочернийЭлементXDTO(ОбъектXDTO,ИмяРеквизита);
	
	ОбъектXDTO[ИмяРеквизита].__content = Количество;
	xmlЗаполнитьЗначениеXDTO(ОбъектXDTO[ИмяРеквизита], "unit",	ЕдиницаИзмерения);
	
КонецПроцедуры

//Заполнение секций с типом totalSumFor... (IV,DQ)
Процедура xmlЗаписатьTotalSumFor_XDTO(ОбъектXDTO,ИмяРеквизита,НомерДокумента,Сумма)
	
	xmlСоздатьДочернийЭлементXDTO(ОбъектXDTO,ИмяРеквизита);
	
	ОбъектXDTO[ИмяРеквизита].__content		= Сумма;
	ОбъектXDTO[ИмяРеквизита].documentNumber = НомерДокумента;
	
КонецПроцедуры


//блок заполнения тегов вроде despatchIdentificator, originOrder, contractIdentificator, egaisRegistrationIdentificator и т.е.
Процедура xmlЗаписатьИдентификаторыДокументовВСообщениеXDTO(ОбъектДокумента,Сообщение)
	
	xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "proposalOrdersIdentificator",	Сообщение, "ОбратныйЗаказEDI");
	xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "originOrder",					Сообщение, "ЗаказEDI");
	xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "despatchIdentificator",			Сообщение, "НакладнаяEDI");

	Если Сообщение.ТипСообщения = "ALCRPT" Тогда                                                   
		xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "receivingIdentificator", Сообщение, "НакладнаяEDI");
	Конецесли;
	
	Если Сообщение.Свойство("НомерПриемкиПокупателя") Тогда
		Если ЗначениеЗаполнено(Сообщение.НомерПриемкиПокупателя) Тогда
			xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,	"receivingAdviceIdentificatorInBuyerSystem").number = Сообщение.НомерПриемкиПокупателя; 
		КонецЕсли;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "DESADV" Тогда
		xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "invoiceIdentificator",				Сообщение, "СчетФактураEDI");
		xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "egaisRegistrationIdentificator",	Сообщение, "ТТНвЕГАИС");
		xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "egaisFixationIdentificator",		Сообщение, "ФиксацияВЕГАИС");
	КонецЕсли;
	
	//Если Сообщение.ТипСообщения = "PORDERS"  Тогда  //ТС Низкоцен //теперь на все сообщения
		xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "contractIdentificator", Сообщение, "Контракт"); //Теперь называется Контракт а не КОнтрактEDI
	//КонецЕсли;
	
	Если Сообщение.ТипСообщения = "INVOIC" ИЛИ Сообщение.ТипСообщения = "COINVOIC" Тогда
		
		xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "orderResponse",				Сообщение, "ОтветНаЗаказEDI");
		xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "receivingIdentificator",	Сообщение, "ПриемкаEDI");
		//xmlЗаполнитьDocumentIdentificator(ОбъектДокумента, "contractIdentificator",		Сообщение, "Контракт"); //Теперь называется Контракт а не КОнтрактEDI и для всех сообщений

	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "COINVOIC" Тогда
		Если Сообщение.Свойство("СчетФактураEDI",) И Сообщение.СчетФактураEDI.Свойство("Номер") И Сообщение.СчетФактураEDI.Свойство("Дата") Тогда
			Если ЗначениеЗаполнено(Сообщение.СчетФактураEDI.Номер) или ЗначениеЗаполнено(Сообщение.СчетФактураEDI.Дата) Тогда
				
				originInvoic = xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,	"originInvoic");
				originInvoic.number	= Сообщение.СчетФактураEDI.Номер;
				originInvoic.date	= Сообщение.СчетФактураEDI.Дата;
				
				Если Сообщение.СчетФактураEDI.Свойство("ДиадокID") Тогда
					originInvoic.diadocInvoicId	= Сообщение.СчетФактураEDI.ДиадокID;
				КонецЕсли;	
				
				Если Сообщение.СчетФактураEDI.Свойство("Исправление") Тогда
					Если Сообщение.СчетФактураEDI.Исправление = Истина Тогда
						originInvoic.revisionNumber	= Сообщение.СчетФактураEDI.НомерИсправления;
						originInvoic.revisionDate	= Сообщение.СчетФактураEDI.ДатаИсправления;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение.НомерСерииЗаказов) Тогда
		xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента,	"blanketOrderIdentificator").number = Сообщение.НомерСерииЗаказов;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "INVOIC" И Сообщение.СчетФактураEDI.Свойство("ДиадокID") И ЗначениеЗаполнено(Сообщение.СчетФактураEDI.ДиадокID) Тогда
		xmlСоздатьДочернийЭлементXDTO(ОбъектДокумента, "revisionedInvoic").id = Сообщение.СчетФактураEDI.ДиадокID;
	КонецЕсли;
	
КонецПроцедуры

//Создает в Приемник тег с именем ИмяПоляПриемника, если таковой присутствует в схеме. 
//И заполняет его данными из Источник.ИмяПоляИсточника, если в источнике есть такое поле. 
Процедура xmlЗаполнитьDocumentIdentificator(Приемник, ИмяПоляПриемника, Источник, ИмяПоляИсточника)
	
	Если Источник.Свойство(ИмяПоляИсточника)=Ложь Тогда
		Возврат;
	КонецЕсли;
	
	_Номер	= Неопределено;
	_Дата	= Неопределено;
	
	Источник[ИмяПоляИсточника].Свойство("Номер",_Номер);
	Источник[ИмяПоляИсточника].Свойство("Дата",_Дата);
	
	Если Не ЗначениеЗаполнено(_Номер) Тогда
		Возврат;//а пустую дату пока разрешим
	КонецЕсли;
	
	Если НЕ Приемник.Тип().Свойства.Получить(ИмяПоляПриемника)=Неопределено Тогда
		xmlСоздатьДочернийЭлементXDTO(Приемник,	ИмяПоляПриемника);
		Приемник[ИмяПоляПриемника].number	= _Номер;
		Если ЗначениеЗаполнено(_Дата) Тогда
			Приемник[ИмяПоляПриемника].date		= _Дата;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

//ленивая функция для создания дочернего объекта XDTO по его имени
Функция xmlСоздатьДочернийЭлементXDTO(ТекущийЭлемент,Имя,ПрисвоитьСразу = Истина) Экспорт
	
	_Свойство = ТекущийЭлемент.Свойства().Получить(Имя);
	ТипНовогоЭлемента = _Свойство.Тип;
	_Фабрика = xmlПолучитьФабрикуПоПространствуИмен(_Свойство.URIПространстваИмен);
	
	НовыйЭлемент = _Фабрика.Создать(ТипНовогоЭлемента);	
	Если ПрисвоитьСразу И Не НовыйЭлемент = Неопределено Тогда
		Если ТипЗнч(ТекущийЭлемент[Имя]) = Тип("СписокXDTO") Тогда
			ТекущийЭлемент[Имя].Добавить(НовыйЭлемент);
		Иначе		
			ТекущийЭлемент[Имя] = НовыйЭлемент;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция xmlПолучитьФабрикуПоПространствуИмен(URIПространстваИмен)
	
	Возврат ФабрикаXDTO_EdiXml();//заглушка, в будущем задействовать кэш
	
КонецФункции

Процедура xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,ИмяПоля,Значение, НезаполненоКакНоль=Ложь)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ОбъектXDTO[ИмяПоля] = Значение;
	иначеЕсли НезаполненоКакНоль=Истина Тогда
		ОбъектXDTO[ИмяПоля] = 0;
	КонецЕсли;
	
КонецПроцедуры

//Фабрика для записи сообщений EdiXML
Функция ФабрикаXDTO_EdiXml() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("ФабрикаXDTO_EdiXml");
	
	Если Результат = Неопределено Тогда
		
		ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ПолучитьМакет("СхемыСообщений").Записать(ФайлСхемы);
		Результат = СоздатьФабрикуXDTO(ФайлСхемы);
		УдалитьФайлы(ФайлСхемы);
		
		ЭДО_Кэш_Поместить("ФабрикаXDTO_EdiXml",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Фабрика - описание данных по торговым сетям
Функция ФабрикаXDTO_PARTIN()
	
	Результат = ЭДО_Кэш_Прочитать("ФабрикаXDTO_PARTIN");
	
	Если Результат = Неопределено Тогда
		
		ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ПолучитьМакет("СхемыPARTIN").Записать(ФайлСхемы);
		Результат = СоздатьФабрикуXDTO(ФайлСхемы);
		УдалитьФайлы(ФайлСхемы);
		
		ЭДО_Кэш_Поместить("ФабрикаXDTO_PARTIN",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Фабрика - описание структуры ответов сервера edi-api.kontur.ru
Функция ФабрикаXDTO_API()
	
	Результат = ЭДО_Кэш_Прочитать("ФабрикаXDTO_API");
	
	Если Результат = Неопределено Тогда
		
		ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ПолучитьМакет("СхемыСообщенийAPI").Записать(ФайлСхемы);
		Результат = СоздатьФабрикуXDTO(ФайлСхемы);
		УдалитьФайлы(ФайлСхемы);
		
		ЭДО_Кэш_Поместить("ФабрикаXDTO_API",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция БиблиотекаКартинокEDI() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("БиблиотекаКартинокEDI");
	
	Если Результат = Неопределено Тогда
		
		Результат = Новый Структура;
		Для Каждого Рисунок Из ПолучитьМакет("БиблиотекаКартинок").Рисунки Цикл
			Результат.Вставить(Рисунок.Имя,Рисунок.Картинка);
		КонецЦикла;
		
		ЭДО_Кэш_Поместить("БиблиотекаКартинокEDI",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Аналог старой переменной с тем же именем
//На всякий случай оставлена экспортной
Функция ТаблицаКодовРегионов() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("ТаблицаКодовРегионов");
	
	Если Результат = Неопределено Тогда
		
		Результат = Новый ТаблицаЗначений();
		
		ДобавитьКолонкиВТаблицуЗначений(Результат,"КодСтрока,Наименование,КодЧисло,ПредставлениеДляПоиска,КраткоеНаименование,Сокращение,КолБукв");
		
		Макет = ПолучитьМакет("Классификатор_КодРегиона");
		
		ДанныеКлассификатора = Макет.ПолучитьОбласть("Данные");
		
		Для Сч=1 По ДанныеКлассификатора.ВысотаТаблицы Цикл
			
			НомерСтроки = Формат(сч,"ЧГ=");
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.КодСтрока					= СокрЛП(ДанныеКлассификатора.Область("R"+НомерСтроки+"C1").Текст);
			НоваяСтрока.Наименование				= СокрЛП(ДанныеКлассификатора.Область("R"+НомерСтроки+"C2").Текст);
			НоваяСтрока.КодЧисло					= СокрЛП(ДанныеКлассификатора.Область("R"+НомерСтроки+"C3").Текст);
			
			НоваяСтрока.ПредставлениеДляПоиска		= СокрЛП(ДанныеКлассификатора.Область("R"+НомерСтроки+"C4").Текст);
			НоваяСтрока.КраткоеНаименование			= СокрЛП(ДанныеКлассификатора.Область("R"+НомерСтроки+"C5").Текст);
			НоваяСтрока.Сокращение					= СокрЛП(ДанныеКлассификатора.Область("R"+НомерСтроки+"C6").Текст);
			
			НоваяСтрока.КолБукв						= СтрДлина(НоваяСтрока.ПредставлениеДляПоиска);
			
		КонецЦикла;
		
		Результат.Сортировать("КолБукв Убыв"); // чтобы случайно небольшое название не содержалось в более крупном (напр. "Саха" в "Сахалинской");
		
		Результат.Индексы.Добавить("ПредставлениеДляПоиска");
		Результат.Индексы.Добавить("КодСтрока");
		
		ЭДО_Кэш_Поместить("ТаблицаКодовРегионов",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция xmlПространствоИменСообщений()//для XDTO
	
	Возврат "http://edi.kontur.ru/1c/ediXml/v01_4b";
	
	//http://edi.kontur.ru/1c/ediXml/v01_4b
	// Выпущено в 4.03.011
	// Добавлен тег "egaisFixationIdentificator"
	
	//http://edi.kontur.ru/1c/ediXml/v01_3b
	// Выпущено в 4.03.010
	// Широко задействован тип xs:Date
	// Тип xs:DateTime исключен из-за непредсказуемой обработки механизмом XDTO и заменен на xs:string
	// DeliveryInfo прописан в каждом сообщении свой, с ограниченным набором реквизитов.
	// Тело каждого документа описано независимо, убран тип doc_common.
	
	//http://edi.kontur.ru/1c/ediXml/v01_2b
	// Выпущено в 4.03.009.
	// Задействованы корневые свойства, PRICELIST влит сюда же.
	
	//http://edi.kontur.ru/1c/ediXml/v01
	// Выпущено в 4.03.008.
	
КонецФункции

Функция ДобавитьЭлементСпискаXDTO(СписокXDTO,мФабрика,СоздаватьВложенные = Ложь)
	
	НовЭлемент = СоздатьПустойОбъектXDTO(мФабрика,СписокXDTO.ВладеющееСвойство.Тип,СоздаватьВложенные);
	СписокXDTO.Добавить(НовЭлемент);
	Возврат НовЭлемент;
	
КонецФункции

Функция СоздатьПустойОбъектXDTO(мФабрика,Тип_Основной,СоздатьВложенныеОбъекты = Ложь)
	//по умолчанию создаем все вложенные свойства
	
	НовОбъект=Неопределено;
	
	НовОбъект = мФабрика.Создать(Тип_Основной);
	
	Если СоздатьВложенныеОбъекты Тогда
		Для Каждого Эл из Тип_Основной.Свойства Цикл
	        флСвойствоНеСписковое =	(Эл.ВерхняяГраница=1);
			Если Эл.Тип.URIПространстваИмен=Тип_Основной.URIПространстваИмен 
				И флСвойствоНеСписковое	Тогда
				
				Если ТипЗнч(Эл.Тип) = Тип("ТипОбъектаXDTO") Тогда//вложенные свойства создаем только для объектов
					НовоеСвойство = СоздатьПустойОбъектXDTO(мФабрика,Эл.Тип,СоздатьВложенныеОбъекты);
					НовОбъект[Эл.Имя]=НовоеСвойство;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат НовОбъект;
	
КонецФункции

Функция УдалитьПустыеСвойстваXDTO(ОбъектXDTO)
	//продумать другой вариант: по умолчанию не создаем все свойства объекта, а только в момент их установки инициализируем. Тогда и этот метод не нужен будет.
	
	Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		ЕстьНеПустые = Ложь;
		Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
			//Сообщить(Свойство.Имя);
			ТекущееСвойствоПустое = УдалитьПустыеСвойстваXDTO(ОбъектXDTO[Свойство.Имя]);
			Если ТекущееСвойствоПустое Тогда
				ОбъектXDTO.Сбросить(Свойство.Имя);
			КонецЕсли;
			ЕстьНеПустые = ЕстьНеПустые или Не ТекущееСвойствоПустое;
		КонецЦикла;	
		Возврат Не ЕстьНеПустые;
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Для Каждого ЭлементКоллекции Из ОбъектXDTO Цикл
			УдалитьПустыеСвойстваXDTO(ЭлементКоллекции);
		КонецЦикла;	
		
		Возврат (ОбъектXDTO.Количество()=0);//если нет строк, то удалим этот тег
	Иначе//уткнулись в конец ветки, в примитивный / ссылочный тип
		Если Не ЗначениеЗаполнено(ОбъектXDTO)
			И ОбъектXDTO<>0 Тогда//значение "0" не будем считать пустым
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ВычислитьXDTO(ОбъектXDTO,Путь) Экспорт
	
	ТекущийЭлемент = ОбъектXDTO;
	
	Для Каждого ТекущийПуть Из EDI_РазложитьСтрокуВМассивСлов(Путь,".") Цикл
		
		Если ТекущийЭлемент = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(ТекущийЭлемент)=Тип("СписокXDTO") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекущийЭлемент = ПолучитьЗначениеСвойстваXDTO(ТекущийЭлемент,ТекущийПуть);
		
	КонецЦикла;
	
	Возврат ТекущийЭлемент;
	
КонецФункции

//***********************************************************
//	ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

//используется только для Reports
Функция ДобавитьПоле(Таблица,Имя,Псевдоним = "",ТипЗначения = "", ПризнакОбязательности = "", МинимальнаяДлина = "", МаксимальнаяДлина = "",Путь = "",ИмяТаблицы="")
	
	НоваяСтрока = Таблица.Добавить();
	
	НоваяСтрока.Имя						= Имя;
	НоваяСтрока.Псевдоним				= Псевдоним;
	НоваяСтрока.ТипЗначения 			= ТипЗначения;
	НоваяСтрока.ПризнакОбязательности	= ПризнакОбязательности;
	НоваяСтрока.МинимальнаяДлина		= МинимальнаяДлина;
	НоваяСтрока.МаксимальнаяДлина		= МаксимальнаяДлина;
	НоваяСтрока.Путь					= Путь;
	НоваяСтрока.ИмяТаблицы				= ИмяТаблицы;
	
КонецФункции

Функция ПоместитьЗначениеПоля(Сообщение,Значение,СтруктураДанных,ВидСтруктуры,Путь)
	
	НайденнаяСтрока = СтруктураДанных.Найти(Путь,"Путь");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		Если НайденнаяСтрока.ИмяПоля = "ПричинаВозврата" Тогда // костылик для RETANN
			Если ЗначениеЗаполнено(Сообщение.ПричинаВозврата) Тогда
				Сообщение.ПричинаВозврата = Сообщение.ПричинаВозврата + " " + СокрЛП(Значение);
			Иначе
				Сообщение.ПричинаВозврата = СокрЛП(Значение);
			КонецЕсли;
		Иначе
			Сообщение[НайденнаяСтрока.ИмяПоля] = Значение;
		КонецЕсли;		
	КонецЕсли;	
	
КонецФункции

Функция ДобавитьОписаниеПоля(ТабОписания,ИмяПоля,Путь,ИмяСтруктуры =  Неопределено,ЭтоСписок = Ложь)
	
	НоваяСтрока = ТабОписания.Добавить();
	
	НоваяСтрока.ИмяПоля			= ИмяПоля;
	НоваяСтрока.Путь			= Путь;
	НоваяСтрока.ИмяСтруктуры	= ИмяСтруктуры;
	НоваяСтрока.ЭтоСписок		= ЭтоСписок;
	
КонецФункции

Функция ПодготовитьБуферXML(ТипСообщения)
	
	СтруктураДокумента = ПолучитьМаппингПолейXML("Документ",ТипСообщения);//это вызывается повторно
	
	Структура = Новый Структура();
	
	Для Каждого Стр Из СтруктураДокумента Цикл
		
		ЗначениеПоля = "";
		
		Если НЕ Стр.ИмяСтруктуры = Неопределено Тогда
			
			ОписаниеПоля = ПолучитьМаппингПолейXML(Стр.ИмяСтруктуры,ТипСообщения);
			
			Если Стр.ЭтоСписок Тогда
				
				ЗначениеПоля = Новый ТаблицаЗначений;
				Для Каждого СтрПоля ИЗ ОписаниеПоля Цикл
					ЗначениеПоля.Колонки.Добавить(СтрПоля.ИмяПоля);
				КонецЦикла;
				
			Иначе	
				
				ЗначениеПоля = Новый Структура();
				Для Каждого СтрПоля Из ОписаниеПоля Цикл
					ЗначениеПоля.Вставить(СтрПоля.ИмяПоля);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		Структура.Вставить(Стр.ИмяПоля,ЗначениеПоля);
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьЮрФизЛицо(ЮрФизЛицоXML,ЮрФизЛицоEDI)
	
	ЮрФизЛицоEDI.GLN				= ЮрФизЛицоXML.GLN;
	ЮрФизЛицоEDI.Наименование		= ЮрФизЛицоXML.Наименование;
	ЮрФизЛицоEDI.Фамилия			= ЮрФизЛицоXML.Фамилия;
	ЮрФизЛицоEDI.Имя				= ЮрФизЛицоXML.Имя;
	ЮрФизЛицоEDI.Отчество			= ЮрФизЛицоXML.Отчество;
	ЮрФизЛицоEDI.Телефон			= ЮрФизЛицоXML.Телефон;
	ЮрФизЛицоEDI.Банк				= ЮрФизЛицоXML.Банк;
	ЮрФизЛицоEDI.БИК				= ЮрФизЛицоXML.БИК;
	ЮрФизЛицоEDI.НомерСчета			= ЮрФизЛицоXML.НомерСчета;
	ЮрФизЛицоEDI.Руководитель		= ЮрФизЛицоXML.Руководитель;
	ЮрФизЛицоEDI.ГлавныйБухгалтер	= ЮрФизЛицоXML.ГлавныйБухгалтер;
	ЮрФизЛицоEDI.КодВСистемеПокупателя	= ЮрФизЛицоXML.КодВСистемеПокупателя;
	
	Если ЗначениеЗаполнено(ЮрФизЛицоXML.КодРегиона) ИЛИ ЗначениеЗаполнено(ЮрФизЛицоXML.Улица) Тогда
		ЮрФизЛицоEDI.Адрес.ВидАдреса = "Российский";
	КонецЕсли;
	
	ЮрФизЛицоEDI.Адрес.Город = ЮрФизЛицоXML.Город;
	ЮрФизЛицоEDI.Адрес.Дом = ЮрФизЛицоXML.Дом;
	ЮрФизЛицоEDI.Адрес.Индекс = ЮрФизЛицоXML.Индекс;
	ЮрФизЛицоEDI.Адрес.Квартира = ЮрФизЛицоXML.Квартира;
	ЮрФизЛицоEDI.Адрес.НаселенныйПункт = ЮрФизЛицоXML.НаселенныйПункт;
	ЮрФизЛицоEDI.Адрес.Район = ЮрФизЛицоXML.Район;
	ЮрФизЛицоEDI.Адрес.Регион = ЮрФизЛицоXML.КодРегиона;
	ЮрФизЛицоEDI.Адрес.Улица = ЮрФизЛицоXML.Улица;
	
	Если ЗначениеЗаполнено(ЮрФизЛицоXML.Наименование) ИЛИ ЗначениеЗаполнено(ЮрФизЛицоXML.ИНН_ЮЛ) ИЛИ ЗначениеЗаполнено(ЮрФизЛицоXML.КПП) Тогда
		ЮрФизЛицоEDI.Вид = "ЮрЛицо";
		ЮрФизЛицоEDI.ИНН = ЮрФизЛицоXML.ИНН_ЮЛ;
		ЮрФизЛицоEDI.КПП = ЮрФизЛицоXML.КПП;
	Иначе
		ЮрФизЛицоEDI.Вид = "ФизЛицо";
		ЮрФизЛицоEDI.ИНН = ЮрФизЛицоXML.ИНН_ФЛ;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеСвойстваXDTO(ОбъектXDTO,ИмяСвойства) Экспорт
	
	Если НЕ ОбъектXDTO.Свойства().Получить(ИмяСвойства) = Неопределено Тогда
		
		Возврат ОбъектXDTO[ИмяСвойства];
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьЮрФизЛицоXDTO(ЮрФизЛицоEDI,ЮрФизЛицоXDTO)

	Если ЮрФизЛицоXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЮрФизЛицоEDI.GLN = ЮрФизЛицоXDTO.GLN;
	
	Если НЕ ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO,"organization") = Неопределено Тогда
		
		ЮрФизЛицоEDI.Вид = "ЮрЛицо";
		ЮрФизЛицоEDI.Наименование	= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.organization,"name");
		ЮрФизЛицоEDI.ИНН			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.organization,"inn");
		ЮрФизЛицоEDI.КПП			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.organization,"kpp");
		
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO,"selfEmployed") = Неопределено Тогда
		
		Если НЕ ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.selfEmployed,"inn") = Неопределено Тогда
			
			ЮрФизЛицоEDI.Вид = "ФизЛицо";
			ЮрФизЛицоEDI.ИНН = ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.selfEmployed,"inn");
			
			Если НЕ ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.selfEmployed,"fullName") = Неопределено Тогда
				
				ЮрФизЛицоEDI.Фамилия			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.selfEmployed.fullName,"lastName");
				ЮрФизЛицоEDI.Имя				= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.selfEmployed.fullName,"firstName");
				ЮрФизЛицоEDI.Отчество			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.selfEmployed.fullName,"middleName");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НЕ ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO,"foreignOrganization") = Неопределено Тогда
		
		ИНН				= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.foreignOrganization,"tin");
		Наименование	= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.foreignOrganization,"name");
		
		Если ЗначениеЗаполнено(ИНН) ИЛИ ЗначениеЗаполнено(Наименование) Тогда
			
			ЮрФизЛицоEDI.Вид	= "Нерезидент";
			ЮрФизЛицоEDI.ИНН	= ИНН;
			ЮрФизЛицоEDI.Наименование = Наименование;
			
			ЮрФизЛицоEDI.Адрес.ВидАдреса = "Иностранный";
			ЮрФизЛицоEDI.Адрес.КодСтраны = ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.foreignOrganization,"countryCode");
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ЮрФизЛицоEDI.Адрес.ВидАдреса = "Иностранный" Тогда
		
		Если НЕ ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO,"russianAddress") = Неопределено Тогда
			
			ЮрФизЛицоEDI.Адрес.ВидАдреса = "Российский";
			ЮрФизЛицоEDI.Адрес.Город			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.russianAddress,"city");
			ЮрФизЛицоEDI.Адрес.Дом				= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.russianAddress,"house");
			ЮрФизЛицоEDI.Адрес.Индекс			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.russianAddress,"postalCode");
			ЮрФизЛицоEDI.Адрес.Квартира			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.russianAddress,"flat");
			ЮрФизЛицоEDI.Адрес.НаселенныйПункт	= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.russianAddress,"settlement");
			ЮрФизЛицоEDI.Адрес.Район			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.russianAddress,"district");
			ЮрФизЛицоEDI.Адрес.Регион			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.russianAddress,"regionISOCode");
			ЮрФизЛицоEDI.Адрес.Улица			= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO.russianAddress,"street");
			
		КонецЕсли;
		
	КонецЕсли;
		
	ЮрФизЛицоEDI.КодВСистемеПокупателя	= ПолучитьЗначениеСвойстваXDTO(ЮрФизЛицоXDTO,"additionalIdentificator");
	
	// kns {метка} добавить доп. информацию 
	
	//ЮрФизЛицоEDI.Телефон			= ЮрФизЛицоXML.Телефон;
	//ЮрФизЛицоEDI.Банк				= ЮрФизЛицоXML.Банк;
	//ЮрФизЛицоEDI.БИК				= ЮрФизЛицоXML.БИК;
	//ЮрФизЛицоEDI.НомерСчета			= ЮрФизЛицоXML.НомерСчета;
	//ЮрФизЛицоEDI.Руководитель		= ЮрФизЛицоXML.Руководитель;
	//ЮрФизЛицоEDI.ГлавныйБухгалтер	= ЮрФизЛицоXML.ГлавныйБухгалтер;
	
КонецПроцедуры

//В СообщениеXML на входе подается Структура вида "Документ,Получатель,..."
//В СообщениеEDI помещает структуру вида "ДокументEDI, Документ1С, ПолучательEDI, Получатель1С, ...". (поля с суффиксом 1С пока пустые).
Процедура ЗаполнитьСообщениеEDI(СообщениеXML,СообщениеEDI,ТипСообщения,Направление)
	
	СообщениеEDI.ID = СообщениеXML.ID;
	
	СообщениеEDI.ТипСообщения = ТипСообщения;
	СообщениеEDI.Направление  = Направление;
	
	//creationDateTime
	//Заполняем в структуру время создания в стандарте UTC (для сравнения МСК = (UTC+3)) 
	СообщениеEDI.ДатаСоздания = ДатаXML_в_ДатаВремя1С(СообщениеXML.ДатаСоздания);
	
    СообщениеEDI.ДокументEDI.Номер	= СообщениеXML.НомерДокумента;
	СообщениеEDI.ДокументEDI.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаДокумента);
	
	Если СообщениеEDI.Свойство("Контракт") Тогда 
    	СообщениеEDI.Контракт.Номер	= СообщениеXML.НомерКонтракта;
		СообщениеEDI.Контракт.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаКонтракта);
	КонецЕсли;

	СообщениеEDI.ДатаПоставки		= ДатаXML_в_ДатаВремя1С(СообщениеXML.ДатаВремяПоставки);
	//+Для Магнита
	Если ТипСообщения = "ORDERS" Тогда
		СообщениеEDI.ДатаВывозаОтПоставщика	= ДатаXML_в_ДатаВремя1С(СообщениеXML.ДатаВывозаОтПоставщика);
		//Еще для Магнита Признак самовывоза E1C_in-29815
		Для каждого Стр Из СообщениеXML.ТочкиСамовывоза Цикл
			НоваяСтрока = СообщениеEDI.ТочкиСамовывоза.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		КонецЦикла;
		СообщениеEDI.ОтветственныйЗаДоставку	= СообщениеXML.ОтветственныйЗаДоставку;
	КонецЕсли;	
	//-
	
	Если СообщениеEDI.ТипСообщения = "DESADV" Тогда
		
		СообщениеEDI.ДатаОтгрузки	= СообщениеXML.ДатаОтгрузки;
		
		СообщениеEDI.Транспортировка.РежимПеревозки				= СообщениеXML.РежимПеревозки;
		СообщениеEDI.Транспортировка.ИмяВодителя				= СообщениеXML.ИмяВодителя;
		СообщениеEDI.Транспортировка.НомерТранспортногоСредства	= СообщениеXML.НомерТранспортногоСредства;
		СообщениеEDI.Транспортировка.МаркаТранспортногоСредства	= СообщениеXML.МаркаТранспортногоСредства;
		
	КонецЕсли;
	
	Если СообщениеEDI.Свойство("НомерПриемкиПокупателя") Тогда
		СообщениеEDI.НомерПриемкиПокупателя	= СообщениеXML.НомерПриемкиПокупателя;
	КонецЕсли;		
	
	СообщениеEDI.НомерСерииЗаказов	= СообщениеXML.НомерСерииЗаказов;
	
	СообщениеEDI.ЗаказEDI.Номер		= СообщениеXML.НомерЗаказа;
	СообщениеEDI.ЗаказEDI.Дата		= ДатаXML_в_Дата1С(СообщениеXML.ДатаЗаказа);
	СообщениеEDI.НакладнаяEDI.Номер = СообщениеXML.НомерНакладной;
	СообщениеEDI.НакладнаяEDI.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаНакладной);
	СообщениеEDI.ПриемкаEDI.Номер	= СообщениеXML.НомерПриемки;
	СообщениеEDI.ПриемкаEDI.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаПриемки);
	СообщениеEDI.СчетФактураEDI.Номер	= СообщениеXML.НомерСчетФактуры;
	СообщениеEDI.СчетФактураEDI.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаСчетФактуры);
	Если ТипСообщения = "ORDERS" Тогда
		СообщениеEDI.ОбратныйЗаказEDI.Номер	= СообщениеXML.НомерОбратногоЗаказа;
		СообщениеEDI.ОбратныйЗаказEDI.Дата	= ДатаXML_в_Дата1С(СообщениеXML.ДатаОбратногоЗаказа);
	КонецЕсли;
	
	//врата	
	Если (ТипСообщения = "ORDERS") или (ТипСообщения = "ORDRSP") Тогда
		массив=СообщениеXML.Транспортировка.ВыгрузитьКолонку("ДатаВремяПрибытия");
		СообщениеEDI.Транспортировка.ДатаВремяПрибытия.ЗагрузитьЗначения(массив);
		Если ТипСообщения = "ORDERS" тогда
			СообщениеEDI.Транспортировка.ДатаВремяПрибытия.ЗаполнитьПометки(Истина);
		конецесли;
		//г=1/0;
	конецесли;
	//	
	СообщениеEDI.ОтправительEDI.GLN = СообщениеXML.Отправитель;
	СообщениеEDI.ПолучательEDI.GLN	= СообщениеXML.Получатель;
	СообщениеEDI.ВалютаEDI			= СообщениеXML.Валюта;
	СообщениеEDI.СуммаВсего 		= СообщениеXML.СуммаВсего;
	СообщениеEDI.СуммаВсегоБезНДС	= СообщениеXML.СуммаВсегоБезНДС;
	СообщениеEDI.СуммаВсегоНДС		= СообщениеXML.СуммаВсегоНДС;
	
	СообщениеEDI.Статус				= СообщениеXML.Статус;
	
	СообщениеEDI.ПромоНомер			= СообщениеXML.ПромоНомер;
	СообщениеEDI.Комментарий		= СообщениеXML.Комментарий;
	
	ЗаполнитьЮрФизЛицо(СообщениеXML.Продавец,			СообщениеEDI.ПродавецEDI);
	ЗаполнитьЮрФизЛицо(СообщениеXML.Покупатель,			СообщениеEDI.ПокупательEDI);
	ЗаполнитьЮрФизЛицо(СообщениеXML.Плательщик,			СообщениеEDI.ПлательщикEDI);
	ЗаполнитьЮрФизЛицо(СообщениеXML.Грузоотправитель,	СообщениеEDI.ГрузоотправительEDI);
	ЗаполнитьЮрФизЛицо(СообщениеXML.Грузополучатель,	СообщениеEDI.ГрузополучательEDI);
	Если СообщениеEDI.Свойство("КонечныйГрузополучательEDI") Тогда
		ЗаполнитьЮрФизЛицо(СообщениеXML.КонечныйГрузополучатель,	СообщениеEDI.КонечныйГрузополучательEDI);
	КонецЕсли;
	Если СообщениеEDI.Свойство("ПромежуточныйГрузополучательEDI") Тогда
		ЗаполнитьЮрФизЛицо(СообщениеXML.ПромежуточныйГрузополучатель,	СообщениеEDI.ПромежуточныйГрузополучательEDI);
	КонецЕсли;
	
	сч = 0;
	
	Для каждого Стр Из СообщениеXML.Товары Цикл
		
		сч = сч+1;
		
		НоваяСтрока = СообщениеEDI.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
		НоваяСтрока.КодЕдиницыИзмеренияEDI	= Стр.КодЕдиницыИзмерения;
		Если Направление = "Исходящее" И Найти("\ORDRSP\DESADV\INVOIC\","\"+СокрЛП(ТипСообщения)+"\")>0 Тогда
			НоваяСтрока.GTIN					= Стр.GTIN;
		Иначе
			НоваяСтрока.GTIN					= ПривестиGTIN(Стр.GTIN);
		КонецЕсли;
		
		НоваяСтрока.СтавкаНДСEDI			= Стр.СтавкаНДС;
		НоваяСтрока.Статус					= Стр.Статус;
		
		НоваяСтрока.СтранаEDI	= Стр.КодСтраны;
		НоваяСтрока.НомерГТДEDI = Стр.НомерГТД;
		
		НоваяСтрока.НомерСтроки = сч;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПреобразоватьСтатус(Статус1С) 
	
	Если Статус1С = "Уточнен" Тогда
		Возврат "Changed";
	ИначеЕсли Статус1С = "Отклонен" Тогда
		
		Возврат "Rejected";
		
	ИначеЕсли Статус1С = "Подтвержден" Тогда
		
		Возврат "Accepted";
		
	КонецЕсли;
	
	Возврат Статус1С;
	
КонецФункции

Функция ПолучитьСтруктуруСообщения_Объект_REPORTS()
	
//	СтруктураШапки = ПолучитьСтруктуруСообщения_reports();
	СтруктураШапки = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(СтруктураШапки,"Имя,Псевдоним,Путь,ИмяТаблицы,ТипЗначения,ПризнакОбязательности,МинимальнаяДлина,МаксимальнаяДлина");
	СтруктураШапки.Индексы.Добавить("Путь");
	
								
	ДобавитьПоле(СтруктураШапки, "ДатаОтправки",			"Дата отправки",					"Дата",			"О",,,		"reportDateTime");
	ДобавитьПоле(СтруктураШапки, "Отправитель",				"Отправитель",						"Строка",		"О",1,13,	"reportItem.messageSender");
	ДобавитьПоле(СтруктураШапки, "Получатель",				"Получатель",						"Строка",		"О",1,13,	"reportItem.messageRecepient");
	ДобавитьПоле(СтруктураШапки, "ТипДокумента",			"Тип документа",					"Строка",		"О",1,10,	"reportItem.documentType");
	ДобавитьПоле(СтруктураШапки, "НомерДокумента",			"Номер документа",					"Строка",		"О",1,17,	"reportItem.documentNumber");
	ДобавитьПоле(СтруктураШапки, "ДатаДокумента",			"Дата документа",					"Дата",			"О",,,		"reportItem.documentDate"	);
	ДобавитьПоле(СтруктураШапки, "Этап",					"Этап",								"Строка",		"О",1,20,	"reportItem.statusItem.stage"	);
	ДобавитьПоле(СтруктураШапки, "Статус",					"Статус",							"Строка",		"О",1,20,	"reportItem.statusItem.state"	);
	ДобавитьПоле(СтруктураШапки, "Комментарий",				"Комментарий",						"Строка",		"О",1,200,	"reportItem.statusItem.description"	);
	ДобавитьПоле(СтруктураШапки, "ОписаниеОшибки",			"Описание ошибки",					"Строка",		"О",1,99999,"reportItem.statusItem.error"	);
	ДобавитьПоле(СтруктураШапки, "ID",						"",									"Строка",		"О",1,500,	"reportItem.messageId");
	
	ДобавитьПоле(СтруктураШапки, "boxId",					"",									"Строка",		"О",1,500,	"reportItem.statusItem.diadocDetails.boxId");
	ДобавитьПоле(СтруктураШапки, "messageId",				"",									"Строка",		"О",1,500,	"reportItem.statusItem.diadocDetails.messageId");
	ДобавитьПоле(СтруктураШапки, "invoiceId",				"",									"Строка",		"О",1,500,	"reportItem.statusItem.diadocDetails.invoiceId");
	ДобавитьПоле(СтруктураШапки, "torg12Id",				"",									"Строка",		"О",1,500,	"reportItem.statusItem.diadocDetails.torg12Id");
	
	ДобавитьПоле(СтруктураШапки, "НеподписанныеСсылка",		"",									"Строка",		"О",1,500,	"reportItem.statusItem.diadocDetails.diadocUrls.messageUrl");
	ДобавитьПоле(СтруктураШапки, "СчетФактураСсылка",		"",									"Строка",		"О",1,500,	"reportItem.statusItem.diadocDetails.diadocUrls.invoiceUrl");
	ДобавитьПоле(СтруктураШапки, "НакладнаяСсылка",			"",									"Строка",		"О",1,500,	"reportItem.statusItem.diadocDetails.diadocUrls.torg12Url");
	
	Шапка  = Новый Структура;
	
	// Шапка
	Шапка.Вставить("ТипСообщения");   	// ORDERS, ORDRSP
	Шапка.Вставить("ПутьКФайлу");	
	Шапка.Вставить("ДатаИзменения");	
	Шапка.Вставить("КлючСообщения",	Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(20)));
	
	Для Каждого Стр ИЗ СтруктураШапки Цикл
		Если Стр.ИмяТаблицы = "" Тогда
			
			Шапка.Вставить(Стр.Имя);
			
		КонецЕсли;	
	КонецЦикла;

	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Шапка",			Шапка);
	СтруктураТаблиц.Вставить("ШапкаСтруктура",	СтруктураШапки);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ИнициализироватьРезультатКонвертацииИсходящегоСообщения()
	
	РезультатКонвертации = Новый Структура;
	РезультатКонвертации.Вставить("Успешно", Ложь);
	РезультатКонвертации.Вставить("ПутьКФайлу");
	РезультатКонвертации.Вставить("СтатусИсходящегоЗаказа");
	
	Возврат РезультатКонвертации;
	
КонецФункции

Функция ЗаписатьЭлементХМЛ(ЗаписьХМЛ,ИмяЭлемента,Значение) Экспорт
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		
		Значение = СтрЗаменить(Значение,"""","");
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	   		ЗаписьХМЛ.ЗаписатьТекст(Значение);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();

	КонецЕсли;
	
КонецФункции

Функция КонвертироватьКодРегионаВЦифры(КодРегионаСтрокой)
	
	Если НЕ ЗначениеЗаполнено(КодРегионаСтрокой) Тогда
		Возврат "";
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаКодовРегионов().Найти(КодРегионаСтрокой,"КодСтрока");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		Возврат НайденнаяСтрока.КодЧисло;
	Иначе
		Возврат "";
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСтрокуБезСпецсимволов(знач Стр)
	
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,"#","");
	Стр = СтрЗаменить(Стр,"$","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"?","");

	Возврат Стр;
	
КонецФункции

//для отправки PRICAT: формирует "полный адрес" товара в структуре папок. Это важно для мелкой розницы.
Функция ПолучитьПредставлениеКаталога(Номенклатура) Экспорт
	//E1C_in-30859
	ПредставлениеКаталога = "";
	
	ТекущийРодитель = Номенклатура.Родитель;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
		
		Если НЕ (ПредставлениеКаталога = "") Тогда
			ПредставлениеКаталога = "|"+ПредставлениеКаталога;
		КонецЕсли;
		ТекПредставление = ПолучитьСтрокуБезСпецсимволов(ТекущийРодитель.Наименование);
		ПредставлениеКаталога = ТекПредставление+ПредставлениеКаталога;
		ТекущийРодитель = ТекущийРодитель.Родитель;
		
	КонецЦикла;

	Возврат ПредставлениеКаталога;
	
КонецФункции

Функция ИнициализироватьСтруктуруРезультатаКонвертации()
	
	РезультатКонвертации = ИнициализироватьСтруктуруРезультатаФункции();

	РезультатКонвертации.Вставить("ТаблицаСообщений");
	РезультатКонвертации.Вставить("Шапка");
	РезультатКонвертации.Вставить("Товары");
	
	Возврат РезультатКонвертации;
	
КонецФункции

Процедура ДополнитьТаблицуТоваровДаннымиОбУпаковке(Сообщение)
	
	Товары 	 = Сообщение.Товары;
	Упаковки = Сообщение.ТранспортныеУпаковки;
	
	УпакованныеТовары = Товары.СкопироватьКолонки();
	ЕстьДопИдентификаторы = НЕ Упаковки.Колонки.Найти("ДопИдентификатор")=Неопределено;//ДетскийМир КонечныйГрузополучатель
	
	НомерСтроки = 1;
	Для Каждого СтрокаТовар Из Товары Цикл
		
		//ищем вхождение номера строки таблицы "Товары" в дереве "Транспортные упаковки"
		УпаковкиТовара 	   		= Упаковки.Строки.НайтиСтроки(Новый Структура("НомерСтроки",НомерСтроки),Истина);
		КоличествоСтрокУпаковок = УпаковкиТовара.Количество();
		
		//не нашли товар - такого быть не должно в принципе, но если вдруг, сообщим, чтобы привлечь внимание
		Если КоличествоСтрокУпаковок = 0 Тогда
			Сообщить("Товар строки №" + Строка(НомерСтроки) + " не найден ни в одной упаковке!");
			
		//нашли единственное вхождение - весь товар размещен в одну упаковку
		ИначеЕсли КоличествоСтрокУпаковок = 1 Тогда
			УпаковкаТовара = УпаковкиТовара.Получить(0);
			НоваяСтрока = УпакованныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
			НоваяСтрока.НомерУпаковки = УпаковкаТовара.НомерУпаковки;
			//ДетскийМир КонечныйГрузополучатель
			Если ЕстьДопИдентификаторы
				И ЗначениеЗаполнено(УпаковкаТовара.Родитель)
				И ЗначениеЗаполнено(УпаковкаТовара.Родитель.ДопИдентификатор) Тогда
				НоваяСтрока.КонечныйГрузополучательGLN = Новый Структура("GLN",УпаковкаТовара.Родитель.ДопИдентификатор);
			КонецЕсли;
			//\\
		//нашли несколько вхождений - товар размещен в несколько упаковок
		ИначеЕсли КоличествоСтрокУпаковок > 1 Тогда
			МассивКоэффициентовРаспределения = Новый Массив;
			СтрокиУпакованногоТовара = Новый Массив;
			СуммаТовараБезНДС = СтрокаТовар.СуммаБезНДС;
			СуммаТовараСНДС   = СтрокаТовар.СуммаСНДС;
			СуммаТовараНДС 	  = СтрокаТовар.СуммаНДС;
			
			//создаем новые строки товара
			Для Каждого УпаковкаТовара Из УпаковкиТовара Цикл
				НоваяСтрока = УпакованныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовар);
				НоваяСтрока.НомерУпаковки = УпаковкаТовара.НомерУпаковки;
				//ДетскийМир КонечныйГрузополучатель
				Если ЕстьДопИдентификаторы
					И ЗначениеЗаполнено(УпаковкаТовара.Родитель)
					И ЗначениеЗаполнено(УпаковкаТовара.Родитель.ДопИдентификатор) Тогда
					НоваяСтрока.КонечныйГрузополучательGLN = Новый Структура("GLN",УпаковкаТовара.Родитель.ДопИдентификатор);
				КонецЕсли;
				//\\
				НоваяСтрока.Количество = УпаковкаТовара.Количество;
				СтрокиУпакованногоТовара.Добавить(НоваяСтрока);
				МассивКоэффициентовРаспределения.Добавить(УпаковкаТовара.Количество);
			КонецЦикла;
			
			//распределяем суммы
			РаспределениеСуммаБезНДС = ВыполнитьРаспределениеПропорционально(СуммаТовараБезНДС, МассивКоэффициентовРаспределения);
			РаспределениеСуммаСНДС 	 = ВыполнитьРаспределениеПропорционально(СуммаТовараСНДС, 	МассивКоэффициентовРаспределения);
			РаспределениеСуммаНДС 	 = ВыполнитьРаспределениеПропорционально(СуммаТовараНДС, 	МассивКоэффициентовРаспределения);
			
			//устанавливаем распределенные значения
			НомерЭлемента = 1;
			Для Каждого УпакованныйТовар Из СтрокиУпакованногоТовара Цикл
				УпакованныйТовар.СуммаБезНДС = РаспределениеСуммаБезНДС[НомерЭлемента-1];
				УпакованныйТовар.СуммаСНДС 	 = РаспределениеСуммаСНДС[НомерЭлемента-1];
				УпакованныйТовар.СуммаНДС    = РаспределениеСуммаНДС[НомерЭлемента-1];
				НомерЭлемента = НомерЭлемента + 1;
			КонецЦикла;
			
		КонецЕсли;	
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Сообщение.Товары.Очистить();
	Сообщение.Товары = УпакованныеТовары.Скопировать();
	
КонецПроцедуры

// функция распределяет сумму пропорционально передаваемому массиву коэффициентов распределения
Функция ВыполнитьРаспределениеПропорционально(Знач РаспределяемаяСумма, МассивКоэффициентов, Знач Точность = 2, ПроверкаНулевыхЗначений=Истина) Экспорт

	Если Не МассивКоэффициентов.Количество() = 0 И РаспределяемаяСумма = 0 Тогда
		МассивНулевыхСумм = Новый Массив;
		Для К = 1 По МассивКоэффициентов.Количество() Цикл
			МассивНулевыхСумм.Добавить(0);
		КонецЦикла;
		Возврат МассивНулевыхСумм;
	КонецЕсли;
		
	Если (МассивКоэффициентов.Количество() = 0) ИЛИ 
		 (ПроверкаНулевыхЗначений И РаспределяемаяСумма = 0) ИЛИ 
		 (РаспределяемаяСумма = Null) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МаксимальныйИндекс 		= 0;
	МаксимальноеЗначение   	= 0;
	РаспределеннаяСумма 	= 0;
	СуммаКоэффициентов  	= 0;
	
	РезультатМассив = Новый Массив(МассивКоэффициентов.Количество());
	
	Для Н = 0 По МассивКоэффициентов.Количество() - 1 Цикл
		
		МодульКоэффициента = Макс(МассивКоэффициентов[Н], -МассивКоэффициентов[Н]);
		
		Если МаксимальноеЗначение < МодульКоэффициента Тогда
			
			МаксимальныйИндекс = Н;
			МаксимальноеЗначение = МодульКоэффициента;
			
		КонецЕсли;
		
		СуммаКоэффициентов = СуммаКоэффициентов + МассивКоэффициентов[Н];
		
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Для Н = 0 По МассивКоэффициентов.Количество() - 1 Цикл
		РезультатМассив[Н] = Окр(РаспределяемаяСумма * МассивКоэффициентов[Н] / СуммаКоэффициентов, Точность, 1);
		РаспределеннаяСумма = РаспределеннаяСумма + РезультатМассив[Н];
	КонецЦикла;
	
	Если Не РаспределеннаяСумма = РаспределяемаяСумма Тогда
		РезультатМассив[МаксимальныйИндекс] = РезультатМассив[МаксимальныйИндекс] + РаспределяемаяСумма - РаспределеннаяСумма;
	КонецЕсли;
	
	Возврат РезультатМассив;

КонецФункции

//Обрезатель лидирующих нулей
Функция УбратьВедущиеНули(КодТовара)  //EDI_An-354
	
	КолСимволов = СтрДлина(КодТовара);
	
	Для н = 1 По КолСимволов Цикл
		
		ТекСимвол = Сред(КодТовара,н,1);
		
		Если НЕ ТекСимвол = "0" Тогда
			Возврат Сред(КодТовара,н);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодТовара;
	
КонецФункции

//***********************************************************
//	ПРЕОБРАЗОВАНИЕ ЗНАЧЕНИЙ

Функция ДатаXML_в_Дата1С(Строка) Экспорт
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда	
		Возврат Строка;
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат Дата(Лев(Строка,4),Сред(Строка,6,2),Сред(Строка,9,2));
	КонецЕсли;	
		
КонецФункции

Функция ДатаXML_в_ДатаВремя1С(Строка) Экспорт
	
	Если ТипЗнч(Строка) = Тип("Дата") Тогда	
		Возврат Строка;
	КонецЕсли;
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Дата(1,1,1);
	Иначе
		
		Если СтрДлина(Строка) = 10 Тогда
			Возврат Дата(Лев(Строка,4),Сред(Строка,6,2),Сред(Строка,9,2));
		Иначе
			Возврат Дата(Лев(Строка,4),Сред(Строка,6,2),Сред(Строка,9,2),Сред(Строка,12,2),Сред(Строка,15,2),Сред(Строка,18,2));
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецФункции

Функция Дата1С_в_ДатаXML(Дата) Экспорт
	
	Если ТипЗнч(Дата) = Тип("Строка") Тогда
		
		Возврат Дата;
		
	ИначеЕсли ТипЗнч(Дата) = Тип("Дата") Тогда
		
		Возврат Формат(Дата,"ДФ=yyyy-MM-dd");
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции

Функция Дата1С_в_ВремяXML(Дата) Экспорт
	
	Возврат Формат(Дата,"ДФ=ЧЧ:мм:сс")+".000";
	
КонецФункции

Функция Дата1С_в_ДатаВремяXML(Дата) Экспорт
	
	ДатаXML		= Дата1С_в_ДатаXML(Дата);
	ВремяXML	= Дата1С_в_ВремяXML(Дата);
	
	Возврат ДатаXML+"T"+ВремяXML+"Z";
	
КонецФункции

Функция Число1С_в_КоличествоXML(Число) Экспорт
	
	Возврат Формат(Число,"ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция Число1С_в_СуммаXML(Число,НольКакНоль =  Ложь) Экспорт
	
	Если НольКакНоль Тогда
		ДополнениеКФормату = "ЧН=0; ";
	Иначе
		ДополнениеКФормату = "";
	КонецЕсли;
		
	Возврат Формат(Число,"ЧРД=.; "+ДополнениеКФормату+"ЧГ=");
	
КонецФункции

Функция ПривестиGTIN(Значение)
	
	// начиная с релиза 4.01.043.15 GTIN не добиваем нулями
	
	Возврат СокрЛП(Значение);
	
КонецФункции

//конвертирует Дату из 1С, преобразованную в строку (неявно, без форматирования) в Дату 1С.
//используется для загрузки PARTIN с WEB (там именно такая дата, если у пользователя стоит другая локаль - будет ошибка)
Функция _ДатаВремя1С(Стр) Экспорт
	Если СтрДлина(Стр)=19 Тогда
		
		Возврат Дата(
		Число(Сред(Стр,7,4)),
		Число(Сред(Стр,4,2)),
		Число(Сред(Стр,1,2)),
		
		Число(Сред(Стр,12,2)),
		Число(Сред(Стр,15,2)),
		Число(Сред(Стр,18,2))
		);
		//19.06.2014 9:00:00
	Иначе
		Возврат Дата(
		Число(Сред(Стр,7,4)),
		Число(Сред(Стр,4,2)),
		Число(Сред(Стр,1,2)),
		
		Число(Сред(Стр,11,2)),
		Число(Сред(Стр,14,2)),
		Число(Сред(Стр,17,2))
		);
		//19.06.2014 18:00:00		
	КонецЕсли;

КонецФункции

//}#КонецОбласти //Конвертация_EdiXml


//{#Область 08_МодульИнтеграции_Новый

//****************************************************************
//	НАСТРОЙКИ


//{{{ ********* Настройка модуля *********

//возвращает "+вх, +пм", если установлено временное хранилище и подключаемый модуль
//используется для индикации в заголовках форм
Функция ПредставлениеОсобенностейМодуля() Экспорт
	
	Если ВнешнееХранилище=Истина Тогда
		Результат = "+вх";//"внешнее хранилище"
	Иначе	
		Результат = "+об";//"добавлены объекты конфигурации"
	КонецЕсли;
	
	Если ИспользуетсяПодключаемыйМодуль=Истина Тогда
		Результат = Результат+",пм";
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаКэшИсполняемогоКодаРасширений) = Тип("ТаблицаЗначений") И НЕ ТаблицаКэшИсполняемогоКодаРасширений.Количество() = 0 Тогда
		Результат = Результат+",рш";		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкуТипаСообщения(ТипСообщения,НеПриниматьАвтоматически = Ложь)
	
	СтруктураНастроекСообщения = Новый Структура();
	СтруктураНастроекСообщения.Вставить("ПриниматьАвтоматически",Истина);
	
	Если НеПриниматьАвтоматически = Истина Тогда
		
		СтруктураНастроекСообщения.Вставить("ПриниматьАвтоматически",Ложь);//переопределим
		
	ИначеЕсли ТипСообщения = "ORDERS" Тогда
		
		Если НЕ ПолучитьКонстантуEDI("НеПоказыватьФормуВходящегоЗаказа") = Истина Тогда

			СтруктураНастроекСообщения.Вставить("ПриниматьАвтоматически",Ложь);
			
		КонецЕсли;

	ИначеЕсли ТипСообщения = "RETDES" Тогда
		
		СтруктураНастроекСообщения.Вставить("ПриниматьАвтоматически",Ложь);
		
	ИначеЕсли ТипСообщения = "PORDERS" Тогда
		
		СтруктураНастроекСообщения.Вставить("ПриниматьАвтоматически",Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураНастроекСообщения;
	
КонецФункции

Функция ПолучитьНастройкиМодуля() Экспорт
	
	СтруктураНастроек = Новый Структура();
	
	НастройкиАвтоматическойПриемки = Новый Массив;
	Для Каждого ТипСообщения Из EDI_РазложитьСтрокуВМассивСлов("PORDERS,ORDERS,ORDRSP,DESADV,RECADV,INVOIC,RETANN,ALCRPT,RETDES",",") Цикл
		НастройкиАвтоматическойПриемки.Добавить("НеПриниматьАвтоматически_"+ТипСообщения);
	КонецЦикла;
	
	НастройкиАвтоматическойПриемки = ПолучитьСписокСвойствEDI(НастройкиАвтоматическойПриемки);
	
	Для Каждого ЭлементСтруктуры Из НастройкиАвтоматическойПриемки Цикл
		НеПриниматьАвтоматически = (ЭлементСтруктуры.Значение = Истина);
		ТипСообщения = Сред(ЭлементСтруктуры.Ключ,26);
		СтруктураНастроек.Вставить(ТипСообщения,ПолучитьНастройкуТипаСообщения(ТипСообщения,НеПриниматьАвтоматически));
	КонецЦикла;
	
	ИмяСправочникаХарактеристики = ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры",,Истина);
	СтруктураНастроек.Вставить("ИспользоватьХарактеристикиНоменклатуры",ЗначениеЗаполнено(ИмяСправочникаХарактеристики));
	
	ГлобальныеНастройки = ПолучитьСписокСвойствEDI(
		"МыПоставщик
		|МыТорговаяСеть
		|ИспользоватьПересчетЕдиницИзмерения
	//	|РазрешитьПустыеКодыGTIN
		|СоздаваемыйДокументРСчетВид
		|ИспользоватьXDTOСериализацию
		|ИспользоватьXDTOПарсинг
		|ОбновлятьВесьСписокПриРаботеСЗаказами
		|СоздаваемыйДокументРСчетGUID
		|ПротоколОбмена_КонтурEDI");
	
	СтруктураНастроек.Вставить("МыПоставщик",							(ГлобальныеНастройки.МыПоставщик = Истина));
	СтруктураНастроек.Вставить("МыТорговаяСеть",						(ГлобальныеНастройки.МыТорговаяСеть = Истина));
	СтруктураНастроек.Вставить("ИспользоватьПересчетЕдиницИзмерения",	(ГлобальныеНастройки.ИспользоватьПересчетЕдиницИзмерения = Истина));
	СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетВид",			ГлобальныеНастройки.СоздаваемыйДокументРСчетВид);
	СтруктураНастроек.Вставить("СоздаваемыйДокументРСчетGUID",			ГлобальныеНастройки.СоздаваемыйДокументРСчетGUID);
	СтруктураНастроек.Вставить("ИспользоватьXDTOСериализацию",			(ГлобальныеНастройки.ИспользоватьXDTOСериализацию = Истина));
	СтруктураНастроек.Вставить("ИспользоватьXDTOПарсинг",				(ГлобальныеНастройки.ИспользоватьXDTOПарсинг = Истина));
	СтруктураНастроек.Вставить("ОбновлятьВесьСписокПриРаботеСЗаказами",	(ГлобальныеНастройки.ОбновлятьВесьСписокПриРаботеСЗаказами = Истина));
	//СтруктураНастроек.Вставить("РазрешитьПустыеКодыGTIN",				(ГлобальныеНастройки.РазрешитьПустыеКодыGTIN = Истина));
	
	ПротоколОбмена_КонтурEDI = ГлобальныеНастройки.ПротоколОбмена_КонтурEDI;//на будущее - оставить все в НастройкиМодуля
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура ОбновитьТаблицуТиповЗначенияОбъектов() Экспорт 
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("ИмяОбъекта");
	ТаблицаТипов.Колонки.Добавить("ИмяТипа");
	ТаблицаТипов.Колонки.Добавить("Примечание");
	ТаблицаТипов.Колонки.Добавить("ТипСообщения");	// только для документов/сообщений
	ТаблицаТипов.Колонки.Добавить("Сторона");		// только для документов/сообщений
	ТаблицаТипов.Колонки.Добавить("Направление");	// только для документов/сообщений
	ТаблицаТипов.Колонки.Добавить("ПорядокСообщения",Новый ОписаниеТипов("Число"));// только для документов/сообщений
	
	ТаблицаТипов.Индексы.Добавить("ИмяОбъекта");
	
	Если ВнешнийМодуль<>Неопределено
		И ВнешнийМодуль.Метаданные().Макеты.Найти("ТипыОбъектов")<>Неопределено Тогда
		МакетНастроек = ВнешнийМодуль.ПолучитьМакет("ТипыОбъектов");
		ИмяВертикальнойОбласти = "ПодключаемыйМодуль";
	Иначе	
		МакетНастроек = ПолучитьМакет("ТипыОбъектов");
		ИмяВертикальнойОбласти = "ПоУмолчанию"; //УТ, УПП, КА
	КонецЕсли;
	
	//1. Заполним типы для справочников
	
	//для начала поймем, из какой колонки брать названия типов для данной конфигурации
	ОбластьНазванияСправочников=МакетНастроек.ПолучитьОбласть("ТипыСправочников");
	
	Если ИмяВертикальнойОбласти = "ПодключаемыйМодуль" Тогда
		//оставим ее, это макет в подключаемом модуле.
	ИначеЕсли ИмяКонфигурации1С = "БП"
		Или ИмяКонфигурации1С = "ТКПТ"
		Или ИмяКонфигурации1С = "ДалионУМ"
		Или ИмяКонфигурации1С = "АСТОР" 
		Или ИмяКонфигурации1С = "УФ_УТ" 
		Или ИмяКонфигурации1С = "УФ_БП" 
		Или ИмяКонфигурации1С = "УФ_УНФ"
		Или ИмяКонфигурации1С = "ХБКП_УСП"
		Тогда 
		ИмяВертикальнойОбласти = ИмяКонфигурации1С;
	КонецЕсли;	
	
	ОбластьТипыСправочников = МакетНастроек.ПолучитьОбласть("ТипыСправочников|"+ИмяВертикальнойОбласти);
	
	//собственно загрузка типов
	Для Сч=1 По ОбластьНазванияСправочников.ВысотаТаблицы Цикл
		
		ИмяОбъекта = ПолучитьТекстЯчейкиОбласти(ОбластьНазванияСправочников,Сч,1);
		Примечание = ПолучитьТекстЯчейкиОбласти(ОбластьНазванияСправочников,Сч,2);
		ИмяТипа	   = ПолучитьТекстЯчейкиОбласти(ОбластьНазванияСправочников,Сч,3);
		
		ИмяРасширенияТипа = ПолучитьТекстЯчейкиОбласти(ОбластьТипыСправочников,Сч,1);
		Если ЗначениеЗаполнено(ИмяРасширенияТипа) Тогда
			ИмяТипа = ИмяРасширенияТипа;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяОбъекта) Тогда
			
			Если ИмяОбъекта = "ИсходящийКСФ" Тогда
				Если ИмяТипа = "Неопределено" Тогда
					Продолжить;
				Иначе
					ДокументТип = СтрЗаменить(ИмяТипа,"ДокументСсылка.","");
					Если Метаданные.Документы.Найти(ДокументТип) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = ТаблицаТипов.Добавить();
			НоваяСтрока.ИмяОбъекта = ИмяОбъекта;
			НоваяСтрока.Примечание = Примечание;
			НоваяСтрока.ИмяТипа = Неопределено;
			Если ЗначениеЗаполнено(ИмяТипа) Тогда
				Если НЕ СокрЛП(ИмяТипа) = "Неопределено" Тогда
					НоваяСтрока.ИмяТипа = ИмяТипа;
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяОбъекта = "ВходящийВозврат" Тогда
				НоваяСтрока.Сторона = "Поставщик";
				НоваяСтрока.ТипСообщения = "RETANN";
			ИначеЕсли ИмяОбъекта = "ИсходящийВозврат" Тогда
				НоваяСтрока.Сторона = "Покупатель";
				НоваяСтрока.ТипСообщения = "RETANN";
			ИначеЕсли ИмяОбъекта = "ВходящееУведомлениеОбОтгрузкеВозврата" Тогда
				НоваяСтрока.Сторона = "Поставщик";
				НоваяСтрока.ТипСообщения = "RETDES";
				НоваяСтрока.Направление = "Входящее";
			ИначеЕсли ИмяОбъекта = "ИсходящееУведомлениеОПриемкеВозврата" Тогда
				НоваяСтрока.Сторона = "Поставщик";
				НоваяСтрока.ТипСообщения = "RETREC";
				НоваяСтрока.Направление = "Исходящее";
			ИначеЕсли ИмяОбъекта = "ИсходящийКСФ" Тогда
				НоваяСтрока.Сторона = "Поставщик";
				НоваяСтрока.ТипСообщения = "COINVOIC";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		
	
	//2. Заполним типы для документов
	Попытка
		 ОбновитьТаблицуТиповЗначенияОбъектов_Из_СКД();//для кастомов
	Исключение
		Сообщить_КонтурEDI("Не удалось определить шаблоны цепочек для текущей конфигурации");
	КонецПопытки;	
	
	//4. Прокинем ПМ и индексируем таблицу
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьНастройкуТиповОбъектов",,Новый Структура("ТаблицаТипов",ТаблицаТипов));
	Если НЕ РезультатПМ = Неопределено Тогда
		ТаблицаТипов = РезультатПМ;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьТаблицуТиповЗначенияОбъектов_Из_СКД()
	
	ИмяШаблона = "";
	
	Если ВнешнийМодуль<>Неопределено
		И ВнешнийМодуль.Метаданные().Макеты.Найти("ШаблоныЗапросов")<>Неопределено Тогда
		СКД = ВнешнийМодуль.ПолучитьМакет("ШаблоныЗапросов");
		_ИмяКонфигурации = "ПодключаемыйМодуль";
	Иначе	
		СКД = ПолучитьМакет("ШаблоныЗапросов");
		_ИмяКонфигурации = ПолучитьИмяКонфигурацииДляЗапроса();
	КонецЕсли;
	
	//вариант работы для поставщика и покупателя отдельно

	СКД_ВеткаКонфигурации = СКД.НаборыДанных[_ИмяКонфигурации];
	
	НастройкиЦепочек = ПолучитьСписокСвойствEDI("МыПоставщик,МыТорговаяСеть,ШаблонЦепочкиДокументов_Покупатель,ШаблонЦепочкиДокументов_Поставщик");
	
	Для Каждого Флаг Из НастройкиЦепочек Цикл
		
		Если Флаг.Значение = Истина Тогда//мы являемся покупателем или поставщиком
			
			Если Флаг.Ключ = "МыПоставщик" Тогда
				РежимРаботы = "Поставщик";
			ИначеЕсли Флаг.Ключ = "МыТорговаяСеть" Тогда
				РежимРаботы = "Покупатель";
			Иначе
				Продолжить;//2 других свойства просто повисят в этом же запросе
			КонецЕсли;
			
			ИмяВарианта = НастройкиЦепочек["ШаблонЦепочкиДокументов_"+РежимРаботы];

			Если Не ЗначениеЗаполнено(ИмяВарианта)
				Или ИмяВарианта="ПодключаемыйМодуль"//берем запросы из подключаемого модуля
				Тогда
				НужныйИсточникДанных = СКД_ВеткаКонфигурации.Элементы[РежимРаботы].Элементы.ЗапросОсновнойЦепочки.Элементы[0];
			Иначе
				НужныйИсточникДанных = СКД_ВеткаКонфигурации.Элементы[РежимРаботы].Элементы.ЗапросОсновнойЦепочки.Элементы[ИмяВарианта];
			КонецЕсли;	
			
			Выполнить("ШаблонЗапросаЦепочкиДокументов_"+РежимРаботы+" = НужныйИсточникДанных.Запрос");//определяем глобальные переменные
			
			ТабСборки = ПолучитьТаблицуДляСборкиЗапросов(РежимРаботы);
			ЗаполнитьСоответствиеДокументовСообщений(РежимРаботы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//установим типы документов для сообщений
Процедура ЗаполнитьСоответствиеДокументовСообщений(РежимРаботы) Экспорт
	
	ТаблицаСоединенийДокументов = ПолучитьТаблицуДляСборкиЗапросов(РежимРаботы);
	
	//и все это нам надо кинуть еще и в таблицу типов
	Если РежимРаботы = "Поставщик" Тогда
		ИсходныйТекстЗапроса = ШаблонЗапросаЦепочкиДокументов_Поставщик;
	ИначеЕсли РежимРаботы = "Покупатель" Тогда
		ИсходныйТекстЗапроса = ШаблонЗапросаЦепочкиДокументов_Покупатель;
	КонецЕсли;	
	
	//вычленим из текста запроса список полей
	//он будет выглядеть примерно так:
	
	//ВЫБРАТЬ
	//	докЗаказПокупателя.Ссылка КАК PORDERS,
	//	докЗаказПокупателя.Ссылка КАК ORDERS,
	//	докЗаказПокупателя.Ссылка КАК ORDRSP,
	//	РеализацияТоваровУслуг.Ссылка КАК DESADV,
	//	РеализацияТоваровУслуг.Ссылка КАК RECADV,
	//	СчетФактураВыданный.Ссылка КАК INVOIC
	
	
	ПозицияНачалаСоединений = Найти(ИсходныйТекстЗапроса,"{ПОЛНОЕ СОЕДИНЕНИЕ");
	
	ТекстНачалаЗапроса = Лев(ИсходныйТекстЗапроса,ПозицияНачалаСоединений-1);
	
	ТекстПолейЗапроса = Лев(ИсходныйТекстЗапроса,ПозицияНачалаСоединений);
	ТекстПолейЗапроса = СтрЗаменить(ТекстПолейЗапроса,Символы.ПС," "+Символы.ПС+" ");
	ТекстПолейЗапроса = Сред(СокрЛП(ТекстПолейЗапроса),8);
	ПозицияНачалаТаблиц = Найти(ТекстПолейЗапроса," ИЗ");
	ТекстПолейЗапроса = Лев(ТекстПолейЗапроса,ПозицияНачалаТаблиц);
	
	ТекстПолейЗапроса = СтрЗаменить(ТекстПолейЗапроса,",",Символы.ПС);
	
	//теперь пройдемся по каждой строке из ТекстПолейЗапроса и установим нужный тип документа для каждого сообщения
	Для Сч=1 По СтрЧислоСтрок(ТекстПолейЗапроса) Цикл
		ТекСтрока = СокрЛП(СтрПолучитьСтроку(ТекстПолейЗапроса,Сч));
		
		//из строк вида
		//	докЗаказПокупателя.Ссылка КАК ORDRSP,
		//определим, какой документ в 1С какому типу сообщения соответствует
		
		Если ТекСтрока="" Тогда
			Продолжить;
		Иначе
			ПозицияТочки = Найти(ТекСтрока,".");
			ПсевдонимТаблицы = Лев(ТекСтрока,Позицияточки-1);
			ПозицияКАК = Найти(ТекСтрока," КАК ");
			ТипСообщения = СокрЛП(Сред(ТекСтрока,ПозицияКАК+5));
			
			СтрокаТаблицыСоединений = ТаблицаСоединенийДокументов.Найти(ПсевдонимТаблицы,"ПсевдонимТаблицы");
			
			ТипДокумента = СтрокаТаблицыСоединений.ТипДокумента;
			
			ПорядокСообщения = ПолучитьПорядокСообщенияВЦепочке(ТипСообщения);
			
			Если РежимРаботы="Поставщик" Тогда
				Если ТипСообщения="PORDERS" Тогда
					ПредставлениеТипа = "ИсходящийОбратныйЗаказ";
				ИначеЕсли ТипСообщения="ORDERS" Тогда
					ПредставлениеТипа = "ВходящийЗаказПокупателя";
				ИначеЕсли ТипСообщения="ORDRSP" Тогда
					ПредставлениеТипа = "ИсходящийОтветНаЗаказ";
				ИначеЕсли ТипСообщения="DESADV" Тогда
					ПредставлениеТипа = "ИсходящееУведомлениеОбОтгрузке";
				ИначеЕсли ТипСообщения="RECADV" Тогда
					ПредставлениеТипа = "ВходящееУведомлениеОПриемке";
				ИначеЕсли ТипСообщения="INVOIC" Тогда
					ПредставлениеТипа = "ИсходящийСчетФактура";
				ИначеЕсли ТипСообщения="RETANN" Тогда
					ПредставлениеТипа = "ВходящийВозврат";
				КонецЕсли;
			ИначеЕсли РежимРаботы="Покупатель" Тогда
				Если ТипСообщения="PORDERS" Тогда
					ПредставлениеТипа = "ВходящийОбратныйЗаказ";
				ИначеЕсли ТипСообщения="ORDERS" Тогда
					ПредставлениеТипа = "ИсходящийЗаказПоставщику";
				ИначеЕсли ТипСообщения="ORDRSP" Тогда
					ПредставлениеТипа = "ВходящийОтветНаЗаказ";
				ИначеЕсли ТипСообщения="DESADV" Тогда
					ПредставлениеТипа = "ВходящееУведомлениеОбОтгрузке";
				ИначеЕсли ТипСообщения="RECADV" Тогда
					ПредставлениеТипа = "ИсходящееУведомлениеОПриемке";
				ИначеЕсли ТипСообщения="INVOIC" Тогда
					ПредставлениеТипа = "ВходящийСчетФактура";
				ИначеЕсли ТипСообщения="RETANN" Тогда
					ПредставлениеТипа = "ИсходящийВозврат";
				КонецЕсли;
				
			КонецЕсли;
			//заголовок
			
			Направление = ПолучитьНаправлениеСообщения(ТипСообщения,РежимРаботы);
			УстановитьТипЗначенияОбъекта(ПредставлениеТипа,			"ДокументСсылка."+ТипДокумента,		ТипСообщения,	РежимРаботы,	, ПорядокСообщения, Направление);
			
		КонецЕсли;	
	КонецЦикла;	
	
	
КонецПроцедуры

Функция ПолучитьИмяКонфигурацииДляЗапроса() Экспорт
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	ИмяДляЗапроса = "";
	Если ИмяКонфигурации1С="БП" Тогда
		Если Найти(СинонимКонфигурации,"Бухгалтерия предприятия, редакция 1.6")>0 Тогда
			ИмяДляЗапроса = "БП_16";
		ИначеЕсли Найти(СинонимКонфигурации, "Бухгалтерия сельскохозяйственного предприятия, редакция 2.0")>0 Тогда
			ИмяДляЗапроса = "БСХП_20";
		Иначе
			ИмяДляЗапроса = "БП_20";
		КонецЕсли;	
	ИначеЕсли ИмяКонфигурации1С = "УТ_10_3" 
		Или ИмяКонфигурации1С = "УПП"
		Или ИмяКонфигурации1С = "RIT"
		Или ИмяКонфигурации1С = "КА"
		Тогда
		ИмяДляЗапроса = "УТ_УПП_КА";
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
		ИмяДляЗапроса = "УФ_УТ";
	ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
		ИмяДляЗапроса = "УФ_БП";
	ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда 
		ИмяДляЗапроса = "УФ_УНФ";
		
	Иначе	
		ИмяДляЗапроса = ИмяКонфигурации1С;
	КонецЕсли;	
	
	Возврат ИмяДляЗапроса;
КонецФункции	

Функция ПолучитьСписокДоступныхШаблоновЦепочки(РежимРаботы) Экспорт
	Если ВнешнийМодуль<>Неопределено
		И ВнешнийМодуль.Метаданные().Макеты.Найти("ШаблоныЗапросов")<>Неопределено Тогда
		//возьмем шаблоны из ПМ
		СКД = ВнешнийМодуль.ПолучитьМакет("ШаблоныЗапросов");
		_ИмяКонфигурации = "ПодключаемыйМодуль";
	Иначе	//используем стандартные шаблоны
		СКД = ПолучитьМакет("ШаблоныЗапросов");
		_ИмяКонфигурации = ПолучитьИмяКонфигурацииДляЗапроса();
	КонецЕсли;
	
	
	//вариант работы для поставщика и покупателя отдельно
	
	СКД_ВеткаКонфигурации = СКД.НаборыДанных[_ИмяКонфигурации];
	СКД_ВеткаЦепочек = СКД_ВеткаКонфигурации.Элементы[РежимРаботы].Элементы.ЗапросОсновнойЦепочки.Элементы;
	Список = Новый СписокЗначений;
	
	Для Каждого Эл Из СКД_ВеткаЦепочек Цикл
		Список.Добавить(Эл.Запрос,Эл.Имя);
	КонецЦикла;	
	
	Возврат Список;

КонецФункции	

Процедура УстановитьТипЗначенияОбъекта(ИмяОбъекта, ИмяТипа, ТипСообщения = "", Сторона = "", ДоступныеТипы = Неопределено, ПорядокСообщения=0, Направление)
	
	НайденнаяСтрока = ТаблицаТипов.Найти(ИмяОбъекта,"ИмяОбъекта");
	Если НайденнаяСтрока = Неопределено Тогда
		
		НайденнаяСтрока = ТаблицаТипов.Добавить();
		НайденнаяСтрока.ИмяОбъекта		= ИмяОбъекта;
		
	КонецЕсли;
		
	НайденнаяСтрока.ИмяТипа				= ИмяТипа;
	НайденнаяСтрока.ТипСообщения		= ТипСообщения;
	НайденнаяСтрока.Сторона				= Сторона;
	НайденнаяСтрока.ПорядокСообщения	= ПорядокСообщения;
	НайденнаяСтрока.Направление			= Направление;
	
КонецПроцедуры

Функция ПолучитьПорядокСообщенияВЦепочке(ТипСообщения)
	Если ТипСообщения="PORDERS" Тогда
		ПорядокСообщения = 1;
	ИначеЕсли ТипСообщения="ORDERS" Тогда
		ПорядокСообщения = 2;
	ИначеЕсли ТипСообщения="ORDRSP" Тогда
		ПорядокСообщения = 3;
	ИначеЕсли ТипСообщения="DESADV" Тогда
		ПорядокСообщения = 4;
	ИначеЕсли ТипСообщения="RECADV" Тогда
		ПорядокСообщения = 5;
	ИначеЕсли ТипСообщения="INVOIC" Тогда
		ПорядокСообщения = 6;
	ИначеЕсли ТипСообщения="RETANN" Тогда
		ПорядокСообщения = -1;
		//RETANN не входит в цепочку и является независимым сообщением
	КонецЕсли;
	Возврат ПорядокСообщения
КонецФункции	

//}}}

//{{{*********  Настройка формы сообщения *********

Функция ПолучитьЗаголовокФормыСообщения(ТипСообщения,Направление)
	
	Если ТипСообщения = "ORDERS" И Направление = "Входящее" Тогда
		Возврат "Входящий заказ покупателя";
	ИначеЕсли ТипСообщения = "ORDERS" И Направление = "Исходящее" Тогда
		Возврат "Исходящий заказ поставщику";
	ИначеЕсли ТипСообщения = "PORDERS" И Направление = "Исходящее" Тогда
		Возврат "Исходящий обратный заказ";
	ИначеЕсли ТипСообщения = "ORDRSP" И Направление = "Входящее" Тогда
		Возврат "Входящий ответ на заказ";
	ИначеЕсли ТипСообщения = "ORDRSP" И Направление = "Исходящее" Тогда
		Возврат "Исходящий ответ на заказ";
	ИначеЕсли ТипСообщения = "DESADV" И Направление = "Входящее" Тогда
		Возврат "Входящее уведомление об отгрузке";
	ИначеЕсли ТипСообщения = "DESADV" И Направление = "Исходящее" Тогда
		Возврат "Исходящее уведомление об отгрузке";
	ИначеЕсли ТипСообщения = "RECADV" И Направление = "Входящее" Тогда
		Возврат "Входящее уведомление о приемке";
	ИначеЕсли ТипСообщения = "RECADV" И Направление = "Исходящее" Тогда
		Возврат "Исходящее уведомление о приемке";
	ИначеЕсли ТипСообщения = "INVOIC" И Направление = "Входящее" Тогда
		Возврат "Входящий счет-фактура";
	ИначеЕсли ТипСообщения = "INVOIC" И Направление = "Исходящее" Тогда
		Возврат "Исходящий счет-фактура";
	ИначеЕсли ТипСообщения = "RETANN" И Направление = "Входящее" Тогда
		Возврат "Входящий возврат товара";
	ИначеЕсли ТипСообщения = "COINVOIC" И Направление = "Исходящее" Тогда
		Возврат "Исходящий корр. счет-фактура";
	ИначеЕсли ТипСообщения = "RETDES" И Направление = "Входящее" Тогда
		Возврат "Входящее увед. об отгрузке возврата";
	ИначеЕсли ТипСообщения = "RETREC" И Направление = "Исходящее" Тогда
		Возврат "Исходящее увед. о приемке возврата";
	КонецЕсли;	
	
	Возврат СокрЛП(ТипСообщения)+" ("+НРег(Направление)+")";
	
КонецФункции

Функция ДобавитьКнопкуФормыСообщения(ТаблицаКнопок, ВидКнопки, Имя = Неопределено, Представление = Неопределено, ПроверятьПоля = Ложь, СохранятьСоответствия = Ложь, ИсточникКартинки = Неопределено, ИмяКартинки =  Неопределено, КнопкаПоУмолчанию = Ложь) Экспорт
	
	НоваяСтрока = ТаблицаКнопок.Добавить();
	
	НоваяСтрока.ВидКнопки			= ВидКнопки;
	НоваяСтрока.Имя					= Имя;
	НоваяСтрока.Представление		= Представление;
	НоваяСтрока.ПроверятьПоля		= ПроверятьПоля;
	НоваяСтрока.СохранятьСоответствия = СохранятьСоответствия;
	НоваяСтрока.ИсточникКартинки	= ИсточникКартинки;
	НоваяСтрока.ИмяКартинки			= ИмяКартинки;
	НоваяСтрока.КнопкаПоУмолчанию	= КнопкаПоУмолчанию;
	
КонецФункции

Функция ПолучитьКнопкиКоманднойПанелиФормыСообщения(ТипСообщения,Направление,СтатусСообщения)
	
	ТаблицаКнопок = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаКнопок,"ВидКнопки,Имя,Представление,ПроверятьПоля,СохранятьСоответствия,ИсточникКартинки,ИмяКартинки,КнопкаПоУмолчанию");
	
	Если ТипСообщения = "PORDERS" Тогда
		
		Если Направление = "Исходящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка", "ОтправитьОбратныйЗаказ", "Отправить обратный заказ", Истина,,"ЭлементФормы","КартинкаОтправить",Истина);
			
		ИначеЕсли Направление = "Входящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка", "СоздатьЗаказПоставщику", "Создать заказ поставщику", Истина, Истина,"ЭлементФормы","КартинкаОтправить",Истина);
			
		КонецЕсли;
		
		ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
	
	ИначеЕсли ТипСообщения = "RETANN" Тогда
		
		// RETANN пока реализован только на стороне поставщика
		Если Направление = "Входящее" Тогда
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ЗагрузитьВозврат",		"Загрузить возврат товара",	Истина	, Истина, "ЭлементФормы",	"КартинкаГалочка",Истина);
		КонецЕсли;

	ИначеЕсли ТипСообщения = "RETDES" Тогда
		
		// RETDES пока реализован только на стороне поставщика
		Если Направление = "Входящее" Тогда
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ЗагрузитьУведомлениеОбОтгрузкеВозврата",		"Загрузить уведомление об отгрузке возврата",	Истина	, Истина, "ЭлементФормы",	"КартинкаГалочка",Истина);
		КонецЕсли;

	ИначеЕсли ТипСообщения = "RETREC" Тогда
		
		// RETREC пока реализован только на стороне торговой сети
		Если Направление = "Исходящее" Тогда
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ОтправитьУведомлениеОПриемкеВозврата",			"Отправить уведомление о приемке возврата",		Истина	,	,"ЭлементФормы",	"КартинкаОтправить",Истина);
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = "ORDERS" Тогда
		Если Направление = "Входящее" Тогда
			
			Если ИмяКонфигурации1С = "БП" ИЛИ ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина) = "РеализацияТоваровУслуг" Тогда
				ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"СоздатьЗаказ",		"Создать реализацию товаров",	Истина	, Истина, "ЭлементФормы",	"КартинкаГалочка",Истина);	
			Иначе
				ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"СоздатьЗаказ",		"Создать заказ покупателя",	Истина	, Истина, "ЭлементФормы",	"КартинкаГалочка",Истина);	
			КонецЕсли;
			
			//ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ОтклонитьЗаказ",	"Отклонить заказ",					,		, "ЭлементФормы",	"КартинкаОтмена");
			//ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
			
		ИначеЕсли Направление = "Исходящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ОтправитьЗаказ",						"Отправить заказ",		Истина	,	,"ЭлементФормы",	"КартинкаОтправить",Истина);
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
			
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = "ORDRSP" Тогда
		
		Если Направление = "Исходящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ОтправитьОтветНаЗаказ",				"Отправить ответ на заказ",	Истина	,	,"ЭлементФормы","КартинкаОтправить",		Истина);
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ПоказатьРасхожденияЗаказаПокупателя",	"Показать расхождения",				,	,"ЭлементФормы","КартинкаПоказатьРасхождения");
			
		ИначеЕсли Направление = "Входящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ЗагрузитьОтветНаЗаказ", "Загрузить ответ на заказ",	Истина	, Истина, "ЭлементФормы",	"КартинкаГалочка",Истина);
			
		КонецЕсли;
		
		ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
		
	ИначеЕсли ТипСообщения = "DESADV" Тогда
		
		Если Направление = "Исходящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ОтправитьУведомлениеОбОтгрузке", "Отправить уведомление об отгрузке",	Истина,			,"ЭлементФормы","КартинкаОтправить",Истина);
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"Сохранить", 					  "Сохранить",							Истина,			,"ЭлементФормы","КартинкаСохранить",Ложь);
			
		Иначе
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ЗагрузитьУведомлениеОбОтгрузке", "Загрузить уведомление об отгрузке",	Истина, Истина	,"ЭлементФормы","КартинкаГалочка",Истина);	
		
		КонецЕсли;
		
		ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
		
	ИначеЕсли ТипСообщения  = "RECADV" Тогда
		
		Если Направление = "Исходящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка","ОтправитьУведомлениеОПриемке","Отправить уведомление о приемке",Истина,,"ЭлементФормы","КартинкаОтправить",Истина);
			
		Иначе
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ЗагрузитьУведомлениеОПриемке", "Загрузить уведомление о приемке",	Истина, Истина	,"ЭлементФормы","КартинкаГалочка",Истина);
			
		КонецЕсли;
		
		ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
		
	ИначеЕсли ТипСообщения = "INVOIC" Тогда
		
		Если Направление = "Исходящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка","ОтправитьСчетФактуру","Отправить счет-фактуру",Истина,,"ЭлементФормы","КартинкаОтправить",Истина);
			
		Иначе
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка",	"ЗагрузитьСчетФактуру", "Загрузить счет-фактуру",	Истина, Истина	,"ЭлементФормы","КартинкаГалочка",Истина);
			
		КонецЕсли;
		
		ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
		
	ИначеЕсли ТипСообщения = "COINVOIC" Тогда
		
		Если Направление = "Исходящее" Тогда
			
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка","ОтправитьКорректировочныйСчетФактуру","Отправить корректировочный счет-фактуру",Истина,,"ЭлементФормы","КартинкаОтправить",Истина);
			ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Разделитель");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Направление = "Входящее" Тогда
		ДобавитьКнопкуФормыСообщения(ТаблицаКнопок,"Кнопка","Сохранить","Сохранить",	,Истина,"ЭлементФормы","КартинкаСохранить");
	КонецЕсли;
	
	Возврат ТаблицаКнопок;
	
КонецФункции

Функция ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,ИмяПоля,ИмяТабличнойЧасти =  Неопределено)
	
	НоваяСтрока = ТаблицаПолей.Добавить();
	НоваяСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	НоваяСтрока.ИмяПоля = ИмяПоля;

КонецФункции
	
Функция ПолучитьОбязательныеПоляСообщения(ТипСообщения,Направление)
	
	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ИмяПоля");
	ТаблицаПолей.Колонки.Добавить("ИмяТабличнойЧасти");
	
	Если Направление = "Входящее" Тогда
		
		ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Номенклатура",		"Товары");
		ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"ЕдиницаИзмерения",	"Товары");
		
		Если ТипСообщения = "ORDERS" Тогда
			
			ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Продавец1С");
			ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Покупатель1С");
			ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Валюта1С");
			ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Грузополучатель1С");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаПолей;
	
КонецФункции

Функция ПолучитьНевидимыеПоляСообщения(ТипСообщения,Направление,СтатусСообщения)
	
	СписокПолей = Новый СписокЗначений;
	
	//разделил ORDERS и PORDERS
	Если ТипСообщения = "PORDERS" Тогда
		
		СписокПолей.Добавить("Статус");

		СписокПолей.Добавить("ОбратныйЗаказ");
		СписокПолей.Добавить("Заказ");
		СписокПолей.Добавить("Накладная");
		СписокПолей.Добавить("Приемка");
		СписокПолей.Добавить("СчетФактура");	
		
	ИначеЕсли ТипСообщения = "ORDERS" Тогда
			
		СписокПолей.Добавить("Статус");
		
		СписокПолей.Добавить("Накладная");
		СписокПолей.Добавить("Приемка");
		СписокПолей.Добавить("СчетФактура");
		
	ИначеЕсли ТипСообщения = "ORDRSP" Тогда
		
		СписокПолей.Добавить("ОбратныйЗаказ");
		СписокПолей.Добавить("Накладная");
		СписокПолей.Добавить("Приемка");
		СписокПолей.Добавить("СчетФактура");
		
	ИначеЕсли ТипСообщения = "DESADV" ИЛИ ТипСообщения = "RETANN" ИЛИ ТипСообщения = "RETDES" Тогда
		
		СписокПолей.Добавить("ОбратныйЗаказ");
		СписокПолей.Добавить("Статус");
		СписокПолей.Добавить("Накладная");
		СписокПолей.Добавить("Приемка");
		
	ИначеЕсли ТипСообщения = "RECADV" Тогда
		
		СписокПолей.Добавить("ОбратныйЗаказ");
		
		СписокПолей.Добавить("Статус");
		
	ИначеЕсли ТипСообщения = "INVOIC" Тогда
		
		СписокПолей.Добавить("ОбратныйЗаказ");
		
		СписокПолей.Добавить("Статус");
		
	КонецЕсли;
		
	Если ТипСообщения = "RETDES" Тогда
		
		СписокПолей.Добавить("СчетФактура");
		
	ИначеЕсли ТипСообщения = "RETREC" Тогда
		
		СписокПолей.Добавить("ОбратныйЗаказ");
		СписокПолей.Добавить("Статус");
		СписокПолей.Добавить("Приемка");
		СписокПолей.Добавить("СчетФактура");
		
	КонецЕсли;
	
	Возврат СписокПолей;
	
КонецФункции

Функция ПолучитьНевидимыеКолонкиСообщения(ТипСообщения,Направление,СтатусСообщения)
	
	СписокПолей = Новый СписокЗначений;
	
	Если ТипСообщения = "ORDRSP" Тогда
		
		СписокПолей.Добавить("Страна1С");
		СписокПолей.Добавить("СтранаEDI");
		СписокПолей.Добавить("НомерГТД1С");
		СписокПолей.Добавить("НомерГТДEDI");
		СписокПолей.Добавить("СтавкаНДС1С");
		СписокПолей.Добавить("СтавкаНДСEDI");
		
		СписокПолей.Добавить("ЦенаБезНДС");
		СписокПолей.Добавить("СуммаБезНДС");
		СписокПолей.Добавить("ЦенаСНДС");
		СписокПолей.Добавить("СуммаСНДС");
		СписокПолей.Добавить("СуммаНДС");
		СписокПолей.Добавить("ЕдиницаИзмерения");
		СписокПолей.Добавить("КодЕдиницыИзмеренияEDI");
		СписокПолей.Добавить("Количество");
		
	Иначе
		
		СписокПолей.Добавить("Статус");
		СписокПолей.Добавить("Комментарий");
		
	КонецЕсли;
	
	Если НЕ ТипСообщения = "RETANN" Тогда
		
		СписокПолей.Добавить("ПричинаВозврата");
		
	КонецЕсли;

	Если ТипСообщения = "ORDERS" ИЛИ ТипСообщения = "RETANN" Тогда
		
		СписокПолей.Добавить("Страна1С");
		СписокПолей.Добавить("СтранаEDI");
		СписокПолей.Добавить("НомерГТД1С");
		СписокПолей.Добавить("НомерГТДEDI");
		
	КонецЕсли;
	
	Если Направление = "Исходящее" Тогда
		
		СписокПолей.Добавить("Наименование");
		//СписокПолей.Добавить("GTIN");         		  //это важный реквизит и не надо его прятать
		СписокПолей.Добавить("КодТовараПокупателя");
		СписокПолей.Добавить("КодТовараПоставщика");
		//СписокПолей.Добавить("КодЕдиницыИзмеренияEDI"); //это важный реквизит и не надо его прятать
		СписокПолей.Добавить("СтавкаНДСEDI");
		
	КонецЕсли;
	
	Если НЕ ТипСообщения = "ORDERS" И НЕ Направление = "Входящее" Тогда
		
		СписокПолей.Добавить("НеЗагружать");
		СписокПолей.Добавить("КоличествоВОдномМесте");
		
	КонецЕсли;
	
	Если Не НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
		СписокПолей.Добавить("ХарактеристикаНоменклатуры");
	КонецЕсли;
	
	Если ТипСообщения = "COINVOIC" Тогда
		СписокПолей.Добавить("Количество");
		СписокПолей.Добавить("ЦенаБезНДС");
		СписокПолей.Добавить("ЦенаСНДС");
		СписокПолей.Добавить("СуммаБезНДС");
		СписокПолей.Добавить("СуммаНДС");
		СписокПолей.Добавить("СуммаСНДС");
		СписокПолей.Добавить("СтавкаНДС1С");
		СписокПолей.Добавить("СтавкаНДСEDI");
	Иначе
		СписокПолей.Добавить("КоличествоДо");
		СписокПолей.Добавить("ЦенаБезНДСДо");
		СписокПолей.Добавить("ЦенаСНДСДо");
		СписокПолей.Добавить("СуммаБезНДСДо");
		СписокПолей.Добавить("СуммаНДСДо");
		СписокПолей.Добавить("СуммаСНДСДо");
		СписокПолей.Добавить("СтавкаНДСДо1С");
		СписокПолей.Добавить("СтавкаНДСДоEDI");
		
		СписокПолей.Добавить("КоличествоПосле");
		СписокПолей.Добавить("ЦенаБезНДСПосле");
		СписокПолей.Добавить("ЦенаСНДСПосле");
		СписокПолей.Добавить("СуммаБезНДСПосле");
		СписокПолей.Добавить("СуммаНДСПосле");
		СписокПолей.Добавить("СуммаСНДСПосле");
		СписокПолей.Добавить("СтавкаНДСПосле1С");
		СписокПолей.Добавить("СтавкаНДСПослеEDI");
		
	КонецЕсли;
	
	Возврат СписокПолей;
	
КонецФункции

Функция ПолучитьНастройкиФормыСообщения(ТипСообщения,Направление,СтатусСообщения = Неопределено) Экспорт
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("Заголовок",						ПолучитьЗаголовокФормыСообщения(ТипСообщения,Направление));
	СтруктураНастроек.Вставить("КнопкиКоманднойПанели",			ПолучитьКнопкиКоманднойПанелиФормыСообщения(ТипСообщения,Направление,СтатусСообщения));
	СтруктураНастроек.Вставить("НевидимыеПоля",					ПолучитьНевидимыеПоляСообщения(ТипСообщения,Направление,СтатусСообщения));
	СтруктураНастроек.Вставить("НевидимыеКолонки",				ПолучитьНевидимыеКолонкиСообщения(ТипСообщения,Направление,СтатусСообщения));
	СтруктураНастроек.Вставить("ОбязательныеПоля",				ПолучитьОбязательныеПоляСообщения(ТипСообщения,Направление));
	СтруктураНастроек.Вставить("ПроверятьПоляПриОткрытииФормы",	Истина);
	СтруктураНастроек.Вставить("ПроверятьПоля1С",				Истина);
	СтруктураНастроек.Вставить("ПроверятьПоляEDI",				Ложь);
	СтруктураНастроек.Вставить("ТолькоПросмотрПолей1С", 		Ложь);
	СтруктураНастроек.Вставить("ТолькоПросмотрПолейEDI",		Ложь);
	//СтруктураНастроек.Вставить("СоответствиеЮрФизЛиц",		ПолучитьСоответствиеЮрФизЛиц(ТипСообщения,Направление));
	СтруктураНастроек.Вставить("ПримечанияПолей",				Неопределено);
	
	СтруктураНастроек.ТолькоПросмотрПолейEDI = Истина;
	
	Если Направление = "Исходящее" Тогда
		
		СтруктураНастроек.ТолькоПросмотрПолей1С = Истина;
		
		СтруктураНастроек.ПроверятьПоляEDI = Истина;
		
	КонецЕсли;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьНастройкиФормыСообщения",,
			Новый Структура("ТипСообщения,Направление,СтруктураНастроек",
			ТипСообщения,Направление,СтруктураНастроек));
			
  	Если РезультатПМ <> Неопределено Тогда
		СтруктураНастроек = РезультатПМ.СтруктураНастроек;
	КонецЕсли;

	Возврат СтруктураНастроек;	
	
КонецФункции

Функция ПолучитьПредставлениеАлкоЛицензии(Лицензия) Экспорт
	
	ПредставлениеЛицензии = "";
	
	Если ЗначениеЗаполнено(Лицензия) Тогда
		Если ЗначениеЗаполнено(Лицензия.Серия) Тогда
			ПредставлениеЛицензии = СокрЛП(Лицензия.Серия)+", "+
			СокрЛП(Лицензия.ДатаНачала)+", "+
			СокрЛП(Лицензия.ДатаОкончания)+", "+
			СокрЛП(Лицензия.КемВыдана);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеЛицензии;
	
КонецФункции

//}}}


//{{********* Настройка списков *********

Функция ПолучитьВидКомпании() Экспорт
	
	Если НастройкиМодуля.МыТорговаяСеть Тогда
		Возврат "ТорговаяСеть";
	Иначе
		Возврат "Поставщик";
	КонецЕсли;	
		
КонецФункции

Процедура ДобавитьНастройкуСписка(ТаблицаСписков, Вид, Код =  Неопределено, Имя =  Неопределено, Представление = Неопределено )
	
	НоваяСтрока = ТаблицаСписков.Добавить();
	НоваяСтрока.Вид = Вид;
	НоваяСтрока.Код = Код;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

Функция ПолучитьНастройкиСписков() Экспорт
	
	//на рефакторинг после удаления старого интерфейса
	ТаблицаНастройки = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаНастройки,"Вид,Код,Имя,Представление");
	
	Если НастройкиМодуля.МыПоставщик ИЛИ НастройкиМодуля.МыТорговаяСеть Тогда
		
		ПоказыватьСпискиПоставщика		= НастройкиМодуля.МыПоставщик;
		ПоказыватьСпискиТорговойСети	= НастройкиМодуля.МыТорговаяСеть;

	Иначе
		
		ПоказыватьСпискиПоставщика		= Истина;
		ПоказыватьСпискиТорговойСети	= Истина;
		
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойствоВозврат.Объект
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоВозврат
	|ГДЕ
	|	СвойствоВозврат.Свойство = ""RETANN""
	|	И СвойствоВозврат.Значение = ИСТИНА";
				   
	ЕстьВозвраты = НЕ Запрос.Выполнить().Пустой();
	
	Если ПоказыватьСпискиПоставщика Тогда
		
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Кнопка", "01", "ЗаказПокупателя"		, "Заказы покупателей"	);
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Кнопка", "02", "РеализацияТоваров"	, "Реализации товаров"	);
		Если ЕстьВозвраты Тогда
			ДобавитьНастройкуСписка(ТаблицаНастройки, "Кнопка", "07", "ВозвратТоваров"		, "Возвраты товаров");
		КонецЕсли;
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Кнопка", "03", "СчетФактураВыданный"	, "Счета-фактуры выданные");
		
	КонецЕсли;
	
	Если ПоказыватьСпискиПоставщика И ПоказыватьСпискиТорговойСети Тогда
		
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Отступ");
		
	КонецЕсли;
	
	Если ПоказыватьСпискиТорговойСети Тогда
		
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Кнопка", "04", "ЗаказПоставщику"			, "Заказы поставщикам"	);
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Кнопка", "05", "ПоступлениеТоваров"		, "Поступления товаров"	);
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Кнопка", "06", "СчетФактураПолученный"	, "Счета-фактуры полученные");
		
	КонецЕсли;
	
	Если ПолучитьКонстантуEDI("ВыгружатьОтчетОПродажеАлко") = Истина Тогда
		
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Отступ");
		ДобавитьНастройкуСписка(ТаблицаНастройки, "Кнопка", "07", "РеализацияАлкоголя", "Реализация алкоголя");
		
	КонецЕсли;
	
	Возврат ТаблицаНастройки;
	
КонецФункции

//}}}

//{{{ ПРОВЕРКА ДАННЫХ
//*****************************************************

Функция ДобавитьОшибку(СписокОшибок,ТекстОшибки,ИмяПоля,ИмяТабличнойЧасти =  Неопределено,НомерСтроки =  Неопределено)
	
	НоваяСтрока = СписокОшибок.Добавить();
	НоваяСтрока.ТекстОшибки = ТекстОшибки;
	НоваяСтрока.ИмяПоля = ИмяПоля;
	НоваяСтрока.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	НоваяСтрока.НомерСтроки = НомерСтроки;
	
КонецФункции

//Проверяет заполненность соответствий во входящих сообщениях.
//Везде ли указана номенклатура, единица измерения, продавец/покупатель и т.д.
Функция ПроверитьПоля1С(Сообщение) Экспорт
	
	РезультатПроверки = Новый Структура();
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТекстОшибки");
	Результат.Колонки.Добавить("ИмяПоля");
	Результат.Колонки.Добавить("ИмяТабличнойЧасти");
	Результат.Колонки.Добавить("НомерСтроки");
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Покупатель1С) Тогда
		ДобавитьОшибку(Результат,"Не выбран покупатель!","Покупатель1С");
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Сообщение.Продавец1С) Тогда
		ДобавитьОшибку(Результат,"Не выбран поставщик!","Продавец1С");
	КонецЕсли;	
	
	Если Сообщение.ТипСообщения = "RECADV" Тогда
		
		Если НЕ ЗначениеЗаполнено(Сообщение.Накладная1С) Тогда
			
			ДобавитьОшибку(Результат,"Не найдена накладная!","Накладная1С");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаТоваров = Сообщение.Товары;
	
	сч = 0;
	
	Для каждого Стр ИЗ ТаблицаТоваров Цикл
		
		сч = сч+1;
		
		Если НЕ Стр.НеЗагружать = Истина Тогда
			
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				ДобавитьОшибку(Результат,"Не указана номенклатура в строке "+сч+" !","Номенклатура","Товары",сч);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
				ДобавитьОшибку(Результат,"Не указана единица измерения в строке "+сч+" !","ЕдиницаИзмерения","Товары",сч);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Сообщение.ТипСообщения = "ORDERS" Тогда
		Если ПараметрыПользователяEDI.НеСоздаватьЗаказыБезСвоихТД = Истина Тогда
			ЕстьТД = Ложь;
			Если ЗначениеЗаполнено(Сообщение.Грузополучатель1С) Тогда
				ТочкаДоставкиСторонняя = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",Сообщение.Грузополучатель1С);
				Если ЗначениеЗаполнено(ТочкаДоставкиСторонняя.ТочкаДоставкиСвойСправочник) Тогда
					ЕстьТД = Истина;
				Иначе
					ДобавитьОшибку(Результат,"У грузополучателя не указана связь с точкой доставки из вашего справочника!","Грузополучатель1С");
				КонецЕсли;
			Иначе
				ДобавитьОшибку(Результат,"Не найдена точка доставки!","Грузополучатель1С");
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыПользователяEDI.НеСоздаватьЗаказыБезЮрФизЛицТД = Истина Тогда
			ЕстьЮФЛицо = Ложь;
			Если ЗначениеЗаполнено(Сообщение.Грузополучатель1С) Тогда
				ТочкаДоставкиСторонняя = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",Сообщение.Грузополучатель1С);
				Если ЗначениеЗаполнено(ТочкаДоставкиСторонняя.ЮрФизЛицо) Тогда
					ЕстьЮФЛицо = Истина;
				Иначе
					ДобавитьОшибку(Результат,"У грузополучателя не указана связь с юр./физ. лицом!","Грузополучатель1С");
				КонецЕсли;
			Иначе
				ДобавитьОшибку(Результат,"Не найдена точка доставки!","Грузополучатель1С");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеПроверкиПолей1С",,Новый Структура("Сообщение,ТаблицаОшибок",Сообщение,Результат));

	Если Результат.Количество() = 0 Тогда
		РезультатПроверки.Вставить("Успешно",Истина);
	Иначе
		РезультатПроверки.Вставить("Успешно",Ложь);
		РезультатПроверки.Вставить("СписокОшибок",Результат);
	КонецЕсли;	
		
	Возврат РезультатПроверки;
	
КонецФункции

//}}}


//******************************************************
// ТИПЫ ЗНАЧЕНИЙ



//******************************************************
// ОПИСАНИЕ МЕТАДАННЫХ СООБЩЕНИЯ

//{{{ описание зависимых типов
	
Процедура ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ФильтрТипаСообщения = Неопределено, ФильтрНаправления = Неопределено, ИмяПоля, ТипСообщения =  Неопределено, Направление, ИмяТипаЗначения)
	
	Если НЕ ФильтрТипаСообщения = Неопределено Тогда
		Если НЕ ТипСообщения = Неопределено И НЕ ФильтрТипаСообщения = ТипСообщения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ФильтрНаправления = Неопределено Тогда
		Если НЕ ФильтрНаправления = Направление Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаЗависимыхТипов.Добавить();
	НоваяСтрока.ИмяПоля			= ИмяПоля;
	НоваяСтрока.ТипСообщения	= ТипСообщения;
	НоваяСтрока.Направление		= Направление;
	НоваяСтрока.Тип				= ИмяТипаЗначения;
	
КонецПроцедуры

Функция ПолучитьНастройкуЗависимыхТипов(ТипСообщения =  Неопределено, Направление =  Неопределено)
	
	ТаблицаЗависимыхТипов = Новый ТаблицаЗначений;
	ТаблицаЗависимыхТипов.Колонки.Добавить("ИмяПоля");
	ТаблицаЗависимыхТипов.Колонки.Добавить("ТипСообщения");
	ТаблицаЗависимыхТипов.Колонки.Добавить("Направление");
	ТаблицаЗависимыхТипов.Колонки.Добавить("Тип");
	
	Если НЕ ТипСообщения = Неопределено И НЕ Направление = Неопределено Тогда
		ТаблицаЗависимыхТипов.Индексы.Добавить("ИмяПоля");
	Иначе
		ТаблицаЗависимыхТипов.Индексы.Добавить("ИмяПоля, ТипСообщения, Направление");
	КонецЕсли;	
	
	Входящее	= "Входящее";
	Исходящее	= "Исходящее";
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Отправитель"						, , Исходящее	, "ПодразделениеСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Отправитель"						, , Входящее	, "ПодразделениеСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Получатель"						, , Исходящее	, "ПодразделениеСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Получатель"						, , Входящее	, "ПодразделениеСвое");
	
	// RETANN
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "RETANN", Входящее	, "ВходящийВозврат");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "RETANN", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "RETANN", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Плательщик"						, "RETANN", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "RETANN", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "RETANN", Входящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "RETANN", Входящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "RETANN", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "RETANN", Входящее	, "ВходящийЗаказПокупателя");
	
	// RETDES
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "RETDES", Входящее	, "ВходящееУведомлениеОбОтгрузкеВозврата");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "RETDES", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "RETDES", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Плательщик"						, "RETDES", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "RETDES", Входящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "RETDES", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "RETDES", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "RETDES", Входящее	, "КодТовараСторонний");
	
	// RETREC
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "RETREC", Исходящее	, "ИсходящееУведомлениеОПриемкеВозврата");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "RETREC", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "RETREC", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Плательщик"						, "RETREC", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "RETREC", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "RETREC", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "RETREC", Исходящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "RETREC", Исходящее	, "КодТовараСторонний");
	
	// PORDERS
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "PORDERS", Исходящее	, "ИсходящийОбратныйЗаказ");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "PORDERS", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "PORDERS", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "PORDERS", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "PORDERS", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "PORDERS", Исходящее	, "ИсходящийОбратныйЗаказ");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "PORDERS", Исходящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "PORDERS", Исходящее	, "КодТовараСвой");
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "PORDERS", Входящее	, "ВходящийОбратныйЗаказ");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "PORDERS", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "PORDERS", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "PORDERS", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "PORDERS", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "PORDERS", Входящее	, "ВходящийОбратныйЗаказ");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "PORDERS", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "PORDERS", Входящее	, "КодТовараСторонний");
	
	// ORDERS
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "ORDERS", Исходящее	, "ИсходящийЗаказПоставщику");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "ORDERS", Исходящее	, "ИсходящийЗаказПоставщику");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "ORDERS", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "ORDERS", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Плательщик"						, "ORDERS", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "ORDERS", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "ORDERS", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "ORDERS", Исходящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "ORDERS", Исходящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ОбратныйЗаказ"					, "ORDERS", Исходящее	, "ВходящийОбратныйЗаказ");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "ORDERS",	Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "ORDERS",	Исходящее	, "ТочкаДоставкиСвоя");
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "ORDERS", Входящее	, "ВходящийЗаказПокупателя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "ORDERS", Входящее	, "ВходящийЗаказПокупателя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "ORDERS", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "ORDERS", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Плательщик"						, "ORDERS", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "ORDERS", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "ORDERS", Входящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "ORDERS", Входящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "ORDERS", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ОбратныйЗаказ"					, "ORDERS", Входящее	, "ИсходящийОбратныйЗаказ");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "ORDERS", Входящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "ORDERS", Входящее	, "ТочкаДоставкиСторонняя");
	
	// ORDRSP
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "ORDRSP", Исходящее	, "ИсходящийОтветНаЗаказ");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "ORDRSP", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "ORDRSP", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "ORDRSP", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "ORDRSP", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "ORDRSP", Исходящее	, "ВходящийЗаказПокупателя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "ORDRSP", Исходящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "ORDRSP", Исходящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "ORDRSP", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "ORDRSP", Исходящее	, "ТочкаДоставкиСторонняя");
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "ORDRSP", Входящее	, "ВходящийОтветНаЗаказ");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "ORDRSP", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "ORDRSP", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Плательщик"						, "ORDRSP", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "ORDRSP", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "ORDRSP", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "ORDRSP", Входящее	, "ИсходящийЗаказПоставщику");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "ORDRSP", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "ORDRSP", Входящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "ORDRSP", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "ORDRSP", Входящее	, "ТочкаДоставкиСвоя");
	
	// DESADV
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "DESADV", Исходящее	, "ИсходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "DESADV", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "DESADV", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "DESADV", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "DESADV", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "DESADV", Исходящее	, "ВходящийЗаказПокупателя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "СчетФактура"						, "DESADV", Исходящее	, "ИсходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "DESADV", Исходящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "DESADV", Исходящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "DESADV", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "DESADV", Исходящее	, "ТочкаДоставкиСторонняя");
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "DESADV", Входящее	, "ВходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "DESADV", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "DESADV", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Плательщик"						, "DESADV", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "DESADV", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "DESADV", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "DESADV", Входящее	, "ИсходящийЗаказПоставщику");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "DESADV", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "DESADV", Входящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "DESADV", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "DESADV", Входящее	, "ТочкаДоставкиСвоя");
	
	// RECADV
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "RECADV", Исходящее	, "ИсходящееУведомлениеОПриемке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "RECADV", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "RECADV", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "RECADV", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "RECADV", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "RECADV", Исходящее	, "ИсходящийЗаказПоставщику");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Накладная"						, "RECADV", Исходящее	, "ВходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Приемка"							, "RECADV", Исходящее	, "ИсходящееУведомлениеОПриемке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "RECADV", Исходящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "RECADV", Исходящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "RECADV", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "RECADV", Исходящее	, "ТочкаДоставкиСвоя");
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "RECADV", Входящее	, "ВходящееУведомлениеОПриемке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "RECADV", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "RECADV", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Плательщик"          			, "RECADV", Входящее    , "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "RECADV", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "RECADV", Входящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "RECADV", Входящее	, "ВходящийЗаказПокупателя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Накладная"						, "RECADV", Входящее	, "ИсходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Приемка"							, "RECADV", Входящее	, "ВходящееУведомлениеОПриемке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "RECADV", Входящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "RECADV", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "RECADV", Входящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "RECADV", Входящее	, "ТочкаДоставкиСторонняя");
	
	// INVOIC
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "INVOIC", Исходящее	, "ИсходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "INVOIC", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "INVOIC", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "INVOIC", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "INVOIC", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "INVOIC", Исходящее	, "ВходящийЗаказПокупателя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Накладная"						, "INVOIC", Исходящее	, "ИсходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Приемка"							, "INVOIC", Исходящее	, "ВходящееУведомлениеОПриемке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "СчетФактура"						, "INVOIC", Исходящее	, "ИсходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "INVOIC", Исходящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "INVOIC", Исходящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "INVOIC", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "INVOIC", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "СчетФактура"						, "INVOIC", Исходящее	, "ИсходящийОтветНаЗаказ");
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "INVOIC", Входящее	, "ВходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "INVOIC", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "INVOIC", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "INVOIC", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "INVOIC", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "INVOIC", Входящее	, "ИсходящийЗаказПоставщику");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Накладная"						, "INVOIC", Входящее	, "ВходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Приемка"							, "INVOIC", Входящее	, "ИсходящееУведомлениеОПриемке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "СчетФактура"						, "INVOIC", Входящее	, "ВходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "INVOIC", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "INVOIC", Входящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "INVOIC", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "INVOIC", Входящее	, "ТочкаДоставкиСвоя");
	
	// COINVOIC
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "COINVOIC", Исходящее	, "ИсходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "COINVOIC", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "COINVOIC", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "COINVOIC", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "COINVOIC", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "COINVOIC", Исходящее	, "ВходящийЗаказПокупателя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Накладная"						, "COINVOIC", Исходящее	, "ИсходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Приемка"							, "COINVOIC", Исходящее	, "ВходящееУведомлениеОПриемке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "СчетФактура"						, "COINVOIC", Исходящее	, "ИсходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "COINVOIC", Исходящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "COINVOIC", Исходящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "COINVOIC", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "COINVOIC", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "СчетФактура"						, "COINVOIC", Исходящее	, "ИсходящийОтветНаЗаказ");
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "COINVOIC", Входящее	, "ВходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "COINVOIC", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "COINVOIC", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "COINVOIC", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "COINVOIC", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "COINVOIC", Входящее	, "ИсходящийЗаказПоставщику");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Накладная"						, "COINVOIC", Входящее	, "ВходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Приемка"							, "COINVOIC", Входящее	, "ИсходящееУведомлениеОПриемке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "СчетФактура"						, "COINVOIC", Входящее	, "ВходящийСчетФактура");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "COINVOIC", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "COINVOIC", Входящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КонечныйГрузополучатель"			, "COINVOIC", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "ПромежуточныйГрузополучатель"	, "COINVOIC", Входящее	, "ТочкаДоставкиСвоя");
	
	// ALCRPT
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "ALCRPT", Исходящее	, "ИсходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "ALCRPT", Исходящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "ALCRPT", Исходящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "ALCRPT", Исходящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "ALCRPT", Исходящее	, "ТочкаДоставкиСторонняя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "ALCRPT", Исходящее	, "ВходящийЗаказПокупателя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "ALCRPT", Исходящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "ALCRPT", Исходящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Накладная"						, "ALCRPT", Исходящее	, "ИсходящееУведомлениеОбОтгрузке");
	
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Документ"						, "ALCRPT", Входящее	, "ВходящееУведомлениеОбОтгрузке");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Продавец"						, "ALCRPT", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Покупатель"						, "ALCRPT", Входящее	, "ЮрФизЛицоСвое");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузоотправитель"				, "ALCRPT", Входящее	, "ЮрФизЛицоСтороннее");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Грузополучатель"					, "ALCRPT", Входящее	, "ТочкаДоставкиСвоя");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Заказ"							, "ALCRPT", Входящее	, "ИсходящийЗаказПоставщику");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПокупателя"				, "ALCRPT", Входящее	, "КодТовараСвой");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "КодТовараПоставщика"				, "ALCRPT", Входящее	, "КодТовараСторонний");
	ДобавитьНастройкуЗависимыхТипов(ТаблицаЗависимыхТипов, ТипСообщения, Направление, "Накладная"						, "ALCRPT", Входящее	, "ВходящееУведомлениеОбОтгрузке");
	
	Возврат ТаблицаЗависимыхТипов;
	
КонецФункции

//}}}

//{{{ описание вложенных структур
	
Процедура ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, ИмяПоля = Неопределено, ТипEDI = Неопределено, ВидСтруктурыEDI = Неопределено)
	
	НоваяСтрока = ТабМетаданныхПоля.Добавить();
	
	НоваяСтрока.ИмяПоля			= ИмяПоля;
	НоваяСтрока.ТипEDI			= ТипEDI;
	НоваяСтрока.ВидСтруктурыEDI = ВидСтруктурыEDI;
	
КонецПроцедуры

Функция ПолучитьМетаданныеПоляСообщения(ВидСтруктуры) Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("МетаданныеПоляСообщения_"+ВидСтруктуры);
	
	Если НЕ Результат=Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТабМетаданныхПоля = Новый ТаблицаЗначений;
	ТабМетаданныхПоля.Колонки.Добавить("ИмяПоля");
	ТабМетаданныхПоля.Колонки.Добавить("ТипEDI");
	ТабМетаданныхПоля.Колонки.Добавить("ВидСтруктурыEDI");
	ТабМетаданныхПоля.Колонки.Добавить("ИмяТаблицы");
	
	Если ВидСтруктуры = "ЮрФизЛицо" Тогда
		
		// ЮрФизЛицо
		
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Вид"				, "ВидЮрФизЛица"	,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GLN"				, "GLN"				,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ИНН"				, "ИНН"				,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "КПП"				, "КПП"				,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Наименование"		, "Строка80"		,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Фамилия"			, "Строка35"		,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Имя"				, "Строка35"		,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Отчество"			, "Строка35"		,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ТипАдреса"			, "Строка"			,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Адрес"				, "Структура"		, "Адрес"		);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Телефон"			, "Строка"			,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Банк"				, "Строка70"		,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "БИК"				, "БИК"				,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерСчета"			, "НомерСчета"		,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Руководитель"		, "Строка35"		,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ГлавныйБухгалтер"	, "Строка35"		,				);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "КодВСистемеПокупателя"	, "Строка70"		,				);
		
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "АлкоЛицензия"		, "Структура"		, "АлкоЛицензия");
		
	ИначеЕсли ВидСтруктуры = "Адрес" Тогда
		
		// Адрес
		
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ВидАдреса"			, "ВидАдреса"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Индекс"				, "Индекс"		);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Регион"				, "КодРегиона"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Район"				, "Строка50"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Город"				, "Строка35"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НаселенныйПункт"	, "Строка35"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Улица"				, "Строка50"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дом"				, "Строка20"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Корпус"				, "Строка"		);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Квартира"			, "Строка20"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "КодСтраны"			, "КодСтраны"	);
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Адрес"				, "Строка140"	);
		
	ИначеЕсли ВидСтруктуры = "Документ" Тогда
		
		// Документ
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Номер"	, "НомерДокумента");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дата"	, "Дата");
		
	ИначеЕсли ВидСтруктуры = "Заказ" Тогда
		
		// Заказ
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Номер"	, "НомерДокумента");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дата"	, "Дата");
		
	ИначеЕсли ВидСтруктуры = "ОтветНаЗаказ" Тогда
		
		// Ответ на заказ
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Номер"	, "НомерДокумента");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дата"	, "Дата");
		
	ИначеЕсли ВидСтруктуры = "Накладная" Тогда
		
		// Накладная
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Номер"	, "НомерДокумента");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дата"	, "Дата");
		
	ИначеЕсли ВидСтруктуры = "Приемка" Тогда
		
		// Приемка
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Номер"	, "НомерДокумента");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дата"	, "Дата");
		
	ИначеЕсли ВидСтруктуры = "СчетФактура" Тогда
		
		// СчетФактура
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Номер"				, "НомерДокумента");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дата"				, "Дата");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Исправление"		, "Булево");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерИсправления"	, "Строка20");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ДатаИсправления"	, "Дата");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ДиадокID"			, "Строка100");
		
	ИначеЕсли ВидСтруктуры = "ОбратныйЗаказ" Тогда
		
		// Обратный заказ
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Номер"	, "НомерДокумента");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дата"	, "Дата");
		
	ИначеЕсли ВидСтруктуры = "ТранспортнаяНакладная" Тогда
		
		// Транспортная накладная
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Номер"	, "НомерДокумента");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Дата"	, "Дата");
		
	ИначеЕсли ВидСтруктуры = "ЕГАИС" Тогда
		
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "КодТовараВЕГАИС", 				"Строка35");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ИдентификаторТовараВТТНЕГАИС", 	"Строка6");
		
	ИначеЕсли ВидСтруктуры = "КонечныйГрузополучательGLN" Тогда
		
		// КонечныйГрузополучательGLN
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GLN"	, "GLN");
		
	ИначеЕсли ВидСтруктуры = "УчастникОбмена" Тогда
		
		// УчастникОбмена
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GLN"	, "GLN");
		
	ИначеЕсли ВидСтруктуры = "АлкоСертификат" Тогда
		
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Серия"			, "Строка100");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ДатаНачала"		, "Дата");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ДатаОкончания"	, "Дата");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "КемВыдана"		, "Строка250");
		
	ИначеЕсли ВидСтруктуры = "АлкоЛицензия" Тогда
		
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "Серия"			, "Строка100");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ДатаНачала"		, "Дата");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ДатаОкончания"	, "Дата");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "КемВыдана"		, "Строка250");
		
	ИначеЕсли ВидСтруктуры = "Транспортировка" Тогда
		
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "РежимПеревозки"					, "Строка35");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ИмяВодителя"					, "Строка35");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерТранспортногоСредства"		, "Строка35");
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "МаркаТранспортногоСредства"		, "Строка9");
//врата	
		Список = новый СписокЗначений;
		ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ДатаВремяПрибытия"		, "СписокЗначений",Список);
//		
	КонецЕсли;
	
	ЭДО_Кэш_Поместить("МетаданныеПоляСообщения_"+ВидСтруктуры,ТабМетаданныхПоля);
	
	Возврат ТабМетаданныхПоля;
	
КонецФункции

//}}}

//{{{ описание метаданных
	
Процедура ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных,ИмяПоля,ИмяТаблицы =  Неопределено,Принадлежность =  Неопределено,ТипEDI =  Неопределено,ВидСтруктурыEDI = Неопределено,ВыделяемыеПоляСписка =  Неопределено,Тип1С =  Неопределено,ТаблицаЗависимыхТипов =  Неопределено) Экспорт
	
	НоваяСтрока = ТабМетаданных.Добавить();
	
	НоваяСтрока.ИмяПоля					= ИмяПоля;
	НоваяСтрока.ИмяТаблицы				= ИмяТаблицы;
	НоваяСтрока.Принадлежность			= Принадлежность;
	НоваяСтрока.ТипEDI					= ТипEDI;
	НоваяСтрока.ВидСтруктурыEDI			= ВидСтруктурыEDI;
	НоваяСтрока.ВыделяемыеПоляСписка	= ВыделяемыеПоляСписка;
	
	Если Тип1С = "ТипЗависитОтСообщения" Тогда
		
		Если ТаблицаЗависимыхТипов = Неопределено Тогда
			
			НоваяСтрока.Тип1С = Неопределено;
			
		Иначе
			
			НайденнаяСтрока = ТаблицаЗависимыхТипов.Найти(ИмяПоля,"ИмяПоля");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				НоваяСтрока.Тип1С = НайденнаяСтрока.Тип;
				
			Иначе
				
				НоваяСтрока.Тип1С = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		НоваяСтрока.Тип1С = Тип1С;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМетаданныеСообщения(ТипСообщения,Направление) Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("МетаданныеСообщения_"+ТипСообщения+"_"+Направление);
	
	Если НЕ Результат=Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТабМетаданных = Новый ТаблицаЗначений;
	ТабМетаданных.Колонки.Добавить("ИмяПоля");
	ТабМетаданных.Колонки.Добавить("ИмяТаблицы");
	ТабМетаданных.Колонки.Добавить("Принадлежность");
	ТабМетаданных.Колонки.Добавить("ТипEDI");
	ТабМетаданных.Колонки.Добавить("ВидСтруктурыEDI");
	ТабМетаданных.Колонки.Добавить("ВыделяемыеПоляСписка");
	ТабМетаданных.Колонки.Добавить("Тип1С");
	
	// описание таблиц для формирования структуры сообщения. Чтобы во всех модулях было однозначное название полей.
	
	ТаблицаЗависимыхТипов = ПолучитьНастройкуЗависимыхТипов(ТипСообщения, Направление);
		                                                                                                              
	// Шапка
																	  												// тип EDI			//вид структуры  	// поля 	// тип 1С
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТипСообщения"				,						, "="	, "ТипСообщения"	, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Направление"				,						, "="	, "Направление"		, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ID"							,						, "="	, "Идентификатор"	, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаСоздания"				,						, "="	, "ДатаВремя"		, 					,		,							);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Партнер"					,						, "1С"	, 					,					,		, "Партнер"					);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Отправитель"				,						,		, "Структура"		, "УчастникОбмена"	, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Получатель"					,						,		, "Структура"		, "УчастникОбмена"	, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Документ"					,						,		, "Структура"		, "Документ"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Статус"						,						, "="	, "Статус"			,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТипСФ"						,						,		, "ТипСФ"			, 					,		,							);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Заказ"						,						,		, "Структура"		, "Заказ"			,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Накладная"					,						,		, "Структура"		, "Накладная"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Приемка"					,						,		, "Структура"		, "Приемка"			,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СчетФактура"				,						,		, "Структура"		, "СчетФактура"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Контракт"					,						, "EDI"	, "Структура"		, "Документ"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	
	Если ТипСообщения = "ORDERS" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ОбратныйЗаказ"			,						,		, "Структура"		, "ОбратныйЗаказ"	,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	КонецЕсли;
	Если Направление = "Исходящее" И (ТипСообщения = "INVOIC" ИЛИ ТипСообщения = "COINVOIC") Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ОтветНаЗаказ"			,						,		, "Структура"		, "ОтветНаЗаказ"	,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	КонецЕсли;
	
	Если Найти("RECADV|INVOIC|COINVOIC",ТипСообщения) > 0 Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерПриемкиПокупателя"	,						, "="	, "Строка35"		, 					,		, 							);
	КонецЕсли;	
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Продавец"					,						,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Покупатель"					,						,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Плательщик"					,						,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Грузоотправитель"			,						,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Грузополучатель"			,						,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТочкаДоставки"				,						, "1С"	, 					, 					,		, "ТочкаДоставки"			);
	Если НЕ Найти("ORDERS|ORDRSP|DESADV|RECADV|INVOIC|COINVOIC",ТипСообщения) = 0 Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КонечныйГрузополучатель",						,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);	
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПромежуточныйГрузополучатель",					,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	КонецЕсли;
	
	Если ТипСообщения = "DESADV" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Транспортировка"		,						, "EDI"	, "Структура"		, "Транспортировка"	,		, , );
	КонецЕсли;
	
	Если ТипСообщения = "PRICELIST" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаНачалаДействияЦен"	,						, "="	, "ДатаВремя"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаОкончанияДействияЦен",						, "="	, "ДатаВремя"		,					,		,							);		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Контракт"				,						, "="	, "Структура"		, "Документ"		,		, "Договор"					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТипЦен"					,						, "1С"	, 					, 					,		, 							);
	КонецЕсли;
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПоставки"				,						, "="	, "ДатаВремя"		,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаОтгрузки"				,						, "="	, "ДатаВремя"		,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаВывозаОтПоставщика"		,						, "="	, "ДатаВремя"		,					,		,							);//+Для Магнита
	//+для АТАК
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПоставкиФактическая"	,						, "="	, "ДатаВремя"		,					,		,							);	
	//-
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Валюта"						,						,		, "Валюта"			,					,		, "Валюта"					);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Договор"					,						, "1С"	, 					,					,		, "Договор"					);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "УчитыватьНДС"				,						, "1С"	, 					,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВключаетНДС"			,						, "1С"	, 					,					,		,							);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерСерииЗаказов"			,						, "="	, "Строка70"		,					,		,							);
	
	Если (ТипСообщения = "INVOIC" ИЛИ ТипСообщения = "COINVOIC") Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Исправление"			,						, "="	, "Булево"			,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерИсправления"		,						, "="	, "Строка50"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаИсправления"		,						, "="	, "Дата"			,					,		,							);
	КонецЕсли;
	
	Если ТипСообщения = "COINVOIC" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсегоУвеличение"		,						, "="	, "ЧислоСумма"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсегоУменьшение"		,						, "="	, "ЧислоСумма"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсегоБезНДСУвеличение"	,						, "="	, "ЧислоСумма"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсегоБезНДСУменьшение"	,						, "="	, "ЧислоСумма"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсегоНДСУвеличение"	,						, "="	, "ЧислоСумма"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсегоНДСУменьшение"	,						, "="	, "ЧислоСумма"		,					,		,							);
	Иначе
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсего"					,						, "="	, "ЧислоСумма"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсегоБезНДС"			,						, "="	, "ЧислоСумма"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаВсегоНДС"				,						, "="	, "ЧислоСумма"		,					,		,							);
		Если ТипСообщения = "INVOIC" Тогда
			ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаТоваровВсего"		,						, "="	, "ЧислоСумма"		,					,		,								);
			ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаТоваровВсегоБезНДС",						, "="	, "ЧислоСумма"		,					,		,								);
			ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаТоваровНДС"		,						, "="	, "ЧислоСумма"		,					,		,								);
		КонецЕсли;	
	КонецЕсли;
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПромоНомер"					,						, "="	, "Строка35"		,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Комментарий"				,						, "="	, "Строка2560"		,					,		,							);
	
	Если ТипСообщения = "ALCRPT" Тогда

		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТранспортнаяНакладная"	,						, 		, "Структура"		, "ТранспортнаяНакладная"	,		, "ТранспортнаяНакладная"	, );
	
	КонецЕсли;
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Товары"						, "Товары"				, "="	, "ТабличнаяЧасть"	,					,		,							);
	
	// Табличная часть
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерСтроки"				, "Товары"				, "1С"	, 					,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Номенклатура"				, "Товары"				, "1С"	, 					,					,		, "Номенклатура"				);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ХарактеристикаНоменклатуры"	, "Товары"				, "1С"	, 					,					,		, "ХарактеристикаНоменклатуры"	);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмерения"			, "Товары"				, "1С"	, 					,					,		, "ЕдиницаИзмерения"			);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Статус"						, "Товары"				, "="	, "Статус"			,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "GTIN"						, "Товары"				, "EDI"	, "GTIN"			,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КодТовараПокупателя"		, "Товары"				, "EDI"	, "Артикул"			,					,		, "ТипЗависитОтСообщения"		, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КодТовараПоставщика"		, "Товары"				, "EDI"	, "Артикул"			,					,		, "ТипЗависитОтСообщения"		, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Наименование"				, "Товары"				, "EDI"	, "Строка256"		,					,		,								);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоэффициентEDIВ1С"			, "Товары"				, "1С"	, "ЧислоСумма"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаEDI"					, "Товары"				, "EDI"	, "Строка3"			,					,		, 								);
	
	Если ТипСообщения = "ORDERS" 
		Или  ТипСообщения = "ORDRSP" 
		Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоЗаказанное"		, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
//врата		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Транспортировка",						, "EDI"	, "Структура"		, "Транспортировка"	,		, , );
//
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТоварнаяГруппа"		, "Товары"				, "1С"	, 		,					,		,								);
		//для деления входящих заказов
			
		//Магнит Признак самовывоза E1C_in-29815
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ОтветственныйЗаДоставку", 	, "EDI"	, "Строка30"		, 	,		, , );
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТочкиСамовывоза"	, "ТочкиСамовывоза"	, "="	, "ТабличнаяЧасть"		, 	,		, , );
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Наименование"		, "ТочкиСамовывоза"	, "="	,"Строка256"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Регион"				, "ТочкиСамовывоза"	, "="	,"Строка256"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Город"				, "ТочкиСамовывоза"	, "="	,"Строка256"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Улица"				, "ТочкиСамовывоза"	, "="	,"Строка256"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Дом"				, "ТочкиСамовывоза"	, "="	,"Строка256"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Индекс"				, "ТочкиСамовывоза"	, "="	,"Строка256"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Идентификатор"		, "ТочкиСамовывоза"	, "="	,"Строка256"		,					,		, 								);
		
	КонецЕсли;
	
	Если ТипСообщения = "COINVOIC" Тогда
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоДо"			, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоПосле"		, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоУвеличение"	, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоУменьшение"	, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаБезНДСДо"			, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаБезНДСПосле"		, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаБезНДСУвеличение"	, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаБезНДСУменьшение"	, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаСНДСДо"				, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаСНДСПосле"			, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаСНДСУвеличение"		, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаСНДСУменьшение"		, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаБезНДСДо"				, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаБезНДСПосле"			, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаБезНДСУвеличение"		, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаБезНДСУменьшение"		, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтавкаНДСДо"					, "Товары"				,		, "СтавкаНДС"		,					,		, "СтавкаНДС"					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтавкаНДСПосле"					, "Товары"				,		, "СтавкаНДС"		,					,		, "СтавкаНДС"					);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаНДСДо"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаНДСПосле"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаНДСУвеличение"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаНДСУменьшение"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаСНДСДо"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаСНДСПосле"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаСНДСУвеличение"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаСНДСУменьшение"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		
	Иначе
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Количество"					, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаБезНДС"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦенаСНДС"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаБезНДС"				, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтавкаНДС"					, "Товары"				,		, "СтавкаНДС"		,					,		, "СтавкаНДС"					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаНДС"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаСНДС"					, "Товары"				, "="	, "ЧислоСумма"		,					,		,								);
		
	КонецЕсли;	
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоВОдномМесте"		, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КодЕдиницыИзмерения"		, "Товары"				,		, "КодЕдиницы"		,					,		, "КодЕдиницы"					);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Страна"						, "Товары"				,		, "КодСтраны"		,					,		, "Страна"						);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерГТД"					, "Товары"				,		, "НомерГТД"		,					,		, "НомерГТД"					);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НеЗагружать"				, "Товары"				, "="	, "Булево"			,					,		, 								);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТипПоставки"				, "Товары"				, "="	, "Строка20"		,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Комментарий"				, "Товары"				, "="	, "Строка2560"		,					,		,								);
	
	Если ТипСообщения = "DESADV" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерУпаковки"			, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТранспортныеУпаковки"	, "ТранспортныеУпаковки", "="	, "ДеревоЗначений"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СоставУпаковки"			, "ТранспортныеУпаковки", "EDI"	, "Строка256"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Количество"				, "ТранспортныеУпаковки", "EDI"	, "ЧислоКоличество"	,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерСтроки"			, "ТранспортныеУпаковки", "EDI"	, "ЧислоКоличество"	,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТипУпаковки"			, "ТранспортныеУпаковки", "EDI"	, "Строка3"			,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерУпаковки"			, "ТранспортныеУпаковки", "EDI"	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "SSCC"					, "ТранспортныеУпаковки", "EDI"	, "Строка18"		,					,		,								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТТНвЕГАИС",										, "EDI"	, "Структура"		, "ТТНвЕГАИС"		,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ФиксацияВЕГАИС",								, "EDI"	, "Структура"		, "ФиксацияВЕГАИС"	,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КодТовараВЕГАИС"		, "Товары"						, "="	, "Строка35",					,		,								);
	КонецЕсли;
	
	Если ТипСообщения = "RETANN" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПричинаВозврата"		, "Товары"				, "="	, "Строка512"		,					,		,								);
	КонецЕсли;
	
	Если ТипСообщения = "INVOIC" или ТипСообщения = "COINVOIC" или ТипСообщения = "DESADV" или ТипСообщения = "RECADV" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТипЕдиницы"				, "Товары"				, "="	, "Строка20"		,					,		,								);
	КонецЕсли;
	
	Если ТипСообщения = "PORDERS" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Контракт"				,						, 		, "Структура"		,					,		, "Договор"					);
	КонецЕсли;
	
	Если ТипСообщения = "INVOIC" ИЛИ ТипСообщения = "COINVOIC"  Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Контракт"				,						, 		, "Структура"		,					,		, "Договор"					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаТоваровВсего"		,						, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаТоваровВсегоБезНДС",						, "="	, "ЧислоСумма"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СуммаТоваровНДС"		,						, "="	, "ЧислоСумма"		,					,		,								);
	КонецЕсли;
	
	// алкогольные реквизиты
	
	Если ТипСообщения = "ALCRPT" Тогда
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СерияНоменклатуры"				, "Товары"			, "1С"	, 					, 					,		, "СерияНоменклатуры"			);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "АлкоПроизводитель"				, "Товары"			, 		, "Структура"		, "ЮрФизЛицо"		,		, "ЮрФизЛицоСтороннее");
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "АлкоИностранныйПроизводитель"	, "Товары"			, 		, "Структура"		, "ЮрФизЛицо"		,		, "ЮрФизЛицоСтороннее");
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "АлкоЛицензияПоставщика"			, "Товары"			, "EDI"	, "Структура"		, "АлкоЛицензия"	);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "АлкоСертификатПродукции"		, "Товары"			, "EDI"	, "Структура"		, "АлкоСертификат"	);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "АлкоОбъем"						, "Товары"			, "="	, "ЧислоОбъем"		,					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "АлкоКодПродукции"				, "Товары"			, "="	, "КодАлкоПродукции", 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "АлкоПризнакТипаПродукции"		, "Товары"			, "="	, "ПризнакАлкоПродукции",				);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "АлкоДатаРозлива"				, "Товары"			, "="	, "Дата"			, 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕГАИС"							, "Товары"			, "EDI"	, "Структура"		, "ЕГАИС"			);

	КонецЕсли;
	
	Если ТипСообщения = "PRICELIST" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Каталог"						, "Товары"			, "="	, "Строка2560"		, 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КвантПоставки"					, "Товары"			, "="	, "ЧислоКоличество"	, 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности"					, "Товары"			, "="	, "ЧислоКоличество"	, 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдИзмСрокаГодности"				, "Товары"			, "="	, "КодЕдиницы"		, 					);
	КонецЕсли;
	
	ОбработкаСобытияПодключаемогоМодуля("ИзменитьМетаданныеСообщения",,Новый Структура("ТаблицаМетаданных,ТаблицаЗависимыхТипов,ТипСообщения,Направление",ТабМетаданных,ТаблицаЗависимыхТипов,ТипСообщения,Направление));
	
	ЭДО_Кэш_Поместить("МетаданныеСообщения_"+ТипСообщения+"_"+Направление,ТабМетаданных);

	Возврат ТабМетаданных;
	
КонецФункции

//}}}

//{{{ получение структуры сообщения
Функция ПолучитьСтруктуруПоляСообщения(ВидСтруктуры)
	
	Структура = Новый Структура();
	
	МетаданныеПоляСообщения = ПолучитьМетаданныеПоляСообщения(ВидСтруктуры);	

	Для каждого Стр ИЗ МетаданныеПоляСообщения Цикл
		
		ЗначениеСтруктуры = Неопределено;
		
		Если Стр.ТипEDI = "Структура" Тогда
			
			ЗначениеСтруктуры = ПолучитьСтруктуруПоляСообщения(Стр.ВидСтруктурыEDI);
			
		КонецЕсли;
//врата		
		Если Стр.ТипEDI = "СписокЗначений" Тогда
	    	ЗначениеСтруктуры=Стр.ВидСтруктурыEDI;
		конецесли;
//		
		Структура.Вставить(Стр.ИмяПоля,ЗначениеСтруктуры);
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьСтруктуруТабличнойЧасти(МетаданныеСообщения,ИмяТабличнойЧасти)
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ИмяТаблицы",ИмяТабличнойЧасти);
	
	ТабличнаяЧасть = Новый ТаблицаЗначений;
	
	ПоляТЧ = МетаданныеСообщения.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Стр Из ПоляТЧ Цикл
		
		Если Стр.ТипEDI = "ТабличнаяЧасть" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Принадлежность = Неопределено Тогда
			ТабличнаяЧасть.Колонки.Добавить(Стр.ИмяПоля+"EDI");
			ТабличнаяЧасть.Колонки.Добавить(Стр.ИмяПоля+"1С");
		Иначе
			
			Тип = Неопределено;
			
			Если Стр.ТипEDI = "GTIN" Тогда
				Тип = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(14));
			ИначеЕсли Стр.ТипEDI = "Артикул" Тогда	
				Тип = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(35));
			ИначеЕсли Стр.Тип1С = "Номенклатура" Тогда
				Тип = Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("Номенклатура"));
			ИначеЕсли Стр.Тип1С = "ХарактеристикаНоменклатуры" Тогда
				Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
					Тип = Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры"));
				КонецЕсли;	
			ИначеЕсли Стр.Тип1С = "ЕдиницаИзмерения" Тогда
				Тип = Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЕдиницаИзмерения"));
			ИначеЕсли Стр.ТипEDI = "ЧислоКоличество" Тогда
				Тип = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12,3));
			ИначеЕсли Стр.ТипEDI = "ЧислоСумма" Тогда	
				Тип = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,4));
			ИначеЕсли Стр.ТипEDI = "Структура" Тогда  //КонечныйГрузополучательGLN ИЛИ ТочкаСамовывоза
				Тип = Новый ОписаниеТипов("Структура");
			КонецЕсли;	
			
			Если Тип = Неопределено Тогда
				ТабличнаяЧасть.Колонки.Добавить(Стр.ИмяПоля);
			Иначе
				ТабличнаяЧасть.Колонки.Добавить(Стр.ИмяПоля,Тип);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

Функция ПолучитьСтруктуруДереваЗначений(МетаданныеСообщения,ИмяДереваЗначений)
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ИмяТаблицы",ИмяДереваЗначений);
	
	ДеревоЗначений = Новый ДеревоЗначений;
	
	ПоляДЗ = МетаданныеСообщения.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Стр Из ПоляДЗ Цикл
		
		Если Стр.ТипEDI = "ДеревоЗначений" Тогда
			Продолжить;
		КонецЕсли;
			
		Тип = Неопределено;
		
		Если Стр.ТипEDI = "ЧислоКоличество" Тогда
			Тип = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12,3));
		КонецЕсли;	
		
		Если Тип = Неопределено Тогда
			ДеревоЗначений.Колонки.Добавить(Стр.ИмяПоля);
		Иначе
			ДеревоЗначений.Колонки.Добавить(Стр.ИмяПоля,Тип);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоЗначений;	
	
КонецФункции

Функция ПустыеСообщения()
	
	Результат = ЭДО_Кэш_Прочитать("ПустыеСообщения");
	
	Если Результат = Неопределено Тогда
		
		Результат = Новый ТаблицаЗначений();
		Результат.Колонки.Добавить("ТипСообщения");
		Результат.Колонки.Добавить("Сообщение");
		
		Результат.Индексы.Добавить("ТипСообщения");
		
		ЭДО_Кэш_Поместить("ПустыеСообщения",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруСообщения(ТипСообщения = Неопределено,Направление = Неопределено) Экспорт
	
	НайденнаяСтрока = ПустыеСообщения().Найти(ТипСообщения,"ТипСообщения");

	Если Не НайденнаяСтрока = Неопределено Тогда
		Возврат ПолучитьКопиюСообщения(НайденнаяСтрока.Сообщение);
	КонецЕсли;
	
	Структура = Новый Структура();
	
	МетаданныеСообщения = ПолучитьМетаданныеСообщения(ТипСообщения,Направление);
	
	Для Каждого Стр Из МетаданныеСообщения Цикл
		
		ЗначениеПоля = Неопределено;
		
		Если Стр.ТипEDI = "ТабличнаяЧасть" Тогда
			
			ЗначениеПоля = ПолучитьСтруктуруТабличнойЧасти(МетаданныеСообщения,Стр.ИмяТаблицы);
			
		ИначеЕсли Стр.ТипEDI = "ДеревоЗначений" Тогда
			
			ЗначениеПоля = ПолучитьСтруктуруДереваЗначений(МетаданныеСообщения,Стр.ИмяТаблицы);
			
		ИначеЕсли ЗначениеЗаполнено(Стр.ИмяТаблицы) Тогда // реквизиты табличных частей заполняются выше
			
			Продолжить;
			
		ИначеЕсли Стр.ТипEDI = "Структура" Тогда
			
			ЗначениеПоля = ПолучитьСтруктуруПоляСообщения(Стр.ВидСтруктурыEDI);
		
		КонецЕсли;
		
		Если Стр.Принадлежность = Неопределено Тогда
			
			Структура.Вставить(Стр.ИмяПоля+"EDI", ЗначениеПоля);
			
			Значение1С = Неопределено;
			Если ЗначениеЗаполнено(Стр.Тип1С) Тогда
				Значение1С = ПолучитьПустуюСсылкуОбъекта(Стр.Тип1С);
			КонецЕсли;
			
			Структура.Вставить(Стр.ИмяПоля+"1С",Значение1С);
			
		Иначе
			
			Структура.Вставить(Стр.ИмяПоля, ЗначениеПоля);
			
	 	КонецЕсли;
	 
	КонецЦикла;
	
	Структура.ТипСообщения	= ТипСообщения;
	Структура.Направление	= Направление;
	
	// Добавим служебные поля
	Структура.Вставить("СообщениеСсылка"); // Ссылка на сообщение, сохраненное в 1С
	Структура.Вставить("ДокументСсылка");  // Ссылка на связанный с сообщением документ
	Структура.Вставить("ПутьКФайлу");      // Путь к xml файлу сообщения. В основном используется для работы с несохраненными сообщениями.
	Структура.Вставить("СодержитОшибки");
	
	НоваяСтрока = ПустыеСообщения().Добавить();
		
	НоваяСтрока.ТипСообщения = ТипСообщения;
	НоваяСтрока.Сообщение = ПолучитьКопиюСообщения(Структура);
	
	Возврат Структура;
	
КонецФункции

//проверим существование всех нужных полей в структуре сообщения.
//сообщение, загруженное старыми версиями модуля, может не содержать некоторых полей как в шапке, так и в табличной части. В этом случае добавим их из пустого сообщения данного типа.
Процедура ДополнитьСтруктуруСообщенияИзЭталона(ДополняемоеСообщение,Эталон) Экспорт
	
	Для Каждого ЭлементСтруктурыЭталона Из Эталон Цикл
		Если Не ДополняемоеСообщение.Свойство(ЭлементСтруктурыЭталона.Ключ) Тогда
			ДополняемоеСообщение.Вставить(ЭлементСтруктурыЭталона.Ключ,ЭлементСтруктурыЭталона.Значение);
			//добавили это поле в шапку текущего сообщения
		Иначе
			//еще проверим вложенные Структуры
			Если ТипЗнч(ЭлементСтруктурыЭталона.Значение) = Тип("Структура")  Тогда
				Если ТипЗнч(ДополняемоеСообщение[ЭлементСтруктурыЭталона.Ключ]) <> Тип("Структура") Тогда  
					//возможно ранее такое поле было, но это была не структура
					//тогда придется удалить с потерей данных и создать заново (гарантированно возникнет при переходе со старого модуля УФ на Этот)
					ДополняемоеСообщение.Удалить(ЭлементСтруктурыЭталона.Ключ);
					ДополняемоеСообщение.Вставить(ЭлементСтруктурыЭталона.Ключ, ЭлементСтруктурыЭталона.Значение);
					//добавили из эталона, проверять вложение нет смысла
				иначе //проверим
					ДополнитьСтруктуруСообщенияИзЭталона(ДополняемоеСообщение[ЭлементСтруктурыЭталона.Ключ],ЭлементСтруктурыЭталона.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	//теперь по товарам
	Если ДополняемоеСообщение.Свойство("Товары") и Эталон.Свойство("Товары") 
		И ТипЗнч(ДополняемоеСообщение.Товары) = Тип("ТаблицаЗначений")
		И ТипЗнч(Эталон.Товары) = Тип("ТаблицаЗначений")
	Тогда
		Для Каждого КолонкаЭталона Из Эталон.Товары.Колонки Цикл
			Если ДополняемоеСообщение.Товары.Колонки.Найти(КолонкаЭталона.Имя)=Неопределено Тогда
				ДополняемоеСообщение.Товары.Колонки.Добавить(КолонкаЭталона.Имя,КолонкаЭталона.ТипЗначения);
				//добавили эту колонку в таб.часть "Товары" текущего сообщения
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

//}}}


//{{{ ТИПЫ ОБЪЕКТОВ
//********************************************************

Функция ПолучитьТипЗначенияОбъекта(ИмяОбъекта,Кратко = Ложь,ВернутьИмяВМетаданных=Ложь) Экспорт
	
	//	ТипЗначенияОбъекта = ПолучитьТипЗначенияОбъекта(ИмяОбъекта);
	
	Если ТаблицаТипов = Неопределено Тогда
		ОбновитьТаблицуТиповЗначенияОбъектов();
	КонецЕсли;
	
	ТипЗначенияОбъекта = Неопределено;
	НайденнаяСтрока = ТаблицаТипов.Найти(ИмяОбъекта,"ИмяОбъекта");
	Если НайденнаяСтрока <> Неопределено Тогда
		ТипЗначенияОбъекта = НайденнаяСтрока.ИмяТипа;
	КонецЕсли;
	
	Если ВернутьИмяВМетаданных Тогда
		//На рефакторинг: вынести данный код в отдельную функцию.
		ТипЗначенияОбъекта = СтрЗаменить(ТипЗначенияОбъекта,"ДокументСсылка.","");
		ТипЗначенияОбъекта = СтрЗаменить(ТипЗначенияОбъекта,"СправочникСсылка.","");
		ТипЗначенияОбъекта = СтрЗаменить(ТипЗначенияОбъекта,"ПеречислениеСсылка.","");
		Если ТипЗначенияОбъекта="" Тогда
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Если Кратко Тогда
		ТипЗначенияОбъекта = СтрЗаменить(ТипЗначенияОбъекта,"Ссылка.",".");
	КонецЕсли;
	
	Возврат ТипЗначенияОбъекта;
	
КонецФункции

Функция ПолучитьКопиюСообщения(Сообщение) Экспорт
	
	Перем КопияСообщения;
	
	КопияСообщения = Новый Структура();
	
	КопияСообщения = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Сообщение));
	
	Возврат КопияСообщения;
	
КонецФункции

Функция ПолучитьПустуюСсылкуОбъекта(ИмяПоля) Экспорт
	
	ТипПоля = ПолучитьТипЗначенияОбъекта(ИмяПоля);
	
	ПустаяСсылка = Неопределено;
	
	Если ТипПоля = Неопределено ИЛИ (ВнешнееХранилище И Найти(ТипПоля,"КонтурEDI_")>0) Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	Если Найти(ТипПоля,"СправочникСсылка.")>0 Тогда
		ИмяМетаданных	= СтрЗаменить(ТипПоля,"СправочникСсылка.","");
		//Если ИмяКонфигурации1С = "Розница" Тогда
		//	Если Найти("\Валюты\НомераГТД\","\"+ИмяМетаданных+"\")>0 Тогда
		//		Возврат Неопределено;
		//	КонецЕсли;
		//КонецЕсли;
		Попытка
			ПустаяСсылка	= Справочники[ИмяМетаданных].ПустаяСсылка();
		Исключение
			ПустаяСсылка = Неопределено;	
		КонецПопытки;
	КонецЕсли;
	Если Найти(ТипПоля,"ДокументСсылка.")>0 Тогда
		ИмяМетаданных	= СтрЗаменить(ТипПоля,"ДокументСсылка.","");
		ПустаяСсылка	= Документы[ИмяМетаданных].ПустаяСсылка();
	КонецЕсли;
	Если Найти(ТипПоля,"ПеречислениеСсылка.")>0 Тогда
		ИмяМетаданных	= СтрЗаменить(ТипПоля,"ПеречислениеСсылка.","");
		ПустаяСсылка	= Перечисления[ИмяМетаданных].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПустаяСсылка;
	
КонецФункции

//}}}

//*******************************************************
// ОБРАБОТЧИКИ ДЕЙСТВИЙ ФОРМ

Процедура ДействиеФормыНачалоВыбора(ИмяФормы,ВсеЭлементыФормы,Элемент,ИмяПоля,СтандартнаяОбработка) Экспорт
	
	Если ИмяФормы = "ФормаИсходящегоДокумента"  Тогда
		Если ИмяПоля = "ЕдиницаИзмерения" ИЛИ ИмяПоля = "ХарактеристикаНоменклатуры" Тогда
			
			ТекущиеДанные = ВсеЭлементыФормы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено Тогда
				
				Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				
					Элемент.ВыборПоВладельцу = ТекущиеДанные.Номенклатура;
					
				Иначе
					
					ВывестиПредупреждение_КонтурEDI("Не выбрана номенклатура!");
					
					СтандартнаяОбработка = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ИмяФормы = "ФормаСопоставленияНоменклатуры" Тогда
		Если ИмяПоля = "ЕдиницаИзмерения" ИЛИ ИмяПоля = "ХарактеристикаНоменклатуры" Тогда
			
			ТекущиеДанные = ВсеЭлементыФормы.СписокНоменклатуры.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено Тогда
				
				Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				
					Элемент.ВыборПоВладельцу = ТекущиеДанные.Номенклатура;
					
				Иначе
					
					ВывестиПредупреждение_КонтурEDI("Не выбрана номенклатура!");
					
					СтандартнаяОбработка = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//*******************************************************
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//{{{ проверка конфигурации

Процедура ПроверитьДоступностьОбъекта(СписокОшибок,ПолноеИмя, ПравоЧтение =  Ложь, ПравоДобавление =  Ложь, ПравоИзменение =  Ложь, ПравоУдаление =  Ложь) Экспорт
	
	ПозицияТочки = Найти(ПолноеИмя,".");
	ВидМетаданных = Лев(ПолноеИмя,ПозицияТочки-1);
	ИмяОбъекта = Сред(ПолноеИмя,ПозицияТочки+1);
	
	ОбъектМетаданных = Метаданные[ВидМетаданных].Найти(ИмяОбъекта);
	
	Если ОбъектМетаданных = Неопределено Тогда
		СписокОшибок.Добавить("В конфигурации отсутствует: "+ПолноеИмя);
	Иначе
		Если ПравоЧтение Тогда
			Если НЕ ПравоДоступа("Чтение",ОбъектМетаданных) Тогда
				СписокОшибок.Добавить("У вас недостаточно прав на чтение: "+ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		Если ПравоДобавление Тогда
			Если НЕ ПравоДоступа("Добавление",ОбъектМетаданных) Тогда
				СписокОшибок.Добавить("У вас недостаточно прав на добавление: "+ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		Если ПравоИзменение Тогда
			Если НЕ ПравоДоступа("Изменение",ОбъектМетаданных) Тогда
				СписокОшибок.Добавить("У вас недостаточно прав на изменение: "+ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		Если ПравоУдаление Тогда
			Если НЕ ПравоДоступа("Удаление",ОбъектМетаданных) Тогда
				СписокОшибок.Добавить("У вас недостаточно прав на удаление: "+ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСтруктуруДанных()
	
	ВариантХраненияДанных = "";
	
	СписокОшибок = Новый СписокЗначений;
	
	// проверим наличие "своих" объектов
	Если  ДобавленыСвоиОбъектыВКонфигурацию() Тогда
		
		ВариантХраненияДанных = "СвоиОбъекты";
		
	КонецЕсли;
	
	Если НЕ ВнешнееХранилище Тогда
	
		ПроверитьДоступностьОбъекта(СписокОшибок, "Справочники.КонтурEDI_Сообщения", 					Истина, Истина, Истина, Истина);
		ПроверитьДоступностьОбъекта(СписокОшибок, "Справочники.КонтурEDI_ТочкиДоставки", 				Истина, Истина, Истина, Истина);
		ПроверитьДоступностьОбъекта(СписокОшибок, "Справочники.КонтурEDI_ДополнительныеСправочники",	Истина, Истина, Истина, Истина);
		ПроверитьДоступностьОбъекта(СписокОшибок, "РегистрыСведений.КонтурEDI_СтатусыДокументов", 		Истина, Истина, Истина, Истина);
		ПроверитьДоступностьОбъекта(СписокОшибок, "РегистрыСведений.КонтурEDI_СоответствияТоваров", 	Истина, Истина, Истина, Истина);
		ПроверитьДоступностьОбъекта(СписокОшибок, "РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты",	Истина, Истина, Истина, Истина);
		
	КонецЕсли;
		
	Возврат СписокОшибок;
	
КонецФункции

Функция ОпределитьРелизКонфигурации() Экспорт
	
	РелизКонфигурации1С="";
	
	СинонимКонфигурации = Метаданные.Синоним;
	ВерсияКонфигурации = Метаданные.Версия;
	
	Если Найти(СинонимКонфигурации,"Бухгалтерия предприятия, редакция 3.0")>0 Тогда
		
		РелизКонфигурации1С = "3.0";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Бухгалтерия предприятия КОРП, редакция 3.0")>0 Тогда
		
		РелизКонфигурации1С = "3.0_КОРП";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Бухгалтерия сельскохозяйственного предприятия")>0 Тогда
		
		РелизКонфигурации1С = "3.0_СЕЛ";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Бухгалтерия предприятия, редакция 1.6")>0 Тогда
		
		РелизКонфигурации1С = "1.6";
		
	ИначеЕсли Найти(СинонимКонфигурации,"1С: Управление торговлей алкогольной продукцией 8, редакция 11.1")>0 Тогда
		
		РелизКонфигурации1С = "11.1";
		
	ИначеЕсли Найти(СинонимКонфигурации,"1С: Управление торговлей алкогольной продукцией 8, редакция 11.2")>0 
		  ИЛИ Найти(СинонимКонфигурации,"1С: Управление торговлей алкогольной продукцией 8, редакция 11.3")>0 Тогда
		
		РелизКонфигурации1С = "11.2";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление торговлей, редакция 11.0")>0 Тогда
		
		РелизКонфигурации1С = "11.0";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление торговлей, редакция 11.1")>0 Тогда
		
		РелизКонфигурации1С = "11.1";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Комплексная автоматизация 2.0")>0 Тогда   //на базе той же БСП что и УТ11.2
		
		РелизКонфигурации1С = "11.2";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление торговлей, редакция 11.2")>0 
		  ИЛИ Найти(СинонимКонфигурации,"Управление торговлей, редакция 11.3")>0 Тогда
		  
		РелизКонфигурации1С = "11.2";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление предприятием 2.0")>0 Тогда   //на базе той же БСП что и УТ11  (Это ERP2.0)
		
		РелизКонфигурации1С = "11.1";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление предприятием 2")>0 Тогда   //на базе той же БСП что и УТ11.2  (Это ERP2.1)
		
		РелизКонфигурации1С = "11.2";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Агропромышленный комплекс 2.0")>0 Тогда     //на базе той же БСП что и УТ11
		
		РелизКонфигурации1С = "11.1";   
		
	ИначеЕсли Найти(СинонимКонфигурации,"Агропромышленный комплекс 2.1")>0 Тогда     //на базе той же БСП что и УТ11
		
		РелизКонфигурации1С = "11.2";  
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление небольшой фирмой, редакция 1.4")>0 Тогда
		
		РелизКонфигурации1С = "1.4";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление небольшой фирмой, редакция 1.5")>0 Тогда
		
		РелизКонфигурации1С = "1.5";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление небольшой фирмой, редакция 1.6")>0 Тогда
		
		РелизКонфигурации1С = "1.6";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление торговлей, редакция 11")>0 Тогда     //звучит как бред но есть релиз 11.0.4, там в синониме написано 11
		
		РелизКонфигурации1С = "11.0";
		Если Лев(СокрЛП(ВерсияКонфигурации),4) = "11.3" Тогда
			РелизКонфигурации1С = "11.2";
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат РелизКонфигурации1С;
	
КонецФункции

Функция ОпределитьКонфигурацию() Экспорт
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	ИмяКонфигурации1С = Неопределено;
	
	Если Найти(СинонимКонфигурации,"ТКПТ")>0 Тогда
		
		ИмяКонфигурации1С = "ТКПТ";
		
	ИначеЕсли Найти(СинонимКонфигурации, "Торговый дом 7")>0
		  ИЛИ Найти(СинонимКонфигурации, "Торговый дом 6")>0 Тогда
		
		ИмяКонфигурации1С = "АСТОР";
		
	ИначеЕсли Найти(СинонимКонфигурации, "Хлебобулочное и кондитерское производство (Управление сбытом продукции)")>0 Тогда
		
		ИмяКонфигурации1С = "ХБКП_УСП";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Комплексная автоматизация 2.0")>0 Тогда //Управляемая На базе той же бсп что и УТ11.2
		
		ИмяКонфигурации1С = "УФ_УТ";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Комплексная автоматизация")>0 Тогда
		
		ИмяКонфигурации1С = "КА";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление производственным предприятием")>0
		ИЛИ Найти(СинонимКонфигурации, "1С:Хлебобулочное и кондитерское производство, редакция 1.3")>0
		ИЛИ Найти(СинонимКонфигурации, "Управление проектной организацией")>0
		ИЛИ Найти(СинонимКонфигурации, "Ликероводочный и винный завод")>0
		ИЛИ Найти(СинонимКонфигурации, "1С: Спиртовое производство")>0      
		ИЛИ Найти(СинонимКонфигурации, "1С:Молокозавод")>0
		ИЛИ Найти(СинонимКонфигурации, "Мясокомбинат, редакция 1.3")>0
		ИЛИ Найти(СинонимКонфигурации, "Управление птицефабрикой, редакция 1.3")>0 Тогда
		
		ИмяКонфигурации1С = "УПП";
		
	ИначеЕсли Найти(СинонимКонфигурации, "Бухгалтерия Универсал, редакция 3.0") Тогда 
		
		ИмяКонфигурации1С = "УФ_БП"; 
		
	ИначеЕсли Найти(СинонимКонфигурации, "Бухгалтерия сельскохозяйственного предприятия, редакция 3.0") Тогда 
		
		ИмяКонфигурации1С = "УФ_БП"; 
		
	ИначеЕсли Найти(СинонимКонфигурации, "Трактир") И  Найти(СинонимКонфигурации, "3") Тогда 
		
		ИмяКонфигурации1С = "УФ_БП"; //Управляемый  Трактиръ: Back-Office  3.0 на базе БП
		
	ИначеЕсли 	Найти(СинонимКонфигурации,"Бухгалтерия предприятия, редакция 2.0")>0
		ИЛИ Найти(СинонимКонфигурации, "Трактир")
		ИЛИ Найти(СинонимКонфигурации, "Бухгалтерия сельскохозяйственного предприятия")>0 Тогда
		
		ИмяКонфигурации1С = "БП";
	//УФ	
	ИначеЕсли 	Найти(СинонимКонфигурации,"Бухгалтерия предприятия, редакция 3.0")>0 Тогда
		
		ИмяКонфигурации1С = "УФ_БП";
		
	ИначеЕсли 	Найти(СинонимКонфигурации,"Бухгалтерия предприятия КОРП, редакция 3.0")>0 Тогда
		
		ИмяКонфигурации1С = "УФ_БП";
		
	ИначеЕсли Найти(СинонимКонфигурации, "Управление корпоративными финансами, редакция 3.0") Тогда 
		
		ИмяКонфигурации1С = "УФ_БП"; 
		
	ИначеЕсли 	Найти(СинонимКонфигурации,"Управление небольшой фирмой, редакция 1.4")>0 Тогда
		
		ИмяКонфигурации1С = "УФ_УНФ";
		
	ИначеЕсли 	Найти(СинонимКонфигурации,"Управление небольшой фирмой, редакция 1.5")>0 Тогда
		
		ИмяКонфигурации1С = "УФ_УНФ";
		
	ИначеЕсли 	Найти(СинонимКонфигурации,"Управление небольшой фирмой, редакция 1.6")>0 Тогда
		
		ИмяКонфигурации1С = "УФ_УНФ";
		
	ИначеЕсли	Найти(СинонимКонфигурации,"Управление предприятием 2.0")>0
		ИЛИ Найти(СинонимКонфигурации,"Управление предприятием 2")>0 Тогда
		
		ИмяКонфигурации1С = "УФ_УТ";       //на базе той же БСП
		
	ИначеЕсли	Найти(СинонимКонфигурации,"Управление торговлей и взаимоотношениями с клиентами (CRM)")>0 и Найти(СинонимКонфигурации,"редакция 2.0")>0 Тогда
		
		ИмяКонфигурации1С = "УФ_УТ";      
		
	//\\УФ	
	ИначеЕсли Найти(СинонимКонфигурации,"Бухгалтерия предприятия, редакция 1.6")>0 Тогда
		
		ИмяКонфигурации1С = "БП";
		
	ИначеЕсли Найти(СинонимКонфигурации,"Управление торговлей")>0 Тогда
		
		Если Найти(СинонимКонфигурации,"10.2")>0  Тогда
			
			ИмяКонфигурации1С = "УТ_10_2";
			
		ИначеЕсли Найти(СинонимКонфигурации,"10.3")>0 Тогда
			
			ИмяКонфигурации1С = "УТ_10_3";
			//УФ
		ИначеЕсли Найти(СинонимКонфигурации,"11")>0 Тогда
			
			ИмяКонфигурации1С = "УФ_УТ";
			//\\УФ
		КонецЕсли;
		
	ИначеЕсли Найти(НРег(СинонимКонфигурации),"хлебобулочное и кондитерское производство")>0 Тогда
		
		ИмяКонфигурации1С = "ХлебУСП";
		
	ИначеЕсли Найти(НРег(СинонимКонфигурации),"управление сельскохозяйственным предприятием")>0 Тогда
		
		ИмяКонфигурации1С = "УПП"; //схожа с УПП
		
	ИначеЕсли Найти(НРег(СинонимКонфигурации),"розница, редакция 1.0")>0 Тогда
		
		ИмяКонфигурации1С = "Розница";
		
	ИначеЕсли Найти(СинонимКонфигурации, "RIT:Дистрибуция")>0 Тогда
		
		ИмяКонфигурации1С = "RIT";
		
	ИначеЕсли Найти(СинонимКонфигурации, "ДАЛИОН: Управление магазином")>0 Тогда
		
		ИмяКонфигурации1С = "ДалионУМ";
		
	Иначе
		
		Если Найти(ВРег(Метаданные.Поставщик),"ОМЕГА ИНК")>0 Тогда
			
			ИмяКонфигурации1С = "УТ_10_2";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ИмяКонфигурации1С)) Тогда
		Попытка
		//не проверены объекты (если это первый запуск)  - дешевле завернуть в попытку, чем ходить за метаданными
		ИмяКонфигурации1С = ПолучитьКонстантуEDI("ИмяКонфигурации1С");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ИмяКонфигурации1С;
КонецФункции

//}}}конец проверки конфигурации

Функция ПроверитьЗапускНовойВерсииМодуля(ЭтоПервыйЗапуск) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПродолжитьЗапуск",Истина);
	Результат.Вставить("ТекстОшибки","");
	
	ТекущаяВерсияМодуля = ПолучитьНомерРелиза_КонтурEDI();
	
	Если ЭтоПервыйЗапуск Тогда
		
		УстановитьКонстантуEDI("НомерВерсии",ТекущаяВерсияМодуля);
		Если ЗначениеЗаполнено(ИмяКонфигурации1С) И Лев(ИмяКонфигурации1С,3)="УФ_" Тогда
			УстановитьКонстантуEDI("ОбновлятьВесьСписокПриРаботеСЗаказами",Ложь);
		КонецЕсли;
		Возврат Результат;
	
	КонецЕсли;
	
	ВерсияМодуляВ1С = ПолучитьКонстантуEDI("НомерВерсии");
	
	Если СокрЛП(ВерсияМодуляВ1С) = СокрЛП(ТекущаяВерсияМодуля) Тогда
		Возврат Результат;
	КонецЕсли;
	
	
	//и теперь собственно проверки
	НомерРедакцииСтарый = 999;
	НомерВыпускаСтарый = 999;
	Попытка
		НомерРедакцииСтарый = Число(Сред(ВерсияМодуляВ1С,3,2));
		НомерВыпускаСтарый = Число(Сред(ВерсияМодуляВ1С,6,3));
	Исключение
	КонецПопытки;
	
	НомерРедакции = 999;
	НомерВыпуска = 999;
	Попытка
		НомерРедакции = Число(Сред(ТекущаяВерсияМодуля,3,2));
		НомерВыпуска = Число(Сред(ТекущаяВерсияМодуля,6,3));
	Исключение
	КонецПопытки;
	
	ЗапустилиСтарую = Ложь;
	Если НомерРедакции < НомерРедакцииСтарый И НЕ НомерРедакцииСтарый = 999 Тогда
		ЗапустилиСтарую = Истина;				
	ИначеЕсли (НомерВыпуска < НомерВыпускаСтарый И НЕ НомерВыпускаСтарый = 999) и (НомерРедакции=НомерРедакцииСтарый) Тогда
		ЗапустилиСтарую = Истина;
	КонецЕсли;
	
	Если ЗапустилиСтарую Тогда
		Результат.ПродолжитьЗапуск = Ложь;
		Результат.ТекстОшибки = "Вы запускаете старую версию модуля. Последний раз была запущена версия "+ВерсияМодуляВ1С+". Вы запускаете "+ТекущаяВерсияМодуля;
		Возврат Результат;	
	КонецЕсли;
		
	// начиная с версии 4.01.043 изменилось хранение соответствий товаров, теперь оно в разрезе партнеров
	// проверяем что запустили новую версию модуля, и, в случае необходимости, переписываем соответствия
	
	// начиная с версии 4.01.045 заменили настройку "цепочка сообщений" на набор галочек по типам сообщений
	
	ИзменитьНастройкуЦепочки = Ложь;
	
	ПерезаполнитьСоответствия = Ложь;
	Если СтрДлина(ВерсияМодуляВ1С)>=8 Тогда
		Если ЗначениеЗаполнено(ВерсияМодуляВ1С) Тогда
			НомерРедакции = 999;
			НомерВыпуска = 999;
			Попытка
				НомерРедакции = Число(Сред(ВерсияМодуляВ1С,3,2));
				НомерВыпуска = Число(Сред(ВерсияМодуляВ1С,6,3));
			Исключение
			КонецПопытки;
			Если НомерРедакции<=1 Тогда
				Если НомерВыпуска<=42 Тогда
					ПерезаполнитьСоответствия = Истина;
				КонецЕсли;
				Если НомерВыпуска<=44 Тогда
					ИзменитьНастройкуЦепочки = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПерезаполнитьСоответствия Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтурEDI_СоответствияТоваров.*,
			|	КонтурEDI_ТочкиДоставки.Партнер КАК ПартнерТД,
			|	КонтурEDI_ДополнительныеРеквизиты.Значение КАК ПартнерЮР
			|ИЗ
			|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
			|		ПО КонтурEDI_СоответствияТоваров.Контрагент = КонтурEDI_ДополнительныеРеквизиты.Объект
			|			И (КонтурEDI_ДополнительныеРеквизиты.Свойство = ""ПартнерКонтрагента"")
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
			|		ПО (КонтурEDI_СоответствияТоваров.Контрагент <> НЕОПРЕДЕЛЕНО)
			|			И КонтурEDI_СоответствияТоваров.Контрагент = КонтурEDI_ТочкиДоставки.СвязанныйСправочник1";
			
			ТЗ = Запрос.Выполнить().Выгрузить();			   
			
			ТЗ.ЗаполнитьЗначения(Ложь,"ОсновноеСоответствие");
			
			Для Каждого Стр ИЗ ТЗ Цикл
				
				// начиная с релиза 4.01.043.15 GTIN не добиваем нулями
				//Стр.GTIN = Прав("0000000000000000"+СокрЛП(Стр.GTIN),14);
				
				Стр.GTIN = СокрЛП(Стр.GTIN);
				
				Если НЕ ЗначениеЗаполнено(Стр.Партнер) Тогда
					Если ЗначениеЗаполнено(Стр.ПартнерТД) Тогда
						Стр.Партнер = Стр.ПартнерТД;
					ИначеЕсли ЗначениеЗаполнено(Стр.ПартнерЮР) Тогда
						Стр.Партнер = Стр.ПартнерЮР;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ТЗ.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Единица, Партнер, GTIN, КодТовараПартнера, ОсновноеСоответствие");
			
			ТЗ.Сортировать("GTIN");
			
			ПредыдущийGTIN = "пусто";
			
			Для Каждого Стр из ТЗ Цикл
				
				Если ЗначениеЗаполнено(Стр.GTIN) Тогда
					Если НЕ СокрЛП(Стр.GTIN) = ПредыдущийGTIN Тогда
						Стр.ОсновноеСоответствие = Истина;
						ПредыдущийGTIN = СокрЛП(Стр.GTIN);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ТЗ.Сортировать("КодТовараПартнера,ОсновноеСоответствие Убыв");
			
			ПредыдущийКодТовара = "пусто";
			
			Для Каждого Стр из ТЗ Цикл
				
				Если ЗначениеЗаполнено(Стр.КодТовараПартнера) Тогда
					Если НЕ СокрЛП(Стр.КодТовараПартнера) = ПредыдущийКодТовара Тогда
						Стр.ОсновноеСоответствие = Истина;
						ПредыдущийКодТовара = СокрЛП(Стр.КодТовараПартнера);
					Иначе
						Если Стр.ОсновноеСоответствие Тогда
							Стр.ОсновноеСоответствие = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ВсеХорошо = Истина;
			
			НачатьТранзакцию_КонтурEDI();
			
			Попытка
				НаборЗаписей = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьНаборЗаписей();
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			Исключение
				ВсеХорошо = Ложь;
				ОтменитьТранзакцию_КонтурEDI();
			КонецПопытки;
			
			Если ВсеХорошо Тогда
				
				Для Каждого Стр Из ТЗ Цикл
					
					Запись = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьМенеджерЗаписи();
					
					ЗаполнитьЗначенияСвойств(Запись,Стр);
					
					Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
						Запись.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					Иначе
						Запись.ХарактеристикаНоменклатуры = Неопределено;
					КонецЕсли;
					//Запись.Номенклатура = Стр.Номенклатура;
					//Запись.Единица = Стр.Единица;
					//Запись.Партнер = Стр.Партнер;
					//Запись.GTIN = Стр.GTIN;
					//Запись.КодТовараПартнера	= Стр.КодТовараПартнера;
					//Запись.ОсновноеСоответствие = Стр.ОсновноеСоответствие;
					
					//Запись.Заполнить(Стр);
					
					Попытка
						Запись.Записать();
					Исключение
						ВсеХорошо = Ложь;
						ОтменитьТранзакцию_КонтурEDI();
						Прервать;
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ВсеХорошо Тогда
				ЗафиксироватьТранзакцию_КонтурEDI();
			КонецЕсли;						
			
		КонецЕсли;
		
	КонецЕсли;
	
	//перепишем GLN организации в учетные записи, если это возможно
	Если СокрЛП(ВерсияМодуляВ1С) < СокрЛП("4.01.044.06") Тогда
		УчетныеЗаписи=ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");
		СписокЮрЛиц = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
		Если СписокЮрЛиц.Количество()=1
			И УчетныеЗаписи.Количество()=1
			Тогда	
			НужнаяСтрокаУчетныхЗаписей=УчетныеЗаписи[0];
			УчетнаяЗапись=ПолучитьЭлементСправочника("УчетныеЗаписи",НужнаяСтрокаУчетныхЗаписей.Ссылка);
			УчетнаяЗапись.GLN=ПолучитьКонстантуEDI("GLN_Основной");
			СохранитьЭлементСправочника("УчетныеЗаписи",НужнаяСтрокаУчетныхЗаписей.Ссылка,УчетнаяЗапись);
			УчетныеЗаписи=ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");//обновим кэш
		Иначе
			СтрокаСообщения="Не удалось обновить GLN для учетной записи. 
			|Откройте меню Администрирование -> Учетные записи, 
			|и для каждой учетной записи укажите GLN соответствующей организации";
			Сообщить(СтрокаСообщения);
			ВывестиПредупреждение_КонтурEDI(СтрокаСообщения);
		КонецЕсли;	
	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) <= СокрЛП("4.01.046.02") Тогда
		//по-другому назвали свойство
		
		ОтправлятьТару = (ПолучитьКонстантуEDI("ОтправлятьВозвратнуюТаруВRECADV")=Истина);
		УстановитьГлобальноеСвойство("ОтправлятьВозвратнуюТаруВDESADV",ОтправлятьТару);
		
	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) <= СокрЛП("4.01.049.01") Тогда
		//по-другому назвали свойство
		
		//РазрешитьНесколькоДокументовИзORDERS = (ПолучитьКонстантуEDI("РазрешитьНесколькоРеализацийИзORDERS")=Истина);
		//УстановитьГлобальноеСвойство("РазрешитьНесколькоДокументовИзORDERS",РазрешитьНесколькоДокументовИзORDERS);
		
	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) <= СокрЛП("4.02.003.00") Тогда
		//C этой версии переходим на API.
		//Если в настройках на сервере указан обмен по FTP, а в настройках модуля - API, это плохо, запретим такое.
		Если ПротоколОбмена_КонтурEDI = "API" Тогда
			//сначала надо проверить, пускает ли нас под текущей учетной записью 
			
			УчетнаяЗаписьСсылка = ПолучитьКонстантуEDI("УчетнаяЗаписьПоУмолчанию");
			УчетнаяЗаписьСтруктура = ПолучитьЭлементСправочника("УчетныеЗаписи",УчетнаяЗаписьСсылка);
			
			СоединениеАПИ = ПолучитьСоединениеHTTP(?(ЭтоТестовыйAPI(),"test-edi-api.kontur.ru","edi-api.kontur.ru"));
			
			Если УчетнаяЗаписьСтруктура=Неопределено Тогда
				Результат.ПродолжитьЗапуск = Ложь;
				Результат.ТекстОшибки = "Не удалось определить основную учетную запись."
				+"
				|Откройте старый модуль и установите основную учетную запись.
				|После этого запустите новый модуль.";
				Возврат Результат;	
			КонецЕсли;	
			
			Если API_Авторизоваться(УчетнаяЗаписьСтруктура)<>Истина Тогда
				Результат.ПродолжитьЗапуск = Ложь;
				Результат.ТекстОшибки = "Не удалось авторизоваться с учетной записью "+УчетнаяЗаписьСтруктура.Логин
				+"
				|Откройте старый модуль и измените протокол обмена на FTP.
				|После этого проведите настройку в новом модуле.";
				Возврат Результат;	
			КонецЕсли;	
			
			//создадим необходимые справочники
			Если Не ОбновитьСписокОрганизацийПоУчетнымЗаписям() Тогда
				Результат.ПродолжитьЗапуск = Ложь;
				Результат.ТекстОшибки = "Не удалось заполнить настройки обмена через API";
				Возврат Результат;	
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) <= СокрЛП("4.02.005.00") Тогда
		//сконвертируем настройки: "СоздаваемыйДокументИзORDERS", "INVOIC_Из_РТУ"
		//в настройку "ИмяШаблона_Поставщик" и "ИмяШаблона_Покупатель"
		//настройки НеПоказыватьПровестиЗаказ, НеПоказыватьСоздатьРеализацию, ОтправлятьDESADVпоПроведеннымРеализациям тоже сконвертируем
		СконвертироватьНастройкиДокументовДляКонструктора();
	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) <= СокрЛП("4.03.002.00") Тогда
		ПроверкаНовойВерсии_ЗаполнениеОрганизации();
	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) <= СокрЛП("4.03.003.00") Тогда
		//Настройка странно называлассь. На всякий случай сконвертируем.
		ОтклонятьОтветыНаЗаказСДобавленнымТоваром = ПолучитьКонстантуEDI("ОтклонятьОтветыНаЗаказСДобавленнымТоваро");
		УстановитьКонстантуEDI("ОтклонятьОтветыНаЗаказСДобавленнымТоваром",ОтклонятьОтветыНаЗаказСДобавленнымТоваром);
	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) <= СокрЛП("4.03.004.00") Тогда
		//Перенес наконец определение протокола обмена из ИнициализироватьПодключаемыеМодули.
		ПротоколОбмена_КонтурEDI = ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI");
		Если Не ЗначениеЗаполнено(ПротоколОбмена_КонтурEDI) Тогда
			
			//обновили модуль, в старом еще не было такой константы, так что надо достать из старых констант
			
			Если ПолучитьКонстантуEDI("ЗагрузкаИзКаталогов")=Истина Тогда
				ПротоколОбмена_КонтурEDI = "Каталог";
			ИначеЕсли ПолучитьКонстантуEDI("ИспользоватьDialMail")=Истина Тогда
				ПротоколОбмена_КонтурEDI = "DialMail";
			ИначеЕсли ПолучитьКонстантуEDI("НеПоказыватьПомощникаПриЗапуске")<>Истина Тогда
				ПротоколОбмена_КонтурEDI = "API";//модуль запускается первый раз
			Иначе
				ПротоколОбмена_КонтурEDI = "FTP";
			КонецЕсли;	
			
			УстановитьКонстантуEDI("ПротоколОбмена_КонтурEDI",ПротоколОбмена_КонтурEDI);
			
		КонецЕсли;	

	КонецЕсли;
	
	Если СокрЛП(ВерсияМодуляВ1С) <= СокрЛП("4.03.014.00") Тогда
		//Настройки перенесены в партнеров:
		//НеПоказыватьФормуВходящегоЗаказа
		//ПроводитьЗагруженныеЗаказы
		//ОтправлятьВозвратнуюТаруВDESADV
		//РазрешитьПустыеКодыGTIN
		
		НастройкаАвтоприемкаORDERS=ПолучитьКонстантуEDI("НеПоказыватьФормуВходящегоЗаказа");
		НастройкаАвтопроведениеЗаказа=ПолучитьКонстантуEDI("ПроводитьЗагруженныеЗаказы");
		
		Если НастройкаАвтоприемкаORDERS=Истина ИЛИ НастройкаАвтопроведениеЗаказа=Истина Тогда 
			ТЗПартнеров=ПолучитьСписокЭлементовСправочника("Партнеры");
			Для Каждого СтрокаПартнера Из ТЗПартнеров Цикл
				Если СтрокаПартнера.Поставщик=Истина тогда
					Если НастройкаАвтоприемкаORDERS=Истина Тогда
						УстановитьЗначениеСвойстваОбъекта(СтрокаПартнера.Ссылка, "АвтоматическиПриниматьORDERS",Истина,);
					КонецЕсли;
					Если НастройкаАвтопроведениеЗаказа=Истина Тогда
						УстановитьЗначениеСвойстваОбъекта(СтрокаПартнера.Ссылка, "ПроводитьСозданныеЗаказы",Истина,);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОтправлятьВозвратнуюТаруВDESADV=ПолучитьКонстантуEDI("ОтправлятьВозвратнуюТаруВDESADV");
		Если ОтправлятьВозвратнуюТаруВDESADV=Истина Тогда 
			ТЗПартнеров=ПолучитьСписокЭлементовСправочника("Партнеры");
			Для Каждого СтрокаПартнера Из ТЗПартнеров Цикл
				Если СтрокаПартнера.Поставщик=Истина тогда
					УстановитьЗначениеСвойстваОбъекта(СтрокаПартнера.Ссылка, "ОтправлятьВозвратнуюТаруВDESADV",Истина,);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РазрешитьПустыеКодыGTIN=ПолучитьКонстантуEDI("РазрешитьПустыеКодыGTIN");
		Если РазрешитьПустыеКодыGTIN=Истина Тогда 
			ТЗПартнеров=ПолучитьСписокЭлементовСправочника("Партнеры");
			Для Каждого СтрокаПартнера Из ТЗПартнеров Цикл
				УстановитьЗначениеСвойстваОбъекта(СтрокаПартнера.Ссылка, "РазрешитьПустыеКодыGTINВИсходящихСообщениях",Истина,);
			КонецЦикла;
		КонецЕсли;
		
		//Восстановлена работоспособность настройки "ОбновлятьВесьСписокПриРаботеСЗаказами"
		//Принудительно скинем настройку в Ложь для УФ
		
		Если ЗначениеЗаполнено(ИмяКонфигурации1С) И Лев(ИмяКонфигурации1С,3)="УФ_" Тогда
			УстановитьКонстантуEDI("ОбновлятьВесьСписокПриРаботеСЗаказами",Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьКонстантуEDI("НомерВерсии",ТекущаяВерсияМодуля);
	
	Возврат Результат;
	
КонецФункции

//выполняется при переходе на 4.02.005.01
//по цепочкам настройкам "Загружать входящие ORDERS в: заказ/реализацию" и "INVOIC из РТУ"
Процедура СконвертироватьНастройкиДокументовДляКонструктора()
	
	СоздаваемыйДокументИзORDERS = ПолучитьКонстантуEDI("СоздаваемыйДокументИзORDERS");
	INVOIC_Из_РТУ = (ПолучитьКонстантуEDI("INVOIC_Из_РТУ")=Истина);
	
	//определим имя конфигурации для шаблонов
	
	СКД = ПолучитьМакет("ШаблоныЗапросов");
	_ИмяКонфигурации = ПолучитьИмяКонфигурацииДляЗапроса();
	СКД_ВеткаКонфигурации = СКД.НаборыДанных[_ИмяКонфигурации];
	
	Если НастройкиМодуля.МыТорговаяСеть Тогда 
		НужныйИсточникДанных = СКД_ВеткаКонфигурации.Элементы.Покупатель.Элементы.ЗапросОсновнойЦепочки.Элементы[0];
		УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Покупатель",НужныйИсточникДанных.Имя);
		//возьмем первый шаблон, сторона торговой сети работает только с одним вариантом цепочки
		//если же шаблона не будет, мы словим ошибку и будем вынуждены добавим шаблон. Пропускать ошибку здесь не стоит.
	КонецЕсли;
		
	Если НастройкиМодуля.МыПоставщик Тогда 
		ШаблонПодходит = Ложь;
		Для каждого ИсточникДанных Из СКД_ВеткаКонфигурации.Элементы.Поставщик.Элементы.ЗапросОсновнойЦепочки.Элементы Цикл
			//Перебрать все шаблоны и проверить:
			//1) Документ для ORDERS должен/не должен совпадать с СоздаваемыйДокументИзORDERS
			//2) Документ для INVOIC должен/не должен совпадать с документом для DESADV
			//Как только найдем, так его и выберем.
			
			ШаблонЗапросаЦепочкиДокументов_Поставщик = ИсточникДанных.Запрос;
			ТабСборки = ПолучитьТаблицуДляСборкиЗапросов("Поставщик");
			ЗаполнитьСоответствиеДокументовСообщений("Поставщик");
			
			//проверим
			ШаблонПодходит = Истина;
			
			ТипДокументаORDERS = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя");
			ТипДокументаDESADV = ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке");
			ТипДокументаINVOIC = ПолучитьТипЗначенияОбъекта("ИсходящийСчетФактура");
			
			Если INVOIC_Из_РТУ<>(ТипДокументаDESADV=ТипДокументаINVOIC) Тогда
				ШаблонПодходит = Ложь;
			КонецЕсли;
			
			Если СоздаваемыйДокументИзORDERS<>СтрЗаменить(ТипДокументаORDERS,"ДокументСсылка.","") Тогда
				ШаблонПодходит = Ложь;
			КонецЕсли;
			
			Если ШаблонПодходит Тогда
				УстановитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик",ИсточникДанных.Имя);
				Прервать;//нашли то, что надо
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ШаблонПодходит Тогда
			//не удалось найти нужный шаблон. Сломаемся принудительно. Сильно кастомные модули лучше обновить вручную: 
			//1. Пишем ПМ с активным макетом СКД под данную конфигурацию.
			//2. Убираем ВызватьИсключение, запускаем снова
			//3. Подключаем шаблон, настраиваем цепочку документов из него.
			
			//Главное, чтобы между 2 и 3 больше никто в модуле не работал.
			
			ВызватьИсключение "Не удалось определить цепочку документов для данной конфигурации";
		КонецЕсли;	
		
		//также нам надо сконвертировать параметры НеПоказыватьСоздатьРеализацию; НеПоказыватьПровестиЗаказ
		//И ОтправлятьDESADVпоПроведеннымРеализациям из "прочих настроек"
		
		НеПоказыватьПровестиЗаказ					= (ПолучитьКонстантуEDI("НеПоказыватьПровестиЗаказ")=Истина);
		НеПоказыватьСоздатьРеализацию				= (ПолучитьКонстантуEDI("НеПоказыватьСоздатьРеализацию")=Истина);
		ОтправлятьDESADVпоПроведеннымРеализациям	= (ПолучитьКонстантуEDI("ОтправлятьDESADVпоПроведеннымРеализациям")=Истина);
		
		УстановитьГлобальноеСвойство("ОПНД_DESADV",Не ОтправлятьDESADVпоПроведеннымРеализациям);
		
		УстановитьГлобальноеСвойство("НСД_"+СтрЗаменить(ТипДокументаDESADV,"ДокументСсылка.",""),НеПоказыватьСоздатьРеализацию);
		УстановитьГлобальноеСвойство("НПД_"+СтрЗаменить(ТипДокументаORDERS,"ДокументСсылка.",""),НеПоказыватьПровестиЗаказ);
		
	КонецЕсли;
	
	//При переходе на 4.02.005 эта функция будет запускаться 1 раз. При этом можно предположить, что ПМ с настройками СКД еще отсутствует.
	
	//и сбросим кэш
	ФинализироватьПодключаемыеМодули();
	ИнициализироватьПодключаемыеМодули();
	
КонецПроцедуры


//{{{ Конвертации из EDI в 1C

Функция КонвертироватьСообщениеEDIв1С(Сообщение) Экспорт
	
	//Двери покрепче справим, рядом на цепь посадим восемь больших, голодных псов.
	Если Сообщение.Направление <> "Входящее" Тогда
		ВызватьИсключение "Метод вызывается только для входящих сообщений";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Партнер) Тогда
		Сообщение.Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,Сообщение","Сообщение",Сообщение));
	КонецЕсли;
	
	КонвертироватьШапкуСообщенияEDIв1С(Сообщение);
	КонвертироватьТабличнуюЧастьСообщенияEDIв1С(Сообщение,"Товары");
	
	Сообщение.Отправитель1С = Сообщение.Партнер;
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеКонвертацииСообщенияEDIв1С",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение",
			Сообщение));
			
	Если РезультатПМ <> Неопределено Тогда
		Сообщение = РезультатПМ;
	КонецЕсли;

	Если СтандартнаяОбработкаEDI Тогда
	
		ПослеКонвертацииСообщенияEDIв1С(Сообщение);
		
	КонецЕсли;
		
КонецФункции

Функция КонвертироватьШапкуСообщенияEDIв1С(Сообщение)
	
	МетаданныеСообщения = ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	
	Для Каждого ПолеСообщения Из МетаданныеСообщения Цикл
		
		Если ПолеСообщения.ИмяТаблицы = Неопределено Тогда
			
			Если ПолеСообщения.Принадлежность = Неопределено Тогда
				
				Если ПолеСообщения.ВидСтруктурыEDI = Неопределено Тогда
					ТипEDI = ПолеСообщения.ТипEDI;
				Иначе
					ТипEDI = ПолеСообщения.ВидСтруктурыEDI;
				КонецЕсли;
				
				Если    ТипEDI = "Заказ" 
					ИЛИ ТипEDI = "Накладная" 
					ИЛИ ТипEDI = "Приемка" 
					ИЛИ ТипEDI = "СчетФактура" Тогда
					
					Если НЕ ЗначениеЗаполнено(ПолеСообщения.Тип1С) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				                                                         
				Если Сообщение.Свойство(ПолеСообщения.ИмяПоля+"EDI") Тогда // в структуру сообщений могли добавить новое поле
					РезультатКонвертации = КонвертироватьЗначениеEDIв1С(Сообщение[ПолеСообщения.ИмяПоля+"EDI"],ТипEDI,ПолеСообщения.Тип1С,Сообщение);
					
					Если НЕ РезультатКонвертации = Неопределено Тогда
						
						Сообщение[ПолеСообщения.ИмяПоля + "1С"] = РезультатКонвертации;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ОсобенностиКонвертацииТабличнойЧастиСообщенияEDIв1С(Сообщение,ИмяТабличнойЧасти)
	
	//привет Х5  EDI_An-354
	Если Сообщение.ТипСообщения = "RETDES" Тогда
		Для Каждого Стр Из Сообщение.Товары Цикл
			Стр.КодТовараПокупателя = УбратьВедущиеНули(Стр.КодТовараПокупателя);
			Стр.КодТовараПоставщика = УбратьВедущиеНули(Стр.КодТовараПоставщика);
		КонецЦикла;
	КонецЕсли;
	//
	
КонецПроцедуры

Функция КонвертироватьТабличнуюЧастьСообщенияEDIв1С(Сообщение,ИмяТабличнойЧасти) Экспорт
	
	ОсобенностиКонвертацииТабличнойЧастиСообщенияEDIв1С(Сообщение,ИмяТабличнойЧасти);

	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуля("КонвертироватьТабличнуюЧастьСообщенияEDIв1С",СтандартнаяОбработкаEDI,Новый Структура("Сообщение,ИмяТабличнойЧасти",Сообщение,ИмяТабличнойЧасти));
	Если СтандартнаяОбработкаEDI = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеСообщения = ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	
	Эталон = ПолучитьСтруктуруСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	ДополнитьСтруктуруСообщенияИзЭталона(Сообщение,Эталон);
	
	ТабличнаяЧастьСообщения = Сообщение[ИмяТабличнойЧасти];	
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		// выделяем набор GTIN КодТовараПокупателя КодТовараПоставщика КодЕдиницыИзмерения
		// для заполнения по ним полей Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения
		
		// значения по умолчанию
		ИмяКодТовараПокупателя = "КодТовараСторонний";
		ИмяКодТовараПоставщика = "КодТовараСвой";
		
		СтрокаКодаПокупателя = МетаданныеСообщения.Найти("КодТовараПокупателя","ИмяПоля");
		СтрокаКодаПоставщика = МетаданныеСообщения.Найти("КодТовараПоставщика","ИмяПоля");
		
		Если НЕ СтрокаКодаПокупателя = Неопределено Тогда
			ИмяКодТовараПокупателя = СтрокаКодаПокупателя.Тип1С;
		КонецЕсли;
		Если НЕ СтрокаКодаПоставщика = Неопределено Тогда
			ИмяКодТовараПоставщика = СтрокаКодаПоставщика.Тип1С;
		КонецЕсли;
		
		//ТаблицаТоваров = ТабличнаяЧастьСообщения.Скопировать(,"GTIN, КодТовараПокупателя, КодТовараПоставщика");
		ТаблицаТоваров = ТабличнаяЧастьСообщения.Скопировать(,"GTIN, КодТовараПокупателя, КодТовараПоставщика,КодЕдиницыИзмеренияEDI");
		
		//+махинация
		ТаблицаТоваров.Колонки.Добавить("КодЕдиницыИзмеренияEDI_нов",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(3)));
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("КодЕдиницыИзмеренияEDI"),"КодЕдиницыИзмеренияEDI_нов");
		ТаблицаТоваров.Колонки.Удалить("КодЕдиницыИзмеренияEDI");
		ТаблицаТоваров.Колонки.КодЕдиницыИзмеренияEDI_Нов.Имя = "КодЕдиницыИзмеренияEDI";
		//-махинация
		
		ТаблицаТоваров.Колонки.КодТовараПокупателя.Имя = ИмяКодТовараПокупателя;
		ТаблицаТоваров.Колонки.КодТовараПоставщика.Имя = ИмяКодТовараПоставщика;
		
		ТаблицаСоответствий = КонвертироватьТоварыEDIв1С(ТаблицаТоваров,Сообщение); // передаем сообщения, т.к. поиск номенклатуры может зависеть от полей шапки (контрагента, договора и проч.)
		
		ТаблицаСоответствий.Колонки[ИмяКодТовараПокупателя].Имя = "КодТовараПокупателя";
		ТаблицаСоответствий.Колонки[ИмяКодТовараПоставщика].Имя = "КодТовараПоставщика";
		
		ТабличнаяЧастьСообщения.Индексы.Добавить("GTIN, КодТовараПокупателя, КодТовараПоставщика");
		
		Для Каждого Стр Из ТаблицаСоответствий Цикл
			
			Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("GTIN",				Стр.GTIN);
				СтруктураОтбора.Вставить("КодТовараПокупателя",	Стр.КодТовараПокупателя);
				СтруктураОтбора.Вставить("КодТовараПоставщика",	Стр.КодТовараПоставщика);
				
				НайденныеСтроки = ТабличнаяЧастьСообщения.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
					
					СтрокаТоваров.Номенклатура					= Стр.Номенклатура;
					СтрокаТоваров.ХарактеристикаНоменклатуры	= Неопределено;
					СтрокаТоваров.ЕдиницаИзмерения				= Неопределено;
					
					Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
						СтрокаТоваров.ХарактеристикаНоменклатуры	= Стр.ХарактеристикаНоменклатуры;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
						СтрокаТоваров.ЕдиницаИзмерения				= Стр.ЕдиницаИзмерения;
					КонецЕсли;
					
					СтрокаТоваров.КоэффициентEDIВ1С				= Стр.КоэффициентEDIВ1С;
					//код единицы измерения мы можем взять и из входящего сообщения. А коэффициент - только из 1С.
					
				КонецЦикла;		
			КонецЕсли;
			
		КонецЦикла;
		
		// конвертируем поля таблицы товаров
		
		
		ОтборКонвертируемыхПолей = Новый Структура();
		ОтборКонвертируемыхПолей.Вставить("ИмяТаблицы", ИмяТабличнойЧасти);
		ОтборКонвертируемыхПолей.Вставить("Принадлежность", Неопределено);
		
		// отбираем поля, которые нужно конвертить
		КонвертируемыеПоля = МетаданныеСообщения.Скопировать(ОтборКонвертируемыхПолей);
		
		Если КонвертируемыеПоля.Количество()>0 Тогда
			
			Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьСообщения Цикл
				
				Для Каждого ПолеТоваров ИЗ КонвертируемыеПоля Цикл
					
					Если ПолеТоваров.ВидСтруктурыEDI = Неопределено Тогда
						ТипEDI = ПолеТоваров.ТипEDI;
					Иначе
						ТипEDI = ПолеТоваров.ВидСтруктурыEDI;
					КонецЕсли;
					
					РезультатКонвертации = КонвертироватьЗначениеEDIв1С(СтрокаТоваров[ПолеТоваров.ИмяПоля+"EDI"],ТипEDI,ПолеТоваров.Тип1С);
					
					Если НЕ РезультатКонвертации = Неопределено Тогда
						
						СтрокаТоваров[ПолеТоваров.ИмяПоля + "1С"] = РезультатКонвертации;
						
					КонецЕсли;
					
				КонецЦикла;
				
				СтрокаТоваров.Статус = КонвертироватьЗначениеEDIв1С(СтрокаТоваров.Статус, "Статус", "Статус");
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция КонвертироватьЗначениеEDIв1С(Значение,ТипEDI,Тип1С,Сообщение=Неопределено) Экспорт
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатКонвертации = ОбработкаСобытияПодключаемогоМодуля("КонвертироватьЗначениеEDIв1С",СтандартнаяОбработкаEDI,
			Новый Структура("ЗначениеEDI,ТипПоляEDI,ТипПоля1C,Сообщение",
			Значение, ТипEDI, Тип1С, Сообщение));

	Если Не СтандартнаяОбработкаEDI Тогда
		
		Возврат РезультатКонвертации;
		
	КонецЕсли;
	
	Если ТипEDI = "ЮрФизЛицо" Тогда
		
		Если НЕ ПустаяСтрока(Значение.GLN) Тогда
			
			Если Тип1С = "ТочкаДоставкиСторонняя" Тогда
				
				Возврат НайтиОбъектПоЗначениюСвойства("GLN_ТочкиДоставки",Значение.GLN); 
				
			ИначеЕсли Тип1С = "ТочкаДоставкиСвоя" Тогда
				
				Возврат НайтиОбъектПоЗначениюСвойства("GLN_НашейТочкиДоставки",Значение.GLN);
				
			ИначеЕсли Тип1С = "ЮрФизЛицоСвое" Тогда
				
				ЮрЛицо = НайтиОбъектПоЗначениюСвойства("GLN_Организации",Значение.GLN); 
				
				Если ВнешнееХранилище Тогда
					Если ТипЗнч(ЮрЛицо) = Тип("Строка") Тогда
						ЮрЛицо = ЗначениеИзСтрокиВнутр(ЮрЛицо);
					КонецЕсли;	
					Возврат ЮрЛицо;
				Иначе
					Возврат ЮрЛицо;
				КонецЕсли;
				
			ИначеЕсли Тип1С = "ЮрФизЛицоСтороннее" Тогда
				
				ЮрЛицо = НайтиОбъектПоЗначениюСвойства("GLN_Контрагента",Значение.GLN); 
				
				Если ВнешнееХранилище Тогда      
					Если ТипЗнч(ЮрЛицо) = Тип("Строка") Тогда
						ЮрЛицо = ЗначениеИзСтрокиВнутр(ЮрЛицо);
					КонецЕсли;	
					Возврат ЮрЛицо;
				Иначе
					Возврат ЮрЛицо;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипEDI = "УчастникОбмена" Тогда
		Если Тип1С = "ПодразделениеСвое" Тогда
			
			Возврат НайтиОбъектПоЗначениюСвойства("GLN_Организации",Значение.GLN);
			
		ИначеЕсли Тип1С = "ПодразделениеСтороннее" Тогда
			
			Возврат НайтиОбъектПоЗначениюСвойства("GLN_Партнера",Значение.GLN); 
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипEDI = "Документ" Тогда
		Если Тип1С = "ВходящийЗаказПокупателя" Тогда
			
			Возврат Неопределено; //по-идее можно будет поискать, для отказоустойчивости (не загружать несколько раз документ).
			                      //с другой стороны - тогда пожертвуем быстродействием
		ИначеЕсли Тип1С = "ВходящееУведомлениеОПриемке" Тогда
			
			Возврат Неопределено; //тоже нужно будет проверять
			
		ИначеЕсли Тип1С = "ВходящийСчетФактура" Тогда
			//для входящей СЧФ заполним
			ТипДокумента = ПолучитьТипЗначенияОбъекта("ВходящийСчетФактура",,Истина);
			
			Если ТипДокумента<>Неопределено Тогда
				
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ДокументЗаказ.Ссылка
				|ИЗ
				|	Документ."+ТипДокумента+" КАК ДокументЗаказ
				|ГДЕ
				|	ДокументЗаказ.Номер = &Номер
				|   И ДокументЗаказ.Дата > &ОграничениеПоДате
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДокументЗаказ.Дата УБЫВ";
				
				Запрос.УстановитьПараметр("Номер",СокрЛП(Значение.Номер));			   
				Запрос.УстановитьПараметр("ОграничениеПоДате",ДобавитьМесяц(ТекущаяДата(),-6));
				
				Возврат ПолучитьРезультатЗапроса(Запрос);
			Иначе//для данного документа не задан тип. Значит, мы не поставщик, или же не указан шаблон документов
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипEDI = "Заказ" Тогда
		Если Тип1С = "ВходящийЗаказПокупателя" 
		 ИЛИ Тип1С = "ИсходящийЗаказПоставщику" Тогда
			
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	КонтурEDI_Сообщения.Документ КАК Документ
			|ИЗ
			|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			|ГДЕ
			|	КонтурEDI_Сообщения.НомерДокумента = &НомерДокумента
			|	И КонтурEDI_Сообщения.ТипСообщения ПОДОБНО &ТипСообщения
			|	И КонтурEDI_Сообщения.Направление = &Направление
			|
			|УПОРЯДОЧИТЬ ПО
			|	КонтурEDI_Сообщения.ДатаДокумента УБЫВ";
			
			Запрос.УстановитьПараметр("НомерДокумента", СокрЛП(Значение.Номер));
			Запрос.УстановитьПараметр("ТипСообщения",	"ORDERS");
			Запрос.УстановитьПараметр("Направление",	?(Тип1С="ИсходящийЗаказПоставщику","Исходящее","Входящее"));
			
			Если ВнешнееХранилище Тогда      
				_Результат = ПолучитьРезультатЗапроса(Запрос, "Документ");
				Если ЗначениеЗаполнено(_Результат) Тогда Возврат ЗначениеИзСтрокиВнутр(_Результат) Иначе Возврат Неопределено КонецЕсли;
			Иначе
				Возврат ПолучитьРезультатЗапроса(Запрос, "Документ");
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
	
	Если ТипEDI = "Накладная" Тогда
		Если Тип1С = "ИсходящееУведомлениеОбОтгрузке" Тогда
			
			НайденныйДокумент = НайтиИПолучитьНакладную(Сообщение);
			Возврат НайденныйДокумент;
			
		ИначеЕсли Тип1С = "ВходящееУведомлениеОбОтгрузке" Тогда
			
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			
			Запрос.Текст = "ВЫБРАТЬ
			|	КонтурEDI_Сообщения.Документ КАК Документ
			|ИЗ
			|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			|ГДЕ
			|	КонтурEDI_Сообщения.НомерДокумента = &НомерДокумента
			|	И КонтурEDI_Сообщения.ТипСообщения ПОДОБНО &ТипСообщения
			|	И КонтурEDI_Сообщения.Направление = &Направление
			|
			|УПОРЯДОЧИТЬ ПО
			|	КонтурEDI_Сообщения.ДатаДокумента УБЫВ";
			
			Запрос.УстановитьПараметр("НомерДокумента", СокрЛП(Значение.Номер));
			Запрос.УстановитьПараметр("ТипСообщения",	"DESADV");
			Запрос.УстановитьПараметр("Направление",	"Входящее");
			
			Если ВнешнееХранилище Тогда      
				_Результат = ПолучитьРезультатЗапроса(Запрос, "Документ");
				Если ЗначениеЗаполнено(_Результат) Тогда Возврат ЗначениеИзСтрокиВнутр(_Результат) Иначе Возврат Неопределено КонецЕсли;
			Иначе
				Возврат ПолучитьРезультатЗапроса(Запрос, "Документ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипEDI = "ОбратныйЗаказ" Тогда
		
		Если Тип1С = "ИсходящийОбратныйЗаказ" Тогда
		
			ТипДокумента = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина);//предполагаем, что ORDERS и PORDERS относятся к одному типу документов
			
			Если ТипДокумента<>Неопределено и СокрЛП(Значение.Номер)<>"" и ЕстьЦифрыВСтроке_КонтурEDI(Значение.Номер) Тогда //нам нужен номер хоть в каком-то виде (пустые не искать - можем найти пустые номера заказов, не ищем по буквенно-символьному мусору)
				
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ДокументЗаказ.Ссылка
				|ИЗ
				|	Документ."+ТипДокумента+" КАК ДокументЗаказ
				|ГДЕ
				|	ДокументЗаказ.Номер = &Номер
				|   И ДокументЗаказ.Дата > &ОграничениеПоДате
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДокументЗаказ.Дата УБЫВ";
				
				Запрос.УстановитьПараметр("Номер",СокрЛП(Значение.Номер));			   
				Запрос.УстановитьПараметр("ОграничениеПоДате",ДобавитьМесяц(ТекущаяДата(),-6));
				
				Возврат ПолучитьРезультатЗапроса(Запрос);
			Иначе//для данного документа не задан тип. Значит, мы не поставщик, или же не указан шаблон документов
				Возврат Неопределено;
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипEDI = "Приемка" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипEDI = "Статус" Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат "";
		КонецЕсли;
		
		Если Значение = "Accepted" Тогда
			Возврат "Подтвержден";
		ИначеЕсли Значение = "Changed" Тогда
			Возврат "Уточнен";
		ИначеЕсли Значение = "Declined" Тогда
			Возврат "Отклонен";
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	
	
	Если ТипEDI = "СчетФактура" Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ТипEDI = "ТипСФ" Тогда
		Если Тип1С = "ВходящийСчетФактура" Тогда
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			Запрос.Текст = "ВЫБРАТЬ
			               |	КонтурEDI_Сообщения.Документ КАК Документ
			               |ИЗ
			               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			               |ГДЕ
			               |	КонтурEDI_Сообщения.НомерДокумента = &НомерДокумента
			               |	И КонтурEDI_Сообщения.ТипСообщения ПОДОБНО ""INVOIC""
			               |	И КонтурEDI_Сообщения.Направление = ""Входящее""
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	КонтурEDI_Сообщения.ДатаДокумента УБЫВ";
			Запрос.УстановитьПараметр("НомерДокумента", СокрЛП(Значение.Номер));
			Если ВнешнееХранилище Тогда      
				_Результат = ПолучитьРезультатЗапроса(Запрос, "Документ");
				Если ЗначениеЗаполнено(_Результат) Тогда Возврат ЗначениеИзСтрокиВнутр(_Результат) Иначе Возврат Неопределено КонецЕсли;
			Иначе
				Возврат ПолучитьРезультатЗапроса(Запрос, "Документ");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипEDI = "Валюта" Тогда
		
		Если ИмяКонфигурации1С = "Розница" Тогда
			
			ВалютаРубль = Неопределено;
			
		ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
			
			ВалютаРубль = Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();	
			
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			
			ВалютаРубль = "RUB";
			
		ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда
			
			ВалютаРубль = Константы.ВалютаУчета.Получить();
			
		Иначе
			
			ВалютаРубль = Константы.ВалютаРегламентированногоУчета.Получить();
			
		КонецЕсли;
		
		Возврат ВалютаРубль;
		
	КонецЕсли;
	
	// ТОВАРЫ
	
	Если ТипEDI = "КодЕдиницы" Тогда
		
		Возврат Значение;
		
	КонецЕсли;
	
	Если ТипEDI = "СтавкаНДС" Тогда
		//ткпт
		Если ИмяКонфигурации1С = "ТКПТ" Тогда
		    Если Значение = "БезНДС" ИЛИ Значение = "NOT_APPLICABLE" Тогда
				Возврат Справочники.СтавкиНДС.БезНДС;
			ИначеЕсли Значение = "18" Тогда
				Возврат Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;
			ИначеЕсли Значение = "" Тогда
				Возврат Неопределено;
			ИначеЕсли Значение = "10" ИЛИ Значение = "0" Тогда
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				|	СтавкиНДС.Ссылка
				|ИЗ
				|	Справочник.СтавкиНДС КАК СтавкиНДС
				|ГДЕ
				|	СтавкиНДС.Ставка = &Ставка";
				
				Запрос.УстановитьПараметр("Ставка",Число(Значение));
				Возврат ПолучитьРезультатЗапроса(Запрос);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" или ИмяКонфигурации1С = "УФ_УНФ" Тогда
			Если Значение = "БезНДС" ИЛИ Значение = "NOT_APPLICABLE" Тогда
				Возврат ?(ИмяКонфигурации1С = "УФ_УНФ",Справочники.СтавкиНДС.НайтиПоРеквизиту("НеОблагается",Истина),Справочники.СтавкиНДС.БезНДС);
			ИначеЕсли Значение = "0" ИЛИ Значение = "10" ИЛИ Значение = "18" ИЛИ Значение = "20" Тогда 
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СтавкиНДС.Ссылка
				|ИЗ
				|	Справочник.СтавкиНДС КАК СтавкиНДС
				|ГДЕ
				|	СтавкиНДС.Ставка = &Ставка";
				Запрос.УстановитьПараметр("Ставка",Число(Значение));
				Возврат ПолучитьРезультатЗапроса(Запрос);
			ИначеЕсли Значение = "" Тогда
				Возврат Неопределено;	
			Иначе
				Возврат Неопределено;
			КонецЕсли;		
		Иначе
		
			Если Значение = "NOT_APPLICABLE" Тогда
				Возврат Перечисления.СтавкиНДС.БезНДС;
			ИначеЕсли Значение = "18" Тогда
				Возврат Перечисления.СтавкиНДС.НДС18;
			ИначеЕсли Значение = "10" Тогда
				Возврат Перечисления.СтавкиНДС.НДС10;
			ИначеЕсли Значение = "0" Тогда
				Возврат Перечисления.СтавкиНДС.НДС0;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		//ткпт
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипEDI = "Страна" Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ТипEDI = "НомерГТД" Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	
	//	Сообщить("Не нашлась пара EDI: "+ТипEDI+" и 1С:"+Тип1С);
	
	// если не нашлась пара, то вернуть error
	
КонецФункции

Функция ОпределитьПартнераСообщения(Сообщение) Экспорт
	
	//перенаправление в функцию ОпределитьПартнера(Параметры) 
	Возврат ОпределитьПартнера(Новый Структура("ТипЗначения,Сообщение","Сообщение",Сообщение));	
	
КонецФункции

//}}}


//{{{ Конвертации из 1С в EDI

Функция КонвертироватьСообщение1СвEDI(Сообщение) Экспорт
	
	КонвертироватьШапкуСообщения1СвEDI(Сообщение);
	КонвертироватьТабличнуюЧастьСообщения1СвEDI(Сообщение,"Товары");
	
	Если Сообщение.ТипСообщения = "ALCRPT" Тогда
		
	//	ЗаполнитьАлкогольныеРеквизиты(Сообщение); //пока заполняем только в ПМ
		
		РезультатЗаполнения = ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьАлкогольныеРеквизиты",,
				Новый Структура("Сообщение",
				Сообщение));
		
		СтарНастройкаСвоиРеквизиты =  ПараметрыПользователяEDI.НеБратьСвоиАдресаИз1С;
		ПараметрыПользователяEDI.НеБратьСвоиАдресаИз1С = Ложь;
		СтарНастройкаЧужиеРеквизиты =  ПараметрыПользователяEDI.НеБратьАдресаПартнераИз1С;
		ПараметрыПользователяEDI.НеБратьАдресаПартнераИз1С = Ложь;
		
		Для Каждого Стр ИЗ Сообщение.Товары Цикл
			Если ЗначениеЗаполнено(Стр.АлкоПроизводитель1С) Тогда
				Стр.АлкоПроизводительEDI			= КонвертироватьЗначение1СвEDI(Стр.АлкоПроизводитель1С,				"ЮрФизЛицоСтороннее","ЮрФизЛицо");
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.АлкоИностранныйПроизводитель1С) Тогда
				Стр.АлкоИностранныйПроизводительEDI = КонвертироватьЗначение1СвEDI(Стр.АлкоИностранныйПроизводитель1С,	"ЮрФизЛицоСтороннее","ЮрФизЛицо");
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.Страна1С) Тогда
				Стр.СтранаEDI = КонвертироватьЗначение1СвEDI(Стр.Страна1С,	"Страна","Страна");
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.НомерГТД1С) Тогда
				Стр.НомерГТДEDI = КонвертироватьЗначение1СвEDI(Стр.НомерГТД1С,	"НомерГТД","НомерГТД");
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыПользователяEDI.НеБратьСвоиАдресаИз1С = СтарНастройкаСвоиРеквизиты;
		ПараметрыПользователяEDI.НеБратьАдресаПартнераИз1С = СтарНастройкаЧужиеРеквизиты;
		
	КонецЕсли;
	
	СтандартнаяОбработкаEDI = Истина;

	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеКонвертацииСообщения1СвEDI",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение",
			Сообщение));
			
	Если РезультатПМ <> Неопределено Тогда
		Сообщение = РезультатПМ;
	КонецЕсли;	
	
	Если СтандартнаяОбработкаEDI Тогда
	
		ПослеКонвертацииСообщения1СвEDI(Сообщение);
		
	КонецЕсли;
	
КонецФункции

Функция КонвертироватьШапкуСообщения1СвEDI(Сообщение)
	
	МетаданныеСообщения = ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
	Для каждого ПолеСообщения Из МетаданныеСообщения Цикл
		
		Если ПолеСообщения.ИмяТаблицы = Неопределено Тогда
			
			Если ПолеСообщения.Принадлежность = Неопределено Тогда
				
				Если ПолеСообщения.ВидСтруктурыEDI = Неопределено Тогда
					ТипEDI = ПолеСообщения.ТипEDI;
				Иначе
					ТипEDI = ПолеСообщения.ВидСтруктурыEDI;
				КонецЕсли;
				
				Если ТипEDI = "Заказ" ИЛИ ТипEDI = "Накладная" ИЛИ ТипEDI = "Приемка" Тогда
					Если НЕ ЗначениеЗаполнено(ПолеСообщения.Тип1С) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				РезультатКонвертации = КонвертироватьЗначение1СвEDI(Сообщение[ПолеСообщения.ИмяПоля+"1С"],ПолеСообщения.Тип1С,ТипEDI,Сообщение);
				
				Если НЕ РезультатКонвертации = Неопределено Тогда
					
					Сообщение[ПолеСообщения.ИмяПоля + "EDI"] = РезультатКонвертации;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция КонвертироватьЗначение1СвEDI(Значение,Тип1С,ТипEDI,Сообщение =  Неопределено) Экспорт
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатКонвертации = ОбработкаСобытияПодключаемогоМодуля("КонвертироватьЗначение1СвEDI",СтандартнаяОбработкаEDI,
			Новый Структура("Значение1С, ТипПоля1C, ТипПоляEDI, Сообщение",
			Значение, Тип1С, ТипEDI, Сообщение));

	Если Не СтандартнаяОбработкаEDI Тогда
		
		Возврат РезультатКонвертации;
		
	КонецЕсли;
	
	Если ТипEDI = "ЮрФизЛицо" Тогда
		
		НеБратьСвоиАдресаИз1С = (ПараметрыПользователяEDI.НеБратьСвоиАдресаИз1С = Истина);
		НеБратьАдресаПартнераИз1С = (ПараметрыПользователяEDI.НеБратьАдресаПартнераИз1С = Истина);
		
		Если Тип1С = "ЮрФизЛицоСвое" Тогда
			Возврат ПреобразоватьЮрФизЛицо_1С_в_EDI(Значение,"Юридический",НеБратьСвоиАдресаИз1С);
		ИначеЕсли Тип1С = "Грузоотправитель" Тогда
			Возврат ПреобразоватьЮрФизЛицо_1С_в_EDI(Значение,"Фактический",НеБратьСвоиАдресаИз1С);
		ИначеЕсли Тип1С = "ЮрФизЛицоСтороннее" Тогда
			Возврат ПреобразоватьЮрФизЛицо_1С_в_EDI(Значение,"Юридический",НеБратьАдресаПартнераИз1С);
		ИначеЕсли Тип1С="ТочкаДоставкиСторонняя" Тогда
			Возврат ПреобразоватьЮрФизЛицо_1С_в_EDI(Значение,"Фактический",НеБратьАдресаПартнераИз1С);
		ИначеЕсли Тип1С="ТочкаДоставкиСвоя" Тогда
			Возврат ПреобразоватьЮрФизЛицо_1С_в_EDI(Значение,"Фактический",НеБратьСвоиАдресаИз1С);
		КонецЕсли;
	КонецЕсли;
	
	Если Тип1С = "ВходящийЗаказПокупателя" 
		Или Тип1С = "ВходящийОбратныйЗаказ" Тогда
		//здесь номер и дату будем брать из входящего сообщения по данному документу
		Если ТипEDI = "ОбратныйЗаказ"
			Или ТипEDI = "Заказ" Тогда
			
			СтруктураДатаНомер = Новый Структура("Номер,Дата");
			
			Если Значение <> Неопределено Тогда
				Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
				Запрос.Текст = "ВЫБРАТЬ
				|	КонтурEDI_Сообщения.НомерДокумента,
				|	КонтурEDI_Сообщения.ДатаДокумента
				|ИЗ
				|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
				|ГДЕ
				|	КонтурEDI_Сообщения.ТипСообщения = &ТипСообщения
				|	И КонтурEDI_Сообщения.Направление = &Направление
				|	И КонтурEDI_Сообщения.Документ = &Документ";
				
				Запрос.УстановитьПараметр("Направление",  "Входящее");
				Запрос.УстановитьПараметр("ТипСообщения", ?(Тип1С = "ВходящийОбратныйЗаказ","PORDERS","ORDERS"));
				Запрос.УстановитьПараметр("Документ",	  ПреобразоватьЗначениеДляВнешнегоХранилища(Значение));
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					СтруктураДатаНомер.Номер	= Выборка.НомерДокумента;
					СтруктураДатаНомер.Дата		= Выборка.ДатаДокумента;
				КонецЕсли;
			КонецЕсли;
			
			Возврат СтруктураДатаНомер;	
			
		КонецЕсли;
		
	ИначеЕсли Тип1С = "ИсходящийОбратныйЗаказ" 
		Или Тип1С = "ИсходящийОтветНаЗаказ" 
		Или Тип1С = "ИсходящийЗаказПоставщику"
		Или Тип1С = "ИсходящееУведомлениеОПриемкеВозврата"
		Или Тип1С = "ИсходящееУведомлениеОПриемке" Тогда

		Если ТипEDI = "Документ"
			Или ТипEDI = "ОбратныйЗаказ" 
			Или ТипEDI = "Заказ"
			Или ТипEDI = "Приемка" Тогда
			
			СтруктураДатаНомер = Новый Структура("Номер,Дата");
			Если ЗначениеЗаполнено(Значение) Тогда
				СтруктураДатаНомер.Номер	= Значение.Номер;
				СтруктураДатаНомер.Дата		= Значение.Дата;
			КонецЕсли;
			
			Возврат СтруктураДатаНомер;
			
		КонецЕсли;
		
	ИначеЕсли Тип1С = "ИсходящееУведомлениеОбОтгрузке"
		Или Тип1С = "ИсходящийСчетФактура" Тогда
		//для DESADV и INVOIC берем номера документов такие же, как в печатных формах, т.к. эти документы потом в Диадок передаются.
		
		Если ТипEDI = "Документ" ИЛИ ТипEDI = "Накладная" ИЛИ ТипEDI = "СчетФактура" Тогда
			
			Если ТипEDI = "СчетФактура" Тогда
				СтруктураДатаНомер = Новый Структура("Номер,Дата,Исправление,НомерИсправления,ДатаИсправления,ДиадокID");
			Иначе
				СтруктураДатаНомер = Новый Структура("Номер,Дата");
			КонецЕсли;	
			НомерДокумента = ПолучитьНомерНаПечать_КонтурEDI(Значение);//попробуем получить типовыми методами
			Если Не ЗначениеЗаполнено(НомерДокумента) Тогда
				НомерДокумента = СокрЛП(Значение.Номер);//заполним напрямую
			КонецЕсли;	

			СтруктураДатаНомер.Номер	= НомерДокумента;
			СтруктураДатаНомер.Дата		= Значение.Дата;
			
			Возврат СтруктураДатаНомер;
			
		КонецЕсли;
		
	ИначеЕсли Тип1С = "ВходящееУведомлениеОбОтгрузке" Тогда
		//TODO продумать возможность брать данные из входящего сообщения. Видимо, расчет был на работу без входящего DESADV на стороне сети.
		Если ТипEDI = "Накладная" Тогда
			
			СтруктураДатаНомер = Новый Структура("Номер,Дата");
			
			Если ИмяКонфигурации1С = "ТКПТ" Тогда
				СтруктураДатаНомер.Номер	= Значение.ВхДокНомер;
				СтруктураДатаНомер.Дата		= Значение.ВхДокДата;
			ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
				СтруктураДатаНомер.Номер	= Значение.НомерДокумента;
				СтруктураДатаНомер.Дата		= Значение.ДатаДокумента;
			ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
				СтруктураДатаНомер.Номер	= Значение.ВходящийНомер;
				СтруктураДатаНомер.Дата		= Значение.ДатаСчетаФактуры;
			Иначе
				СтруктураДатаНомер.Номер	= Значение.НомерВходящегоДокумента;
				СтруктураДатаНомер.Дата		= Значение.ДатаВходящегоДокумента;
			КонецЕсли;
			
			Возврат СтруктураДатаНомер;
			
		КонецЕсли;
		
	ИначеЕсли Тип1С = "ПодразделениеСвое" Тогда
		
		//очень древний код, рассчитанный на работу с Подразделениями в окне "Структура компании"
		//вместо этого в 044 релизе появилась работа с несколькими GLN, и отправителя теперь будем определять по организации
		СтруктураУчастникОбмена = Новый Структура("GLN");
		
		//получим список организаций
		
		СписокЮрЛиц = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
		НужнаяСтрока=СписокЮрЛиц.Найти(Сообщение.Отправитель1С,"ЮрФизЛицо");
		Если НужнаяСтрока<>Неопределено Тогда
			СтруктураУчастникОбмена.GLN=НужнаяСтрока.GLN;
		КонецЕсли;
		
		//но если все-таки надо отправителем указать именно основной GLN, то раскомментировать строки ниже
		
		Если Не ЗначениеЗаполнено(СтруктураУчастникОбмена.GLN) Тогда
			//со стороны сети мы не будем заполнять отправителя, и в этом случае отправителем будем брать основной GLN
			//т.к. сети у нас в админке заведены как сущность со многими точками доставки и юр.лицами, у которых есть объединяющий их общий GLN
			//а поставщики заведены как отдельные записи
			ОсновнойGLN = ПолучитьЗначениеСвойстваОбъектаEDI(Неопределено, "GLN_Основной");
			Если Не ОсновнойGLN = Неопределено Тогда
				СтруктураУчастникОбмена.GLN = ОсновнойGLN;
			КонецЕсли;
		КонецЕсли;
		
		Возврат СтруктураУчастникОбмена;
		
	ИначеЕсли Тип1С = "ПодразделениеСтороннее" Тогда
		
		GLN = "";
		
		Если ОпределитьКемМыЯвляемся(Сообщение) = "Поставщик" Тогда
			
			Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Покупатель1С));
			
		Иначе
			
			Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Продавец1С));
			
		КонецЕсли;
		
		Если Партнер = Неопределено 
			И ЗначениеЗаполнено(Сообщение.Партнер) Тогда
			Партнер = Сообщение.Партнер;
		КонецЕсли;
		
		Если НЕ Партнер = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(Сообщение.Получатель1С) Тогда
				Сообщение.Получатель1С = Партнер;
			КонецЕсли;
			
			GLN = ПолучитьЗначениеСвойстваОбъектаEDI(Партнер,"GLN_Партнера");
			
		КонецЕсли;
		
		СтруктураУчастникОбмена = Новый Структура("GLN");
		
		СтруктураУчастникОбмена.GLN = GLN;
		
		Возврат СтруктураУчастникОбмена;
		
	ИначеЕсли Тип1С = "Валюта" Тогда
		
		Возврат "RUB";
		
	ИначеЕсли Тип1С = "КодЕдиницы" Тогда
		
		Попытка
			Если Значение<>Неопределено Тогда
				Если Найти(Значение,"кг")<>0 Тогда
					Возврат "KGM";
				Иначе
					Возврат "PCE";
				КонецЕсли;
			КонецЕсли;
		Исключение
			Возврат "PCE";
		КонецПопытки;
		
		Возврат "PCE";
		
	ИначеЕсли Тип1С = "СтавкаНДС" Тогда
		
		Если ИмяКонфигурации1С = "АСТОР" Тогда
			
			Если ЗначениеЗаполнено(Значение) Тогда
				Если Значение.Ставка = 0 ИЛИ Значение.Ставка = 10 ИЛИ Значение.Ставка = 18 ИЛИ Значение.Ставка = 20 Тогда
					Возврат Строка(Значение.Ставка);
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
			
			Если Значение = Перечисления.СтавкиНДС.БезНДС Тогда
				Возврат "NOT_APPLICABLE";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС18 Тогда
				Возврат "18";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС10 Тогда
				Возврат "10";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС0 Тогда
				Возврат "0";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС10_110 Тогда
				Возврат "10/110";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС18_118 Тогда
				Возврат "18/118";
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда
			
			Если ЗначениеЗаполнено(Значение) Тогда
				Если Значение.НеОблагается = Истина Тогда
					Возврат "NOT_APPLICABLE";
				ИначеЕсли Значение.Ставка = 18 Тогда
					Возврат "18";
				ИначеЕсли Значение.Ставка = 10 Тогда
					Возврат "10";
				ИначеЕсли Значение.Ставка = 0 Тогда
					Возврат "0";
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли Не ИмяКонфигурации1С = "ТКПТ" Тогда
		
			Если Значение = Перечисления.СтавкиНДС.БезНДС Тогда
				Возврат "NOT_APPLICABLE";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС18 Тогда
				Возврат "18";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС10 Тогда
				Возврат "10";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС0 Тогда
				Возврат "0";
			ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС20 Тогда
				Возврат "20";
			КонецЕсли;			
			
			Если Не ИмяКонфигурации1С = "Розница" Тогда
				
				// эти значения хоть и конвертируются, но валидацию не пройдут	
				Если Значение = Перечисления.СтавкиНДС.НДС10_110 Тогда
					Возврат "10/110";
				ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС18_118 Тогда
					Возврат "18/118";
				ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС20_120 Тогда
					Возврат "20/120";
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если Значение = Справочники.СтавкиНДС.БезНДС Тогда
				Возврат "NOT_APPLICABLE";
			ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
				Если Значение.Ставка = 18 Тогда
					Возврат "18";
				ИначеЕсли Значение.Ставка = 10 Тогда
					Возврат "10";
				ИначеЕсли Значение.Ставка = 0 Тогда
					Возврат "0";
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Неопределено;
		
	ИначеЕсли Тип1С = "Страна" Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат Значение;
		КонецЕсли;
		
		ЕстьРеквизитКодАльфа2 = ЕстьРеквизитОбъекта_Контур(Значение,"КодАльфа2");
		
		Если ЕстьРеквизитКодАльфа2
			И ЗначениеЗаполнено(Значение.КодАльфа2) Тогда
			//В некоторых типовых конфигурациях присутствует поле "КодАльфа2" в справочнике "КлассификаторыСтранМира"
			//Если так, воспользуемся им.
			Возврат Значение.КодАльфа2;
			
		Иначе	//поищем по классификатору
			
			СписокАльфа2	= ЗагрузитьКлассификаторИзМакета("КодСтраныАльфа2");
			КодАльфа2		= СписокАльфа2.НайтиПоЗначению(Значение.Код);
			
			Возврат ?(КодАльфа2 = Неопределено, "", КодАльфа2.Представление);
			
		КонецЕсли;
		
	ИначеЕсли Тип1С = "НомерГТД" Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли Тип1С = "Договор" Тогда
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			И ЕстьРеквизитОбъекта_Контур(Значение,"Дата")
			И ЕстьРеквизитОбъекта_Контур(Значение,"Номер")
		Тогда
			СтруктураДатаНомер = Новый Структура("Номер,Дата",Значение.Номер,Значение.Дата);
		Иначе
			//например, в БП 1.6 нет таких реквизитов у Договора
			СтруктураДатаНомер = Новый Структура("Номер,Дата");
		КонецЕсли;	
		
		Возврат СтруктураДатаНомер;
		
	КонецЕсли;
	
КонецФункции

Функция КонвертироватьТовары1СвEDI(ТаблицаТоваров, МыПоставщик = Истина, Партнер, КонвертироватьСтавкуНДС = Ложь, ИскатьТоварПоШК =  Ложь, ДокументТоваров = Неопределено, ТипСообщения = Неопределено)
	
	//на рефакторинг: параметр КонвертироватьСтавкуНДС нигде не используется.
	
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаТоваров,"GTIN,КодТовараПокупателя,КодТовараПоставщика");
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаТоваров,"КоэффициентEDIВ1С,КодЕдиницыИзмеренияEDI");//по идее достаточно КоэффициентEDIВ1С, а КодЕдиницыИзмеренияEDI будет где-то еще
	
	//ТаблицаКонвертации = ТаблицаТоваров.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
	Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
		ТаблицаКонвертации = ТаблицаТоваров.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
	Иначе
		ТаблицаКонвертации = ТаблицаТоваров.Скопировать(,"Номенклатура, ЕдиницаИзмерения");
		ТаблицаКонвертации.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("NULL,Строка",,Новый КвалификаторыСтроки(1)));//заглушка для конфигураций, где нет ХарактеристикНоменклатуры и есть внешнее хранилище
	КонецЕсли;
	
	ТаблицаСоответствий = ПолучитьТаблицуСоответствийДляТоваров1С(ТаблицаКонвертации,Партнер,ИскатьТоварПоШК);
	
	// Несколько товаров сети к одному товару поставщика (-
	ТаблицаТоваровВходящегоСообщения = Неопределено;
	
	НастройкаТолькоПоШК					= ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СинхронизироватьТоварыТолькоПоGTIN");
	НастройкаТолькоПоВнутреннемуКоду	= ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СинхронизироватьТоварыТолькоПоКодуПартнера");
	
	Если ЗначениеЗаполнено(ДокументТоваров) Тогда
		Если ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "НесколькоТоваровСетиНаОдинТоварПоставщика") = Истина Тогда
			
			ТаблицаТоваров.Колонки.Добавить("ПризнакНашлиВоВходящем");
			
			Если ЕстьКоррИспрСФ И ТипЗнч(ДокументТоваров) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ДокументДляORDERS = НайтиСвязанныйДокументПоТипуСообщения(ПолучитьИсходныйДокументОтгрузкиКорректировкиРеализации(ДокументТоваров),"ORDERS");
			ИначеЕсли НЕ ТипСообщения = "RETREC" Тогда
				ДокументДляORDERS = НайтиСвязанныйДокументПоТипуСообщения(ДокументТоваров,"ORDERS");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументДляORDERS) Тогда
				ВходящийORDERS = ПрочитатьСообщение(,ДокументДляORDERS,"ORDERS","Входящее");
				Если ЗначениеЗаполнено(ВходящийORDERS) Тогда
					ТаблицаТоваровВходящегоСообщения = ВходящийORDERS.Товары;	
				Иначе
					ДокументДляRECADV = НайтиСвязанныйДокументПоТипуСообщения(ДокументТоваров,"RECADV");
					Если ЗначениеЗаполнено(ДокументДляRECADV) Тогда
						ВходящийRECADV = ПрочитатьСообщение(,ДокументДляRECADV,"RECADV","Входящее");
						Если ЗначениеЗаполнено(ВходящийRECADV) Тогда
							ТаблицаТоваровВходящегоСообщения = ВходящийRECADV.Товары;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			СтандартнаяОбработкаEDI = Истина;
			ПараметрыПМ = Новый Структура;
			ПараметрыПМ.Вставить("ТипСообщения",		ТипСообщения);
			ПараметрыПМ.Вставить("ДокументТоваров",		ДокументТоваров);
			ПараметрыПМ.Вставить("ТаблицаТоваров",		ТаблицаТоваров);
			ПараметрыПМ.Вставить("ТаблицаСоответствий",	ТаблицаСоответствий);
			ПараметрыПМ.Вставить("ТаблицаТоваровВходящегоСообщения",	ТаблицаТоваровВходящегоСообщения);
			
			ТаблицаТоваровПМ = ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьТаблицуТоваровПоВходящемуСообщению",СтандартнаяОбработкаEDI,ПараметрыПМ);
			Если НЕ СтандартнаяОбработкаEDI Тогда
				Возврат ТаблицаТоваровПМ;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// -)
	
	ЕстьНаименованиеПартнера = Ложь;
	Если НЕ ТаблицаСоответствий.Колонки.Найти("НаименованиеПартнера") = Неопределено
		И НЕ ТаблицаТоваров.Колонки.Найти("Наименование") = Неопределено Тогда
		ЕстьНаименованиеПартнера = Истина;
	КонецЕсли;

	Для Каждого Стр ИЗ ТаблицаСоответствий Цикл
		
		Если ЗначениеЗаполнено(Стр.GTIN) ИЛИ ЗначениеЗаполнено(Стр.КодТовараСвой) ИЛИ ЗначениеЗаполнено(Стр.КодТовараСторонний) Тогда
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура",				Стр.Номенклатура);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения",			Стр.ЕдиницаИзмерения);
			Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",	Стр.ХарактеристикаНоменклатуры);
			КонецЕсли;	
			
			НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
				
				// Несколько товаров сети к одному товару поставщика (-
				Если ЗначениеЗаполнено(ТаблицаТоваровВходящегоСообщения) Тогда
					
					Если СтрокаТоваров.ПризнакНашлиВоВходящем = Истина Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураОтбораСтрокЗаказа = Новый Структура;
					
					Если ЭтоОбратнаяОтгрузка(ТипСообщения) Тогда
						ТекКодТовараПокупателя = Стр.КодТовараСвой;
					Иначе
						ТекКодТовараПокупателя = Стр.КодТовараСторонний;
					КонецЕсли;
						
					Если НастройкаТолькоПоШК = Истина Тогда
						СтруктураОтбораСтрокЗаказа.Вставить("GTIN",Стр.GTIN);
					ИначеЕсли НастройкаТолькоПоВнутреннемуКоду = Истина Тогда
						СтруктураОтбораСтрокЗаказа.Вставить("КодТовараПокупателя",ТекКодТовараПокупателя);
					Иначе
						СтруктураОтбораСтрокЗаказа.Вставить("GTIN",Стр.GTIN);
						СтруктураОтбораСтрокЗаказа.Вставить("КодТовараПокупателя",ТекКодТовараПокупателя);
					КонецЕсли;
						
					НайденныеКодыЗаказа = ТаблицаТоваровВходящегоСообщения.НайтиСтроки(СтруктураОтбораСтрокЗаказа);
					
					Если НайденныеКодыЗаказа.Количество()>0 Тогда
						СтрокаТоваров.ПризнакНашлиВоВходящем = Истина;
					КонецЕсли;
					
				КонецЕсли;
				// -)  
				
				Если ЗначениеЗаполнено(Стр.GTIN) Тогда
					СтрокаТоваров.GTIN = ПривестиGTIN(Стр.GTIN);
				КонецЕсли;	
					
				Если МыПоставщик И НЕ ЭтоОбратнаяОтгрузка(ТипСообщения) Тогда
					Если ЗначениеЗаполнено(Стр.КодТовараСторонний) Тогда
						СтрокаТоваров.КодТовараПокупателя = Стр.КодТовараСторонний;
					КонецЕсли;	
					СтрокаТоваров.КодТовараПоставщика = Стр.КодТовараСвой;
				Иначе
					СтрокаТоваров.КодТовараПокупателя = Стр.КодТовараСвой;
					СтрокаТоваров.КодТовараПоставщика = Стр.КодТовараСторонний;
				КонецЕсли;
				Если ПроверитьНаличиеРеквизитовПересчета()
					И Не ТипСообщения = "PRICELIST" Тогда 
					СтрокаТоваров.КодЕдиницыИзмеренияEDI	= Стр.КодЕдиницыИзмеренияEDI;
					СтрокаТоваров.КоэффициентEDIВ1С			= Стр.КоэффициентEDIВ1С;
				КонецЕсли;
				Если ЕстьНаименованиеПартнера Тогда
					Если ЗначениеЗаполнено(Стр.НаименованиеПартнера) Тогда
						СтрокаТоваров.Наименование = Стр.НаименованиеПартнера;
					КонецЕсли;
				КонецЕсли;
		
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КонвертироватьСтавкуНДС Тогда
		Если ТаблицаТоваров.Колонки.Найти("СтавкаНДС")<>Неопределено Тогда
			Для каждого Стр Из ТаблицаТоваров Цикл
				
				Стр.СтавкаНДС = КонвертироватьЗначение1СвEDI(Стр.СтавкаНДС,"СтавкаНДС","СтавкаНДС");
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

//старое название - КонвертироватьТовары1СвEDI_БМИ
Функция ПолучитьТаблицуСоответствийДляТоваров1С(ТаблицаТоваров, ВладелецСпискаТоваров, ИскатьТоварПоШК =  Ложь) Экспорт
	
	ЗапросКонвертацииТоваров1СвEDI = ИнициализироватьЗапрос_КонтурEDI(Ложь);
	ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("ИскатьТоварПоШК",ИскатьТоварПоШК);
	
	//1. Передадим ТаблицаТоваров в параметры запроса и закинем во временную таблицу "ТабТоваров". Попутно протянем в поле "КодТовараСвой" код товара из справочника "Номенклатура" или его местного аналога.
	
	ЗапросКонвертацииТоваров1СвEDI.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Номенклатура КАК Номенклатура,
	|	Таб.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Таб.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ _ТабТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_ТабТоваров.Номенклатура,
	|	_ТабТоваров.ХарактеристикаНоменклатуры,
	|	_ТабТоваров.ЕдиницаИзмерения,
	|	_ТабТоваров.Номенклатура.Код КАК КодТовараСвой
	|ПОМЕСТИТЬ ТабТоваров
	|ИЗ
	|	_ТабТоваров КАК _ТабТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ _ТабТоваров"
	;
	
	//2. Соединим ТабТоваров с РС "КонтурEDI_СоответствияТоваров"
	//	и дополнительно с РС "Штрихкоды" , если мы в режиме покупателя
	
	Если ИскатьТоварПоШК Тогда//мы торговая сеть
		
		ТекстЗапросаПоШтрихкодам = ПолучитьТекстЗапросаПоШтрихкодамНоменклатуры();//все запросы убраны в макет СКД с возможностью кастомизации через ПМ.
		
		ЗапросКонвертацииТоваров1СвEDI.Текст = ЗапросКонвертацииТоваров1СвEDI.Текст 
		+ " 
		|; 
		|" 
		+ ТекстЗапросаПоШтрихкодам;//проверить ВХ
		
		ТекстЗапросаПоРегиструСоответствий = 
		"ВЫБРАТЬ
		|	ТабТоваров.Номенклатура,
		|	ТабТоваров.ХарактеристикаНоменклатуры,
		|	ТабТоваров.ЕдиницаИзмерения,
		|	ТабТоваров.КодТовараСвой,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодЕдиницыИзмеренияEDI, """") КАК КодЕдиницыИзмеренияEDI,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.НаименованиеПартнера, """") КАК НаименованиеПартнера,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.GTIN, ВТШтрихкодыТоваров.GTIN) КАК GTIN,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодТовараПартнера, """") КАК КодТовараСторонний,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КоэффициентEDIВ1С, """") КАК КоэффициентEDIВ1С
		|ИЗ
		|	ТабТоваров КАК ТабТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
		|			КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
		|			КонтурEDI_СоответствияТоваров.ЕдиницаEDI КАК КодЕдиницыИзмеренияEDI,
		|			КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С,
		|			КонтурEDI_СоответствияТоваров.GTIN КАК GTIN,
		|			КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК НаименованиеПартнера,
		|			КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера
		|		ИЗ
		|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|		ГДЕ
		|			КонтурEDI_СоответствияТоваров.Партнер = &Партнер
		|			И КонтурEDI_СоответствияТоваров.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ТабТоваров КАК ВТ)) КАК СоответствияТоваров_КонтурEDI
		|		ПО ТабТоваров.Номенклатура = СоответствияТоваров_КонтурEDI.Номенклатура
		|			И ТабТоваров.ЕдиницаИзмерения = СоответствияТоваров_КонтурEDI.ЕдиницаИзмерения
		|			И (СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкодыТоваров КАК ВТШтрихкодыТоваров
		|		ПО ТабТоваров.Номенклатура = ВТШтрихкодыТоваров.Номенклатура
		|			И ТабТоваров.ЕдиницаИзмерения = ВТШтрихкодыТоваров.ЕдиницаИзмерения
		|			И (ВТШтрихкодыТоваров.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = ВТШтрихкодыТоваров.ХарактеристикаНоменклатуры)";
		
	Иначе//мы поставщик
		
		ТекстЗапросаПоРегиструСоответствий = 
		"ВЫБРАТЬ
		|	ТабТоваров.Номенклатура,
		|	ТабТоваров.ХарактеристикаНоменклатуры,
		|	ТабТоваров.ЕдиницаИзмерения,
		|	ТабТоваров.КодТовараСвой,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.НаименованиеПартнера, """") КАК НаименованиеПартнера,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.GTIN, ""              "") КАК GTIN,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодТовараПартнера, """") КАК КодТовараСторонний,
		|	СоответствияТоваров_КонтурEDI.КодЕдиницыИзмеренияEDI КАК КодЕдиницыИзмеренияEDI,
		|	СоответствияТоваров_КонтурEDI.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
		|ИЗ
		|	ТабТоваров КАК ТабТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
		|			КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
		|			КонтурEDI_СоответствияТоваров.GTIN КАК GTIN,
		|			КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК НаименованиеПартнера,
		|			КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера,
		|			КонтурEDI_СоответствияТоваров.ЕдиницаEDI КАК КодЕдиницыИзмеренияEDI,
		|			КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
		|		ИЗ
		|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|		ГДЕ
		|			КонтурEDI_СоответствияТоваров.Партнер = &Партнер
		|			И КонтурEDI_СоответствияТоваров.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ТабТоваров КАК ВТ)) КАК СоответствияТоваров_КонтурEDI
		|		ПО ТабТоваров.Номенклатура = СоответствияТоваров_КонтурEDI.Номенклатура
		|			И ТабТоваров.ЕдиницаИзмерения = СоответствияТоваров_КонтурEDI.ЕдиницаИзмерения
		|			И (СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры)";
		
	КонецЕсли;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросКонвертацииТоваров1СвEDI",,
			Новый Структура("Запрос,ДополнительныеПараметры",
			ЗапросКонвертацииТоваров1СвEDI,));
			
	Если РезультатПМ <> Неопределено Тогда
		ЗапросКонвертацииТоваров1СвEDI = РезультатПМ;
	КонецЕсли;
	
	ПреобразоватьТипыЕдиницыИзмеренияЗапросаУТ11_УНФ(ЗапросКонвертацииТоваров1СвEDI);
	Если ОпределитьРелизКонфигурации()="11.2" Тогда
		ЗапросКонвертацииТоваров1СвEDI.Текст = СтрЗаменить(ЗапросКонвертацииТоваров1СвEDI.Текст,"Справочник.ЕдиницыИзмерения","Справочник.УпаковкиЕдиницыИзмерения");	
	КонецЕсли;	
	ЗапросКонвертацииТоваров1СвEDI.Выполнить();//создадим ТабТоваров и, если мы покупатель, то ВТШтрихкодыТоваров
	
	Если ВнешнееХранилище Тогда
		
		//передадим ВТТоварыБезСоответствий во внешнюю базу
		ЗапросКонвертацииТоваров1СвEDI_Внешний = ИнициализироватьЗапрос_КонтурEDI(Истина);
		
		ПередатьВременнуюТаблицуВоВнешнийЗапрос("ТабТоваров",ЗапросКонвертацииТоваров1СвEDI,ЗапросКонвертацииТоваров1СвEDI_Внешний,,"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
		Если ИскатьТоварПоШК Тогда//мы покупатель
			ПередатьВременнуюТаблицуВоВнешнийЗапрос("ВТШтрихкодыТоваров",ЗапросКонвертацииТоваров1СвEDI,ЗапросКонвертацииТоваров1СвEDI_Внешний,,"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
		КонецЕсли;
		
		ЗапросКонвертацииТоваров1СвEDI = ЗапросКонвертацииТоваров1СвEDI_Внешний;//подменим запросы
		
		ЗапросКонвертацииТоваров1СвEDI.Текст = ТекстЗапросаПоРегиструСоответствий;//и продолжим выполнение запроса уже во внешней базе
		ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("Партнер",	СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ВладелецСпискаТоваров));
		ТаблицаТоваровССоответствиями = ЗапросКонвертацииТоваров1СвEDI.Выполнить().Выгрузить();
		
		//вернем таблицу обратно из внешней базы
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура();
		СтруктураКолонокПреобразуемыхВСсылки.Вставить("Номенклатура",				Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("Номенклатура")));
		СтруктураКолонокПреобразуемыхВСсылки.Вставить("ЕдиницаИзмерения",			Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЕдиницаИзмерения")));//если будем запускать ВХ на УФ, надо проверить внимательно, возможны проблемы
		Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("ХарактеристикаНоменклатуры",	Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры")));
		КонецЕсли;	
		
		ТаблицаТоваровССоответствиями = ПолучитьТаблицуИзВнешнейБазы(ТаблицаТоваровССоответствиями,СтруктураКолонокПреобразуемыхВСсылки);
		
	Иначе//объекты в составе конфигурации
		
		ЗапросКонвертацииТоваров1СвEDI.Текст = ТекстЗапросаПоРегиструСоответствий;
		ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("Партнер",	ВладелецСпискаТоваров);

		//событие, позволяющее переопределить получение по ШК "ИзменитьЗапросПоРегиструСоответствий"
		ДополнительныеПараметры= новый Структура;
		ДополнительныеПараметры.Вставить("ИскатьТоварПоШК",ИскатьТоварПоШК);
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросПоРегиструСоответствий",,
		Новый Структура("Запрос,ДополнительныеПараметры",
		ЗапросКонвертацииТоваров1СвEDI,ДополнительныеПараметры));
		
		Если РезультатПМ <> Неопределено Тогда
			ЗапросКонвертацииТоваров1СвEDI = РезультатПМ;
		КонецЕсли;

		ТаблицаТоваровССоответствиями = ЗапросКонвертацииТоваров1СвEDI.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаТоваровССоответствиями;
	
КонецФункции

Функция КонвертироватьТабличнуюЧастьСообщения1СвEDI(Сообщение,ИмяТабличнойЧасти)
	
	ТабличнаяЧастьСообщения = Сообщение[ИмяТабличнойЧасти];
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		МыПоставщик = (ОпределитьКемМыЯвляемся(Сообщение)="Поставщик");
		
		ВладелецСпискаТоваров = ?(Сообщение.Направление = "Исходящее",Сообщение.Получатель1С,Сообщение.Отправитель1С);
		
		Если ЭтоОбратнаяОтгрузка(Сообщение.ТипСообщения) И НЕ ЗначениеЗаполнено(ВладелецСпискаТоваров) Тогда
			ВладелецСпискаТоваров = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.ДокументСсылка.Контрагент));
        КонецЕсли;
		
		КонвертироватьПоШК = НЕ МыПоставщик; // для торговых сетей оставляем поиск соответствий по штрихкоду
		КонвертироватьТовары1СвEDI(ТабличнаяЧастьСообщения, МыПоставщик, ВладелецСпискаТоваров, , КонвертироватьПоШК, Сообщение.ДокументСсылка, Сообщение.ТипСообщения);
		
		МетаданныеСообщения = ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
		
		ОтборКонвертируемыхПолей = Новый Структура();
		ОтборКонвертируемыхПолей.Вставить("ИмяТаблицы", ИмяТабличнойЧасти);
		ОтборКонвертируемыхПолей.Вставить("Принадлежность", Неопределено);
		
		// отбираем поля, которые нужно конвертить
		КонвертируемыеПоля = МетаданныеСообщения.Скопировать(ОтборКонвертируемыхПолей);
		
		Если КонвертируемыеПоля.Количество()>0 Тогда
			
			Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьСообщения Цикл
				
				Для Каждого ПолеТоваров ИЗ КонвертируемыеПоля Цикл
					
					Если ПолеТоваров.ВидСтруктурыEDI = Неопределено Тогда
						ТипEDI = ПолеТоваров.ТипEDI;
					Иначе
						ТипEDI = ПолеТоваров.ВидСтруктурыEDI;
					КонецЕсли;
					
					РезультатКонвертации = КонвертироватьЗначение1СвEDI(СтрокаТоваров[ПолеТоваров.ИмяПоля+"1С"],ПолеТоваров.Тип1С,ТипEDI,Сообщение);
					
					Если НЕ РезультатКонвертации = Неопределено Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаТоваров[ПолеТоваров.ИмяПоля + "EDI"]) Тогда//можно отдельный костыль на КодЕдиницыИзмерения. Проверить тип поля (edi/1c) в метаданных.
							СтрокаТоваров[ПолеТоваров.ИмяПоля + "EDI"] = РезультатКонвертации;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//}}}

// Установка соответствий

Функция УстановитьСоответствиеПоляШапки(Значение1С,ЗначениеEDI,Тип1С,ТипEDI,Владелец =  Неопределено) Экспорт
	
	Если ТипEDI = "ЮрФизЛицо" Тогда
		
		Если ЗначениеЗаполнено(ЗначениеEDI.GLN) И ЗначениеЗаполнено(Значение1С) Тогда
			
			Если Тип1С = "ТочкаДоставкиСторонняя" Тогда
				
				УстановитьGLN(Значение1С,"GLN_ТочкиДоставки",ЗначениеEDI.GLN);
				
			ИначеЕсли Тип1С = "ЮрФизЛицоСвое" Тогда
				
				УстановитьGLN(Значение1С,"GLN_Организации",ЗначениеEDI.GLN);
				
			ИначеЕсли Тип1С = "ЮрФизЛицоСтороннее" Тогда
				
				УстановитьGLN(Значение1С,"GLN_Контрагента",ЗначениеEDI.GLN);
				
			ИначеЕсли Тип1С = "ТочкаДоставкиСвоя" Тогда
				
				УстановитьGLN(Значение1С,"GLN_НашейТочкиДоставки",ЗначениеEDI.GLN);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//	Сообщить("Устанавливается соответствие между "+Тип1С+" и "+ТипEDI+": "+СокрЛП(Значение1С)+" и "+СокрЛП(ЗначениеEDI));
	
КонецФункции

//Обрабатывает уже распарсенное в Структуру входящее сообщение.
//Возвращает признак: можно ли удалять сообщение с FTP/каталога.
//Здесь же хорошо бы возвращать и признак, надо ли отправлять еще какие-то статусные в ответ: read_ok, checking_fail
Функция ОбработатьВходящееСообщение(Сообщение) Экспорт
	
	СтруктураВозврата = ИнициализироватьСтруктуруРезультатаФункции();
	СтруктураВозврата.Вставить("МожноУдалятьСообщение",				Ложь);
	СтруктураВозврата.Вставить("СохранятьСообщениеВБазу",			Ложь);
	СтруктураВозврата.Вставить("ОтправитьУведомлениеОПрочтении",	Ложь);//это на будущее
	СтруктураВозврата.Вставить("ОтправитьУведомлениеОВалидации",	Ложь);//это на будущее
	
	ТипСообщения = Сообщение.ТипСообщения;//вытащим поближе, много где надо
	
	Если ТипСообщения = "reports" Тогда
		//быстро обработаем и выйдем
		Результат = ОбработатьСтатусноеСообщение(Сообщение);
		СтруктураВозврата.МожноУдалятьСообщение = Результат.МожноУдалятьСообщение;
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	КонвертироватьСообщениеEDIв1С(Сообщение);
	
	НачатьТранзакцию_КонтурEDI();
	
	//пропустим через фильтры: партнеры, точки доставки, существование в базе сообщения с таким ID
	//возможно, СообщениеСсылка заполнять по ID в блоке конвертации. Хотя как с виртуальными ORDERS будет, непонятно
	ПроверитьНеобходимостьЗагрузкиСохраненияСообщения(Сообщение,СтруктураВозврата);
	//Возможность переопределить результаты проверки через подключаемый модуль. Например, в центральной базе не надо загружать ORDRSP на определенные заказы.
	ОбработкаСобытияПодключаемогоМодуля("ПроверитьНеобходимостьЗагрузкиСохраненияСообщения",,Новый Структура("Сообщение,СтруктураВозврата",Сообщение,СтруктураВозврата));
	
	
	Если СтруктураВозврата.СохранятьСообщениеВБазу Тогда
		//все, решили загружать текущее сообщение.
		
		Попытка
			//запишем в базу.
			СохранитьСообщение(Сообщение);
			
			// редко, но возможно сохранение одного и того же сообщения в разных сессиях, проверим 
			Если НЕ ПроверитьОтсутствиеДублейВходящегоСообщения(Сообщение.ID) Тогда
				ВызватьИсключение "При выполнении обмена несколькими пользователями возникла одновременная загрузка сообщения: "+Сообщение.ID;
			КонецЕсли;
			
			СтруктураВозврата.Вставить("Сообщение",Сообщение);
			////провалидируем, создадим документы и т.д.
			//ДействияПослеСохраненияСообщения(Сообщение,СтруктураВозврата);
			
			СтруктураВозврата.МожноУдалятьСообщение = Истина;//скажем вышестоящей функции, чтоб удаляла сообщение, мы тут все закончили
			
			ЗафиксироватьТранзакцию_КонтурEDI();
		Исключение
			_ОписаниеОшибки = ОписаниеОшибки();
			Сообщить_КонтурEDI(_ОписаниеОшибки);
			ОтменитьТранзакцию_КонтурEDI();
			ВызватьИсключение _ОписаниеОшибки;//принудительно прервемся на этом.
		КонецПопытки;	
		
	Иначе
		ОтменитьТранзакцию_КонтурEDI();	
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

//Берет Сообщение, проверяет его Партнера, ТочкуДоставки и ID
//В СтруктураВозврата меняет 2 параметра: МожноУдалятьСообщение и СохранятьСообщениеВБазу
//Первый влияет на то, будет ли исходный файл удален с FTP
//Второй показывает, будем ли мы сохранять данное сообщение в базу
Процедура ПроверитьНеобходимостьЗагрузкиСохраненияСообщения(Сообщение,СтруктураВозврата)
	
	СтруктураВозврата.СохранятьСообщениеВБазу = Истина;
	
	//Проверим, есть ли у нас сообщение с этим ID в базе. Если есть, то повторно загружать не будем, но с FTP удалим.
	Если СтруктураВозврата.СохранятьСообщениеВБазу Тогда
		//Проверим, вдруг такое сообщение у нас уже было - найдем по ID
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК Таб
		|ГДЕ
		|	Таб.ID = &ID
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Справочник.КонтурEDI_Сообщения";
		Запрос.УстановитьПараметр("ID",Сообщение.ID);
		СообщениеСуществует = Не Запрос.Выполнить().Пустой();
		Если СообщениеСуществует Тогда
			СтруктураВозврата.МожноУдалятьСообщение = Истина;
			СтруктураВозврата.СохранятьСообщениеВБазу = Ложь;
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	//Проверим, разрешено ли нам принимать сообщения по данному партнеру.
	Если ПараметрыПользователяEDI.ФильтрОбменаПоСетям = Истина Тогда
		
		Если НЕ ЗначениеЗаполнено(Сообщение.Партнер) Тогда
			Сообщение.Партнер = КонвертироватьЗначениеEDIв1С(Сообщение["ОтправительEDI"],"УчастникОбмена","ПодразделениеСтороннее",Сообщение);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сообщение.Партнер) Тогда
			//мы не знаем эту торговую сеть, перейдем к следующему сообщению.
			СтруктураВозврата.МожноУдалятьСообщение = Ложь;
			СтруктураВозврата.СохранятьСообщениеВБазу = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверим фильтр по точкам доставки
	Если СтруктураВозврата.СохранятьСообщениеВБазу 
		И ПараметрыПользователяEDI.ФильтрОбменаПоТочкамДоставки = Истина 
		И ОпределитьКемМыЯвляемся(Сообщение) = "Поставщик" Тогда
		
		СтруктураВозврата.МожноУдалятьСообщение = Ложь;
		СтруктураВозврата.СохранятьСообщениеВБазу = Ложь;
		
		Если не ЗначениеЗаполнено(Сообщение.Грузополучатель1С) Тогда
			
			РезультатКонвертацииГрузополучатель1С = КонвертироватьЗначениеEDIв1С(Сообщение["ГрузополучательEDI"],"ЮрФизЛицо","ТочкаДоставкиСторонняя",Сообщение);
			
			Если РезультатКонвертацииГрузополучатель1С <> Неопределено Тогда
				
				Сообщение.Грузополучатель1С = РезультатКонвертацииГрузополучатель1С;
			КонецЕсли;
		КонецЕсли;
		
		ТекТочкаДоставки = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",Сообщение.Грузополучатель1С);
		//на рефакторинг: тут достаточно получить одну единственную настройку.
		//или просто собрать GLN всех точек доставки, по которым мы загружаем сообщения.
		
		Если ЗначениеЗаполнено(ТекТочкаДоставки) 
			И ТипЗнч(ТекТочкаДоставки) = Тип("Структура") 
			И ТекТочкаДоставки.Свойство("ЗагружатьСообщенияПоТочкеДоставки") 
			И ТекТочкаДоставки.ЗагружатьСообщенияПоТочкеДоставки = Истина 
		Тогда
			СтруктураВозврата.МожноУдалятьСообщение = Истина;
			СтруктураВозврата.СохранятьСообщениеВБазу = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//Попробуем найти такое же сообщение по дате/номеру заказа в пределах партнера
	//это надо для проверки существования полных дублей сообщения (совпадает номер, партнер, дата поставки, товары)
	Если  СтруктураВозврата.СохранятьСообщениеВБазу
		И Сообщение.Направление = "Входящее" 
		И (Сообщение.ТипСообщения = "ORDERS" или Сообщение.ТипСообщения = "RECADV")
		И (Сообщение.Статус<>"Canceled" и Сообщение.Статус<>"Отменен")
		Тогда   //отменяемые заказы не проверяем на дубли
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСообщений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК ТаблицаСообщений
		|ГДЕ
		|	ТаблицаСообщений.ТипСообщения = &ТипСообщения
		|	И ТаблицаСообщений.Направление = ""Входящее""
		|	И ТаблицаСообщений.НомерДокумента = &НомерСообщения
		|	И ТаблицаСообщений.Партнер = &Партнер
		|	И ТаблицаСообщений.ДатаДокумента МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаСообщения, НЕДЕЛЯ, -1) И ДОБАВИТЬКДАТЕ(&ДатаСообщения, НЕДЕЛЯ, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаСообщений.ДатаДокумента УБЫВ,
		|	ТаблицаСообщений.ДатаЗагрузки УБЫВ,
		|	Ссылка УБЫВ";
		
		Запрос.УстановитьПараметр("НомерСообщения",	Сообщение.ДокументEDI.Номер);
		Запрос.УстановитьПараметр("Партнер",		ПреобразоватьЗначениеДляВнешнегоХранилища(Сообщение.Партнер));
		Запрос.УстановитьПараметр("ДатаСообщения",	Сообщение.ДокументEDI.Дата);
		Запрос.УстановитьПараметр("ТипСообщения",	Сообщение.ТипСообщения);

		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			//будем сравнивать с самым свежим сообщением
			
			Если ВнешнееХранилище Тогда
				СообщениеСсылка = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Выб.Ссылка);
			Иначе
				СообщениеСсылка = Выб.Ссылка;
			КонецЕсли;	
			ПоследнееСообщение = ПрочитатьСообщение(СообщениеСсылка,,,"Входящее");
			
			Если НЕ Сообщение.ТипСообщения = ПоследнееСообщение.ТипСообщения Тогда
				//Костыль от фиктивных RECADV.
				//Увы, это придется оставить.
				Возврат;
			КонецЕсли;
			
			КонвертироватьСообщениеEDIв1С(ПоследнееСообщение);
			
			//Теперь сравним сообщения. Если они - полные дубли, то не будем загружать второе. Но с FTP удалим.
			//Пока предполагаем, что сообщения дубли, если у них совпадают таб.части и реквизиты "Дата поставки" и "Партнер".
			//Совпадение номера и даты предполагается из кода выше.
			
			_ПоляСравнения = EDI_РазложитьСтрокуВМассивСлов("ДатаПоставки,ДатаОтгрузки,ТочкаДоставки",",");
			
			СообщенияСовпадают=СравнитьСообщения(ПоследнееСообщение,Сообщение,_ПоляСравнения,Истина);
			
			Если СообщенияСовпадают Тогда
				СтруктураВозврата.МожноУдалятьСообщение = Истина;
				СтруктураВозврата.СохранятьСообщениеВБазу = Ложь;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция МожноПринятьВходящееСообщение(Сообщение,ПервоначальнаяЗагрузкаСообщения)
	
	// проверяем, не успел ли кто-то другой создать документ
	ПроверятьНаличиеДокумента = Ложь;
	
	Если ПервоначальнаяЗагрузкаСообщения Тогда
		
		Если Сообщение.ТипСообщения = "ORDERS" Тогда
			
			Если НЕ (Сообщение.Свойство("ОбратныйЗаказEDI") И 
				ЗначениеЗаполнено(Сообщение.ОбратныйЗаказEDI.Номер) И 
				ЗначениеЗаполнено(Сообщение.ОбратныйЗаказ1С)) Тогда
				
				ПроверятьНаличиеДокумента = Истина;	
			КонецЕсли;
			
		ИначеЕсли Сообщение.ТипСообщения = "DESADV" Тогда
			
			Если ПолучитьТипЗначенияОбъекта("ИсходящийЗаказПоставщику",,Истина) = ПолучитьТипЗначенияОбъекта("ВходящееУведомлениеОбОтгрузке",,Истина) Тогда 
				ПроверятьНаличиеДокумента = Ложь; //документ уже будет в справочнике и мы ему будем перезаполнять ТЧ.
			Иначе
				ПроверятьНаличиеДокумента = Истина;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ПроверятьНаличиеДокумента Тогда
		
		ИД = СокрЛП(Сообщение.ID);
		
		Если ЗначениеЗаполнено(ИД) Тогда
			
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтурEDI_Сообщения.Документ
			|ИЗ
			|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			|ГДЕ
			|	КонтурEDI_Сообщения.ID = &ID
			|	И КонтурEDI_Сообщения.Направление = ""Входящее""";
			
			Запрос.УстановитьПараметр("ID",ИД);
			
			НайденныйДокумент = ПолучитьРезультатЗапроса(Запрос,"Документ");
			
			Если ВнешнееХранилище Тогда  //???
				Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
					НайденныйДокумент = ЗначениеИзСтрокиВнутр(НайденныйДокумент);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ (Сообщение.Свойство("ОбратныйЗаказ1С") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказ1С) И Сообщение.ОбратныйЗаказ1С = НайденныйДокумент) Тогда
				Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Обработка входящего сообщения: создание документа в 1С, смена статусов и т.д.
Функция ПринятьВходящееСообщение(Сообщение,ПервоначальнаяЗагрузкаСообщения = Истина) Экспорт
	
	//чистка кэша таблицы связанных документов-сообщений
	//могли случится манипуляции по связям текущего документа. -  ПолучитьТаблицуСвязанныхДокументовПоТипамСообщений, в таком случае может достать из кэша неактуальные данные
	ЭДО_Кэш_Поместить("КэшТаблицыСвязанныхДокументовПоТипамСообщений",неопределено);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успешно",	Ложь);
	СтруктураВозврата.Вставить("Документ",	Неопределено);
	
	Если НЕ МожноПринятьВходящееСообщение(Сообщение,ПервоначальнаяЗагрузкаСообщения) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтандартнаяОбработкаEDI = Истина;
	
	НачатьТранзакцию_КонтурEDI();
	
	Попытка
		
		//Создадим коллекцию для сообщений, которые разбиваются на несколько виртуальных, и обработаем ее в цикле
		СообщенияДляЗагрузки = ПолучитьМассивСообщенийДляЗагрузки(Сообщение);
		
		Если СообщенияДляЗагрузки = Неопределено Тогда //не удалось разбить входящий ORDERS по группам товаров

			ОтменитьТранзакцию_КонтурEDI();
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		Для Каждого ЗагружаемоеСообщение Из СообщенияДляЗагрузки Цикл
			
			//уберем из таблицы Товары в Сообщении все строки, которые нам сейчас не нужны:
			//те, которые пользователь решил не загружать, и те, которые не подпадают под текущую товарную группу (если есть автоматическое деление)
			КопияСообщения = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ЗагружаемоеСообщение));
			Если ЗагружаемоеСообщение.ТипСообщения = "ORDERS" Тогда
				
				НужныеСтрокиДляЗагрузки = Новый Массив;
				Для Каждого СтрокаТоваров Из КопияСообщения.Товары Цикл
					Если СтрокаТоваров.НеЗагружать <> Истина 
						И КопияСообщения.ТоварнаяГруппа = СтрокаТоваров.ТоварнаяГруппа Тогда
						НужныеСтрокиДляЗагрузки.Добавить(СтрокаТоваров);
					КонецЕсли;
				КонецЦикла;
				
				КопияСообщения.Товары = КопияСообщения.Товары.Скопировать(НужныеСтрокиДляЗагрузки);
				
			КонецЕсли;
			
			СсылкаНаДокумент = ОбработкаСобытияПодключаемогоМодуля("ПринятьВходящееСообщение",СтандартнаяОбработкаEDI,Новый Структура("Сообщение, ПервоначальнаяЗагрузкаСообщения",КопияСообщения,ПервоначальнаяЗагрузкаСообщения));
			
			Если СтандартнаяОбработкаEDI Тогда
			
				Если ОпределитьКемМыЯвляемся(КопияСообщения)="Поставщик" Тогда
					ПересчитатьТоварыСообщения(КопияСообщения.Товары,КопияСообщения.Отправитель1С,"В1С");
				КонецЕсли;

				СсылкаНаДокумент = ПринятьВходящееСообщение_БМИ(КопияСообщения,ПервоначальнаяЗагрузкаСообщения);
			
			КонецЕсли;
			
			Если СсылкаНаДокумент = Неопределено Тогда //не удалось принять входящее
				
				ОтменитьТранзакцию_КонтурEDI();
				Возврат СтруктураВозврата;
				
			КонецЕсли;

			Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			// возникала проблема с перепривязкой сообщений
			//Если НЕ ЗначениеЗаполнено(ЗагружаемоеСообщение.ДокументСсылка) Тогда
				ЗагружаемоеСообщение.ДокументСсылка = СсылкаНаДокумент;
			КонецЕсли;
			
			Если ПервоначальнаяЗагрузкаСообщения Тогда

				СохранитьСообщение(ЗагружаемоеСообщение,"Загружен");
				
				ОбработкаСобытияПодключаемогоМодуля("ПослеЗагрузкиВходящегоСообщения",,
						Новый Структура("Сообщение,ДокументСсылка",
						ЗагружаемоеСообщение,СсылкаНаДокумент));
				
			КонецЕсли;
			
			СтруктураВозврата.Успешно	= Истина;
			СтруктураВозврата.Документ	= СсылкаНаДокумент;

		КонецЦикла;
		
		ЗафиксироватьТранзакцию_КонтурEDI();
		
	Исключение
		_Ошибка = ОписаниеОшибки();
		Сообщить_КонтурEDI(_Ошибка);
		ОтменитьТранзакцию_КонтурEDI()
	КонецПопытки;	
	
	//если стоит флаг "Проводить заказы после создания", то постараемся провести все созданные документы
	//с 4.3.14 эта настройка перенесена в партнера
	Если  
		СтруктураВозврата.Успешно 
		И Сообщение.ТипСообщения = "ORDERS"
		И ЗначениеЗаполнено(СсылкаНаДокумент)  
		И ЗначениеЗаполнено(Сообщение.Партнер) И ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"ПроводитьСозданныеЗаказы")=Истина  //тяжелое условие - пусть будет последним
		Тогда
		
		ТаблицаСвязанныхДокументов = ПолучитьВиртуальныеСвязанныеORDERS(СсылкаНаДокумент);
		Для Каждого СтрокаПринятогоДокумента Из ТаблицаСвязанныхДокументов Цикл
			ДокументДляПроведения = СтрокаПринятогоДокумента.Документ;
			Если ЗначениеЗаполнено(СтрокаПринятогоДокумента.Документ) Тогда
				Попытка
					ДокументДляПроведения.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить_КонтурEDI("Контур-EDI: Не удалось провести документ "+СокрЛП(ДокументДляПроведения));
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	 
КонецФункции

//на входе берет входящее Сообщение, если это ORDERS, то дробит его по товарным группам, 
//на выходе выдает массив - Сообщения для загрузки
Функция ПолучитьМассивСообщенийДляЗагрузки(Сообщение)
	
	ПервоначальнаяЗагрузкаСообщения = Истина;//может, нам вообще этот параметр не нужен???? И Сообщение будет самодостаточно?
	
	МассивВозврата = Новый Массив;
	
	Если Сообщение.ТипСообщения = "ORDERS" Тогда
		
		//разделение заказов
		//создадим 1 документ для текущего сообщения, а также связанные для других товарных групп
		ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьТоварнуюГруппуТаблицыТоваров",,Новый Структура("Сообщение,Товары",Сообщение,Сообщение.Товары));//попробуем так.
		
		Если Сообщение.Товары.Колонки.Найти("ТоварнаяГруппа")=Неопределено	Тогда
			Сообщение.Товары.Колонки.Добавить("ТоварнаяГруппа");
			//может, прямо здесь и заполним?
		КонецЕсли;
		
		//выберем различные товарные группы в тех строках, которые подлежат загрузке
		ТоварныеГруппы = Новый Массив;
		Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
			Если СтрокаТоваров.НеЗагружать<>Истина 
				И ТоварныеГруппы.Найти(СтрокаТоваров.ТоварнаяГруппа) = Неопределено Тогда
				ТоварныеГруппы.Добавить(СтрокаТоваров.ТоварнаяГруппа);
			КонецЕсли;	
		КонецЦикла;
		
		//Нам придется проверить, а не создано ли уже несколько документов по данному сообщению.
		//Отвязать их либо здесь, либо дождаться интерактивной отвязки
		//Дальше создать по каждой строке, кроме первой, виртуальную копию сообщения
		//и уже по этой копии создавать документ заказа
		
		Если ЗначениеЗаполнено(Сообщение.ДокументСсылка) Тогда
			ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(Сообщение.ДокументСсылка);
			Если ТабВиртуальныхСообщений.Количество()>1 Тогда
				//к этому сообщению привязано несколько документов
				//значит,мы не можем создавать заказы до тех пор, пока не отвяжем все и пометим на удаление
				
				Возврат Неопределено;   //продумать, как мы реагируем на несколько уже созданных Заказов по множественному ORDERS
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		ИсходноеСообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
		Для Каждого ТоварнаяГруппа Из ТоварныеГруппы Цикл
			//
			Если ТоварныеГруппы.Найти(ТоварнаяГруппа)=0 Тогда//0 - это индекс найденного, т.е. самый первый
				//принимаем существующее сообщение
				ПринимаемоеСообщениеОбъект = ИсходноеСообщениеОбъект;
				Если Не Сообщение.Свойство("ТоварнаяГруппа") Тогда
					Сообщение.Вставить("ТоварнаяГруппа");
				КонецЕсли;
				Сообщение.ТоварнаяГруппа = ТоварнаяГруппа;
				МассивВозврата.Добавить(Сообщение);
				
			Иначе
				//создаем виртуальный дубль
				ПринимаемоеСообщениеОбъект = ИсходноеСообщениеОбъект.Скопировать();
				ПринимаемоеСообщениеОбъект.УстановитьНовыйКод();
				ПринимаемоеСообщениеОбъект.Документ = Неопределено;
				СохранитьОбъектСообщения(ПринимаемоеСообщениеОбъект);
				//дубль создан, создадим дубль Сообщения (уже Структуры, а не объекта базы)
				СсылкаНовогоСообщения = ?(ВнешнееХранилище,СоединениеСХранилищем.ЗначениеВСтрокуВнутр(ПринимаемоеСообщениеОбъект.Ссылка),ПринимаемоеСообщениеОбъект.Ссылка);
				
				НовСообщение = ПрочитатьСообщение(СсылкаНовогоСообщения,, "ORDERS", "Входящее");
				Если Не НовСообщение.Свойство("ТоварнаяГруппа") Тогда
					НовСообщение.Вставить("ТоварнаяГруппа");
				КонецЕсли;
				НовСообщение.ТоварнаяГруппа = ТоварнаяГруппа;
				НовСообщение.Товары = Сообщение.Товары;//скопируем Товары.
				НовСообщение.ДокументСсылка = Неопределено;

				МассивВозврата.Добавить(НовСообщение);
				
			КонецЕсли;
			
		КонецЦикла;	
		
	Иначе
		//все другие типы сообщений - там будет только по одному сообщению
		МассивВозврата.Добавить(Сообщение);
	КонецЕсли;

	Возврат МассивВозврата;
	
КонецФункции

// Отправка сообщений

Функция ПодготовитьИсходящееСообщение(ТипСообщения, ДокументСсылка, Параметры = Неопределено) Экспорт   //Параметр ВходящийЗаказ может быть как ссылкой на сообщение, так и самим сообщением
	
	//чистка кэша таблицы связанных документов-сообщений
	//могли случится манипуляции по связям текущего документа. -  ПолучитьТаблицуСвязанныхДокументовПоТипамСообщений в таком случае может достать из кэша неактуальные данные
	ЭДО_Кэш_Поместить("КэшТаблицыСвязанныхДокументовПоТипамСообщений",неопределено);
	
	ЭтоОтклонениеНезагруженногоЗаказа = (
		ТипСообщения = "ORDRSP" 
		И ТипЗнч(Параметры) = Тип("Структура") 
		И Параметры.Свойство("ВходящийЗаказ") 
		И Параметры.Свойство("Статус") 
		И Параметры.Статус = "Отклонить"
		);
		
	ЭтоОтклонениеНезагруженногоВозврата = (
		ТипСообщения = "RETREC" 
		И ТипЗнч(Параметры) = Тип("Структура") 
		И Параметры.Свойство("ВходящийВозврат") 
		И Параметры.Свойство("Действие") 
		И Параметры.Действие = "Отклонить"
		);
		
	Если ЭтоОтклонениеНезагруженногоЗаказа Тогда // отклонение незагруженного в 1С заказа
		Параметры.Вставить("ЭтоОтклонениеНезагруженногоЗаказа",Истина);
	КонецЕсли;
	Если ЭтоОтклонениеНезагруженногоВозврата Тогда // отклонение незагруженного в 1С заказа
		Параметры.Вставить("ЭтоОтклонениеНезагруженногоВозврата",Истина);
	КонецЕсли;
	
	Сообщение = ПолучитьСтруктуруСообщения(ТипСообщения,"Исходящее");
	
	Сообщение.ТипСообщения		= ТипСообщения;
	Сообщение.Направление		= "Исходящее";
	Сообщение.ДокументСсылка	= ДокументСсылка;
	
	Если НЕ Параметры = Неопределено
        И Параметры.Свойство("ИсходноеСообщение")
        И Параметры.ИсходноеСообщение.Свойство("СообщениеСсылка") Тогда
        Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",Параметры.ИсходноеСообщение.СообщениеСсылка);//для переотправки будем указывать прямую ссылку на сообщение, которое переотправляем
    КонецЕсли;
	
	// заполняем поля 1С
	СтандартнаяОбработкаEDI = Истина;
	
	Если Не ЭтоОтклонениеНезагруженногоЗаказа И НЕ ЭтоОтклонениеНезагруженногоВозврата Тогда
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПодготовитьИсходящееСообщение",СтандартнаяОбработкаEDI,Новый Структура("Сообщение,ДокументСсылка,Параметры",Сообщение,ДокументСсылка,Параметры));
	КонецЕсли;
	
	Если СтандартнаяОбработкаEDI = Ложь Тогда
		
		Сообщение = РезультатПМ;
		//сообщение было подготовлено в подключаемом модуле
		
	Иначе	
		//штатная подготовка сообщения
		Если Сообщение.ТипСообщения = "ORDRSP" Тогда
			
			ПодготовитьОтветНаЗаказ(ДокументСсылка,Сообщение,Параметры);
			
		ИначеЕсли Сообщение.ТипСообщения = "DESADV" Тогда	
			
			ПодготовитьУведомлениеОбОтгрузке(ДокументСсылка,Сообщение,Параметры);
			
		ИначеЕсли Сообщение.ТипСообщения = "INVOIC" Тогда
			
			ПодготовитьСчетФактуру(ДокументСсылка,Сообщение);
			
		ИначеЕсли Сообщение.ТипСообщения = "ORDERS" Тогда
			
			ПодготовитьЗаказ(ДокументСсылка,Сообщение,Параметры);
			
		ИначеЕсли Сообщение.ТипСообщения = "RECADV" Тогда
			
			ПодготовитьУведомлениеОПриемке(ДокументСсылка,Сообщение);
			
		ИначеЕсли Сообщение.ТипСообщения = "ALCRPT" Тогда
			
			ПодготовитьОтчетОПродажеАлкоголя(ДокументСсылка,Сообщение);
			
		ИначеЕсли Сообщение.ТипСообщения = "PORDERS" Тогда
			
			ПодготовитьОбратныйЗаказ(ДокументСсылка,Сообщение);
			
		ИначеЕсли Сообщение.ТипСообщения = "RETREC" Тогда
			
			ПодготовитьУведомлениеОПриемкеВозврата(ДокументСсылка,Сообщение,Параметры);
			
		ИначеЕсли Сообщение.ТипСообщения = "COINVOIC" Тогда
			
			ПодготовитьКорректировочныйСчетФактуру(ДокументСсылка,Сообщение);
			
		КонецЕсли;
		
		Если НЕ Сообщение.ТипСообщения = "COINVOIC" Тогда
		
			Сообщение.СуммаВсего		= Сообщение.Товары.Итог("СуммаСНДС");
			Сообщение.СуммаВсегоНДС		= Сообщение.Товары.Итог("СуммаНДС");
			Сообщение.СуммаВсегоБезНДС	= Сообщение.Товары.Итог("СуммаБезНДС");
		
		КонецЕсли;
		
	КонецЕсли;
	//-вынесено из базового модуля интеграции
	
	Если НЕ ЭтоОтклонениеНезагруженногоЗаказа И     //а отклоненный уже сконвертирован.
		 НЕ ЭтоОтклонениеНезагруженногоВозврата И
		 НЕ Сообщение.ТипСообщения = "PRICELIST" Тогда
		
		// конвертим поля 1С в поля EDI
		КонвертироватьСообщение1СвEDI(Сообщение);
		Сообщение.Партнер = Сообщение.Получатель1С;
		
	КонецЕсли;
		
	// проверяем поля на наличие ошибок
	
	РезультатПроверки = ПроверитьПоляСообщения(Сообщение);
	Сообщение.СодержитОшибки =  НЕ РезультатПроверки.Успешно;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.ID) Тогда
		
		УИД = Новый УникальныйИдентификатор();
		Сообщение.ID = СтрЗаменить(УИД,"-","");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сообщение.ДатаСоздания) Тогда
		
		Сообщение.ДатаСоздания = ТекущаяДата();
		
	КонецЕсли;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеПодготовкиИсходящегоСообщения",,
			Новый Структура("Сообщение,ДокументСсылка,Параметры",
			Сообщение,ДокументСсылка,Параметры));
			
	Если РезультатПМ <> Неопределено Тогда
		Сообщение = РезультатПМ.Сообщение;
	КонецЕсли;
			
	
	Возврат Сообщение;
	
КонецФункции

// Интерфейсные процедуры и функции

Функция ОтправитьУведомленияОПрочтенииСообщений() Экспорт
	
	ТаблицаСообщений = ПолучитьСообщенияПоКоторымНеОтправленыУведомления();
	
	Если Не ТаблицаСообщений = Неопределено Тогда
		
		Сч=0;
		
		Для Каждого Стр ИЗ ТаблицаСообщений Цикл
			
			Сч=Сч+1;
			
			Сообщение = ПрочитатьСообщение(Стр.СообщениеСсылка,,Стр.ТипСообщения,"Входящее");
			Если Стр.СостояниеОбработки = "Read" Тогда
				РезультатКонвертации = СформироватьУведомлениеОПрочтенииСообщения(Сообщение);
			ИначеЕсли Стр.СостояниеОбработки 	= "Checking" Тогда
				РезультатКонвертации = СформироватьУведомлениеОВалидацииСообщения(Сообщение);
			КонецЕсли;
			
			Если РезультатКонвертации.Успешно = Истина Тогда
				ПередатьСообщениеНаСервер(РезультатКонвертации);
			КонецЕсли;
			
			ПослеОтправкиУведомленияОПрочтении(Стр.СообщениеСсылка);
			
			Состояние_КонтурEDI("Отправляется уведомление о прочтении: "+Формат(Сч,"ЧГ=0")+" из "+Формат(ТаблицаСообщений.Количество(),"ЧГ=0"));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

//отправляет все ALCRPT, которые можно отправить
Функция ОтправитьALCRPT() Экспорт
	
	ТаблицаСообщений = ПолучитьДокументыПоКоторымНужноОтправитьALCRPT();
	
	Если Не ТаблицаСообщений = Неопределено Тогда
		
		Для Каждого Стр ИЗ ТаблицаСообщений Цикл
			
			Сообщение = ПодготовитьИсходящееСообщение("ALCRPT",Стр.Документ);
			
			Если Сообщение.Товары.Количество()<>0 Тогда
				
				РезультатКонвертации = КонвертироватьИсходящееСообщениеПоНовому(Сообщение);
				
				Если РезультатКонвертации.Успешно = Истина Тогда
					РезультатОтправки = ПередатьСообщениеНаСервер(РезультатКонвертации);
				Иначе
					//а если нет, то что?
					Продолжить;//???
				КонецЕсли;
				
				Если ПротоколОбмена_КонтурEDI="API" Тогда
					УстановитьЗначениеСвойстваОбъекта(Стр.Документ, "ALCRPT_ID", СтрЗаменить(РезультатОтправки.MessageId,"-",""));
				Иначе
					УстановитьЗначениеСвойстваОбъекта(Стр.Документ, "ALCRPT_ID", Сообщение.ID);
				КонецЕсли;
				
			КонецЕсли;
			
			//скинем отметку о необходимости отправки ALCRPT, т.к. сообщение или было отправлено, или в нем не было алкогольной продукции
			УдалитьЗначениеСвойстваОбъекта(Стр.Документ, "НужноОтправитьALCRPT");
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ОтправитьСообщенияОжидающиеОтправки() Экспорт
	
	УчетныеЗаписи = ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");//обновим кэш УЗ
	
	НеотправленныеСообщения = ПолучитьСообщенияОжидающиеОтправки();	
	
	Сч=0;
	
	Для каждого Стр Из НеотправленныеСообщения Цикл
		
		Сч=Сч+1;
		Состояние_КонтурEDI("Отправляется исходящее сообщение: "+Формат(Сч,"ЧГ=0")+" из "+Формат(НеотправленныеСообщения.Количество(),"ЧГ=0"));
		ОтправитьПодготовленноеСообщение(Стр.СообщениеСсылка);
		
	КонецЦикла;
	
КонецФункции

Функция ЭтоОбратнаяОтгрузка(ТипСообщения) Экспорт
	
	Если Найти("\RETDES\RETREC\",ТипСообщения)>0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьКемМыЯвляемся(Сообщение) Экспорт
	
    ТипСообщения = Сообщение.ТипСообщения;
	МыПолучатель = (Сообщение.Направление = "Входящее");
	
	Если ТипСообщения = "ORDERS" 
		ИЛИ ТипСообщения = "RECADV" 
		ИЛИ ТипСообщения = "RETANN"   
		ИЛИ ТипСообщения = "RETDES"   
		Тогда
		
		Возврат ?(МыПолучатель,"Поставщик","Покупатель");
		
	Иначе  // PORDERS ORDRSP DESADV INVOIC COINVOIC RETREC
		
		Возврат ?(МыПолучатель,"Покупатель","Поставщик");

	КонецЕсли;
	
КонецФункции

//{{{СТАТУСЫ
//******************************************************************

Процедура ДобавитьЗначениеСтатуса(ТаблицаСтатусов,ИмяСтатуса,Значение)
	
	НоваяСтрока = ТаблицаСтатусов.Добавить();
	НоваяСтрока.ИмяСтатуса	= ИмяСтатуса;
	НоваяСтрока.Значение	= Значение;
	
КонецПроцедуры

Функция ПолучитьТаблицуСтатусовСообщений() Экспорт
	
	ТаблицаСтатусов = Новый  ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("ИмяСтатуса");
	ТаблицаСтатусов.Колонки.Добавить("Значение");
	
	ТаблицаСтатусов.Индексы.Добавить("ИмяСтатуса");
	
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийALCRPTОжидаетИсправленияОшибок",	"ALCRPT ожидает исправления ошибок");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ВходящийОжидаетУстановкиСоответствий", 	"Ожидает установки соответствий");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ВходящийОжидаетПриемки", 					"Ожидает приемки");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ВходящийЗагружен", 						"Загружен");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ВходящийОтклоненОтправителем",			"Отклонен отправителем");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ВходящийНеПрошелВалидацию",				"ВходящийНеПрошелВалидацию");
	
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийОжидаетИсправленияОшибок",	 	"Ожидает исправления ошибок");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийОжидаетОтправки", 				"Ожидает отправки");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийОтправляется",					"Отправляется");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийОтправлен",				 		"Отправлен");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийДоставлен",				 		"Доставлен");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийДоставленСУточнением",			"Доставлен с уточнением");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийНеДоставлен",				 	"Ожидает исправления ошибок");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийПропущен",						"Пропущен");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийСохранен",						"Сохранен");
	
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийОтмененОжидаетОтправки",			"Отменен, ожидает отправки");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийОтменен",						"Отменен");
	
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийСозданВДиадок",			 		"Ожидает подписания");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ИсходящийПодписанВДиадок",				"Подписан и отправлен");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "НоваяВерсия",								"НоваяВерсия");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ВходящийПропущен",						"Пропущен");
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПолучитьТаблицуСтатусовДокументов() Экспорт
	
	ТаблицаСтатусов = Новый  ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("ИмяСтатуса");
	ТаблицаСтатусов.Колонки.Добавить("Значение");
	
	ТаблицаСтатусов.Индексы.Добавить("ИмяСтатуса");
	
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ЗаказПодтвержден",					"Подтвержден");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ЗаказУточнен",						"Уточнен");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ЗаказОтклонен",						"Отклонен");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ЗаказУточненПринят",					"Уточнен, принят");
	
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "ЕстьРасхождения",						"Есть расхождения");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "НетРасхождений",						"Нет расхождений");
	
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "НакладнаяПринятПолностью",			"Принят полностью");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "НакладнаяПринятЧастично",				"Принят частично");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "НакладнаяПринятЧастичноОбработан",	"Принят частично (обработан)");
	
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "СчетФактураПроверен",					"Проверен");
	ДобавитьЗначениеСтатуса(ТаблицаСтатусов, "СчетФактураЕстьРасхождения",			"Есть расхождения");
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

Функция ПолучитьЗначениеСтатуса(ИмяСтатуса,ТаблицаСтатусов) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяСтатуса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаСтатусов.Найти(ИмяСтатуса,"ИмяСтатуса");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденнаяСтрока.Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеСтатусаСообщения(ИмяСтатуса)
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовСообщений();

	Возврат ПолучитьЗначениеСтатуса(ИмяСтатуса,ТаблицаСтатусов);
	
КонецФункции

Функция ПолучитьЗначениеСтатусаДокумента(ИмяСтатуса)
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовДокументов();

	Возврат ПолучитьЗначениеСтатуса(ИмяСтатуса,ТаблицаСтатусов);
	
КонецФункции

Процедура УстановитьСтатусСообщения(СообщениеСсылка = Неопределено, ДокументСсылка = Неопределено, ТипСообщения, ИмяСтатуса) Экспорт
	
	Статус = ПолучитьЗначениеСтатусаСообщения(ИмяСтатуса);
	
	УстановитьСтатусСообщения_БМИ(СообщениеСсылка, ДокументСсылка, ТипСообщения, Статус);
	
	ОбработкаСобытияПодключаемогоМодуля("ПриУстановкеСтатусаСообщения",,Новый Структура("СообщениеСсылка,ДокументСсылка,ТипСообщения,Статус",СообщениеСсылка, ДокументСсылка, ТипСообщения, Статус));
	
КонецПроцедуры

Процедура УстановитьСтатусДокумента(ДокументСсылка, ЗначениеСтатуса, ИмяСтатуса =  Неопределено, СообщениеСсылка = Неопределено) Экспорт
	
	//2016-02-24 добавлен параметр СообщениеСсылка для корректной обработки версий RECADV
	
	Статус = ПолучитьЗначениеСтатусаДокумента(ЗначениеСтатуса);
	
	УстановитьСтатусДокумента_БМИ(ДокументСсылка, Статус, ИмяСтатуса);
	
	
	//добавим заглушку для корректного отображения ТребуемогоДействия в справочнике сообщений.
	//удалить после окончательного перехода на новый интерфейс.
	
	//для нового интерфейса необходима правильная установка флага "Архив" в сообщениях.
	//в случае с RECADV сообщение по логике не может считаться архивным до тех пор, пока не приняты расхождения приемки, если они были.
	//поэтому пока что обработаем случай "RECADV в статусе Загружен, а документ в статусе Загружен частично"
	
	Если ЗначениеЗаполнено(ДокументСсылка)
		И (ИмяСтатуса="Приемка"
			Или ИмяСтатуса = "ОбратныйЗаказ"
			Или ИмяСтатуса = "Заказ") Тогда
			
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_Сообщения.Ссылка
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	КонтурEDI_Сообщения.Документ = &Документ
		|	И КонтурEDI_Сообщения.Направление = ""Входящее""
		|	И КонтурEDI_Сообщения.ТипСообщения = &ТипСообщения"
		;
		
		Если ИмяСтатуса="Приемка" Тогда
			ТипСообщения = "RECADV"
		ИначеЕсли ИмяСтатуса="ОбратныйЗаказ" Тогда
			ТипСообщения = "ORDERS"
		ИначеЕсли ИмяСтатуса="Заказ" Тогда
			ТипСообщения = "ORDRSP"//для ORDRSP на стороне сети
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТипСообщения",ТипСообщения);
		Запрос.УстановитьПараметр("Документ",ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка));
		
		Если Не СообщениеСсылка = Неопределено Тогда
			//увы, здесь пока только костылем. Иначе можно погореть на совместимости со старыми ПМ.
			Запрос.УстановитьПараметр("СообщениеСсылка",ПреобразоватьЗначениеДляВнешнегоХранилища(СообщениеСсылка));
			Запрос.текст = Запрос.Текст + "
				|И КонтурEDI_Сообщения.Ссылка = &СообщениеСсылка";
		КонецЕсли;
		
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			СообщениеОбъект = Выб.Ссылка.ПолучитьОбъект();
			СохранитьОбъектСообщения(СообщениеОбъект);
			//в этом случае у сообщения снимется/установится статус "Архив" и проставится необходимое "Требуемое действие"
		КонецЕсли;	
			
	КонецЕсли;
	
	ОбработкаСобытияПодключаемогоМодуля("ПриУстановкеСтатусаДокумента",,Новый Структура("ДокументСсылка,Статус,ИмяСтатуса",ДокументСсылка,Статус,ИмяСтатуса));

КонецПроцедуры

Функция ПолучитьСтатусСообщения(СообщениеСсылка = Неопределено, ДокументСсылка = Неопределено, ТипСообщения = Неопределено) Экспорт
	
	//использовать либо первый параметр, либо второй + третий.
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Если СообщениеСсылка = Неопределено Тогда;
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_Сообщения.Статус
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	КонтурEDI_Сообщения.ТипСообщения = &ТипСообщения
		|	И КонтурEDI_Сообщения.Документ = &Документ";
		Запрос.УстановитьПараметр("ТипСообщения",		ТипСообщения);
		Запрос.УстановитьПараметр("Документ",			ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка));
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_Сообщения.Статус
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	КонтурEDI_Сообщения.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",	ПреобразоватьЗначениеДляВнешнегоХранилища(СообщениеСсылка));
		
	КонецЕсли;
	
	Возврат ПолучитьРезультатЗапроса(Запрос,"Статус");
	
КонецФункции

Функция ПолучитьСтатусДокумента(ДокументСсылка,ИмяСтатуса = Неопределено) Экспорт
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_СтатусыДокументов.Статус
	|ИЗ
	|	РегистрСведений.КонтурEDI_СтатусыДокументов КАК КонтурEDI_СтатусыДокументов
	|ГДЕ
	|	КонтурEDI_СтатусыДокументов.Документ = &Документ";
	
	Если НЕ ИмяСтатуса = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "	И ИмяСтатуса = &ИмяСтатуса";
		Запрос.УстановитьПараметр("ИмяСтатуса",ИмяСтатуса);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ",ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка));
	
	Возврат ПолучитьРезультатЗапроса(Запрос,"Статус");
		
КонецФункции

//}}}
	
//{{{	СОХРАНЕНИЕ\ЧТЕНИЕ СООБЩЕНИЙ
//******************************************************************

Процедура СохранитьСообщение(Сообщение,Знач Статус = Неопределено) Экспорт
	
	Если Сообщение.Направление = "Исходящее" Тогда
		
		//Если переотправляем уже существующее сообщение, то скроем его с глаз долой и сделаем новое.
		Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") Тогда
			СтароеСообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.ПереотправляемоеСообщениеСсылка);
			СтароеСообщениеОбъект.ТипСообщения = "#"+СтароеСообщениеОбъект.ТипСообщения; //Скрываем старое сообщение.
			СохранитьОбъектСообщения(СтароеСообщениеОбъект);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение.ДокументСсылка) Тогда
			
			СуществующееСообщение = НайтиСообщениеДокумента(Сообщение.ДокументСсылка,Сообщение.ТипСообщения,"Исходящее");
			
			Если Сообщение.Свойство("СообщениеСсылка")
				И СуществующееСообщение<>Неопределено
				И СуществующееСообщение <> Сообщение.СообщениеСсылка Тогда
				
				Сообщить_КонтурEDI("Сообщение "+Сообщение.ТипСообщения+" по документу "+Сообщение.ДокументСсылка+" уже было отправлено");
				Возврат;

				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение.СообщениеСсылка) Тогда//Пересохраняем существующее сообщение
		
		СообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
		
	Иначе//сообщение еще не записано в справочник
		
		Если ВнешнееХранилище Тогда
			СообщениеОбъект = СоединениеСХранилищем.Справочники.КонтурEDI_Сообщения.СоздатьЭлемент();
		Иначе
			СообщениеОбъект = Справочники.КонтурEDI_Сообщения.СоздатьЭлемент();
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		СообщениеОбъект.Статус = ?(Сообщение.Направление = "Входящее","ВходящийОжидаетУстановкиСоответствий","Ожидает отправки");//статус по умолчанию для новых сообщений
	Иначе
		СообщениеОбъект.Статус = Статус;
	КонецЕсли;
	
	Если Сообщение.Статус = "Rejected" Тогда
		СообщениеОбъект.Статус = "Отклонен";//это единственный случай смены статуса, на будущее перенести в СохранитьОбъектСообщения.
	КонецЕсли;	
	
	СохранитьОбъектСообщения(СообщениеОбъект,Сообщение);
	//Внутри куча кейсов, написанных в свое время для совместимости старого и нового сообщения. Там же и заполнение всех полей.
	
	//и заполним в структуре Сообщение поле СообщениеСсылка, чтобы вернуть наружу
	Если ВнешнееХранилище Тогда
		Сообщение.СообщениеСсылка = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(СообщениеОбъект.Ссылка);
	Иначе
		Сообщение.СообщениеСсылка = СообщениеОбъект.Ссылка;
	КонецЕсли;
	
	Если Сообщение.Статус = "Отклонен" И Сообщение.ТипСообщения = "ORDRSP" И Сообщение.Свойство("ИсходныйORDERS") и ЗначениеЗаполнено(Сообщение.ИсходныйORDERS) Тогда
		//заказ может оказаться полностью отклоненным с созданием документа-заказа1С (пустая ТЧ документа или на УФ стоят галочки отменено у всех строк товаров)
		//Если мы отправляем ORDRSP по незагруженному заказу (в котором нет документа), то нам надо найти исходный ORDERS и пометить, что его обработка больше не требуется.
		//на будущее вынести отсюда
		ИсходныйORDERSОбъект = ПолучитьОбъектСообщения(Сообщение.ИсходныйORDERS);
		ИсходныйORDERSОбъект.Статус = "Отклонен";
		СохранитьОбъектСообщения(ИсходныйORDERSОбъект);
	КонецЕсли;
	Если Сообщение.ТипСообщения = "RETREC" И Сообщение.Свойство("ИсходныйRETDES") и ЗначениеЗаполнено(Сообщение.ИсходныйRETDES) Тогда
		ИсходныйRETDESОбъект = ПолучитьОбъектСообщения(Сообщение.ИсходныйRETDES);
		ИсходныйRETDESОбъект.Статус = "Отклонен";
		СохранитьОбъектСообщения(ИсходныйRETDESОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьСообщение(СообщениеСсылка =  Неопределено, ДокументСсылка =  Неопределено, ТипСообщения = Неопределено,Направление = Неопределено,Статусное = Неопределено,Параметры = Неопределено) Экспорт
	
	//передаем сюда либо ссылку, либо Документ+Тип (+Направление - пока не используется, т.к. пересечений по направлению между типами сообщений пока нет)
	//рефакторинг: пятый параметр "Статусное" не используется, но при этом предшествует следующему - "Параметры". Поэтому удалить не получится.
	СтандартнаяОбработкаEDI = Истина;
	
	Сообщение = ОбработкаСобытияПодключаемогоМодуля("ПрочитатьСообщение",СтандартнаяОбработкаEDI,
			Новый Структура("СообщениеСсылка, ДокументСсылка, ТипСообщения, Направление,Статусное,Параметры",
			СообщениеСсылка, ДокументСсылка, ТипСообщения, Направление, Статусное, Параметры));
			
	Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Сообщение;
	КонецЕсли;
	
	Возврат ПрочитатьСообщение_БМИ(СообщениеСсылка, ДокументСсылка, ТипСообщения, Направление, Статусное, Параметры);
	
КонецФункции

//На входе: сообщение (структура)
//В итоге: выбранное сообщение помечено статусом ("НоваяВерсия"/"Загружен").
//Остальные = статусом "НоваяВерсия" и "#ORDERS"
Функция МагическиОбработатьДублиORDERS(СообщениеСтруктура,СтатусТекущегоСообщения = "НоваяВерсия") Экспорт
	
	//Следующая конструкция является хрупким компромиссом между функциональностью, оптимальностью и читабельностью.
	//Идеальный вариант - хранить предыдущие версии сообщения и связанные документы в табличных частях одного элемента справочника,
	//	но это потребует глубокой перестройки модуля. Поэтому пока оставим такой вариант.
	
	//Общий принцип:
	//1. Функция ПолучитьДублирующиеСообщения вернет ТаблицуЗначений, где будет присутствовать поле ID.
	//	Т.е. каждая строка в выборке будет соответствовать реально полученному сообщению.
	//2. Соберем запрос по всем сообщениям с такими ID. В них могут присутствовать "виртуальные" сообщения, привязанные к документам, либо "реальные" без привязки.
	//3. Сгруппируем выборку по ID. Будем считать в рамках нескольких сообщений с одинаковым ID самое первое - "настоящим", остальные - "виртуальными".
	//4. Пройдемся по всей выборке, от "настоящих" отвяжем привязанные к ним документы, а "виртуальные" удалим. Документы запомним в МассивСвязанныхДокументов.
	//5. Возьмем сообщение, поданное на вход функции (СообщениеСтруктура.СообщениеСсылка). 
	//	Если с ним не связан ни один документ 1С, то привяжем к нему первый попавшийся документ из МассивСвязанныхДокументов.
	//	Для всех остальных документов в МассивСвязанныхДокументов создадим "Виртуальные" сообщения методом клонирования из СообщениеСтруктура.СообщениеСсылка.
	
	//И все это - в транзакции.
	
	Если Не (СообщениеСтруктура.ТипСообщения = "ORDERS"
		И СообщениеСтруктура.Направление = "Входящее") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СообщениеСсылка = СообщениеСтруктура.СообщениеСсылка;
	
	Если ЗначениеЗаполнено(СообщениеСтруктура.ТочкаДоставки) Тогда
		_ТочкаДоставки = СообщениеСтруктура.ТочкаДоставки;
	Иначе
		_ТочкаДоставки = СообщениеСтруктура.Грузополучатель1С;
	КонецЕсли;	
	
	Дубли = ПолучитьДублирующиеСообщения(СообщениеСтруктура.СообщениеСсылка);
	
	МассивСвязанныхДокументов = Новый Массив;
	
	МассивIDСообщений = Дубли.ВыгрузитьКолонку("ID");
	Если ВнешнееХранилище Тогда
		МассивIDСообщений = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивIDСообщений));
	КонецЕсли;	
	
	НачатьТранзакцию_КонтурEDI();
	
	Попытка
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_Сообщения.Ссылка,
		|	КонтурEDI_Сообщения.Документ,
		|	ВЫБОР
		|		КОГДА КонтурEDI_Сообщения.ID = &ТекущийID
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТекущаяПачкаСообщений,
		|	ВЫБОР
		|		КОГДА КонтурEDI_Сообщения.Ссылка = &ТекущаяСсылка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТекущаяСсылка,
		|	КонтурEDI_Сообщения.ID
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	КонтурEDI_Сообщения.ID В(&МассивID)
		|	И (КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
		|			ИЛИ КонтурEDI_Сообщения.ТипСообщения = ""#ORDERS"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоТекущаяПачкаСообщений,
		|	ЭтоТекущаяСсылка УБЫВ"
		;
		Запрос.УстановитьПараметр("МассивID",		МассивIDСообщений);
		Запрос.УстановитьПараметр("ТекущийID",		СообщениеСтруктура.ID);
		Запрос.УстановитьПараметр("ТекущаяСсылка",	ПреобразоватьЗначениеДляВнешнегоХранилища(СообщениеСсылка));
		ТабСообщенийДляОбработки = Запрос.Выполнить().Выгрузить();
		Если ВнешнееХранилище Тогда
			ТабСообщенийДляОбработки = ПолучитьТаблицуИзВнешнейБазы(ТабСообщенийДляОбработки,Новый Структура("Документ",Документы.ТипВсеСсылки())); //на рефакторинг: опираться на ТаблицаТипов
		КонецЕсли;	
		
		//в каждой пачке сообщений (с одинаковым ID) оставим только самое первое, остальные удалим
		Для Каждого ID Из МассивIDСообщений Цикл
			СтрокиСообщений = ТабСообщенийДляОбработки.НайтиСтроки(Новый Структура("ID",ID));
			ПервоеСообщениеВПачке = Истина;
			Для Каждого СтрокаСообщения Из СтрокиСообщений Цикл
				Если ЗначениеЗаполнено(СтрокаСообщения.Документ)
					И МассивСвязанныхДокументов.Найти(СтрокаСообщения.Документ)=Неопределено Тогда
					//запомним, какие документы были привязаны к старым сообщениям
					МассивСвязанныхДокументов.Добавить(СтрокаСообщения.Документ);
				КонецЕсли;
				
				ТекСообщениеОбъект = ПолучитьОбъектСообщения(СтрокаСообщения.Ссылка);
				Если ПервоеСообщениеВПачке Тогда
					//в этой пачке нам надо оставить только самое первое сообщение, отвязать от документа и пометить "#".
					ТекСообщениеОбъект.ТипСообщения = "#ORDERS";
					ТекСообщениеОбъект.Документ = Неопределено;
					СохранитьОбъектСообщения(ТекСообщениеОбъект);
					ПервоеСообщениеВПачке = Ложь;
				Иначе
					//остальные удалить
					ТекСообщениеОбъект.Удалить();
				КонецЕсли;	
					
			КонецЦикла;	
		КонецЦикла;	
		
		//теперь у нас есть только одно сообщение с текущим ID, равным СообщениеСтруктура.ID
		
		//первое обработаем отдельно: попробуем привязать к нему первый же документ из массива
		ИсходноеСообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
		Если МассивСвязанныхДокументов.Количество()>0 Тогда
			ТекДокументДляПривязки = МассивСвязанныхДокументов[0];
			ИсходноеСообщениеОбъект.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(ТекДокументДляПривязки);
			МассивСвязанныхДокументов.Удалить(0);//этот документ обработан, все ок
		КонецЕсли;
		ИсходноеСообщениеОбъект.ТипСообщения = "ORDERS";
		ИсходноеСообщениеОбъект.Статус 	= СтатусТекущегоСообщения;
		СохранитьОбъектСообщения(ИсходноеСообщениеОбъект);
		
		//если у нас было привязано несколько документов, то зайдем еще и сюда
		Для Сч=0 По МассивСвязанныхДокументов.Количество()-1 Цикл
			
			ТекДокументДляПривязки = МассивСвязанныхДокументов[Сч];
			ТекСообщениеОбъект = ИсходноеСообщениеОбъект.Скопировать();
			
			//копируются все реквизиты
			ТекСообщениеОбъект.УстановитьНовыйКод();
			ТекСообщениеОбъект.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(ТекДокументДляПривязки);
			ТекСообщениеОбъект.ТипСообщения = "ORDERS";
			ТекСообщениеОбъект.Статус 	= СтатусТекущегоСообщения;
			СохранитьОбъектСообщения(ТекСообщениеОбъект);
			
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию_КонтурEDI();
		
	Исключение
		
		ОтменитьТранзакцию_КонтурEDI();
		_Ошибка = ОписаниеОшибки();
		ВызватьИсключение _Ошибка;//принудительно прервем все
		
	КонецПопытки;
	
	Возврат Истина;
КонецФункции	

//Возвращает СправочникОбъект.КонтурEDI_Сообщения - текущей базы или внешнего хранилища
Функция ПолучитьОбъектСообщения(СообщениеСсылка) Экспорт
	Возврат ПреобразоватьЗначениеДляВнешнегоХранилища(СообщениеСсылка).ПолучитьОбъект();
КонецФункции

//Сохраняет СправочникОбъект.КонтурEDI_Сообщения - текущей базы или внешнего хранилища.
//Также для совместимости с текущей архитектурой проверяет записи в РС "Статусы документов".
//В будущем избавиться от этого.
Процедура СохранитьОбъектСообщения(СообщениеОбъект,СтруктураСообщения=Неопределено) Экспорт
	
	//Если передаем сюда Структуру, то перезаполним все реквизиты сообщения.
	//А если не передаем, то оставляем все как есть.
	//Продумать все-таки конвертацию со старых модулей: там парсинг структуры может понадобиться.
	//Заодно объединить конверташку с УФ и кинуть в модуль объекта.
	Если СтруктураСообщения<>Неопределено Тогда
		
		ЗаполнитьРеквизитыОбъектаСообщенияИзСтруктуры(СообщениеОбъект,СтруктураСообщения);
		
		Если СтруктураСообщения.Статус = "Отменен" или СтруктураСообщения.Статус = "Canceled" Тогда
			СообщениеОбъект.ОтклоненоОтправителем = Истина;
		ИначеЕсли СтруктураСообщения.Статус = "ВходящийНеПрошелВалидацию" Тогда
			СообщениеОбъект.ОписаниеОшибки = СтруктураСообщения.Комментарий;//по возможности утащить в ЗаполнитьРеквизитыСообщения..., но проверить обработку статусных.
		КонецЕсли;
		
	КонецЕсли;
	
	//укажем ДатуЗагрузки для исходящих сообщений, будем также и по ней сортировать в основном интерфейсе
	Если Не ЗначениеЗаполнено(СообщениеОбъект.ДатаЗагрузки) И СообщениеОбъект.ЭтоНовый() Тогда
		СообщениеОбъект.ДатаЗагрузки = ТекущаяДата();
	КонецЕсли;	
	
	//Теперь определимся с полем "ТребуемоеДействие".
	
	//1. Смотрим, что в "статусе документа" и в "статусе сообщения".
	//2. Статусы "ОбратныйЗаказ" - "Есть расхождения" и "Приемка" - "Принят частично" и "Заказ" - "Уточнен" являются более приоритетными.
	//	они должны снимать флаг "Архив" и писать требуемое действие - 3 видов.
	
	//Отдельные случаи, зависящие от РС "СтатусыДокументов". Это переход между старым и новым интерфейсом, со временем стоит вычистить.
	//А оставить можно отдельным методом в конвертации.
	//Вычищать будем в следующем релизе в таком виде:
	//Вместе с вызовом "УстановитьСтатусДокумента" для этих 3 случаев будем дополнительно вызывать СохранитьОбъектСообщения с определенным признаком ("ОбработатьРасхождения").
	
	ЕстьСпецифическаяОбработка = Ложь;
	
	Если СообщениеОбъект.ТипСообщения = "ORDRSP" 
		И СообщениеОбъект.Статус = "Загружен"
		И СообщениеОбъект.Направление = "Входящее" Тогда
		
		//Для уточняющих ORDRSP на стороне сети
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_СтатусыДокументов.Документ
		|ИЗ
		|	РегистрСведений.КонтурEDI_СтатусыДокументов КАК КонтурEDI_СтатусыДокументов
		|ГДЕ
		|	КонтурEDI_СтатусыДокументов.Документ = &Документ
		|	И КонтурEDI_СтатусыДокументов.ИмяСтатуса = ""Заказ""
		|	И КонтурEDI_СтатусыДокументов.Статус = ""Уточнен""";
		Запрос.УстановитьПараметр("Документ",СообщениеОбъект.Документ);
		Если Не Запрос.Выполнить().Пустой() Тогда
			СообщениеОбъект.Архив = Ложь;
			СообщениеОбъект.ТребуемоеДействие = "ОбработатьРасхождения";
			ЕстьСпецифическаяОбработка = Истина;
		КонецЕсли;	
		
	//Для RECADV проверим, нет ли в статусах сообщений записи по данному документу "Принят частично"
	ИначеЕсли СообщениеОбъект.ТипСообщения = "RECADV" 
		И СообщениеОбъект.Направление = "Входящее" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_СтатусыДокументов.Документ
		|ИЗ
		|	РегистрСведений.КонтурEDI_СтатусыДокументов КАК КонтурEDI_СтатусыДокументов
		|ГДЕ
		|	КонтурEDI_СтатусыДокументов.Документ = &Документ
		|	И КонтурEDI_СтатусыДокументов.ИмяСтатуса = ""Приемка""
		|	И КонтурEDI_СтатусыДокументов.Статус = ""Принят частично""";
		Запрос.УстановитьПараметр("Документ",СообщениеОбъект.Документ);
		Если Не Запрос.Выполнить().Пустой() Тогда
			СообщениеОбъект.Архив = Ложь;
			СообщениеОбъект.ТребуемоеДействие = "ОбработатьРасхождения";//ОбработатьРезультатПриемки
			ЕстьСпецифическаяОбработка = Истина;
		КонецЕсли;	
		
		//То же самое для ORDERS в ответ на PORDERS
	ИначеЕсли СообщениеОбъект.ТипСообщения = "ORDERS" 
		И СообщениеОбъект.Направление = "Входящее" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтурEDI_СтатусыДокументов.Документ
		|ИЗ
		|	РегистрСведений.КонтурEDI_СтатусыДокументов КАК КонтурEDI_СтатусыДокументов
		|ГДЕ
		|	КонтурEDI_СтатусыДокументов.Документ = &Документ
		|	И КонтурEDI_СтатусыДокументов.ИмяСтатуса = ""ОбратныйЗаказ""
		|	И КонтурEDI_СтатусыДокументов.Статус = ""Есть расхождения""";
		Запрос.УстановитьПараметр("Документ",СообщениеОбъект.Документ);
		Если Не Запрос.Выполнить().Пустой() Тогда
			СообщениеОбъект.Архив = Ложь;
			СообщениеОбъект.ТребуемоеДействие = "ОбработатьРасхождения";
			ЕстьСпецифическаяОбработка = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	
	СообщениеОбъект.Архив = Ложь;//скинем флаг по умолчанию

	Если Не ЕстьСпецифическаяОбработка Тогда
		
		Если СообщениеОбъект.Направление = "Входящее" Тогда
			
			Если СообщениеОбъект.ОтклоненоОтправителем Тогда
				СообщениеОбъект.Архив = Ложь;
				СообщениеОбъект.ТребуемоеДействие = "СообщениеОтмененоОтправителем";
				
			ИначеЕсли СообщениеОбъект.Статус = "Загружен" Тогда
				СообщениеОбъект.Архив = Истина;
				СообщениеОбъект.ТребуемоеДействие = "РаботаЗавершена";
				
			ИначеЕсли СообщениеОбъект.ТипСообщения = "ORDERS" 
				И СообщениеОбъект.Статус = "НоваяВерсия" Тогда
				СообщениеОбъект.ТребуемоеДействие = "ОбработатьНовуюВерсию";
				
			ИначеЕсли СообщениеОбъект.Статус = "Отклонен" Тогда
				СообщениеОбъект.ТребуемоеДействие = "СообщениеОтклоненоПолучателем";
				
			ИначеЕсли СообщениеОбъект.Статус = "Пропущен" Тогда
				СообщениеОбъект.ТребуемоеДействие = "СообщениеОтменено";
				
			ИначеЕсли СообщениеОбъект.Статус = "ВходящийНеПрошелВалидацию" Тогда
				СообщениеОбъект.ТребуемоеДействие = "НеПрошлоВалидацию";
				
			Иначе
				СообщениеОбъект.ТребуемоеДействие = "ПринятьСообщение";
			КонецЕсли;	
			
		ИначеЕсли СообщениеОбъект.Направление = "Исходящее" Тогда
			
			Если СообщениеОбъект.Статус = "Ожидает отправки" Тогда
				СообщениеОбъект.ТребуемоеДействие = "ВыполнитьОбмен";
				
			ИначеЕсли СообщениеОбъект.Статус = "Сохранен" Тогда
				СообщениеОбъект.ТребуемоеДействие = "ОбработатьСохраненноеСообщение";
				
			ИначеЕсли СообщениеОбъект.Статус = "Отправлен" Тогда
				СообщениеОбъект.ТребуемоеДействие = "ДождатьсяДоставки";
				
			ИначеЕсли СообщениеОбъект.Статус = "Отменен" Тогда
				СообщениеОбъект.ТребуемоеДействие = "СообщениеОтмененоОтправителем";
				
			ИначеЕсли СообщениеОбъект.Статус = "Ожидает подписания" Тогда
				СообщениеОбъект.ТребуемоеДействие = "ПодписатьВДиадок";
				
			ИначеЕсли СообщениеОбъект.Статус = "Ожидает исправления ошибок" Тогда
				СообщениеОбъект.ТребуемоеДействие = "ИсправитьОшибки";
				
			ИначеЕсли СообщениеОбъект.Статус = "Доставлен с уточнением" Тогда
				СообщениеОбъект.ТребуемоеДействие = "ИсправитьОшибки";
				
			ИначеЕсли СообщениеОбъект.Статус = "ALCRPT ожидает исправления ошибок" Тогда
				СообщениеОбъект.ТребуемоеДействие = "ИсправитьОшибки";

			ИначеЕсли
				(СообщениеОбъект.Статус = "Доставлен") 
				Или (СообщениеОбъект.Статус = "ИсходящийПодписанВДиадок" )
				Или (СообщениеОбъект.Статус = "Подписан и отправлен" )//неразбериха со статусами
			Тогда
				Если СообщениеОбъект.ОтклоненоОтправителем Тогда
					СообщениеОбъект.Архив = Ложь;
					СообщениеОбъект.ТребуемоеДействие = "СообщениеОтмененоОтправителем";
				Иначе
					СообщениеОбъект.Архив = Истина;
					СообщениеОбъект.ТребуемоеДействие = "РаботаЗавершена";
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	ОбработкаСобытияПодключаемогоМодуля("ПередЗаписьюОбъектаСообщения",,Новый Структура("СообщениеОбъект",СообщениеОбъект));
	
	СообщениеОбъект.Записать();
	
	Отчетность_ОтразитьСтатистикуСообщения(СообщениеОбъект,СтруктураСообщения);
	
КонецПроцедуры

//Декомпозиция метода "СохранитьОбъектСообщения"
Процедура ЗаполнитьРеквизитыОбъектаСообщенияИзСтруктуры(СообщениеОбъект,СтруктураСообщения)
	
	СообщениеОбъект.ТипСообщения		= СтруктураСообщения.ТипСообщения;//как быть в случае, когда сообщение сохраняем с "#"?
	СообщениеОбъект.Направление			= СтруктураСообщения.Направление;
	СообщениеОбъект.НомерДокумента		= СтруктураСообщения.ДокументEDI.Номер;
	СообщениеОбъект.ДатаДокумента		= СтруктураСообщения.ДокументEDI.Дата;
	СообщениеОбъект.НомерСерииЗаказов	= СтруктураСообщения.НомерСерииЗаказов;
	СообщениеОбъект.ДатаПоставки		= СтруктураСообщения.ДатаПоставки;
	Если СтруктураСообщения.ТипСообщения = "COINVOIC" Тогда
		СообщениеОбъект.Сумма			= СтруктураСообщения.СуммаВсегоУвеличение-СтруктураСообщения.СуммаВсегоУменьшение;
	Иначе
		СообщениеОбъект.Сумма			= СтруктураСообщения.СуммаВсего;
	КонецЕсли;	
	СообщениеОбъект.ID					= СтруктураСообщения.ID;
	
	//Заполним поле "Организация"
	Если ЕстьМетаданныеХраненияОрганизации Тогда
		ТекОрганизация = Неопределено;
		
		Если ОпределитьКемМыЯвляемся(СтруктураСообщения) = "Поставщик" Тогда
			Если ЭтоОбратнаяОтгрузка(СтруктураСообщения.ТипСообщения) Тогда
				СтруктураСообщения.Свойство("Покупатель1С",ТекОрганизация);
			Иначе		
				СтруктураСообщения.Свойство("Продавец1С",ТекОрганизация);
			КонецЕсли;		
		Иначе
			Если ЭтоОбратнаяОтгрузка(СтруктураСообщения.ТипСообщения) Тогда
				СтруктураСообщения.Свойство("Продавец1С",ТекОрганизация);
			Иначе
				СтруктураСообщения.Свойство("Покупатель1С",ТекОрганизация);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекОрганизация) Тогда
			СообщениеОбъект.Организация = ПреобразоватьЗначениеДляВнешнегоХранилища(ТекОрганизация);
		КонецЕсли;
		
	КонецЕсли;
	
	//Заполним "НомерЗаказа" и "ДатаЗаказа"
	Если СообщениеОбъект.ТипСообщения = "ORDERS" Тогда
		СообщениеОбъект.НомерЗаказа			= СтруктураСообщения.ДокументEDI.Номер;
		СообщениеОбъект.ДатаЗаказа			= СтруктураСообщения.ДокументEDI.Дата;
	Иначе
		СообщениеОбъект.НомерЗаказа			= СтруктураСообщения.ЗаказEDI.Номер;
		СообщениеОбъект.ДатаЗаказа			= СтруктураСообщения.ЗаказEDI.Дата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СообщениеОбъект.ДатаПоставки) Тогда
		СтруктураСообщения.Свойство("ДатаПоставки",СообщениеОбъект.ДатаПоставки);			
	КонецЕсли; //ДатаПоставки
	
	//заполним реквизиты справочника: Партнер, Документ, ТочкаДоставки
	Если ВнешнееХранилище Тогда
		СообщениеОбъект.Хранилище = СоединениеСХранилищем.NewObject("ХранилищеЗначения",ЗначениеВСтрокуВнутр(СтруктураСообщения),СоединениеСХранилищем.NewObject("СжатиеДанных"));
	Иначе
		СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(СтруктураСообщения,Новый СжатиеДанных(9));
	КонецЕсли;
	
	СообщениеОбъект.Партнер			= ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураСообщения.Партнер);
	СообщениеОбъект.ТочкаДоставки	= ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураСообщения.ТочкаДоставки);
	СообщениеОбъект.Документ		= ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураСообщения.ДокументСсылка);
		
	//Для старых исходящий сообщений у нас вроде иногда не было Партнера, и приходилось его как-то вычислять.
	//Оставлю пока на всякий случай.
	Если СообщениеОбъект.Партнер.Пустая() Тогда
		_Партнер = Неопределено;
		Если СообщениеОбъект.Направление = "Исходящее" Тогда
			СтруктураСообщения.Свойство("Получатель1С",_Партнер);
		Иначе
			СтруктураСообщения.Свойство("Отправитель1С",_Партнер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(_Партнер) Тогда
			СообщениеОбъект.Партнер = ПреобразоватьЗначениеДляВнешнегоХранилища(_Партнер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Перезаписываем хранилище сообщения
Процедура ПерезаписатьХранилищеСообщения(Сообщение, СообщениеОбъект = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(СообщениеОбъект) Тогда
		СообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
	КонецЕсли;
	Если ВнешнееХранилище Тогда
		СообщениеОбъект.Хранилище = СоединениеСХранилищем.NewObject("ХранилищеЗначения",ЗначениеВСтрокуВнутр(Сообщение),СоединениеСХранилищем.NewObject("СжатиеДанных"));
	Иначе
		СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(Сообщение,Новый СжатиеДанных(9));
	КонецЕсли;
	СообщениеОбъект.Записать();//здесь ничего криминального не делаем, так что пропустим навороченные обработчики
	
КонецПроцедуры // ПерезаписатьХранилищеСообщения()

//}}}

//{{{	ОБРАБОТКА ДЕЙСТВИЙ ФОРМ
//******************************************************************

#Если Клиент Тогда
Процедура ПереотправитьINVOICПоРеестру() Экспорт
	ДиалогВыбораФайла = неопределено;
	Выполнить("ДиалогВыбораФайла =Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);");
	ДиалогВыбораФайла.Фильтр = "Файлы реестра документов из Диадока(*.csv)|*.csv";			
	ДиалогВыбораФайла.Заголовок = "Выберите файл реестра счетов-фактур из Диадока";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ПолноеИмяФайла = ДиалогВыбораФайла.ВыбранныеФайлы[0];
		
		Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			
			Текст = Новый ТекстовыйДокумент;
			
			Попытка
				Текст.Прочитать(ПолноеИмяФайла);
			Исключение             
				Сообщить(ОписаниеОшибки());
				ВывестиПредупреждение_КонтурEDI("Не удалось прочитать выбранный файл!");
				Возврат;
			КонецПопытки;
			
			ТабДокументов = Новый ТаблицаЗначений;
			ТабДокументов.Колонки.Добавить("ДокументВДиадоке",,"Документ в Диадоке");
			ТабДокументов.Колонки.Добавить("Документ",,"Документ в 1С");
			
			КолСтрок = Текст.КоличествоСтрок();
			
			ТипДокументаСчетФактура = ПолучитьТипЗначенияОбъекта("ИсходящийСчетФактура",,Истина);
			Если КолСтрок>1 Тогда
				
				Для н = 2 По КолСтрок Цикл
					
					ТекСтрока = Текст.ПолучитьСтроку(н);
					
					СписокПараметров = РазложитьСтроку(ТекСтрока,";");
					
					Если Ложь Тогда
						СписокПараметров = Новый СписокЗначений;
					КонецЕсли;
					
					Если СписокПараметров.Количество()>6 Тогда
						
						СписокПараметров.Получить(3);
						
						ПредставлениеДокумента	= СписокПараметров.Получить(3);
						НомерДокумента			= СписокПараметров.Получить(4);  
						ДатаДокументаСтрокой	= СокрЛП(СписокПараметров.Получить(5));
						
						ДатаХорошая = Ложь;
						
						Попытка
							ДатаДокумента = Дата(Сред(ДатаДокументаСтрокой,7,4),Сред(ДатаДокументаСтрокой,4,2),Лев(ДатаДокументаСтрокой,2));
							ДатаХорошая = Истина;	
						Исключение
							ДатаДокумента = ТекущаяДата();
						КонецПопытки;
						
						НоваяСтрока = ТабДокументов.Добавить();
						
						НоваяСтрока.ДокументВДиадоке = ПредставлениеДокумента;  
						
						НайденныйДокумент = Документы[ТипДокументаСчетФактура].НайтиПоНомеру(НомерДокумента,ДатаДокумента);
						
						Если НЕ ЗначениеЗаполнено(НайденныйДокумент) Тогда
							
							Запрос = Новый Запрос();
							
							ТекстУсловияДата = "";
							Если ДатаХорошая Тогда
								ТекстУсловияДата = "	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, День) = &Дата";
								Запрос.УстановитьПараметр("Дата",ДатаДокумента);
							КонецЕсли;
							
							Запрос.Текст = 
							"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
							|	СчетФактураВыданный.Ссылка
							|ИЗ
							|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
							|ГДЕ
							|	СчетФактураВыданный.Номер ПОДОБНО ""%"+НомерДокумента+"""
							|"+ТекстУсловияДата+"
							|УПОРЯДОЧИТЬ ПО СчетФактураВыданный.Дата УБЫВ";
							
							Запрос.Текст = СтрЗаменить(Запрос.Текст,"СчетФактураВыданный",ТипДокументаСчетФактура);
							
							НайденныйДокумент = ПолучитьРезультатЗапроса(Запрос);			   
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
							НоваяСтрока.Документ = НайденныйДокумент;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ТабДокументов.ВыбратьСтроку()=Неопределено Тогда
					Если Вопрос("Найденные документы будут переотправлены, продолжить?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
						
						КоличествоУспешно = 0;
						
						Для каждого Стр Из ТабДокументов Цикл
							
							Если ЗначениеЗаполнено(Стр.Документ) Тогда
								
								СФ = Стр.Документ;
								Сообщение = ПодготовитьИсходящееСообщение("INVOIC", СФ);
								
								ИсходноеСообщение = НайтиСообщениеДокумента(СФ,"INVOIC");
								Если ИсходноеСообщение = Неопределено Тогда
									Продолжить;//мы не отправляли сообщение по данному документу
								КонецЕсли;
								Сообщение.Вставить("ПереотправляемоеСообщениеСсылка",ИсходноеСообщение);
								
								КопияСообщения		= ПолучитьКопиюСообщения(Сообщение);
								РезультатПроверки	= ПроверитьПоляСообщения(КопияСообщения);
								
								Если РезультатПроверки.Успешно = Истина Тогда
									
									ПараметрыОтправки=Новый Структура;
									ПараметрыОтправки.Вставить("Сообщение",Сообщение);
									ПараметрыОтправки.Вставить("ОтправитьСообщениеИзФормы",Истина);
									
									ОтправитьСообщение("INVOIC",СФ, ПараметрыОтправки);											
									
									КоличествоУспешно=КоличествоУспешно+1;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если КоличествоУспешно = 0 Тогда
							ВывестиПредупреждение_КонтурEDI("Не было отправлено ни одного документа! 
							|Возможно, они содержат ошибки.");
						Иначе
							ВывестиПредупреждение_КонтурEDI("Было успешно подготовлено к переотправке счетов-фактур: "+СокрЛП(КоличествоУспешно)+".");
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ВывестиПредупреждение_КонтурEDI("Выбранный реестр документов не содержит данных!");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

Функция КнопкаФормыСообщенияНажатие(ИмяКнопки,Сообщение,Параметры =  Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("СохранитьСоответствия",Ложь);
	СтруктураВозврата.Вставить("СозданДокумент",Ложь);
	СтруктураВозврата.Вставить("ЗакрытьФорму",Ложь);
	СтруктураВозврата.Вставить("СсылкаНаДокумент");
	СтруктураВозврата.Вставить("СообщениеСохранено",Ложь);
	
	Если ИмяКнопки = "СоздатьЗаказ"
		ИЛИ ИмяКнопки = "СоздатьЗаказПоставщику"
		ИЛИ ИмяКнопки = "ЗагрузитьВозврат"
		ИЛИ ИмяКнопки = "ЗагрузитьУведомлениеОбОтгрузкеВозврата"
		ИЛИ ИмяКнопки = "ЗагрузитьОтветНаЗаказ" 
		ИЛИ ИмяКнопки = "ЗагрузитьУведомлениеОбОтгрузке" 
		ИЛИ ИмяКнопки = "ЗагрузитьУведомлениеОПриемке"
		ИЛИ ИмяКнопки = "ЗагрузитьСчетФактуру"
		Тогда
		
		РезультатПриемки = ПринятьВходящееСообщение(Сообщение);
		
		Если РезультатПриемки.Успешно Тогда
			
			СтруктураВозврата.СозданДокумент		= Истина;
			СтруктураВозврата.СсылкаНаДокумент		= РезультатПриемки.Документ;
			СтруктураВозврата.ЗакрытьФорму			= Истина;
			СтруктураВозврата.СохранитьСоответствия	= Истина;
			
		КонецЕсли;	
		
	ИначеЕсли ИмяКнопки = "ОтправитьОбратныйЗаказ" Тогда
		
		ОтправитьСообщение("PORDERS",Сообщение.Документ1С, Параметры);
		
		СтруктураВозврата.ЗакрытьФорму = Истина;
		
	ИначеЕсли ИмяКнопки = "ОтправитьУведомлениеОбОтгрузке" Тогда
		
		ОтправкаТолькоALCRPT = Ложь;
		Если ЗначениеЗаполнено(Параметры) Тогда
			ОтправкаТолькоALCRPT = Параметры.ОтправкаТолькоALCRPT;
		КонецЕсли;
		
		Если ОтправкаТолькоALCRPT = Истина Тогда
			УстановитьЗначениеСвойстваОбъекта(Сообщение.Документ1С, "НужноОтправитьALCRPT",	Истина);
			УдалитьЗначениеСвойстваОбъекта(Сообщение.Документ1С, "СтатусСообщения_ALCRPT");
		Иначе				
			ОтправитьСообщение("DESADV",Сообщение.Документ1С, Параметры);
		КонецЕсли;	
		
		СтруктураВозврата.ЗакрытьФорму = Истина;
		
	ИначеЕсли ИмяКнопки = "Сохранить" Тогда
	
		СохранитьСообщение(Сообщение);
		УстановитьСтатусСообщения(Сообщение.СообщениеСсылка,Сообщение.Документ1С,Сообщение.ТипСообщения, "ИсходящийСохранен");
		СтруктураВозврата.ЗакрытьФорму = Ложь;
		СтруктураВозврата.СообщениеСохранено = Истина;
		
	ИначеЕсли ИмяКнопки = "ОтправитьУведомлениеОПриемке" Тогда
		
		ОтправитьСообщение("RECADV",Сообщение.Документ1С, Параметры);
		
		СтруктураВозврата.ЗакрытьФорму = Истина;
		
	ИначеЕсли ИмяКнопки = "ОтправитьЗаказ" Тогда
		
		ОтправитьСообщение("ORDERS",Сообщение.Документ1С, Параметры);
		
		СтруктураВозврата.ЗакрытьФорму = Истина;
		
	ИначеЕсли ИмяКнопки = "ОтправитьУведомлениеОПриемкеВозврата" Тогда
		
		ОтправитьСообщение("RETREC",Сообщение.Документ1С, Параметры);
		
		СтруктураВозврата.ЗакрытьФорму = Истина;
		
	ИначеЕсли ИмяКнопки = "ОтправитьОтветНаЗаказ" Тогда
		
		ОтправитьСообщение("ORDRSP",Сообщение.Документ1С, Параметры);
		
		СтруктураВозврата.ЗакрытьФорму = Истина;
		
	ИначеЕсли ИмяКнопки = "ОтправитьСчетФактуру" Тогда
		
		ОтправитьСообщение("INVOIC",Сообщение.Документ1С, Параметры);
		
		СтруктураВозврата.ЗакрытьФорму = Истина;
		
	ИначеЕсли ИмяКнопки = "ОтправитьКорректировочныйСчетФактуру" Тогда
		
		ОтправитьСообщение("COINVOIC",Сообщение.Документ1С, Параметры);
		
		СтруктураВозврата.ЗакрытьФорму = Истина;
		
	КонецЕсли;	
	
	Возврат СтруктураВозврата;
	
КонецФункции

//}}}

Процедура ПослеОтправкиИсходящегоСообщения(Сообщение,РезультатОтправки) Экспорт

	//по идее можно кинуть в ОтправитьПодготовленноеСообщение, продумать. Только метод экспортный, что грустно.
	
	//нам вообще нельзя больше работать без СообщениеСсылка.
	
	Если ПротоколОбмена_КонтурEDI="API" Тогда
		
		//Учтем виртуальные сообщения для ORDRSP в случае деления входящего ORDERS
		МассивСообщенийНаОбработку = Новый Массив;
		МассивСообщенийНаОбработку.Добавить(Сообщение.СообщениеСсылка);
		
		Если Сообщение.ТипСообщения = "ORDRSP" Тогда
			ВиртуальныеСообщения = ПолучитьВиртуальныеСвязанныеORDERS(Сообщение.ДокументСсылка);
			Для Каждого Эл Из ВиртуальныеСообщения Цикл
				Если Эл.ORDRSP<>Null Тогда
					МассивСообщенийНаОбработку.Добавить(Эл.ORDRSP);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СообщениеСсылка Из МассивСообщенийНаОбработку Цикл
			
			СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
			
			//сохраним исходный ID
			НовСтрокаСвойств = СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
			НовСтрокаСвойств.ИмяРеквизита = "OriginalId";
			НовСтрокаСвойств.Значение = СтрЗаменить(СообщениеОбъект.ID,"-","");
			
			//запишем тот ID, который выдал сервер. По нему потом придет событие о смене статуса для ОбработатьСтатусноеСообщение_API
			СообщениеОбъект.ID = СтрЗаменить(РезультатОтправки.MessageId,"-","");
			
			//и BoxId тоже запишем на всякий случай
			НовСтрокаСвойств = СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
			НовСтрокаСвойств.ИмяРеквизита = "BoxId";
			НовСтрокаСвойств.Значение = СтрЗаменить(РезультатОтправки.BoxId,"-","");
			
			СообщениеОбъект.Записать();//здесь ничего криминального не делаем, так что пропустим навороченные обработчики
			
		КонецЦикла;
	КонецЕсли;//перезапись ID сообщения при работе по API
	
	//Для того, чтобы проставить в поле ДатаСоздания (creationDateTime) актуальную дату после выполнения обмена
	//Так как записываем в поле ДатаСоздания дважды: 
	//при подготовке сообщения и при выполнении обмена снова конвертируем сообщение и обновляем поле ДатаСоздания
	ПерезаписатьХранилищеСообщения(Сообщение);
	
	УстановитьСтатусСообщения(Сообщение.СообщениеСсылка, , Сообщение.ТипСообщения, "ИсходящийОтправлен");
	
	Если Сообщение.ТипСообщения="ORDRSP" И Сообщение.Статус="Отклонен" и ЗначениеЗаполнено(Сообщение.ДокументСсылка) Тогда
		//Отклонение заказа при наличии документа 1С требует пометки документа на удаление.
		//В противном случае модуль будет предлагать провести документ и далее создать РТУ
		Попытка
			ДокОбъект=Сообщение.ДокументСсылка.ПолучитьОбъект();
			ДокОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			//пользователь мог заблокировать сам документ и установить пометку нам не удастся - сообщим об этом
			Сообщить_КонтурEDI("Не удалось установить пометку удаления у документа: "+Сообщение.ДокументСсылка+" по причине: "+ОписаниеОшибки()+Символы.ПС+"Установите пометку удаления документа самостоятельно");  
		КонецПопытки;
	КонецЕсли;
	
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеОтправкиИсходящегоСообщения",,
			Новый Структура("Сообщение",
			Сообщение));
		
КонецПроцедуры

//{{{	ВСПОМОГАТЕЛЬНЫЕ СПРАВОЧНИКИ EDI
//******************************************************************

// Имена справочников:
//	Партнеры
//	ЮрФизЛицаСторонние
//	ЮрФизЛицаСвои
//	ТочкиДоставкиСторонние
//	ТочкиДоставкиСвои
//
//  УчетныеЗаписи
//  Пользователи

#Если Клиент Тогда
Функция ВыбратьЭлементСправочника(ПолеФормы,ИмяСправочника,Владелец = Неопределено,СтандартнаяОбработка) Экспорт
	
	Если ИмяСправочника = "ТочкаДоставкиСторонняя" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = ПолучитьФорму("ФормаТочкиДоставкиСторонние_Список", ,Новый УникальныйИдентификатор());
		ФормаВыбора.РежимВыбораСписка	= Истина;
		ФормаВыбора.ВладелецВыбора		= Владелец;
		
		Если ФормаВыбора.ОткрытьМодально() = Истина Тогда
			ПолеФормы = ФормаВыбора.СсылкаВыбора;
		КонецЕсли;
		
	ИначеЕсли ИмяСправочника = "Партнер" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = ПолучитьФорму("ФормаПартнеры_Список", ,Новый УникальныйИдентификатор());
		ФормаВыбора.РежимВыбораСписка = Истина;
		
		Если ФормаВыбора.ОткрытьМодально() = Истина Тогда
			ПолеФормы = ФормаВыбора.СсылкаВыбора;
		КонецЕсли;
		
	ИначеЕсли ИмяСправочника = "УчетнаяЗапись" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = ПолучитьФорму("ФормаУчетныеЗаписи_Список", ,Новый УникальныйИдентификатор());
		ФормаВыбора.РежимВыбораСписка = Истина;
		
		Если ФормаВыбора.ОткрытьМодально() = Истина Тогда
			ПолеФормы = ФормаВыбора.СсылкаВыбора;
		КонецЕсли;
		
	ИначеЕсли ИмяСправочника = "НашиОрганизации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = ПолучитьФорму("НашиОрганизации_Список", ,Новый УникальныйИдентификатор());
		ФормаВыбора.РежимВыбораСписка = Истина;
		
		Если ФормаВыбора.ОткрытьМодально() = Истина Тогда
			ПолеФормы = ФормаВыбора.СсылкаВыбора;
		КонецЕсли;
		
	ИначеЕсли ИмяСправочника = "Договор" Тогда
		
		ТипСправочникаДоговоры = ПолучитьТипЗначенияОбъекта("Договор",,Истина);
		ФормаВыбора = Справочники[ТипСправочникаДоговоры].ПолучитьФормуВыбора();
		
		Выбрали = Ложь;
		
		Если ЗначениеЗаполнено(Владелец.Покупатель) Тогда
			Если ТипЗнч(Владелец.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				ФормаВыбора.Отбор.Владелец.Установить(Владелец.Покупатель);
				
				Если ЗначениеЗаполнено(Владелец.Продавец) Тогда
					ИмяРеквизитаОрганизация = ?(ИмяКонфигурации1С = "ДалионУМ" или ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
					ФормаВыбора.Отбор[ИмяРеквизитаОрганизация].Установить(Владелец.Продавец);
				КонецЕсли;
				
				РезультатВыбора = ФормаВыбора.ОткрытьМодально();
				
				Если ЗначениеЗаполнено(РезультатВыбора) Тогда
					
					ПолеФормы = РезультатВыбора;
					
				КонецЕсли;
				
				Выбрали = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Выбрали Тогда
			
			Если ЗначениеЗаполнено(Владелец.Продавец) Тогда
				Если ТипЗнч(Владелец.Продавец) = Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФормаВыбора.Отбор.Владелец.Установить(Владелец.Продавец);
					
					Если ЗначениеЗаполнено(Владелец.Покупатель) Тогда
						ФормаВыбора.Отбор.Организация.Установить(Владелец.Покупатель);
					КонецЕсли;
					
					РезультатВыбора = ФормаВыбора.ОткрытьМодально();
					
					Если ЗначениеЗаполнено(РезультатВыбора) Тогда
						
						ПолеФормы = РезультатВыбора;
						
					КонецЕсли;
					
					Выбрали = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выбрали Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ТочкаДоставкиСторонняя" Тогда
	
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли;
	
КонецФункции

Функция ОткрытьФормуЭлементаСправочника(ИмяСправочника,Ссылка = Неопределено,СтандартнаяОбработка =  Истина) Экспорт
	
	Если ИмяСправочника = "Партнеры" ИЛИ ИмяСправочника = "ПодразделениеСтороннее" Тогда
		
		ФормаСправочника = 	ПолучитьФорму("ФормаПартнеры_Элемент");
		
		Если Ссылка <> Неопределено Тогда
			ФормаСправочника.СсылкаНаПартнера = Ссылка;
		КонецЕсли;	
		
		ФормаСправочника.ОткрытьМодально();
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ИмяСправочника = "ТочкаДоставкиСторонняя" Тогда
		
		ФормаСправочника = 	ПолучитьФорму("ФормаТочкиДоставкиСторонние_Элемент");
		
		Если Ссылка <> Неопределено Тогда
			ФормаСправочника.СсылкаТочкиДоставки = Ссылка;
		КонецЕсли;	
		
		ФормаСправочника.ОткрытьМодально();
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ИмяСправочника = "ТранспортныеЯщики" Тогда
		
		ФормаСправочника = 	ПолучитьФорму("ТранспортныеЯщики_Элемент");
		
		Если Ссылка <> Неопределено Тогда
			ФормаСправочника.Ссылка = Ссылка;
		КонецЕсли;	
		
		ФормаСправочника.ОткрытьМодально();
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецФункции
#КонецЕсли

Функция ПолучитьСписокЭлементовСправочника(ИмяСправочника,ЗНАЧ Владелец = Неопределено) Экспорт
	
	СтандартнаяОбработкаEDI = Истина;
	
	СписокЭлементовСправочника = ОбработкаСобытияПодключаемогоМодуля("ПолучитьСписокЭлементовСправочника",СтандартнаяОбработкаEDI,
								Новый Структура("ИмяСправочника,Владелец",
								ИмяСправочника,Владелец));
	
	Если Не СтандартнаяОбработкаEDI Тогда
		
		Возврат СписокЭлементовСправочника;
		
	КонецЕсли;
	
	Если ИмяСправочника = "Партнеры" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеСправочники.Ссылка,
		|	КонтурEDI_ДополнительныеСправочники.Наименование,
		|	ВЫРАЗИТЬ(ТаблицаРеквизитGLN.Значение КАК СТРОКА(13)) КАК GLN,
		|	ВЫРАЗИТЬ(ТаблицаРеквизитТорговаяСеть.Значение КАК БУЛЕВО) КАК ТорговаяСеть,
		|	ВЫРАЗИТЬ(ТаблицаРеквизитПоставщик.Значение КАК БУЛЕВО) КАК Поставщик,
		|	ВЫРАЗИТЬ(ТаблицаРеквизитДатаОбновления.Значение КАК Строка) КАК ДатаОбновленияPARTIN //в формате 20150101123059
		|ИЗ
		|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаРеквизитGLN
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = ТаблицаРеквизитGLN.Объект
		|			И (ТаблицаРеквизитGLN.Свойство = ""GLN_Партнера"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаРеквизитТорговаяСеть
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = ТаблицаРеквизитТорговаяСеть.Объект
		|			И (ТаблицаРеквизитТорговаяСеть.Свойство = ""ПартнерКакТорговаяСеть"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаРеквизитПоставщик
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = ТаблицаРеквизитПоставщик.Объект
		|			И (ТаблицаРеквизитПоставщик.Свойство = ""ПартнерКакПоставщик"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаРеквизитДатаОбновления
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = ТаблицаРеквизитДатаОбновления.Объект
		|			И (ТаблицаРеквизитДатаОбновления.Свойство = ""ДатаОбновленияPARTIN"")
		|ГДЕ
		|	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""Партнеры""
		|	И (НЕ КонтурEDI_ДополнительныеСправочники.ПометкаУдаления)";

		Если ВнешнееХранилище Тогда
			Возврат ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить());
		Иначе
			Возврат Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ЮрФизЛицаСторонние" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПартнеров.Контрагент КАК ЮрФизЛицо,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаGLN.Значение, """") КАК СТРОКА(13)) КАК GLN
		|ИЗ
		|	(ВЫБРАТЬ
		|		КонтурEDI_ДополнительныеРеквизиты.Объект КАК Контрагент
		|	ИЗ
		|		РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|	ГДЕ
		|		КонтурEDI_ДополнительныеРеквизиты.Значение = &Партнер
		|		И КонтурEDI_ДополнительныеРеквизиты.Свойство = ""ПартнерКонтрагента"") КАК ТаблицаПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаGLN
		|		ПО ТаблицаПартнеров.Контрагент = ТаблицаGLN.Объект
		|			И (ТаблицаGLN.Свойство = ""GLN_Контрагента"")
		|ГДЕ
		|	НЕ ТаблицаGLN.Значение ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("Партнер", ПреобразоватьЗначениеДляВнешнегоХранилища(Владелец));
		
		Если ВнешнееХранилище Тогда
			
			СтруктураКолонокПреобразуемыхВСсылки = Новый Структура("ЮрФизЛицо",Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее")));
			Возврат ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить(),СтруктураКолонокПреобразуемыхВСсылки);
			
		Иначе
			Возврат Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ЮрФизЛицаСвои" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	GLNОрганизаций.Объект КАК ЮрФизЛицо,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(GLNОрганизаций.Значение, """") КАК СТРОКА(13)) КАК GLN,
		|	ВЫРАЗИТЬ(ОрганизацияAPI.Значение КАК Справочник.КонтурEDI_ДополнительныеСправочники) КАК ОрганизацияAPI,
		|	ВЫРАЗИТЬ(ОрганизацияAPI.Значение КАК Справочник.КонтурEDI_ДополнительныеСправочники).Наименование КАК ОрганизацияAPIПредставление
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(КонтурEDI_ДополнительныеРеквизиты.Объект КАК Справочник.Организации) КАК Объект,
		|		КонтурEDI_ДополнительныеРеквизиты.Свойство КАК Свойство,
		|		КонтурEDI_ДополнительныеРеквизиты.Значение КАК Значение
		|	ИЗ
		|		РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|	ГДЕ
		|		КонтурEDI_ДополнительныеРеквизиты.Свойство = ""GLN_Организации"") КАК GLNОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ОрганизацияAPI
		|		ПО GLNОрганизаций.Объект = ОрганизацияAPI.Объект
		|			И (ОрганизацияAPI.Свойство = ""ОрганизацияAPI"")";
		
		
		Если ВнешнееХранилище Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВЫРАЗИТЬ(КонтурEDI_ДополнительныеРеквизиты.Объект КАК Справочник.Организации)","КонтурEDI_ДополнительныеРеквизиты.Объект");
			
			ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
			
			СтруктураКолонокПреобразуемыхВСсылки = Новый Структура("ЮрФизЛицо",Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое")));
			Возврат ПолучитьТаблицуИзВнешнейБазы(ТаблицаСправочника,СтруктураКолонокПреобразуемыхВСсылки);
			
		Иначе
			
			ТипОрганизации = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое",,Истина);
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник.Организации","Справочник."+ТипОрганизации);
			ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
			Возврат ТаблицаСправочника;
			
		КонецЕсли;
			
		
	КонецЕсли;
	
	Если ИмяСправочника = "ТочкиДоставкиСторонние" Тогда
		
		УсловиеПартнер = "";
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Если ВнешнееХранилище Тогда
			Если ТипЗнч(Владелец) = Тип("Строка") Тогда
				Если ЗначениеЗаполнено(Владелец) Тогда
					
					УсловиеПартнер = " ГДЕ (КонтурEDI_ТочкиДоставки.Партнер = &Партнер)";
					
				КонецЕсли;
				Владелец = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Владелец);
				Запрос.УстановитьПараметр("Партнер",Владелец);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Владелец) Тогда
				
				Запрос.УстановитьПараметр("Партнер",Владелец);
				УсловиеПартнер = " ГДЕ (КонтурEDI_ТочкиДоставки.Партнер = &Партнер)";
				
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_ТочкиДоставки.Партнер,
		|	КонтурEDI_ТочкиДоставки.Ссылка,
		|	КонтурEDI_ТочкиДоставки.Наименование,
		|	КонтурEDI_ТочкиДоставки.АдресДоставки,
		|	КонтурEDI_ТочкиДоставки.GLN,
		|	КонтурEDI_ТочкиДоставки.СвязанныйСправочник1 КАК ЮрФизЛицо,
		|	КонтурEDI_ТочкиДоставки.СвязанныйСправочник2 КАК ТочкаДоставкиСвойСправочник,
		|	КонтурEDI_ТочкиДоставки.Подразделение,
		|	КонтурEDI_ТочкиДоставки.ЗагружатьСообщения КАК ЗагружатьСообщения
		|ИЗ
		|	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
		|" + УсловиеПартнер;
		
		ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
		
		ТипЮрФизЛица = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее",Истина);
		ТипСвоейТочкиДоставки = ПолучитьКонстантуEDI("СвойСправочникТочекДоставки");
		
		Если ВнешнееХранилище Тогда
			
			СтруктураКолонокПреобразуемыхВСсылки = Новый Структура();
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("ЮрФизЛицо",Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее")));
			Если ЗначениеЗаполнено(ТипСвоейТочкиДоставки) Тогда
				СтруктураКолонокПреобразуемыхВСсылки.Вставить("ТочкаДоставкиСвойСправочник",Новый ОписаниеТипов("СправочникСсылка."+ТипСвоейТочкиДоставки));
			Иначе
				СтруктураКолонокПреобразуемыхВСсылки.Вставить("ТочкаДоставкиСвойСправочник");
			КонецЕсли;	
			
			ТаблицаСправочника = ПолучитьТаблицуИзВнешнейБазы(ТаблицаСправочника,СтруктураКолонокПреобразуемыхВСсылки);
			
		КонецЕсли;
		
		//теперь добавим строковое представление
		
		Если ЗначениеЗаполнено(ТипСвоейТочкиДоставки) Тогда
			ТипСвоейТочкиДоставки = "Справочник."+ТипСвоейТочкиДоставки;
		КонецЕсли;
		
		ЗапросПредставлений = Новый Запрос(
		"ВЫБРАТЬ
		|	Выразить(_Таб.ЮрФизЛицо как "+ТипЮрФизЛица+") как ЮрФизЛицо,
		|"+?(Не ЗначениеЗаполнено(ТипСвоейТочкиДоставки),
			"	"""" как ТочкаДоставкиСвойСправочник"
			,"	Выразить(_Таб.ТочкаДоставкиСвойСправочник как "+ТипСвоейТочкиДоставки+") как ТочкаДоставкиСвойСправочник"
			)+"
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК _Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ.ЮрФизЛицо,
		|	ВТ.ТочкаДоставкиСвойСправочник,
		|	ПРЕДСТАВЛЕНИЕ(ВТ.ЮрФизЛицо) КАК ЮрФизЛицоПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ВТ.ТочкаДоставкиСвойСправочник) КАК ТочкаДоставкиСвойСправочникПредставление
		|ИЗ
		|	ВТ КАК ВТ"
		);
		ЗапросПредставлений.УстановитьПараметр("Таб",ТаблицаСправочника);
		ТабПредставлений = ЗапросПредставлений.Выполнить().Выгрузить();
		
		ТаблицаСправочника.Колонки.Добавить("ЮрФизЛицоПредставление",Новый ОписаниеТипов("Строка"));
		ТаблицаСправочника.Колонки.Добавить("ТочкаДоставкиСвойСправочникПредставление",Новый ОписаниеТипов("Строка"));
		
		ТаблицаСправочника.ЗагрузитьКолонку(ТабПредставлений.ВыгрузитьКолонку("ЮрФизЛицоПредставление"),"ЮрФизЛицоПредставление");
		ТаблицаСправочника.ЗагрузитьКолонку(ТабПредставлений.ВыгрузитьКолонку("ТочкаДоставкиСвойСправочникПредставление"),"ТочкаДоставкиСвойСправочникПредставление");
		
		ТаблицаСправочника.Сортировать("АдресДоставки, Наименование");
			
		Возврат ТаблицаСправочника;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ТочкиДоставкиСвои" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТочекДоставок.Объект КАК ТочкаДоставки,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаТочекДоставок.Значение, """") КАК СТРОКА(13)) КАК GLN,
		|	Неопределено КАК Подразделение
		|ИЗ
		|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаТочекДоставок
		|ГДЕ
		|	ТаблицаТочекДоставок.Свойство = ""GLN_НашейТочкиДоставки""";
		
		Запрос.УстановитьПараметр("Свойство",				"GLN_НашейТочкиДоставки");
		
		Если ВнешнееХранилище Тогда
			ТипСправочника = ПолучитьТипЗначенияОбъекта("ТочкаДоставкиСвоя");
			СтруктураКолонокПреобразуемыхВСсылки = Новый Структура("ТочкаДоставки",Новый ОписаниеТипов(ТипСправочника));
			Возврат ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить(),СтруктураКолонокПреобразуемыхВСсылки);
		Иначе
			Возврат Запрос.Выполнить().Выгрузить();
		КонецЕсли;
			
	КонецЕсли;
	
	Если ИмяСправочника = "УчетныеЗаписи" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеСправочники.Ссылка,
		|	КонтурEDI_ДополнительныеСправочники.Наименование КАК Логин,
		|	ВЫРАЗИТЬ(КонтурEDI_ДополнительныеРеквизиты.Значение КАК СТРОКА) КАК Пароль,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение,
		|	ВЫРАЗИТЬ(КонтурEDI_GLN.Значение КАК СТРОКА) КАК GLN,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтурEDI_НеАктивна.Значение КАК БУЛЕВО), ЛОЖЬ) КАК НеАктивна//,
		|ИЗ
		|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = КонтурEDI_ДополнительныеРеквизиты.Объект
		|			И (КонтурEDI_ДополнительныеРеквизиты.Свойство = ""ПарольУчетнойЗаписи"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_GLN
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = КонтурEDI_GLN.Объект
		|			И (КонтурEDI_GLN.Свойство = ""GLN_УчетнойЗаписи"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_НеАктивна
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = КонтурEDI_НеАктивна.Объект
		|			И (КонтурEDI_НеАктивна.Свойство = ""НеАктивна_УчетнаяЗапись"")
		|ГДЕ
		|	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""УчетныеЗаписи""";
		
		ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
		
		Если ВнешнееХранилище Тогда
			ТаблицаСправочника = ПолучитьТаблицуИзВнешнейБазы(ТаблицаСправочника);
		КонецЕсли;
		
		Возврат ТаблицаСправочника;
		
	КонецЕсли;
	
	Если ИмяСправочника = "Пользователи" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУчетныхЗаписей.Объект КАК Пользователь,
		|	ТаблицаУчетныхЗаписей.Значение КАК УчетнаяЗапись,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаУчетныхЗаписей.Значение) КАК УчетнаяЗаписьПредставление,
		|	ВЫРАЗИТЬ(ТаблицаВариантовОбмена.Значение КАК СТРОКА) КАК ВариантОбмена,
		|	ВЫРАЗИТЬ(ТаблицаРолей.Значение КАК СТРОКА) КАК Роль
		|ИЗ
		|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаУчетныхЗаписей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаРолей
		|		ПО (ТаблицаРолей.Объект = ТаблицаУчетныхЗаписей.Объект)
		|			И (ТаблицаРолей.Свойство = ""РольПользователяEDI"")
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаВариантовОбмена
		|		ПО (ТаблицаВариантовОбмена.Объект = ТаблицаУчетныхЗаписей.Объект)
		|			И (ТаблицаВариантовОбмена.Свойство = ""ВариантОбмена"")
		|ГДЕ
		|	ТаблицаУчетныхЗаписей.Свойство = ""УчетнаяЗапись""";
		
		ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
		
		Если ВнешнееХранилище Тогда
			СтруктураКолонокПреобразуемыхВСсылки = Новый Структура("Пользователь",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
			ТаблицаСправочника = ПолучитьТаблицуИзВнешнейБазы(ТаблицаСправочника,СтруктураКолонокПреобразуемыхВСсылки);
		КонецЕсли;
		
		Возврат ТаблицаСправочника;
		
	КонецЕсли;
	
	Если ИмяСправочника = "СоответствиеНоменклатуры" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		Владелец = ПреобразоватьЗначениеДляВнешнегоХранилища(Владелец);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_СоответствияТоваров.Номенклатура,
		|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
		|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
		|	КонтурEDI_СоответствияТоваров.GTIN,
		|	КонтурEDI_СоответствияТоваров.КодТовараПартнера,
		|	КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК Наименование
		|ИЗ
		|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|ГДЕ
		|	КонтурEDI_СоответствияТоваров.Партнер = &Партнер";
		
		Запрос.УстановитьПараметр("Партнер",Владелец);
		
		Если ВнешнееХранилище Тогда
			
			СтруктураКолонокПреобразуемыхВСсылки = Новый Структура();
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("Номенклатура",				Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("Номенклатура")));
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("ЕдиницаИзмерения",			Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЕдиницаИзмерения")));
			Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
				СтруктураКолонокПреобразуемыхВСсылки.Вставить("ХарактеристикаНоменклатуры",	Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры")));
			КонецЕсли;	
			
			ТЗ = ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить(),СтруктураКолонокПреобразуемыхВСсылки);
			
		Иначе
			ТЗ = Запрос.Выполнить().Выгрузить();			   
		КонецЕсли;
			
		Результат = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(Результат,"Наименование,GTIN,КодТовараПартнера,Соответствие,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения");
		
		СтараяНоменклатура = Неопределено;
		СтараяХарактеристикаНоменклатуры = Неопределено;
		
		СписокСоответствий = Новый СписокЗначений;
		
		Для каждого Стр ИЗ ТЗ Цикл
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			НоваяСтрока.Соответствие		= Стр.Номенклатура;

		КонецЦикла;
		
		Результат.Сортировать("Наименование, GTIN, КодТовараПартнера");
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ТранспортныеЯщики" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеСправочники.Ссылка КАК Ссылка,
		|	КонтурEDI_ДополнительныеСправочники.Наименование КАК Наименование,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(lastEventId.Значение КАК СТРОКА), """") КАК lastEventId,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(id.Значение КАК СТРОКА), """") КАК id,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(НеАктивный.Значение КАК БУЛЕВО), ЛОЖЬ) КАК НеАктивный,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Тестовый.Значение КАК БУЛЕВО), ЛОЖЬ) КАК Тестовый,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(GLNЯщика.Значение КАК СТРОКА), """") КАК GLNЯщика
		|ИЗ
		|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК lastEventId
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = lastEventId.Объект
		|			И (lastEventId.Свойство = ""lastEventId"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК id
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = id.Объект
		|			И (id.Свойство = ""id"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК НеАктивный
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = НеАктивный.Объект
		|			И (НеАктивный.Свойство = ""НеАктивный"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ОрганизацияAPI
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = ОрганизацияAPI.Объект
		|			И (ОрганизацияAPI.Свойство = ""ОрганизацияAPI"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК Тестовый
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = Тестовый.Объект
		|			И (Тестовый.Свойство = ""Тестовый"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК GLNЯщика
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = GLNЯщика.Объект
		|			И (GLNЯщика.Свойство = ""GLNЯщика"")
		|ГДЕ
		|	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""ТранспортныеЯщики""
		|	И ОрганизацияAPI.Значение = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
		Запрос.УстановитьПараметр("Владелец",ПреобразоватьЗначениеДляВнешнегоХранилища(Владелец));
		
		ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
		Если ВнешнееХранилище Тогда
			ТаблицаСправочника = ПолучитьТаблицуИзВнешнейБазы(ТаблицаСправочника);
		КонецЕсли;
		
		Возврат ТаблицаСправочника;
		
	КонецЕсли;
	
	Если ИмяСправочника = "НашиОрганизации" Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеСправочники.Ссылка КАК Ссылка,
		|	КонтурEDI_ДополнительныеСправочники.Наименование КАК Наименование,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(GLN.Значение КАК СТРОКА), """") КАК GLN,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(partyId.Значение КАК СТРОКА), """") КАК partyId,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(УчетнаяЗапись.Значение КАК Справочник.КонтурEDI_ДополнительныеСправочники), ЗНАЧЕНИЕ(Справочник.КонтурEDI_ДополнительныеСправочники.)) КАК УчетнаяЗапись,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Неактивная.Значение КАК БУЛЕВО), ЛОЖЬ) КАК Неактивная
		|ИЗ
		|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК GLN
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = GLN.Объект
		|			И (GLN.Свойство = ""GLN"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК partyId
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = partyId.Объект
		|			И (partyId.Свойство = ""partyId"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК УчетнаяЗапись
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = УчетнаяЗапись.Объект
		|			И (УчетнаяЗапись.Свойство = ""УчетнаяЗапись"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК Неактивная
		|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = Неактивная.Объект
		|			И (Неактивная.Свойство = ""Неактивная"")
		|ГДЕ
		|	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""НашиОрганизации""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
		ТаблицаСправочника = Запрос.Выполнить().Выгрузить();
		Если ВнешнееХранилище Тогда
			ТаблицаСправочника = ПолучитьТаблицуИзВнешнейБазы(ТаблицаСправочника);
		КонецЕсли;
		
		Возврат ТаблицаСправочника;
		
	КонецЕсли;
	
	Возврат СписокЭлементовСправочника;
	
КонецФункции

Функция СохранитьЭлементСправочника(ИмяСправочника,Ссылка = Неопределено,СтруктураЭлемента) Экспорт
	
	//на рефакторинг: разобраться, как мы поступаем с параметром Ссылка и что возвращаем. Пока не очевидно.
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СохранитьЭлементСправочника_БМИ(ИмяСправочника,Ссылка,СтруктураЭлемента);
	Иначе
		Ссылка = СохранитьЭлементСправочника_БМИ(ИмяСправочника,Ссылка,СтруктураЭлемента);
	КонецЕсли;       
	
КонецФункции

Функция СохранитьСписокЭлементовСправочника(ИмяСправочника,СписокЭлементов,Знач Владелец = Неопределено) Экспорт
	
	Если ИмяСправочника = "ЮрФизЛицаСторонние" Тогда
		СохранитьСписокЮрФизЛицСторонних(СписокЭлементов,Владелец);
	ИначеЕсли ИмяСправочника = "ЮрФизЛицаСвои" Тогда
		СохранитьСписокЮрФизЛицСвоих(СписокЭлементов);
	ИначеЕсли ИмяСправочника = "ТочкиДоставкиСвои" Тогда
		СохранитьСписокТочекДоставкиСвоих(СписокЭлементов);
	КонецЕсли;	
	
КонецФункции

Функция УдалитьЭлементСправочника(ИмяСправочника,Ссылка) Экспорт
	
	Если ИмяСправочника = "Партнеры" Тогда
		
		НачатьТранзакцию_КонтурEDI();
		
		СписокЮрФизЛиц = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСторонние",Ссылка);
		
		Для каждого Стр Из СписокЮрФизЛиц Цикл
			
			УдалитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "ПартнерКонтрагента");
			УдалитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "GLN_Контрагента");
			
		КонецЦикла;
		
		СписокТД = ПолучитьСписокЭлементовСправочника("ТочкиДоставкиСторонние",Ссылка);
		
		сч = 0;
		КолТД = СписокТД.Количество();
		
		Для каждого ТД из СписокТД Цикл
			
			сч=сч+1;
			
			#Если Клиент Тогда
				Состояние("Удаляются точки доставки: "+СокрЛП(сч)+" из "+СокрЛП(КолТД));	
			#КонецЕсли
			
			УдалитьЭлементСправочника("ТочкиДоставкиСторонние",ТД.Ссылка);
			
		КонецЦикла;
		
		УдалитьЗначениеСвойстваОбъекта(Ссылка, "GLN_Партнера");
		УдалитьЗначениеСвойстваОбъекта(Ссылка, "ПартнерКакТорговаяСеть");
		УдалитьЗначениеСвойстваОбъекта(Ссылка, "ПартнерКакПоставщик");
		УдалитьЗначениеСвойстваОбъекта(Ссылка, "КодСети");
		УдалитьЗначениеСвойстваОбъекта(Ссылка, "ОбязательныйКодТовараТорговойСети");
		УдалитьЗначениеСвойстваОбъекта(Ссылка, "ОбрезатьЛидирующиеНулиGTIN");
		УдалитьЗначениеСвойстваОбъекта(Ссылка, "СверятьВRECADVЦеныИСтавки");
		
		ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка).ПолучитьОбъект().УстановитьПометкуУдаления(Истина);//не будем удалять физически, т.к. на него ссылается справочник Сообщения

		ЗафиксироватьТранзакцию_КонтурEDI();
		
	ИначеЕсли ИмяСправочника = "ТочкиДоставкиСторонние" Тогда
		
		ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка).ПолучитьОбъект().Удалить();

	ИначеЕсли ИмяСправочника = "Расширения" Тогда
		
		ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка).ПолучитьОбъект().Удалить();

	КонецЕсли;
	
КонецФункции

Функция ПолучитьЭлементСправочника(ИмяСправочника,Знач Ссылка) Экспорт
	
	Если ВнешнееХранилище 
		И ТипЗнч(Ссылка) = Тип("COMОбъект") //надо проверить заполнение средствами COM соединения
	Тогда
		Если НЕ СоединениеСХранилищем.ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе	
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	Если ИмяСправочника = "Партнеры" Тогда
		
		Если ВнешнееХранилище Тогда
			Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
				//тут путаница: у нас может быть ссылка в текущей базе, а может быть и во внешней базе
				//попробуем так и так
				
				_Ссылка = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Ссылка);
				Если _Ссылка = Неопределено Тогда
					_Ссылка = ЗначениеИзСтрокиВнутр(Ссылка);
				КонецЕсли;
				
				Ссылка = _Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Партнер = Новый Структура();
		Партнер.Вставить("Наименование",						Ссылка.Наименование);
		
		Партнер.Вставить("GLN",									ПолучитьЗначениеСвойстваОбъектаEDI(Ссылка, "GLN_Партнера"));
		Партнер.Вставить("ТорговаяСеть",						ПолучитьЗначениеСвойстваОбъектаEDI(Ссылка, "ПартнерКакТорговаяСеть"));
		Партнер.Вставить("Поставщик",							ПолучитьЗначениеСвойстваОбъектаEDI(Ссылка, "ПартнерКакПоставщик"));
		
		МассивПараметров	=	ПолучитьМассивДополнительныхНастроекИзМакета("Партнеры");
		МассивПараметров.Добавить("КодСети");
		
		СтруктураСвойств = ПолучитьСписокСвойствEDI(МассивПараметров,Ссылка);
		Для Каждого Эл Из СтруктураСвойств Цикл
			Партнер.Вставить(Эл.Ключ,Эл.Значение);
		КонецЦикла;	
		
		Возврат Партнер;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ТочкиДоставкиСторонние" Тогда
		
		Если НастройкиМодуля.МыПоставщик Тогда
			
			Ссылка = ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка);
			ТочкаДоставки = Новый Структура();
			
			ТочкаДоставки.Вставить("Наименование",					Ссылка.Наименование);
			ТочкаДоставки.Вставить("GLN", 							Ссылка.GLN);
			ТочкаДоставки.Вставить("АдресДоставки", 				Ссылка.АдресДоставки);
			ТочкаДоставки.Вставить("Партнер", 						?(ВнешнееХранилище,СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Ссылка.Партнер),Ссылка.Партнер));
			
			Если ВнешнееХранилище Тогда
				ТочкаДоставки.Вставить("ЮрФизЛицо", 					?(ЗначениеЗаполнено(Ссылка.СвязанныйСправочник1),ЗначениеИзСтрокиВнутр(Ссылка.СвязанныйСправочник1),Неопределено));
				ТочкаДоставки.Вставить("ТочкаДоставкиСвойСправочник",	?(ЗначениеЗаполнено(Ссылка.СвязанныйСправочник2),ЗначениеИзСтрокиВнутр(Ссылка.СвязанныйСправочник2),Неопределено));
				ТочкаДоставки.Вставить("Подразделение", 				Неопределено);
			Иначе
				ТочкаДоставки.Вставить("ЮрФизЛицо", 					Ссылка.СвязанныйСправочник1);
				ТочкаДоставки.Вставить("ТочкаДоставкиСвойСправочник",	Ссылка.СвязанныйСправочник2);
				ТочкаДоставки.Вставить("Подразделение", 				Ссылка.Подразделение);
			КонецЕсли;
			ТочкаДоставки.Вставить("ЗагружатьСообщенияПоТочкеДоставки",	Ссылка.ЗагружатьСообщения);
			
		КонецЕсли;
		
		Возврат ТочкаДоставки;
		
	КонецЕсли;
	
	Если ИмяСправочника = "УчетныеЗаписи" Тогда
		
		УчетнаяЗапись = Новый Структура();
		УчетнаяЗапись.Вставить("Ссылка",								Ссылка);
		
		ДопРеквизиты = ПолучитьСписокСвойствEDI("ПарольУчетнойЗаписи,НеАктивна_УчетнаяЗапись,GLN_УчетнойЗаписи",Ссылка);
		
		Ссылка = ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка);
		
		УчетнаяЗапись.Вставить("Логин",			Ссылка.Наименование);
		
		УчетнаяЗапись.Вставить("Пароль",		ДопРеквизиты.ПарольУчетнойЗаписи);
		УчетнаяЗапись.Вставить("Неактивная",	ДопРеквизиты.НеАктивна_УчетнаяЗапись);
		УчетнаяЗапись.Вставить("GLN",			ДопРеквизиты.GLN_УчетнойЗаписи);
		
		УчетнаяЗапись.Вставить("Токен",			ПолучитьЗначениеСвойстваОбъектаEDI(Ссылка, "Токен"));
		УчетнаяЗапись.Вставить("Организация",	НайтиОбъектПоЗначениюСвойства("УчетнаяЗаписьОрганизации",Ссылка));

		Возврат УчетнаяЗапись;
		
	КонецЕсли;
	
	Если ИмяСправочника = "Пользователи" Тогда
		
		Ссылка = ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка);
		Пользователь = Новый Структура();
		
		Пользователь.Вставить("Пользователь",					Ссылка);
		
		СтрокаПараметров = 
		"УчетнаяЗапись
		|ВариантОбмена
		|РольПользователяEDI
		|ПраваДоступаКСпискам
		|ПраваДоступаКСообщениям
		|ПраваДоступаКПартнерам
		|ПраваДоступаКОрганизациям
		|СлужебныйПользовательАвтообмен";
		
		СтруктураСвойств = ПолучитьСписокСвойствEDI(СтрокаПараметров,Ссылка);
		Для Каждого Эл Из СтруктураСвойств Цикл
			Пользователь.Вставить(Эл.Ключ,Эл.Значение);
		КонецЦикла;	
		
		Возврат Пользователь;
		
	КонецЕсли;
	
	Если ИмяСправочника = "НашиОрганизации" Тогда
		
		Ссылка = ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка);
		СтруктураЭлемента = Новый Структура();
		
		СтруктураЭлемента.Вставить("Наименование",Ссылка.Наименование);
		
		СтрокаПараметров = 
		"partyId
		|GLN
		|УчетнаяЗапись
		|ОсновнойЯщик
		|Неактивная";
	
		СтруктураСвойств = ПолучитьСписокСвойствEDI(СтрокаПараметров,Ссылка);
		Для Каждого Эл Из СтруктураСвойств Цикл
			СтруктураЭлемента.Вставить(Эл.Ключ,Эл.Значение);
		КонецЦикла;	
		
		Возврат СтруктураЭлемента;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ТранспортныеЯщики" Тогда
		
		Ссылка = ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка);
		
		СтруктураЭлемента = Новый Структура();
		СтруктураЭлемента.Вставить("Наименование",			Ссылка.Наименование);
		СтрокаПараметров = 
		"id
		|ОрганизацияAPI
		|НеАктивный
		|lastEventId
		|Тестовый
		|GLNЯщика";
	
		СтруктураСвойств = ПолучитьСписокСвойствEDI(СтрокаПараметров,Ссылка);
		Для Каждого Эл Из СтруктураСвойств Цикл
			СтруктураЭлемента.Вставить(Эл.Ключ,Эл.Значение);
		КонецЦикла;	
		
		Возврат СтруктураЭлемента;
		
	КонецЕсли;
	
	Если ИмяСправочника = "Расширения" Тогда
		
		Если ВнешнееХранилище Тогда
			Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
				Ссылка = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Ссылка);
				ДополнительныеРеквизиты = Новый ТаблицаЗначений;
				ДобавитьКолонкиВТаблицуЗначений(ДополнительныеРеквизиты,"ИмяРеквизита,Значение,ЗначениеСтрока,ЗначениеХранилищеЗначения");
				Для Каждого Строка Из Ссылка.ДополнительныеРеквизиты Цикл
					НоваяСтрока = ДополнительныеРеквизиты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ДополнительныеРеквизиты = Ссылка.ДополнительныеРеквизиты.Выгрузить();			
		КонецЕсли;
		
		СтруктураЭлемента = Новый Структура();
		
		СтруктураЭлемента.Вставить("Наименование",				Ссылка.Наименование);
		СтруктураЭлемента.Вставить("ИмяСправочника",			"Расширения");
		СтруктураЭлемента.Вставить("ДополнительныеРеквизиты",	ДополнительныеРеквизиты);
				
		Возврат СтруктураЭлемента;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//суффикс БМИ - функция располагалась в базовом модуле интеграции
//с основной функцией большая разница в параметрах, поэтому объединять сложно
Функция СохранитьЭлементСправочника_БМИ(ИмяСправочника,Знач Ссылка = Неопределено,СтруктураЭлемента)
	
	Отказ = Ложь;
	
	Если ИмяСправочника = "Партнеры" Тогда
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Если ВнешнееХранилище Тогда
				НовыйПартнер = СоединениеСХранилищем.Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			Иначе
				НовыйПартнер = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			КонецЕсли;
			
			НовыйПартнер.Наименование = СтруктураЭлемента.Наименование;
			НовыйПартнер.ИмяСправочника = "Партнеры";
			
			Попытка
				НовыйПартнер.Записать();
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
			Ссылка = НовыйПартнер.Ссылка;
			//на рефакторинг: возможны проблемы в режиме ВХ
			
		Иначе
			
			Ссылка = ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка);
			
			Если НЕ СокрЛП(Ссылка.Наименование) = СокрЛП(СтруктураЭлемента.Наименование) Тогда
				
				Партнер = Ссылка.ПолучитьОбъект();
				Партнер.Наименование = СтруктураЭлемента.Наименование;
				
				Попытка
					Партнер.Записать();
				Исключение
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;		
		
		Если НЕ Отказ Тогда
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "GLN_Партнера", СтруктураЭлемента.GLN, 		Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "КодСети",		СтруктураЭлемента.КодСети,	Отказ);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ПартнерКакТорговаяСеть", 				СтруктураЭлемента.ЭтоТорговаяСеть, Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ПартнерКакПоставщик", 					СтруктураЭлемента.ЭтоПоставщик, Отказ);
			
			МассивДополнительныхНастроек	=	ПолучитьМассивДополнительныхНастроекИзМакета("Партнеры");
			Для Каждого Эл Из МассивДополнительныхНастроек Цикл
				ДопЗначение=Неопределено;
				Если СтруктураЭлемента.Свойство(Эл,ДопЗначение) Тогда
					УстановитьЗначениеСвойстваОбъекта(Ссылка, Эл, 	ДопЗначение, Отказ);
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;
		
		Если ВнешнееХранилище Тогда
			Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Ссылка);
		Иначе
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ТочкиДоставкиСторонние" Тогда
		
		//Проконтролируем уникальность GLN - пока только в пределах партнера
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КонтурEDI_ТочкиДоставки.Ссылка
			|ИЗ
			|	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
			|ГДЕ
			|	КонтурEDI_ТочкиДоставки.Партнер = &Партнер
			|	И КонтурEDI_ТочкиДоставки.GLN = &GLN";

			
			Запрос.УстановитьПараметр("GLN",		СтруктураЭлемента.GLN);
			Запрос.УстановитьПараметр("Партнер",	ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураЭлемента.Партнер));
			Если Не Запрос.Выполнить().Пустой() Тогда
				Сообщить_КонтурEDI("Точка доставки с GLN "+СтруктураЭлемента.GLN+" уже существует");
				Отказ = Истина;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;	
		
		//еще одна проверка: юр/физ лицо не должно повторяться у другого партнера.
		Если ЗначениеЗаполнено(СтруктураЭлемента.ЮрФизЛицо) Тогда
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КонтурEDI_ТочкиДоставки.GLN КАК GLN,
			|	КонтурEDI_ТочкиДоставки.Партнер.Наименование КАК Партнер
			|ИЗ
			|	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
			|ГДЕ
			|	КонтурEDI_ТочкиДоставки.Партнер <> &Партнер
			|	И КонтурEDI_ТочкиДоставки.СвязанныйСправочник1 = &ЮрФизЛицо";
			
			Запрос.УстановитьПараметр("GLN",		СтруктураЭлемента.GLN);
			Запрос.УстановитьПараметр("Партнер",	ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураЭлемента.Партнер));
			Запрос.УстановитьПараметр("ЮрФизЛицо",	ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураЭлемента.ЮрФизЛицо));
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Сообщить_КонтурEDI("Юр/физ лицо "+СтруктураЭлемента.ЮрФизЛицо+" уже поставлено в соответствие точке доставки "+Выборка.GLN+" у партнера "+Выборка.Партнер);
				Отказ = Истина;
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			Если ВнешнееХранилище Тогда
				ТочкаДоставки = СоединениеСХранилищем.Справочники.КонтурEDI_ТочкиДоставки.СоздатьЭлемент();
			Иначе	
				ТочкаДоставки = Справочники.КонтурEDI_ТочкиДоставки.СоздатьЭлемент();
			КонецЕсли;		
		Иначе
			ТочкаДоставки = ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка).ПолучитьОбъект();
		КонецЕсли;
		
		ТочкаДоставки.Наименование = СтруктураЭлемента.Наименование;
		ТочкаДоставки.GLN = СтруктураЭлемента.GLN;
		ТочкаДоставки.АдресДоставки = СтруктураЭлемента.АдресДоставки;
		
		ТочкаДоставки.Партнер				= ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураЭлемента.Партнер);
		ТочкаДоставки.СвязанныйСправочник1	= ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураЭлемента.ЮрФизЛицо);
		ТочкаДоставки.СвязанныйСправочник2	= ПреобразоватьЗначениеДляВнешнегоХранилища(СтруктураЭлемента.ТочкаДоставкиСвойСправочник);
		ТочкаДоставки.ЗагружатьСообщения = СтруктураЭлемента.ЗагружатьСообщенияПоТочкеДоставки;
		ТочкаДоставки.Записать();
		
		Возврат ТочкаДоставки.Ссылка;
		//на рефакторинг: может вызвать проблемы в режиме ВХ.
		//пример возврата см. в следующем условии  ИмяСправочника = "ПодразделенияСторонние" 
	КонецЕсли;
	
	Если ИмяСправочника = "УчетныеЗаписи" Тогда	
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Если ВнешнееХранилище Тогда
				УчетнаяЗапись = СоединениеСХранилищем.Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			Иначе
				УчетнаяЗапись = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			КонецЕсли;
			
			УчетнаяЗапись.Наименование = СтруктураЭлемента.Логин;
			УчетнаяЗапись.ИмяСправочника = "УчетныеЗаписи";
			
			Попытка
				УчетнаяЗапись.Записать();
			Исключение
				Отказ = Истина;
			КонецПопытки;
			Ссылка = УчетнаяЗапись.Ссылка;

				
		Иначе
			
			Если ВнешнееХранилище Тогда
				Ссылка = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Ссылка);
			КонецЕсли;
			
			Если НЕ Ссылка.Наименование = СтруктураЭлемента.Логин Тогда
				
				УчетнаяЗапись = Ссылка.ПолучитьОбъект();
				УчетнаяЗапись.Наименование = СтруктураЭлемента.Логин;
				
				Попытка
					УчетнаяЗапись.Записать();
				Исключение
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//теперь запишем виртуальные реквизиты справочника
		Если НЕ Отказ Тогда
			
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ПарольУчетнойЗаписи",		СтруктураЭлемента.Пароль, 		 Отказ);
			
			Если СтруктураЭлемента.Свойство("НеАктивная") Тогда
				УстановитьЗначениеСвойстваОбъекта(Ссылка, "НеАктивна_УчетнаяЗапись",	СтруктураЭлемента.Неактивная, Отказ);
			КонецЕсли;
			
			Если СтруктураЭлемента.Свойство("GLN") Тогда
				УстановитьЗначениеСвойстваОбъекта(Ссылка, "GLN_УчетнойЗаписи",	СтруктураЭлемента.GLN, Отказ);
			КонецЕсли;
			
			Если СтруктураЭлемента.Свойство("Токен") Тогда
				УстановитьЗначениеСвойстваОбъекта(Ссылка, "Токен",	СтруктураЭлемента.Токен, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВнешнееХранилище Тогда
			Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Ссылка);
		Иначе
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСправочника = "Пользователи" Тогда	
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "УчетнаяЗапись",					СтруктураЭлемента.УчетнаяЗапись, 					Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ВариантОбмена",					СтруктураЭлемента.ВариантОбмена, 					Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "РольПользователяEDI",			СтруктураЭлемента.РольПользователяEDI,				Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ПраваДоступаКСпискам",			СтруктураЭлемента.ПраваДоступаКСпискам, 			Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ПраваДоступаКСообщениям",		СтруктураЭлемента.ПраваДоступаКСообщениям, 			Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ПраваДоступаКПартнерам",			СтруктураЭлемента.ПраваДоступаКПартнерам, 			Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ПраваДоступаКОрганизациям",		СтруктураЭлемента.ПраваДоступаКОрганизациям, 		Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "СлужебныйПользовательАвтообмен",	СтруктураЭлемента.СлужебныйПользовательАвтообмен, 	Отказ);
			
		КонецЕсли;                   
		
		Возврат Ссылка;
		
	ИначеЕсли ИмяСправочника = "НашиОрганизации" Тогда	
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Если ВнешнееХранилище Тогда
				ЭлементСправочника = СоединениеСХранилищем.Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			Иначе
				ЭлементСправочника = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			КонецЕсли;
			
			ЭлементСправочника.Наименование = СтруктураЭлемента.Наименование;
			ЭлементСправочника.ИмяСправочника = "НашиОрганизации";
			
			Попытка
				ЭлементСправочника.Записать();
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
			Ссылка = ЭлементСправочника.Ссылка;
				
		Иначе
			
			Если ВнешнееХранилище Тогда
				Ссылка = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Ссылка);
			КонецЕсли;
			
			Если СокрЛП(Ссылка.Наименование) <> СокрЛП(СтруктураЭлемента.Наименование) Тогда
				
				ЭлементСправочника = Ссылка.ПолучитьОбъект();
				ЭлементСправочника.Наименование = СтруктураЭлемента.Наименование;
				
				Попытка
					ЭлементСправочника.Записать();
				Исключение
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//теперь запишем виртуальные реквизиты справочника
		//уходим от проверки наличия свойств в Структуре. Предполагаем, что они есть всегда
		Если НЕ Отказ Тогда
			
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "partyId",			СтруктураЭлемента.partyId,			Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "GLN",				СтруктураЭлемента.GLN,				Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "УчетнаяЗапись",		СтруктураЭлемента.УчетнаяЗапись,	Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ОсновнойЯщик",		СтруктураЭлемента.ОсновнойЯщик,		Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "Неактивная",			СтруктураЭлемента.Неактивная,		Отказ);
			
		КонецЕсли;
		
		Если ВнешнееХранилище Тогда
			Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Ссылка);
		Иначе
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСправочника = "ТранспортныеЯщики" Тогда	
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Если ВнешнееХранилище Тогда
				ЭлементСправочника = СоединениеСХранилищем.Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			Иначе
				ЭлементСправочника = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			КонецЕсли;
			
			ЭлементСправочника.Наименование = СтруктураЭлемента.Наименование;
			ЭлементСправочника.ИмяСправочника = "ТранспортныеЯщики";
			
			Попытка
				ЭлементСправочника.Записать();
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
			Ссылка = ЭлементСправочника.Ссылка;
				
		Иначе
			
			Ссылка = ПреобразоватьЗначениеДляВнешнегоХранилища(Ссылка);

			Если СокрЛП(Ссылка.Наименование) <> СокрЛП(СтруктураЭлемента.Наименование) Тогда
				
				ЭлементСправочника = Ссылка.ПолучитьОбъект();
				ЭлементСправочника.Наименование = СтруктураЭлемента.Наименование;
				
				Попытка
					ЭлементСправочника.Записать();
				Исключение
					Отказ = Истина;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//теперь запишем виртуальные реквизиты справочника
		//уходим от проверки наличия свойств в Структуре. Предполагаем, что они есть всегда
		Если НЕ Отказ Тогда
			
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "id",					СтруктураЭлемента.id,					Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "ОрганизацияAPI",		СтруктураЭлемента.ОрганизацияAPI,		Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "lastEventId",		СтруктураЭлемента.lastEventId,			Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "НеАктивный",			СтруктураЭлемента.НеАктивный,			Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "Тестовый",			СтруктураЭлемента.Тестовый,				Отказ);
			УстановитьЗначениеСвойстваОбъекта(Ссылка, "GLNЯщика",			СтруктураЭлемента.GLNЯщика,				Отказ);
			
		КонецЕсли;
		
		Если ВнешнееХранилище Тогда
			Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Ссылка);
		Иначе
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСправочника = "Расширения" Тогда
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Если ВнешнееХранилище Тогда
				ЭлементСправочника = СоединениеСХранилищем.Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			Иначе
				ЭлементСправочника = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			КонецЕсли;
			
			ЭлементСправочника.ИмяСправочника = "Расширения";
						
			Для Каждого Строка Из СтруктураЭлемента Цикл
				
				Если Строка.ИмяРеквизита = "Наименование" Тогда
					ЭлементСправочника.Наименование = Строка.Значение;
					Продолжить;
				КонецЕсли;
				
				НовыйРеквизит = ЭлементСправочника.ДополнительныеРеквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйРеквизит,Строка);
				
				Если Строка.ИмяРеквизита = "Интерфейс" Тогда
					Если Строка.Значение = Истина Тогда
						Если ВнешнееХранилище Тогда
							Файл = СоединениеСХранилищем.NewObject("Файл",Строка.ЗначениеХранилищеЗначения);
							Если Файл.Существует() Тогда
								ФайлИнтерфейса = СоединениеСХранилищем.NewObject("ДвоичныеДанные",Строка.ЗначениеХранилищеЗначения);
								ХранилищеИнтерфейса = СоединениеСХранилищем.NewObject("ХранилищеЗначения",ФайлИнтерфейса); 
							КонецЕсли;
						Иначе
							Файл = Новый Файл(Строка.ЗначениеХранилищеЗначения);
							Если Файл.Существует() Тогда
								ФайлИнтерфейса		= Новый ДвоичныеДанные(Строка.ЗначениеХранилищеЗначения);
								ХранилищеИнтерфейса = Новый ХранилищеЗначения(ФайлИнтерфейса); 
							КонецЕсли;
						КонецЕсли;
						НовыйРеквизит.ЗначениеХранилищеЗначения = ХранилищеИнтерфейса;
					КонецЕсли;
				ИначеЕсли Строка.ИмяРеквизита = "Файл" Тогда
					Если ВнешнееХранилище Тогда
						Файл = СоединениеСХранилищем.NewObject("Файл",Строка.ЗначениеХранилищеЗначения);
						Если Файл.Существует() Тогда
							ДопФайл	= СоединениеСХранилищем.NewObject("ДвоичныеДанные",Строка.ЗначениеХранилищеЗначения);
							ХранилищеДопФайла = СоединениеСХранилищем.NewObject("ХранилищеЗначения",ДопФайл);
						КонецЕсли;
					Иначе
						Файл = Новый Файл(Строка.ЗначениеХранилищеЗначения);
						Если Файл.Существует() Тогда
							ДопФайл				= Новый ДвоичныеДанные(Строка.ЗначениеХранилищеЗначения);
							ХранилищеДопФайла	= Новый ХранилищеЗначения(ДопФайл); 
						КонецЕсли;
					КонецЕсли;
					НовыйРеквизит.ЗначениеХранилищеЗначения = ХранилищеДопФайла;
				КонецЕсли;
							
			КонецЦикла;
		
			Попытка
				ЭлементСправочника.Записать();
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
			Если ВнешнееХранилище Тогда
				Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(ЭлементСправочника.Ссылка);
			Иначе
				Возврат ЭлементСправочника.Ссылка;
			КонецЕсли;
							
		Иначе
			
			ЭлементСтруктура = ПолучитьЭлементСправочника("Расширения",Ссылка);
			
			Если ВнешнееХранилище Тогда
				Ссылка = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Ссылка);
			КонецЕсли;
					
			ЭлементСправочника = Ссылка.ПолучитьОбъект();
			
			//сохранение с существующей ссылкой может происходить в 2-х случаях:
			//1. "обновление"	  - когда мы обновляемся на новую версию расширения;
			//2. "редактирование" - когда мы меняем что-то в коде;
			//3. "настройка"	  - когда мы настраиваем доп. реквизиты расширения (вкл./выкл., порядок выполнения).
			//условно будем полагать, что наличие реквизита "Идентификатор" является признаком "обновления"
			Если СтруктураЭлемента.НайтиСтроки(Новый Структура("ИмяРеквизита","Идентификатор")).Количество() > 0 Тогда
				РежимСохранения = "обновление";
			ИначеЕсли СтруктураЭлемента.НайтиСтроки(Новый Структура("ИмяРеквизита","ИсполняемыйКод")).Количество() > 0 или
					  СтруктураЭлемента.НайтиСтроки(Новый Структура("ИмяРеквизита","ИсходныйИсполняемыйКод")).Количество() > 0 Тогда
				РежимСохранения = "редактирование";	
			Иначе
				РежимСохранения = "настройка";
			КонецЕсли;		
			
			//условия для полного обновления кода:
			//1. количество событий "ИсходныйИсполняемыйКод" = количество событий "ИсполняемыйКод"
			//2. каждый "ИсходныйИсполняемыйКод" = "ИсполняемыйКод"
			//если хотя бы одно условие нарушается, считаем расширение кастомизированным,
			//оставляем как есть "ИсполняемыйКод" и обновляем "ИсходныйИсполняемыйКод"
			РасширениеИзменено = Ложь;
			Если РежимСохранения = "обновление" Тогда
				МассивКодовСобытий 			= ЭлементСтруктура.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита","ИсполняемыйКод"));
				МассивИсходныхКодовСобытий 	= ЭлементСтруктура.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита","ИсходныйИсполняемыйКод"));
				Если Не МассивКодовСобытий.Количество() = МассивИсходныхКодовСобытий.Количество() Тогда
					РасширениеИзменено = Истина;	
				КонецЕсли;
				Если Не РасширениеИзменено Тогда
					Для Каждого Строка Из МассивИсходныхКодовСобытий Цикл
						МассивИсполняемыйКод 			= ЭлементСтруктура.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита,Значение","ИсполняемыйКод",Строка.Значение));
						ТекущийИсполняемыйКод			= ?(Не МассивИсполняемыйКод.Количество() = 0, МассивИсполняемыйКод[0].ЗначениеСтрока, "");
						ТекущийИсходныйИсполняемыйКод 	= Строка.ЗначениеСтрока;
						Если Не ТекущийИсполняемыйКод = ТекущийИсходныйИсполняемыйКод Тогда
							РасширениеИзменено = Истина;		
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			//удаляем код текущих исходных событий
			Если РежимСохранения = "обновление" Тогда
				Если ВнешнееХранилище Тогда
					Отбор = СоединениеСХранилищем.NewObject("Структура", "ИмяРеквизита", 	"ИсходныйИсполняемыйКод");
				Иначе
					Отбор = Новый Структура("ИмяРеквизита","ИсходныйИсполняемыйКод");
				КонецЕсли;
				МассивИсходныхКодовСобытий = ЭлементСправочника.ДополнительныеРеквизиты.НайтиСтроки(Отбор);
				Для Каждого Строка Из МассивИсходныхКодовСобытий Цикл
					ЭлементСправочника.ДополнительныеРеквизиты.Удалить(Строка);	
				КонецЦикла;	
			КонецЕсли;
			//если исходный исполняемый код идентичен исполняемому коду, удаляем код текущих событий или
			//если сами редактируем код / набор событий, описание расширения
			Если (РежимСохранения = "обновление" и Не РасширениеИзменено) или 
				 (РежимСохранения = "редактирование") 					  Тогда
				Если ВнешнееХранилище Тогда
					Отбор = СоединениеСХранилищем.NewObject("Структура", "ИмяРеквизита", "ИсполняемыйКод");
				Иначе
					Отбор = Новый Структура("ИмяРеквизита","ИсполняемыйКод");
				КонецЕсли;
				МассивКодовСобытий = ЭлементСправочника.ДополнительныеРеквизиты.НайтиСтроки(Отбор);
				Для Каждого Строка Из МассивКодовСобытий Цикл
					ЭлементСправочника.ДополнительныеРеквизиты.Удалить(Строка);	
				КонецЦикла;
			КонецЕсли;
						
			Для Каждого Строка Из СтруктураЭлемента Цикл
				
				Если Строка.ИмяРеквизита = "Наименование" Тогда
					ЭлементСправочника.Наименование = Строка.Значение;
					Продолжить;
				КонецЕсли;
				
				//попробуем найти существующий доп. реквизит или создадим новый
				Реквизит = Неопределено;
				Если Найти(Строка.ИмяРеквизита,"ИсполняемыйКод") > 0 Тогда
					Если Строка.ИмяРеквизита = "ИсполняемыйКод" И РасширениеИзменено Тогда
						Продолжить;
					КонецЕсли;
					Если ВнешнееХранилище Тогда
						Отбор = СоединениеСХранилищем.NewObject("Структура","ИмяРеквизита,Значение", Строка.ИмяРеквизита, Строка.Значение);
					Иначе
						Отбор = Новый Структура("ИмяРеквизита,Значение",Строка.ИмяРеквизита,Строка.Значение);
					КонецЕсли;
					Реквизиты = ЭлементСправочника.ДополнительныеРеквизиты.НайтиСтроки(Отбор);
					Если Не Реквизиты.Количество() = 0 Тогда
						Реквизит = Реквизиты.Получить(0);	
					КонецЕсли;
				Иначе
					Реквизит = ЭлементСправочника.ДополнительныеРеквизиты.Найти(Строка.ИмяРеквизита,"ИмяРеквизита");
				КонецЕсли;
				Если Реквизит = Неопределено Тогда
					Реквизит = ЭлементСправочника.ДополнительныеРеквизиты.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Реквизит,Строка);
				
				Если Строка.ИмяРеквизита = "Интерфейс" Тогда
					Если Строка.Значение = Истина Тогда
						ФайлИнтерфейса		= Новый ДвоичныеДанные(Строка.ЗначениеХранилищеЗначения);
						ХранилищеИнтерфейса = Новый ХранилищеЗначения(ФайлИнтерфейса); 
						Реквизит.ЗначениеХранилищеЗначения = ХранилищеИнтерфейса;
					КонецЕсли;
				КонецЕсли;
							
			КонецЦикла;
						
			Попытка
				ЭлементСправочника.Записать();
			Исключение
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		Если ВнешнееХранилище Тогда
			Возврат СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Ссылка);
		Иначе
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СохранитьСписокЮрФизЛицСторонних(СписокЭлементов,СсылкаНаПартнера)
	
	Отказ = Ложь;
	
	ТаблицаТекущих = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСторонние",СсылкаНаПартнера);
	
	ТаблицаТекущих.Колонки.Добавить("Признак");
	ТаблицаТекущих.ЗаполнитьЗначения(Ложь,"Признак");
	
	ТаблицаТекущих.Индексы.Добавить("ЮрФизЛицо");
	
	ТаблицаНовых = СписокЭлементов;
	
	// мы знаем, что контрагент в каждой из таблиц встречается один раз, так что можем спокойно сравнивать по нему
	Для Каждого Стр Из ТаблицаНовых Цикл
		
		// забиваем на пустые строки
		Если НЕ ЗначениеЗаполнено(Стр.GLN) И НЕ ЗначениеЗаполнено(Стр.ЮрФизЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаТекущих.Найти(Стр.ЮрФизЛицо,"ЮрФизЛицо");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			Если НЕ НайденнаяСтрока.GLN = Стр.GLN Тогда
				
				УстановитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "GLN_Контрагента", Стр.GLN, Отказ);
				
			КонецЕсли;	
			
			НайденнаяСтрока.Признак = Истина;
			
		Иначе
			
			УстановитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "ПартнерКонтрагента",	ПреобразоватьЗначениеДляВнешнегоХранилища(СсылкаНаПартнера),	Отказ);
			УстановитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "GLN_Контрагента",		Стр.GLN, 			Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// очистим свойства исключенных контрагентов
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Признак",Ложь);
	
	НайденныеСтроки = ТаблицаТекущих.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр ИЗ НайденныеСтроки Цикл
		
		УдалитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "ПартнерКонтрагента",	Отказ);
		УдалитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "GLN_Контрагента",		Отказ);
		
	КонецЦикла;	
	
КонецФункции

Функция СохранитьСписокЮрФизЛицСвоих(СписокЭлементов)
	
	Отказ = Ложь;
	
	ТаблицаТекущих = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
	
	ТаблицаТекущих.Колонки.Добавить("Признак");
	ТаблицаТекущих.ЗаполнитьЗначения(Ложь,"Признак");
	
	ТаблицаТекущих.Индексы.Добавить("ЮрФизЛицо");
	
	ТаблицаНовых = СписокЭлементов;
	
	// мы знаем, что контрагент в каждой из таблиц встречается один раз, так что можем спокойно сравнивать по нему
	Для Каждого Стр Из ТаблицаНовых Цикл
		
		// забиваем на пустые строки
		Если НЕ ЗначениеЗаполнено(Стр.GLN) И НЕ ЗначениеЗаполнено(Стр.ЮрФизЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаТекущих.Найти(Стр.ЮрФизЛицо,"ЮрФизЛицо");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			Если НайденнаяСтрока.GLN <> Стр.GLN Тогда
				УстановитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "GLN_Организации", Стр.GLN, Отказ);
			КонецЕсли;	
			
			Если НайденнаяСтрока.ОрганизацияAPI <> Стр.ОрганизацияAPI Тогда
				УстановитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "ОрганизацияAPI", Стр.ОрганизацияAPI, Отказ);
			КонецЕсли;	
			
			НайденнаяСтрока.Признак = Истина;
			
		Иначе
			
			УстановитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "GLN_Организации",		Стр.GLN, 	   Отказ);
			Попытка
				УстановитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "ОрганизацияAPI", Стр.ОрганизацияAPI, Отказ);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если Отказ Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// очистим свойства исключенных контрагентов
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Признак",Ложь);
	
	НайденныеСтроки = ТаблицаТекущих.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр ИЗ НайденныеСтроки Цикл
		
		УдалитьЗначениеСвойстваОбъекта(Стр.ЮрФизЛицо, "GLN_Организации",		Отказ);
		
	КонецЦикла;	
	
	
КонецФункции

Функция СохранитьСписокТочекДоставкиСвоих(СписокЭлементов)
	
	Отказ = Ложь;
	
	ТаблицаТекущих = ПолучитьСписокЭлементовСправочника("ТочкиДоставкиСвои");
	
	ТаблицаТекущих.Колонки.Добавить("Признак");
	ТаблицаТекущих.ЗаполнитьЗначения(Ложь,"Признак");
	
	ТаблицаТекущих.Индексы.Добавить("ТочкаДоставки");
	
	ТаблицаНовых = СписокЭлементов;
	
	// мы знаем, что контрагент в каждой из таблиц встречается один раз, так что можем спокойно сравнивать по нему
	Для Каждого Стр Из ТаблицаНовых Цикл
		
		// забиваем на пустые строки
		Если НЕ ЗначениеЗаполнено(Стр.GLN) И НЕ ЗначениеЗаполнено(Стр.ТочкаДоставки) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаТекущих.Найти(Стр.ТочкаДоставки,"ТочкаДоставки");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			Если НЕ НайденнаяСтрока.GLN = Стр.GLN Тогда
				
				УстановитьЗначениеСвойстваОбъекта(Стр.ТочкаДоставки, "GLN_НашейТочкиДоставки", Стр.GLN, Отказ);
				
			КонецЕсли;	
			
			НайденнаяСтрока.Признак = Истина;
			
		Иначе
			
			УстановитьЗначениеСвойстваОбъекта(Стр.ТочкаДоставки, "GLN_НашейТочкиДоставки", Стр.GLN, Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// очистим свойства исключенных контрагентов
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Признак",Ложь);
	
	НайденныеСтроки = ТаблицаТекущих.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр ИЗ НайденныеСтроки Цикл
		
		УдалитьЗначениеСвойстваОбъекта(Стр.ТочкаДоставки, "GLN_НашейТочкиДоставки", Отказ);
		
	КонецЦикла;	
	
	
КонецФункции

// Заполняет ТаблицаНоменклатуры текущими соответствиями для СсылкаНаПартнера
Процедура ОбновитьСписокНоменклатуры(ТаблицаНоменклатуры,СсылкаНаПартнера) Экспорт
	
	ТаблицаНоменклатуры.Очистить();
	
	мИмяСправочникаНоменклатура = ПолучитьТипЗначенияОбъекта("Номенклатура",,Истина);
	ЕстьАртикул = НЕ (Метаданные.Справочники[мИмяСправочникаНоменклатура].Реквизиты.Найти("Артикул")=Неопределено);
	
	СписокНоменклатуры = ПолучитьСписокЭлементовСправочника("СоответствиеНоменклатуры", СсылкаНаПартнера);
	
	ЗапросПоДопРеквизитам = Новый Запрос(
	"ВЫБРАТЬ
	|	спрНоменклатура.Ссылка КАК Ссылка,
	|	спрНоменклатура.Код КАК Код,
	|	спрНоменклатура.Артикул КАК Артикул,
	|	спрНоменклатура.Представление КАК Представление
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|ГДЕ
	|	спрНоменклатура.Ссылка В(&Номенклатура)"
	);
	ЗапросПоДопРеквизитам.УстановитьПараметр("Номенклатура",СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	ЗапросПоДопРеквизитам.Текст = СтрЗаменить(ЗапросПоДопРеквизитам.Текст,"Справочник.Номенклатура","Справочник."+мИмяСправочникаНоменклатура);
	Если Не ЕстьАртикул Тогда
		ЗапросПоДопРеквизитам.Текст = СтрЗаменить(ЗапросПоДопРеквизитам.Текст,"спрНоменклатура.Артикул","спрНоменклатура.Код");
	КонецЕсли;
	ДопРеквизиты = ЗапросПоДопРеквизитам.Выполнить().Выгрузить();
	ДопРеквизиты.Индексы.Добавить("Ссылка");
	
	СтарИндекс = "";
	Соответствие = "";
	
	Для каждого Стр Из СписокНоменклатуры Цикл
		
		Индекс = СокрЛП(Стр.Наименование)+"-"+СокрЛП(Стр.GTIN)+"-"+СокрЛП(Стр.КодТовараПартнера);
		
		Номенклатура = Стр.Соответствие;
		СтрокаДопРеквизитов = ДопРеквизиты.Найти(Стр.Номенклатура,"Ссылка");
		
		Если ЗначениеЗаполнено(Номенклатура)
			И Не СтрокаДопРеквизитов = Неопределено Тогда
			
			Соответствие = ""
				+СтрокаДопРеквизитов.Представление
				+" ["+СтрокаДопРеквизитов.Код+"]"
				+?(ЕстьАртикул,?(ЗначениеЗаполнено(СтрокаДопРеквизитов.Артикул)," ["+СтрокаДопРеквизитов.Артикул+"]",""),"");
		Иначе
			Соответствие = "";
		КонецЕсли;	
		
		Если НЕ Индекс = СтарИндекс Тогда
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			НоваяСтрока.Соответствие = Соответствие;
			СтарИндекс = Индекс;
			
		Иначе
			
			НоваяСтрока.Соответствие = НоваяСтрока.Соответствие+"; "+Соответствие;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

//}}}

////////////////////////////////////////////////////////////////////////////////////
//{{{ ПРОВЕРКА ОШИБОК

Процедура ЗафиксироватьОшибку2(ТаблицаОшибок,ТекстОшибки,ИмяПоля)
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	
	НоваяСтрока.ТекстОшибки	= ТекстОшибки;
	НоваяСтрока.ИмяПоля		= ИмяПоля;
	
КонецПроцедуры

Процедура ПроверитьЗначениеПоляEDI(ТаблицаОшибок, ИмяПоля, Строка, Обязательный =  Ложь, МинДлина =  Неопределено, МаксДлина =  Неопределено, ТолькоЦифры = Ложь)
	
	Если Обязательный Тогда
		Если ПустаяСтрока(Строка) Тогда
			
			ЗафиксироватьОшибку2(ТаблицаОшибок,"Не заполнено поле "+ИмяПоля+".", ИмяПоля);
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоЦифры Тогда
		Если НЕ ТолькоЦифрыВСтроке_КонтурEDI(Строка) Тогда
			ЗафиксироватьОшибку2(ТаблицаОшибок,ИмяПоля+" должен содержать только цифры.", ИмяПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Строка) Тогда
		Если НЕ МинДлина = Неопределено Тогда
			Если СтрДлина(Строка)<МинДлина Тогда
				ЗафиксироватьОшибку2(ТаблицаОшибок,ИмяПоля+" не может содержать меньше "+МинДлина+" символов.", ИмяПоля);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ МаксДлина = Неопределено Тогда
			Если СтрДлина(Строка)>МаксДлина Тогда
				ЗафиксироватьОшибку2(ТаблицаОшибок,ИмяПоля+" не может содержать больше "+МаксДлина+" символов.", ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПоляЮрФизЛица(ЮрФизЛицо,ТипСообщения,ИмяПоля) Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки");
	ТаблицаОшибок.Колонки.Добавить("ИмяПоля");
	
	ВидЮрФизЛица = ЮрФизЛицо.Вид;
	
	Если НЕ ЗначениеЗаполнено(ВидЮрФизЛица) Тогда
		ВидЮрФизЛица = "ЮрЛицо";
	КонецЕсли;	
	
	ПроверитьЗначениеПоляEDI(ТаблицаОшибок, "GLN", ЮрФизЛицо.GLN, Истина, 13, 13,Истина);
	
	ОбязательностьПолейЮрФизЛица = Истина;
	
	Если ТипСообщения = "ORDRSP" ИЛИ ТипСообщения = "ORDERS" Тогда
		ОбязательностьПолейЮрФизЛица = Ложь;
	КонецЕсли;
	
	Если ВидЮрФизЛица = "ЮрЛицо" Тогда
		
		ПроверитьЗначениеПоляEDI(ТаблицаОшибок, "Наименование", ЮрФизЛицо.Наименование, ОбязательностьПолейЮрФизЛица);
		
		ПроверитьЗначениеПоляEDI(ТаблицаОшибок, "ИНН", ЮрФизЛицо.ИНН, ОбязательностьПолейЮрФизЛица, 10, 10,Истина);
		ПроверитьЗначениеПоляEDI(ТаблицаОшибок, "КПП", ЮрФизЛицо.КПП, ОбязательностьПолейЮрФизЛица, 9, 9,Истина);
		
	Иначе
		
		ПроверитьЗначениеПоляEDI(ТаблицаОшибок, "ИНН", ЮрФизЛицо.ИНН, ОбязательностьПолейЮрФизЛица, 12, 12,Истина);
		
	КонецЕсли;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПолучитьТекстОшибкиПоляСообщения(СтрокаОшибки,ПредставлениеПоля,Отступ =  "")
	
	ТекстОшибки = "";
	
	Если ЗначениеЗаполнено(СтрокаОшибки.ИмяТабличнойЧасти) И ЗначениеЗаполнено(СтрокаОшибки.НомерСтроки) Тогда
		ПрефиксОшибки = "В табличной части """+СтрокаОшибки.ИмяТабличнойЧасти+""" в строке № "+СокрЛП(СтрокаОшибки.НомерСтроки)+" в поле """+ПредставлениеПоля;//СтрокаОшибки.ИмяПоля;
	Иначе
		ПрефиксОшибки = "В поле """+ПредставлениеПоля;//СтрокаОшибки.ИмяПоля;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаОшибки.СведенияОбОшибках) = Тип("ТаблицаЗначений") Тогда
		
		ТекстОшибки = ПрефиксОшибки+" обнаружены ошибки:";
		
		Если Отступ = "" Тогда
			ТекОтступ = " ";
		Иначе
			ТекОтступ = Отступ;
		КонецЕсли;
		
		ТекОтступ = ТекОтступ + "--";
		
		Для каждого Стр ИЗ СтрокаОшибки.СведенияОбОшибках Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС+ ТекОтступ + " " + ПолучитьТекстОшибкиПоляСообщения(Стр,ПолучитьПредставлениеПоля(Стр),ТекОтступ);
		КонецЦикла;
		
	Иначе
		Если СтрокаОшибки.СодержитОписаниеПоля Тогда
			ТекстОшибки = СтрокаОшибки.СведенияОбОшибках;
		Иначе
			ТекстОшибки = ПрефиксОшибки + " обнаружена ошибка: " + СтрокаОшибки.СведенияОбОшибках;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТекстОшибки;			
			
КонецФункции

функция ПолучитьПредставлениеПоля(СтрокаОшибки)
	
	Если СтрокаОшибки.ИмяПоля = "ПокупательEDI" тогда
		Возврат "Организация";
	ИначеЕсли СтрокаОшибки.ИмяПоля = "ГрузополучательEDI" тогда
		Возврат "Грузополучатель"; 
	ИначеЕсли СтрокаОшибки.ИмяПоля = "ПродавецEDI" тогда
		Возврат "Контрагент"; 		
	ИначеЕсли СтрокаОшибки.ИмяПоля = "ПолучательEDI" тогда
		Возврат "Получатель"; 		
	ИначеЕсли  СтрокаОшибки.ИмяПоля = "GTIN" Тогда
		Возврат "Штрихкод(GTIN)";
	КонецЕсли;
	
	Возврат СтрокаОшибки.ИмяПоля;
	
КонецФункции

//TODO больше не нужна
Функция ПолучитьВозможныеТипыСоздаваемыхДокументовПоВходящимЗаказам() Экспорт
	
	СписокДокументов = Новый СписокЗначений;
	
	Если ИмяКонфигурации1С = "БП" Тогда
		СписокДокументов.Добавить("РеализацияТоваровУслуг",	"Реализация товаров и услуг");
		Если Найти(Метаданные.Синоним, "Бухгалтерия сельскохозяйственного предприятия")>0 Тогда
			СписокДокументов.Добавить("схРеализацияСельхозПродукции",	"Реализация сельскохозяйственной продукции");	
		КонецЕсли;
		СписокДокументов.Добавить("СчетНаОплатуПокупателю",	"Счет на оплату покупателю");
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
		
		СписокДокументов.Добавить("ЗаказКлиента",	"Реализация товаров и услуг");
		СписокДокументов.Добавить("РеализацияТоваровУслуг",	"Счет на оплату покупателю");
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда
		
		СписокДокументов.Добавить("ЗаказПокупателя",	"Реализация товаров и услуг");
		СписокДокументов.Добавить("РасходнаяНакладная",	"Счет на оплату покупателю");
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
		
		СписокДокументов.Добавить("СчетНаОплатуПокупателю",	"Реализация товаров и услуг");
		СписокДокументов.Добавить("РасходнаяНакладная",	"Счет на оплату покупателю");
		
	ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
		
		СписокДокументов.Добавить("РасходнаяНакладная",	"Расходная накладная");
		
	Иначе
		СписокДокументов.Добавить("ЗаказПокупателя",		"Заказ покупателя");
		СписокДокументов.Добавить("РеализацияТоваровУслуг",	"Реализация товаров и услуг");
	КонецЕсли;		
	
	Возврат СписокДокументов;
	
КонецФункции

Функция ПроверитьПоляСообщения(Сообщение,Параметры =  Неопределено) Экспорт
	
	РезультатПроверки = Новый Структура();
	
	Если Сообщение.ТипСообщения = "ALCRPT" Тогда
		
		ОшибкиСообщения=ИнициализироватьТаблицуОшибок();
		ОшибкиСообщения.Колонки.Добавить("ТекстОшибки");
		ПроверитьСообщениеALCRPT(Сообщение,ОшибкиСообщения);
		Если ОшибкиСообщения.Количество() = 0 Тогда
			РезультатПроверки.Вставить("Успешно",Истина);
		Иначе
			РезультатПроверки.Вставить("Успешно",Ложь);
			РезультатПроверки.Вставить("СписокОшибок",ОшибкиСообщения);
		КонецЕсли;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТекстОшибки");
	Результат.Колонки.Добавить("ИмяПоля");
	Результат.Колонки.Добавить("ИмяТабличнойЧасти");
	Результат.Колонки.Добавить("НомерСтроки");
	
	Если Сообщение.Направление = "Входящее" Тогда
		
		Возврат ПроверитьПоля1С(Сообщение);
		
	ИначеЕсли Сообщение.Направление = "Исходящее" Тогда
		
		ОшибкиСообщения = ПроверитьСообщениеEDI(Сообщение,Параметры);
		
		Для Каждого Стр Из ОшибкиСообщения Цикл
			
			 НоваяСтрока = Результат.Добавить();
			 НоваяСтрока.ИмяПоля = Стр.ИмяПоля;
			 НоваяСтрока.ИмяТабличнойЧасти = Стр.ИмяТабличнойЧасти;
			 НоваяСтрока.НомерСтроки = Стр.НомерСтроки;
			 
			 ПредставлениеПоля = ПолучитьПредставлениеПоля(Стр);
			 НоваяСтрока.ТекстОшибки = ПолучитьТекстОшибкиПоляСообщения(Стр,ПредставлениеПоля);
			
        КонецЦикла;
		
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		РезультатПроверки.Вставить("Успешно",Истина);
	Иначе
		РезультатПроверки.Вставить("Успешно",Ложь);
		РезультатПроверки.Вставить("СписокОшибок",Результат);
	КонецЕсли;	
		
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьСообщениеALCRPT(СообщениеАлко,ТаблицаОшибок)
	// проверка алко полей
	ЕстьАлкоОшибки = Ложь;
	Если ЗначениеЗаполнено(СообщениеАлко) Тогда
		Для Каждого Стр Из СообщениеАлко.Товары Цикл
			Если НЕ ЗначениеЗаполнено(Стр.АлкоКодПродукции) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "Не указан код алкогольной продукции в строке "+Стр.НомерСтроки;
				ЕстьАлкоОшибки = Истина;	
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.АлкоОбъем) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "Не указан объем алкогольной продукции в строке "+Стр.НомерСтроки;
				ЕстьАлкоОшибки = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.АлкоПроизводитель1С) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "Не указан производитель алкогольной продукции в строке "+Стр.НомерСтроки;
				ЕстьАлкоОшибки = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Стр.АлкоЛицензияПоставщика) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "Не указана алк. лицензий поставщика в строке "+Стр.НомерСтроки;
				ЕстьАлкоОшибки = Истина;
			КонецЕсли;
			//данные по ЕГАИС заполняются в подключаемом модуле или расширении, если данные есть - провалидируем их
			Если НЕ Стр.ЕГАИС = Неопределено и ТипЗнч(Стр.ЕГАИС) = Тип("Структура") Тогда
				Если Стр.ЕГАИС.Свойство("КодТовараВЕГАИС") И НЕ ЗначениеЗаполнено(Стр.ЕГАИС.КодТовараВЕГАИС) Тогда
	                НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ТекстОшибки = "Не указан код товара в системе ЕГАИС";
					ЕстьАлкоОшибки = Истина;
				КонецЕсли;
				Если Стр.ЕГАИС.Свойство("ИдентификаторТовараВТТНЕГАИС") И НЕ ЗначениеЗаполнено(Стр.ЕГАИС.ИдентификаторТовараВТТНЕГАИС) Тогда
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ТекстОшибки = "Не указан идентификатор позиции товара внутри ТТН в системе ЕГАИС";
	                ЕстьАлкоОшибки = Истина;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(СообщениеАлко.ТранспортнаяНакладнаяEDI.Номер) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "Не указан номер ТТН";
				ЕстьАлкоОшибки = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СообщениеАлко.ТранспортнаяНакладнаяEDI.Дата) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ТекстОшибки = "Не указана дата ТТН";
				ЕстьАлкоОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	//

КонецПроцедуры // ПроверитьСооющениеALCRPT()

Функция ПолучитьСвойстваПоля(ИмяПоля,МетаданныеСообщения) Экспорт
	
	СтруктураСвойств = Новый Структура();
	СтруктураСвойств.Вставить("ТипEDI");
	СтруктураСвойств.Вставить("Тип1С");
	СтруктураСвойств.Вставить("ИмяНаФорме1С");
	СтруктураСвойств.Вставить("ИмяНаФормеEDI");
	СтруктураСвойств.Вставить("ВидСтруктурыEDI");
	
	СтрокаМетаданных = МетаданныеСообщения.Найти(ИмяПоля,"ИмяПоля");
	
	Если НЕ СтрокаМетаданных = Неопределено Тогда
		
		СтруктураСвойств.Тип1С	= СтрокаМетаданных.Тип1С;
		СтруктураСвойств.ТипEDI = СтрокаМетаданных.ТипEDI;
		
		Если СтрокаМетаданных.Принадлежность = "1С" ИЛИ СтрокаМетаданных.Принадлежность = "=" Тогда
			ИмяНаФорме1С = ИмяПоля;
		Иначе
			ИмяНаФорме1С = ИмяПоля+"1С";
		КонецЕсли;
		
		СтруктураСвойств.ИмяНаФорме1С = ИмяНаФорме1С;
		
		Если СтрокаМетаданных.Принадлежность = "EDI" ИЛИ СтрокаМетаданных.Принадлежность = "=" Тогда
			ИмяНаФормеEDI = ИмяПоля;
		Иначе
			ИмяНаФормеEDI = ИмяПоля+"EDI";
		КонецЕсли;

		СтруктураСвойств.ВидСтруктурыEDI = СтрокаМетаданных.ВидСтруктурыEDI;
		
	КонецЕсли;
	
	Возврат СтруктураСвойств;
	
КонецФункции

//Обработка входящих сообщений ORDERS со статусом Canceled на стороне ПОСТАВЩИКА
Функция ОбработатьОтменуЗаказа(Сообщение,ТаблицаСообщений=Неопределено) Экспорт
	//на рефакторинг: ТаблицаСообщений уже не нужна, но пока оставим для совместимости со старыми ПМ
	
	СтандартнаяОбработкаEDI = Истина; 
	
	ОбработкаСобытияПодключаемогоМодуля("ОбработатьОтменуЗаказа",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение,ТаблицаСообщений",
			Сообщение,ТаблицаСообщений));

	Если СтандартнаяОбработкаEDI Тогда
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтурEDI_Сообщения.Ссылка,
		|	КонтурEDI_Сообщения.Документ
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	КонтурEDI_Сообщения.Партнер = &Партнер
		|	И КонтурEDI_Сообщения.Ссылка <> &Ссылка
		|	И КонтурEDI_Сообщения.НомерДокумента = &НомерЗаказа
		|	И КонтурEDI_Сообщения.НомерСерииЗаказов = &НомерСерииЗаказов
		|	И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
		|	И КонтурEDI_Сообщения.ДатаДокумента МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаЗаказа, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаЗаказа, ДЕНЬ)";
		//Ищем заказы по данному номеру за этот же день
		
		Если Сообщение.Свойство("НомерСерииЗаказов") Тогда
			Запрос.УстановитьПараметр("НомерСерииЗаказов",	Сообщение.НомерСерииЗаказов);
		Иначе
			Запрос.УстановитьПараметр("НомерСерииЗаказов",	"");
		КонецЕсли;
		Запрос.УстановитьПараметр("НомерЗаказа",		Сообщение.ДокументEDI.Номер);
		Запрос.УстановитьПараметр("ДатаЗаказа",			Сообщение.ДокументEDI.Дата);
		Запрос.УстановитьПараметр("Партнер",			ПреобразоватьЗначениеДляВнешнегоХранилища(Сообщение.Отправитель1С));
		Запрос.УстановитьПараметр("Ссылка",				ПреобразоватьЗначениеДляВнешнегоХранилища(Сообщение.СообщениеСсылка));
		
		ТаблицаПредыдущихСообщенийORDERS = Запрос.Выполнить().Выгрузить();
		МассивДокументовПоВходящимORDERS = Новый Массив;
		
		//1. Соберем все документы, привязанные к загруженным ранее сообщениям ORDERS с этим же номером.
		Для Каждого Стр Из ТаблицаПредыдущихСообщенийORDERS Цикл
			
			Если ЗначениеЗаполнено(Стр.Документ) Тогда
				ДокументСсылка = ?(ВнешнееХранилище,ЗначениеИзСтрокиВнутр(Стр.Документ),Стр.Документ);
				Если ЗначениеЗаполнено(ДокументСсылка)Тогда
					МассивДокументовПоВходящимORDERS.Добавить(ДокументСсылка);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		
		//2. пробежимся по этим документам и посмотрим, не пошла ли по ним цепочка дальше. Если дошли хотя бы до DESADV, то уже не будем ничего отменять в базе у поставщика.
		МожемУдалятьСообщенияИДокументы = Истина;	//сейчас поймем, что нам с этой отменой делать
		Для Каждого ДокументСсылка Из МассивДокументовПоВходящимORDERS Цикл
			ДокументДляDESADV = НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"DESADV");
			Если ЗначениеЗаполнено(ДокументДляDESADV) Тогда
				Если НайтиСообщениеДокумента(ДокументДляDESADV,"DESADV") <> Неопределено Тогда
					МожемУдалятьСообщенияИДокументы = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//3. Собственно действия
		Если Не МожемУдалятьСообщенияИДокументы Тогда
			
			//Игнорируем ORDERS от сети с отменой, потому что уже поздно отменять.
			ОбъектСообщения = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
			ОбъектСообщения.ТипСообщения = "-ORDERS";//сохраним в базу для истории, но показывать уже не будем
			ОбъектСообщения.ОтклоненоОтправителем = Истина;
			ОбъектСообщения.Статус = "Загружен";
			СохранитьОбъектСообщения(ОбъектСообщения);
			
		Иначе //МожемУдалятьСообщенияИДокументы
			
			//Удалим все сообщения и документы по отмененному ORDERS.
			//Здесь не продуман кейс, когда по входящему Заказу создана Реализация, но DESADV еще отсутствует.
			//Оставлю на будущее, это за рамками рефакторинга.
			
			//3.1. Удалим документы
			Для Каждого ДокументСсылка Из МассивДокументовПоВходящимORDERS Цикл
				Попытка
					ДокументСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				Исключение
					//например, сработала дата запрета редактирования или RLS
					Сообщить_КонтурEDI("Сеть отменила заказ "+Сообщение.ДокументEDI.Номер+", но документ "+ДокументСсылка+" не удалось пометить на удаление");
					//вообще обработку отмены заказа с удалением документов лучше бы сделать интерактивной
				КонецПопытки;
			
			КонецЦикла;
			
			//3.2. Удалим сообщения
			Для Каждого Стр Из ТаблицаПредыдущихСообщенийORDERS Цикл
				
				СообщениеЗаказОбъект = Стр.Ссылка.ПолучитьОбъект();
				
				СообщениеЗаказОбъект.ТипСообщения = "#ORDERS";//скроем старое
				СообщениеЗаказОбъект.ОтклоненоОтправителем = Истина;
				СообщениеЗаказОбъект.Статус = "Загружен";//а как лучше?

				//СообщениеЗаказОбъект.Статус = "ОтклоненоОтправителем";//в старом интерфейсе может не сработать, поэтому сделаем "Загружен"

				СохранитьОбъектСообщения(СообщениеЗаказОбъект);
				
				//РезультатОтмены = Истина;
				
			КонецЦикла;
			
			//3.3 Текущее сообщение оставим с нужным статусом
			ОбъектСообщения = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
			ОбъектСообщения.ОтклоненоОтправителем = Истина;
			ОбъектСообщения.Статус = "Загружен";
			СохранитьОбъектСообщения(ОбъектСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;//ответ нигде не анализируется.
			
КонецФункции

//}}}

//******************************************************************
//{{{	СРАВНЕНИЕ СООБЩЕНИЙ

Функция ПолучитьСтруктуруТаблицыТоваров() Экспорт
	
	СтруктураТаблицы = Новый Структура();
	СтруктураТаблицы.Вставить("Вид"); // Документ Сообщение
	СтруктураТаблицы.Вставить("ТипСообщения"); 
	СтруктураТаблицы.Вставить("Товары"); // сама таблица товаров
	
	Возврат СтруктураТаблицы;
	
КонецФункции

Функция ПолучитьСтавкуНДС_EDI(СтавкаНДС_EDI)
	
	Если СтавкаНДС_EDI = "18" Тогда
		Возврат 18;
	ИначеЕсли СтавкаНДС_EDI = "10" Тогда
		Возврат 10;
	КонецЕсли;
	
	Возврат 0;
		
КонецФункции

Функция СравнитьТаблицыТоваров(СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля,РассчитыватьНДС =  Истина,ПропускатьНулевыеЗначения = Ложь) Экспорт
	
	Если СтруктураТаблицы1.Товары.Колонки.Найти("КонечныйГрузополучательGLN")<>Неопределено Тогда 
		СравнениеСУчетомКонечныйГрузополучательGLN=Истина;
	Иначе
		СравнениеСУчетомКонечныйГрузополучательGLN=Ложь;
	КонецЕсли;
	
	РезультатСравнения = Новый Структура();
	РезультатСравнения.Вставить("Успешно",Истина);
	РезультатСравнения.Вставить("ОписаниеОшибки");
	РезультатСравнения.Вставить("ЕстьРасхождения");
	РезультатСравнения.Вставить("ТаблицаСравнения");
	
	СтандартнаяОбработкаEDI = Истина;
	Результат = ОбработкаСобытияПодключаемогоМодуля("СравнитьТаблицыТоваров",СтандартнаяОбработкаEDI,
			Новый Структура("СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля,РассчитыватьНДС",
			СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля,РассчитыватьНДС));
			
    Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Результат;
	КонецЕсли;
	
	// СтавкаНДС - тип EDI
	
	// Обязательные поля:
	// - GTIN
	// - КодТовараПокупателя
	// - КодТовараПоставщика
	
	// Сравниваемые поля:
	// - Количество
	// - СтавкаНДС
	// - ЦенаБезНДС
	// - ЦенаСНДС
	
	// Если РассчитыватьНДС = Истина, тогда в результирующую таблицу будут добавлены колонки "БазоваяЦена1" "БазоваяЦена2" с возможными значениями: "СНДС", "БезНДС", пусто.
	
	// *******
	
	// проверка входящих данных
	
	Если СтруктураТаблицы1.Вид = "Сообщение" Тогда
		ТипСообщения1 = СтруктураТаблицы1.ТипСообщения;
	Иначе
		ТипСообщения1 = "Документ";
	КонецЕсли;

	Если СтруктураТаблицы2.Вид = "Сообщение" Тогда
		ТипСообщения2 = СтруктураТаблицы2.ТипСообщения;
	Иначе
		ТипСообщения2 = "Документ";
	КонецЕсли;
	
	Если ТипСообщения1 = "ORDRSP" Тогда
		
		РезультатСравнения.Успешно = Ложь;
		РезультатСравнения.ОписаниеОшибки = "ORDRSP может быть передан как вторая таблица!";
		
		Возврат РезультатСравнения;
		
	ИначеЕсли ТипСообщения2 = "ORDRSP" И НЕ ТипСообщения1 = "ORDERS" Тогда
		
		РезультатСравнения.Успешно = Ложь;
		РезультатСравнения.ОписаниеОшибки = "ORDRSP можно сравнивать только с ORDERS!";
		
		Возврат РезультатСравнения;
		
	КонецЕсли;
			
	Таблица1 = СтруктураТаблицы1.Товары;
	Таблица2 = СтруктураТаблицы2.Товары;
	
	// подготовка таблицы сравнения
	
	ЕстьНоменклатура1 = НЕ Таблица1.Колонки.Найти("Номенклатура") = Неопределено;
	ЕстьНоменклатура2 = НЕ Таблица2.Колонки.Найти("Номенклатура") = Неопределено;
	
	ЕстьХарактеристикаНоменклатуры1 = НЕ Таблица1.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено;
	
	ЕстьНаименование1 = НЕ Таблица1.Колонки.Найти("Наименование") = Неопределено;
	ЕстьНаименование2 = НЕ Таблица2.Колонки.Найти("Наименование") = Неопределено;
	
	ТаблицаСравнения = Новый ТаблицаЗначений;	
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаСравнения,
													"ЕстьРасхождения
													|Номенклатура
													|ХарактеристикаНоменклатуры
													|Наименование
													|GTIN
													|КодТовараПокупателя
													|КодТовараПоставщика");
	
	Если СравнениеСУчетомКонечныйГрузополучательGLN тогда
		ДобавитьКолонкиВТаблицуЗначений(ТаблицаСравнения,
		"КонечныйГрузополучательGLN");
	КонецЕсли;
	
	Для каждого Стр ИЗ СравниваемыеПоля Цикл
		
		ИмяПоля = Стр.Значение;
		
		ТаблицаСравнения.Колонки.Добавить(ИмяПоля+"1");
		ТаблицаСравнения.Колонки.Добавить(ИмяПоля+"2");
		
	КонецЦикла;
	
	Если РассчитыватьНДС Тогда
		
		ТаблицаСравнения.Колонки.Добавить("БазоваяЦена1");
		ТаблицаСравнения.Колонки.Добавить("БазоваяЦена2");
		
		Если ТаблицаСравнения.Колонки.Найти("СтавкаНДС1") = Неопределено Тогда
			ТаблицаСравнения.Колонки.Добавить("СтавкаНДС1");
		КонецЕсли;
		Если ТаблицаСравнения.Колонки.Найти("СтавкаНДС2") = Неопределено Тогда
			ТаблицаСравнения.Колонки.Добавить("СтавкаНДС2");
		КонецЕсли;
		
	КонецЕсли;
	
	ИсходнаяТаблица = Таблица1;
	
	Если ТипСообщения2 = "ORDRSP" Тогда
		
		ТаблицаСравнения.Колонки.Добавить("Статус");
		
	КонецЕсли;
	
	// заполнение таблицы
	Для Каждого Стр Из Таблица1 Цикл
		
		НоваяСтрока = ТаблицаСравнения.Добавить();
		
		Если СравнениеСУчетомКонечныйГрузополучательGLN тогда
			НоваяСтрока.КонечныйГрузополучательGLN = Стр.КонечныйГрузополучательGLN;
		КонецЕсли;
		
		Если ЕстьНоменклатура1 Тогда
			НоваяСтрока.Номенклатура = Стр.Номенклатура;
		КонецЕсли;
		Если ЕстьХарактеристикаНоменклатуры1 Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
		КонецЕсли;
		Если ЕстьНаименование1 Тогда
			НоваяСтрока.Наименование = Стр.Наименование;
		КонецЕсли;
		
		НоваяСтрока.GTIN				= Стр.GTIN;
		НоваяСтрока.КодТовараПокупателя = Стр.КодТовараПокупателя;
		НоваяСтрока.КодТовараПоставщика = Стр.КодТовараПоставщика;
		
		Для каждого Поле ИЗ СравниваемыеПоля Цикл
		
			ИмяПоля = Поле.Значение;
			
			НоваяСтрока[ИмяПоля+"1"] = Стр[ИмяПоля];
			
		КонецЦикла;
		
		Если РассчитыватьНДС Тогда
			
			БазоваяЦена = "";
			Если ЗначениеЗаполнено(Стр.ЦенаБезНДС) Тогда
				Если НЕ ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
					БазоваяЦена = "БезНДС";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
					БазоваяЦена = "СНДС";
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.БазоваяЦена1 = БазоваяЦена;
			
			Если СравниваемыеПоля.НайтиПоЗначению("СтавкаНДС") = Неопределено Тогда
				Если ТипСообщения1 = "Документ" Тогда
					НоваяСтрока.СтавкаНДС1 = Стр.СтавкаНДС;
				Иначе
					НоваяСтрока.СтавкаНДС1 = Стр.СтавкаНДСEDI;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// присоединение второй таблицы
	Для каждого Стр Из Таблица2 Цикл
		
		НайденнаяСтрока = Неопределено;
		
		Если СравнениеСУчетомКонечныйГрузополучательGLN тогда
			//Найдем строку с учетом СравнениеСУчетомКонечныйГрузополучательGLN
			ОтборНоменклатуры=новый Структура;
			ОтборНоменклатуры.Вставить("КонечныйГрузополучательGLN",Стр.КонечныйГрузополучательGLN);   
			
			Если ЗначениеЗаполнено(Стр.GTIN) Тогда
				ОтборНоменклатуры.Вставить("GTIN",Стр.GTIN);   
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.КодТовараПокупателя) Тогда
				ОтборНоменклатуры.Вставить("КодТовараПокупателя",Стр.КодТовараПокупателя);   
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаСравнения.НайтиСтроки(ОтборНоменклатуры);
			
			Если НайденныеСтроки.Количество()=1 Тогда 
				НайденнаяСтрока = НайденныеСтроки[0];
			Иначе
				НайденнаяСтрока = Неопределено;
			КонецЕсли;
		иначе
			//типовой поиск
			Если ЗначениеЗаполнено(Стр.GTIN) Тогда
				НайденнаяСтрока = ТаблицаСравнения.Найти(Стр.GTIN,"GTIN");
			КонецЕсли;
			Если НайденнаяСтрока = Неопределено И ЗначениеЗаполнено(Стр.КодТовараПокупателя) Тогда
				НайденнаяСтрока = ТаблицаСравнения.Найти(Стр.КодТовараПокупателя,"КодТовараПокупателя");
			КонецЕсли;
			Если НайденнаяСтрока = Неопределено И ЗначениеЗаполнено(Стр.КодТовараПоставщика) Тогда
				НайденнаяСтрока = ТаблицаСравнения.Найти(Стр.КодТовараПоставщика,"КодТовараПоставщика");
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = НайденнаяСтрока;
			
		Иначе
			
			НоваяСтрока = ТаблицаСравнения.Добавить();
			НоваяСтрока.GTIN				= Стр.GTIN;
			НоваяСтрока.КодТовараПокупателя = Стр.КодТовараПокупателя;
			НоваяСтрока.КодТовараПоставщика = Стр.КодТовараПоставщика;
			
		КонецЕсли;
		
		Если ЕстьНоменклатура2 Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.Номенклатура = Стр.Номенклатура;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьНаименование2 Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
				НоваяСтрока.Наименование = Стр.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСообщения2 = "ORDRSP" Тогда
			
			НоваяСтрока.Статус = Стр.Статус;
			
			Если Стр.Статус = "Подтвержден" Тогда
				
				Для каждого Поле ИЗ СравниваемыеПоля Цикл
					
					ИмяПоля = Поле.Значение;
					
					НоваяСтрока[ИмяПоля+"2"] = НоваяСтрока[ИмяПоля+"1"];
					
				КонецЦикла;
				
				Если РассчитыватьНДС Тогда
					НоваяСтрока.СтавкаНДС2 = НоваяСтрока.СтавкаНДС1;
				КонецЕсли;
				
			ИначеЕсли Стр.Статус = "Уточнен" Тогда
				
				Если НЕ СравниваемыеПоля.НайтиПоЗначению("Количество") = Неопределено Тогда
					НоваяСтрока.Количество2	= ?(ЗначениеЗаполнено(Стр.Количество),Стр.Количество,НоваяСтрока.Количество1);
				КонецЕсли;
				
				Если НЕ СравниваемыеПоля.НайтиПоЗначению("ЦенаБезНДС") = Неопределено Тогда
					Если ЗначениеЗаполнено(Стр.ЦенаБезНДС) Тогда
						НоваяСтрока.ЦенаБезНДС2 = Стр.ЦенаБезНДС;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СравниваемыеПоля.НайтиПоЗначению("ЦенаСНДС") = Неопределено Тогда
					Если ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
						НоваяСтрока.ЦенаСНДС2 = Стр.ЦенаСНДС;
					КонецЕсли;
				КонецЕсли;
				
				Если РассчитыватьНДС Тогда
					
					БазоваяЦена = "";
					Если ЗначениеЗаполнено(Стр.ЦенаБезНДС) Тогда
						Если НЕ ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
							БазоваяЦена = "БезНДС";
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
							БазоваяЦена = "СНДС";
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.БазоваяЦена2 = БазоваяЦена;
					
					Если СравниваемыеПоля.НайтиПоЗначению("СтавкаНДС") = Неопределено Тогда
						Если ТипСообщения2 = "Документ" Тогда
							НоваяСтрока.СтавкаНДС2 = Стр.СтавкаНДС;
						Иначе
							НоваяСтрока.СтавкаНДС2 = Стр.СтавкаНДСEDI;
						КонецЕсли;
					КонецЕсли;
			
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЦенаБезНДС2) И НЕ ЗначениеЗаполнено(НоваяСтрока.ЦенаСНДС2) Тогда
					
					НоваяСтрока.ЦенаБезНДС2		= НоваяСтрока.ЦенаБезНДС1;
					НоваяСтрока.ЦенаСНДС2		= НоваяСтрока.ЦенаСНДС1;
					НоваяСтрока.БазоваяЦена2	= НоваяСтрока.БазоваяЦена1;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС2) Тогда
					НоваяСтрока.СтавкаНДС2 = НоваяСтрока.СтавкаНДС1;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Для каждого Поле ИЗ СравниваемыеПоля Цикл
				
				ИмяПоля = Поле.Значение;
				
				Если ИмяПоля = "Количество" Тогда
					
					Если ЗначениеЗаполнено(НоваяСтрока.Количество2) Тогда
						НоваяСтрока.Количество2 = НоваяСтрока.Количество2 + Стр.Количество;
					Иначе
						НоваяСтрока.Количество2 = Стр.Количество;
					КонецЕсли;
						
				Иначе	
					
					НоваяСтрока[ИмяПоля+"2"] = ?(ИмяПоля="СтавкаНДС" и ТипСообщения2="RECADV",КонвертироватьЗначениеEDIв1С(Стр["СтавкаНДСEDI"],"СтавкаНДС","",""),Стр[ИмяПоля]);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если РассчитыватьНДС Тогда
				
				БазоваяЦена = "";
				Если ЗначениеЗаполнено(Стр.ЦенаБезНДС) Тогда
					Если НЕ ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
						БазоваяЦена = "БезНДС";
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
						БазоваяЦена = "СНДС";
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.БазоваяЦена2 = БазоваяЦена;
				
				Если СравниваемыеПоля.НайтиПоЗначению("СтавкаНДС") = Неопределено Тогда
					Если ТипСообщения2 = "Документ" Тогда
						НоваяСтрока.СтавкаНДС2 = Стр.СтавкаНДС;
					Иначе
						НоваяСтрока.СтавкаНДС2 = Стр.СтавкаНДСEDI;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// расчет с учетом ставки ндс
	Если РассчитыватьНДС Тогда
		
		Для каждого Стр ИЗ ТаблицаСравнения Цикл
			
			СтавкаНДС1 = Неопределено;
			СтавкаНДС2 = Неопределено;
			
			Если ЗначениеЗаполнено(Стр.СтавкаНДС1) Тогда
				СтавкаНДС1 = ПолучитьСтавкуНДС_EDI(Стр.СтавкаНДС1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(Стр.СтавкаНДС2) Тогда
				СтавкаНДС2 = ПолучитьСтавкуНДС_EDI(Стр.СтавкаНДС2);
			КонецЕсли;
			
			Если СтавкаНДС1 = Неопределено Тогда
				СтавкаНДС1 = СтавкаНДС2;
			КонецЕсли;
			Если СтавкаНДС2 = Неопределено Тогда
				СтавкаНДС2 = СтавкаНДС1;
			КонецЕсли;
			
			Если СтавкаНДС1 = Неопределено Тогда
				СтавкаНДС1 = 0;
			КонецЕсли;
			Если СтавкаНДС2 = Неопределено Тогда
				СтавкаНДС2 = 0;
			КонецЕсли;
				
			Если Стр.БазоваяЦена1 = "БезНДС" Тогда
				Стр.ЦенаСНДС1	= Окр((Стр.ЦенаБезНДС1 * (100 + СтавкаНДС1)) / 100,2,1);
			ИначеЕсли Стр.БазоваяЦена1 = "СНДС" Тогда	
				Стр.ЦенаБезНДС1	= Окр((Стр.ЦенаСНДС1 * 100) / (100 + СтавкаНДС1),2,1);
			КонецЕсли;	
			
			Если Стр.БазоваяЦена2 = "БезНДС" Тогда
				Стр.ЦенаСНДС2	= Окр((Стр.ЦенаБезНДС2 * (100 + СтавкаНДС2)) / 100,2,1);
			ИначеЕсли Стр.БазоваяЦена2 = "СНДС" Тогда	
				Стр.ЦенаБезНДС2	= Окр((Стр.ЦенаСНДС2 * 100) / (100 + СтавкаНДС2),2,1);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьРасхождения = Ложь;
	
	// собственно сравнение
	Для каждого Стр ИЗ ТаблицаСравнения Цикл
		
		Стр.ЕстьРасхождения = Ложь;
		
		Для каждого Поле ИЗ СравниваемыеПоля Цикл
			
			ИмяПоля = Поле.Значение;
			
			_Значение1 = Стр[ИмяПоля+"1"];
			_Значение2 = Стр[ИмяПоля+"2"];
			
			ЭтоПолеКоличественногоТипа = (
			(ИмяПоля = "Количество" )
			);
			Если ЭтоПолеКоличественногоТипа Тогда //неопределено считаем как 0 (сеть может прислать экстра строку с 0 в принятом количествве)
				Если не ЗначениеЗаполнено(_Значение1) тогда
					_Значение1=0;
				КонецЕсли;
				Если не ЗначениеЗаполнено(_Значение2) тогда
					_Значение2=0;
				КонецЕсли;
			КонецЕсли;
			
			Если _Значение1<>_Значение2 Тогда
				
				ЭтоПолеДенежногоТипа = (
				(ИмяПоля = "ЦенаБезНДС" )
				Или (ИмяПоля = "ЦенаСНДС" )
				Или (ИмяПоля = "СуммаБезНДС" )
					Или (ИмяПоля = "СуммаСНДС" )
					Или (ИмяПоля = "СуммаНДС" )
					);
				
				Если ЭтоПолеДенежногоТипа
					И ПропускатьНулевыеЗначения
					И (не ЗначениеЗаполнено(_Значение1) или не ЗначениеЗаполнено(_Значение2))
					Тогда //проверим, если одно из этих значений нулевое, то не будем считать это расхождением
					Продолжить;
				Иначе
					
					
					//если перед нами 2 числовых значения, и их разность не превышает 1 копейку, то считаем, что они совпадают 
					Если ЭтоПолеДенежногоТипа
						И ТипЗнч(_Значение1) = Тип("Число")
						И ТипЗнч(_Значение2) = Тип("Число")
					Тогда
						_Разность = _Значение2 - _Значение1;
						_Разность = ?(_Разность>0, _Разность, -_Разность);
						
						Если _Разность>=0.01 Тогда
							Стр.ЕстьРасхождения = Истина;
							Прервать;
						КонецЕсли;
						
					Иначе
						Стр.ЕстьРасхождения = Истина;
						Прервать;
						
					КонецЕсли;
					
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Стр.ЕстьРасхождения Тогда
			ЕстьРасхождения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатСравнения.ЕстьРасхождения	= ЕстьРасхождения;
	РезультатСравнения.ТаблицаСравнения = ТаблицаСравнения;
	
	Результат = ОбработкаСобытияПодключаемогоМодуля("ПослеСравненияТаблицыТоваров",СтандартнаяОбработкаEDI,
			Новый Структура("РезультатСравнения,СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля,РассчитыватьНДС",
			РезультатСравнения,СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля,РассчитыватьНДС));
			
    Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат РезультатСравнения;
	
КонецФункции

Функция СравнитьЗначенияСтруктур(Структура1, Структура2, СравниваемыеКлючи) Экспорт
	
	РезультатСравнения = Новый Структура();
	РезультатСравнения.Вставить("Успешно",Истина);
	РезультатСравнения.Вставить("ОписаниеОшибки");
	РезультатСравнения.Вставить("ЕстьРасхождения");
	РезультатСравнения.Вставить("ТаблицаСравнения");
	
	СтандартнаяОбработкаEDI = Истина;
	Результат = ОбработкаСобытияПодключаемогоМодуля("СравнитьЗначенияСтруктур",СтандартнаяОбработкаEDI,
			Новый Структура("Структура1,Структура2,СравниваемыеКлючи",
			Структура1,Структура2,СравниваемыеКлючи));
    Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Результат;
	КонецЕсли;
	
	Успешно = Истина;
	ЕстьРасхождения = Ложь;
	
	ТаблицаСравнения = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаСравнения,"Ключ,ЕстьРасхождения,Значение1,Значение2");
			
	Для Каждого Ключ Из СравниваемыеКлючи Цикл
		
		Если Не Структура1.Свойство(Ключ.Значение) = Истина ИЛИ Не Структура2.Свойство(Ключ.Значение) = Истина Тогда
			Успешно = Ложь;
			РезультатСравнения.Вставить("ОписаниеОшибки", РезультатСравнения.ОписаниеОшибки + Ключ.Значение + ": ключ отсутствует в одной из структур;" + " ");
			Продолжить;
		КонецЕсли;
				
		НоваяСтрока = ТаблицаСравнения.Добавить();
		НоваяСтрока.Ключ = Ключ.Представление;
		НоваяСтрока.ЕстьРасхождения = Ложь;
		НоваяСтрока.Значение1 = Структура1[Ключ.Значение];
		НоваяСтрока.Значение2 = Структура2[Ключ.Значение];
		
		Если Не НоваяСтрока.Значение1 = НоваяСтрока.Значение2 Тогда
			НоваяСтрока.ЕстьРасхождения = Истина;
			ЕстьРасхождения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатСравнения.Вставить("ЕстьРасхождения",	ЕстьРасхождения);
	РезультатСравнения.Вставить("ТаблицаСравнения", ТаблицаСравнения);	
	
	Результат = ОбработкаСобытияПодключаемогоМодуля("ПослеСравненияЗначенийСтруктур",СтандартнаяОбработкаEDI,
			Новый Структура("РезультатСравнения,Структура1,Структура2,СравниваемыеКлючи",
			РезультатСравнения,Структура1,Структура2,СравниваемыеКлючи));
			
    Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат РезультатСравнения;	
	
КонецФункции

//}}}

//*******************************************************************
//{{{ ПОЛЬЗОВАТЕЛИ

Функция ПолучитьНедоступныеСообщения(ПраваДоступаСтрокой) Экспорт
	
	СписокПрав = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(ПраваДоступаСтрокой) Тогда
		Возврат СписокПрав;
	Иначе
		
		ДлинаСтроки = СтрДлина(ПраваДоступаСтрокой);
		
		Если ДлинаСтроки = 5 Тогда
			
			Если Сред(ПраваДоступаСтрокой,1,1) = "0" Тогда
				СписокПрав.Добавить("ORDERS");
			КонецЕсли;
			Если Сред(ПраваДоступаСтрокой,2,1) = "0" Тогда
				СписокПрав.Добавить("ORDRSP");
			КонецЕсли;	
			Если Сред(ПраваДоступаСтрокой,3,1) = "0" Тогда
				СписокПрав.Добавить("DESADV");
			КонецЕсли;	
			Если Сред(ПраваДоступаСтрокой,4,1) = "0" Тогда
				СписокПрав.Добавить("RECADV");
			КонецЕсли;	
			Если Сред(ПраваДоступаСтрокой,5,1) = "0" Тогда
				СписокПрав.Добавить("INVOIC");
			КонецЕсли;
			
			Возврат СписокПрав;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокПрав;
	
КонецФункции

Функция ПолучитьНедоступныеДокументы(ПраваДоступаСтрокой) Экспорт
	
	СписокНедоступныхДокументов = Новый СписокЗначений;
	
	НастройкиСписков = ПолучитьНастройкиСписков();
	
	Для Каждого Стр Из НастройкиСписков Цикл
		Если Стр.Вид = "Кнопка" Тогда
			
			ПодстрокаПоиска = "\"+СокрЛП(Стр.Код)+"\";
			Если Найти(ПраваДоступаСтрокой,ПодстрокаПоиска)>0 Тогда

				СписокНедоступныхДокументов.Добавить(Стр.Имя);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Возврат СписокНедоступныхДокументов;
	
КонецФункции

Функция ПолучитьТекущегоПользователя1С() Экспорт
	
	Результат = ОбработкаСобытияПодключаемогоМодуля("ПолучитьТекущегоПользователя1С");
	
	Если НЕ Результат=Неопределено Тогда
		
		Возврат Результат;
		
	Иначе
		
		Если ИмяКонфигурации1С = "ТКПТ" Тогда
			Возврат ПараметрыСеанса.Пользователь;
		Иначе
			Возврат ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыТекущегоПользователяEDI() Экспорт
	
	// Установим значения свойств по умолчанию:
	
	СтруктураПараметровПользователя = Новый Структура();	
	
	СтрокаОсновныхПараметров = 
	"НеИскатьСоответствияВСписках
	|НеПоказыватьПровестиЗаказ
	|ПроводитьЗагруженныеЗаказы
	|НеСоздаватьЗаказыБезСвоихТД
	|НеСоздаватьЗаказыБезЮрФизЛицТД
	|НеПоказыватьСоздатьРеализацию
	|ГрузополучательИзЮрФизЛицаТД
	|ФильтрОбменаПоТочкамДоставки
	|ФильтрОбменаПоСетям
	|НеБратьАдресаПартнераИз1С
	|НеБратьСвоиАдресаИз1С
	|ЛогинСлужебныйДиадок
	|ПарольСлужебныйДиадок
	|ОбновлятьВесьСписокПриРаботеСЗаказами
	|СворачиватьЗаказыСОдинаковымиНомерами";//вроде уже не нужен, проверить
	
	СтрокаДополнительныхПараметров = 
	"УчетнаяЗаписьПоУмолчанию
	|GLN_Основной
	|ОтправлятьDESADVпоПроведеннымРеализациям";//свойства, название которых в регистрах не совпадает с внутренним именем. В идеале - свести все к единому виду
	
	СтруктураСвойств = ПолучитьСписокСвойствEDI(СтрокаОсновныхПараметров+Символы.ПС+СтрокаДополнительныхПараметров,Неопределено);
	
	Для Каждого ЭлементСписка Из РазложитьСтроку(СтрокаОсновныхПараметров) Цикл
		СтруктураПараметровПользователя.Вставить(ЭлементСписка.Значение,СтруктураСвойств[ЭлементСписка.Значение]);
	КонецЦикла;	
	
	СтруктураПараметровПользователя.Вставить("УчетнаяЗапись",								СтруктураСвойств.УчетнаяЗаписьПоУмолчанию);
	СтруктураПараметровПользователя.Вставить("GLN_Подразделения",							СтруктураСвойств.GLN_Основной);
	СтруктураПараметровПользователя.Вставить("ОтправлятьDESADVпоПроведеннымРеализациям",	(СтруктураСвойств.ОтправлятьDESADVпоПроведеннымРеализациям=Истина));
	СтруктураПараметровПользователя.Вставить("СозданиеЗаказаРСчет",							ПолучитьСсылкуНаРСчет());
	
	СтруктураПараметровПользователя.Вставить("Логин",										Неопределено);
	СтруктураПараметровПользователя.Вставить("Пароль",										Неопределено);

	СтруктураПараметровПользователя.Вставить("ВариантОбмена",								"Ручной");
	СтруктураПараметровПользователя.Вставить("РольПользователяEDI", 						"ПолныеПрава");
	СтруктураПараметровПользователя.Вставить("НедоступныеДокументы",						Неопределено);
	СтруктураПараметровПользователя.Вставить("НедоступныеСообщения",						Неопределено);
	СтруктураПараметровПользователя.Вставить("НедоступныеПартнеры",							Неопределено);
	СтруктураПараметровПользователя.Вставить("НедоступныеОрганизации",						Неопределено);
	СтруктураПараметровПользователя.Вставить("ЭтоАвтообмен",								Ложь);
	
	// Установим значения для текущего пользователя:
	
	ПользовательEDI = ПолучитьЭлементСправочника("Пользователи",ПолучитьТекущегоПользователя1С());
	
	Если НЕ ПользовательEDI = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПользовательEDI.УчетнаяЗапись) Тогда
			СтруктураПараметровПользователя.УчетнаяЗапись = ПользовательEDI.УчетнаяЗапись;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПользовательEDI.ВариантОбмена) Тогда
			СтруктураПараметровПользователя.ВариантОбмена = ПользовательEDI.ВариантОбмена;
		КонецЕсли;
		
		Если ПользовательEDI.РольПользователяEDI  = "ПолныеПрава" ИЛИ ПользовательEDI.РольПользователяEDI = "Пользователь" Тогда
			СтруктураПараметровПользователя.РольПользователяEDI = ПользовательEDI.РольПользователяEDI;
		КонецЕсли;
		
		СтруктураПараметровПользователя.ЭтоАвтообмен = ПользовательEDI.СлужебныйПользовательАвтообмен;
		
		СтруктураПараметровПользователя.НедоступныеДокументы = ПолучитьНедоступныеДокументы(ПользовательEDI.ПраваДоступаКСпискам);
		СтруктураПараметровПользователя.НедоступныеСообщения = ПолучитьНедоступныеСообщения(ПользовательEDI.ПраваДоступаКСообщениям);
		
		Если ЗначениеЗаполнено(ПользовательEDI.ПраваДоступаКПартнерам) Тогда
			СтруктураПараметровПользователя.НедоступныеПартнеры = ПользовательEDI.ПраваДоступаКПартнерам;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПользовательEDI.ПраваДоступаКОрганизациям) Тогда
			СтруктураПараметровПользователя.НедоступныеОрганизации = ПользовательEDI.ПраваДоступаКОрганизациям;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметровПользователя.УчетнаяЗапись) Тогда
		
		УчетнаяЗаписьЭлемент = ПолучитьЭлементСправочника("УчетныеЗаписи",СтруктураПараметровПользователя.УчетнаяЗапись);
		
		СтруктураПараметровПользователя.Логин = УчетнаяЗаписьЭлемент.Логин;
		СтруктураПараметровПользователя.Пароль = УчетнаяЗаписьЭлемент.Пароль;
		
	КонецЕсли;
	
	Если НастройкиМодуля.МыПоставщик = Истина Тогда
		
		СтруктураПараметровПользователя.Вставить("СоздаваемыйДокументИзORDERS",	ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина));
		
		Если ПолучитьКонстантуEDI("НПД_"+СтруктураПараметровПользователя.СоздаваемыйДокументИзORDERS)=Истина Тогда
			СтруктураПараметровПользователя.ПроводитьЗагруженныеЗаказы = Ложь;
			//На рефакторинг: эта проверка просится в форму настройки - ОФ и УФ. Пока оставлю здесь
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтруктураПараметровПользователя;
	
КонецФункции

//старая функция, оставлено для совместимости
Функция ПолучитьТоварыДокумента1С(Документ1С,Источник = Неопределено,Сообщение=Неопределено) Экспорт
	
	Возврат ПолучитьТоварыДокументаДляСообщения(Документ1С,Истина,Источник,,Сообщение);
	
КонецФункции

//}}}

//*******************************************************************
//{{{ ТОРГОВЫЕ СЕТИ

Функция ПолучитьСписокТорговыхСетей() Экспорт
	
	СтруктураТС = ПолучитьСтруктуруДанныхТорговойСети("list");
	
	Если ( ТипЗнч(СтруктураТС) = Тип("Структура") ) и ( ТипЗнч(СтруктураТС.Сети) = Тип("ТаблицаЗначений") ) Тогда
		
		ТаблицаСетей = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(ТаблицаСетей,"Код,Наименование,GLN,Подключена");
		
		Для Каждого Строка Из СтруктураТС.Сети Цикл
			
			//ДобавитьТорговуюСеть(ТаблицаСетей, Строка.Код, Строка.Наименование, Строка.GLN);
			
			НоваяСтрока = ТаблицаСетей.Добавить();
			НоваяСтрока.Код				= Строка.Код;
			НоваяСтрока.Наименование	= Строка.Наименование;
			НоваяСтрока.GLN				= Строка.GLN;
			
			СсылкаНаСеть = ПолучитьТорговуюСетьПоКоду(Строка.Код);
			
			НоваяСтрока.Подключена = ЗначениеЗаполнено(СсылкаНаСеть);
			
		КонецЦикла;
		
		Возврат ТаблицаСетей;
		
	Иначе
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхТорговойСети(КодСети) Экспорт
	
	//идет на сервер, качает оттуда XML с PARTIN, парсит, возвращает.
	//на рефакторинг: разбить пополам - закачка отдельно, парсинг отдельно.
	
	ПутьКФайлуСДаннымиБезРасширения = мРабочийКаталог+"KonturEDI_"+КодСети;//будем обрабатывать его
	
	ПолучилиФайлССервера = Ложь;
	
	Если ПротоколОбмена_КонтурEDI="Каталог" Тогда
		//Предполагаем, что файлы лежат в каталоге PARTIN, а поставщик каким-то образом подтягивает их туда с веба, после чего разжимает самостоятельно.
		ИмяФайлаЛокальнойПапкиБезРасширения = ПолучитьПараметрыИнтернетСоединения_KE().АдресКаталогаОбменаEDI+"\PARTIN\"+КодСети;
		КопироватьФайл(ИмяФайлаЛокальнойПапкиБезРасширения+".xml",ПутьКФайлуСДаннымиБезРасширения+".xml");//скопируем в темп для единообразия кода
		
	Иначе
		//все сети будем загружать с http
		Состояние_КонтурEDI("Загружаем актуальные данные торговых сетей...");

		Попытка
			ПолучитьФайлHTTP(ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru), "/1c/nets/V2/"+КодСети+".zip", ПутьКФайлуСДаннымиБезРасширения+".zip");

			Зип=Новый ЧтениеZipФайла(ПутьКФайлуСДаннымиБезРасширения+".zip");
			Эл=Зип.Элементы.Найти(КодСети+".xml");
			Зип.Извлечь(Эл,мРабочийКаталог);
			УдалитьФайлы(ПутьКФайлуСДаннымиБезРасширения+".zip");
		Исключение
			ВывестиПредупреждение_КонтурEDI("Не удалось загрузить описание "
			+?(КодСети="list","списка сетей","сети """+КодСети+"""")
			+" с сервера. 
			|Возможные проблемы: отсутствует соединение с сервером или файл на сервере.");
			Сообщить_КонтурEDI(ОписаниеОшибки());//здесь уже можно будет искать точную причину.

			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Состояние_КонтурEDI("");//скинем состояние внизу окна

	ДанныеПоТС = ПрочитатьДанныеПоТорговойСети(мРабочийКаталог+КодСети+".xml");
	
	УдалитьФайлы(ПутьКФайлуСДаннымиБезРасширения+".xml");//почистим за собой

	Возврат ДанныеПоТС;
	
КонецФункции

Функция НайтиЮрФизЛицоСтороннееПоРеквизитам(ИНН,КПП) Экспорт
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяСправочникаКонтрагенты = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее",,Истина);
	РеквизитыСправочника = Метаданные.Справочники[ИмяСправочникаКонтрагенты].Реквизиты;
	Если РеквизитыСправочника.Найти("ИНН")=Неопределено
		Или РеквизитыСправочника.Найти("КПП")=Неопределено
		Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,".Контрагенты","."+ИмяСправочникаКонтрагенты);
	
	Запрос.УстановитьПараметр("ИНН",СокрЛП(ИНН));
	Запрос.УстановитьПараметр("КПП",СокрЛП(КПП));
	
	Возврат ПолучитьРезультатЗапроса(Запрос);
	
КонецФункции

Функция ПолучитьТорговуюСетьПоКоду(КодСети) Экспорт
	
	НайденнаяСеть = НайтиОбъектПоЗначениюСвойства("КодСети",КодСети);
	
	Если ВнешнееХранилище Тогда
		Если ТипЗнч(НайденнаяСеть) = Тип("COMОбъект") Тогда
			НайденнаяСеть = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(НайденнаяСеть);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСеть;	
	
КонецФункции

Функция СохранитьТорговуюСеть(КодСети,ТаблицаКонтрагентов,GLN=Неопределено,Наименование="",ОбновитьСписокТочекДоставки = Истина) Экспорт
	
	ЭтоТестоваяСеть = ЗначениеЗаполнено(GLN);//для тестовых торговых сетей, которых нет в PARTIN, не будем выводить предупреждение о невозможности загрузки файла
	
	Если ЭтоТестоваяСеть Тогда
		//эмулируем пустую сеть
		СтруктураСети = Новый Структура("GLN",КодСети);
		СтруктураСети.Вставить("Подразделения",Новый ТаблицаЗначений);
		СтруктураСети.Вставить("ТочкиДоставки",Новый ТаблицаЗначений);
		СтруктураСети.Вставить("ЮрФизЛица",Новый ТаблицаЗначений);
		СтруктураСети.Вставить("НастройкиПоУмолчанию",Новый ТаблицаЗначений);
	Иначе
		СтруктураСети = ПолучитьСтруктуруДанныхТорговойСети(КодСети);
	КонецЕсли;
	
	СсылкаСети = ПолучитьТорговуюСетьПоКоду(КодСети);
	
	//Наименование = "";
	
	ТаблицаСетей	= ПолучитьСписокТорговыхСетей();
	НайденнаяСеть	= ТаблицаСетей.Найти(КодСети,"Код");
	
	Если НЕ НайденнаяСеть = Неопределено Тогда
		Наименование = НайденнаяСеть.Наименование;
	КонецЕсли;
	
	СтруктураПолейПартнера = Новый Структура();
	СтруктураПолейПартнера.Вставить("Наименование",		Наименование);
	СтруктураПолейПартнера.Вставить("GLN",				СтруктураСети.GLN);
	СтруктураПолейПартнера.Вставить("КодСети",			КодСети);
	СтруктураПолейПартнера.Вставить("ЭтоТорговаяСеть",	Истина);
	СтруктураПолейПартнера.Вставить("ЭтоПоставщик",		Ложь);

	СтруктураПолейПартнера.Вставить("ORDERS",	Истина);
	СтруктураПолейПартнера.Вставить("ORDRSP",	Истина);
	СтруктураПолейПартнера.Вставить("DESADV",	Истина);
	СтруктураПолейПартнера.Вставить("RECADV",	Истина);
	СтруктураПолейПартнера.Вставить("INVOIC",	Истина);
		
	//прочитаем из макета описание настроек партнеров и приведем данные, полученные с сервера, к данным типам
	ДеревоНастроек = Новый ДеревоЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ДеревоНастроек,"ЭтоГруппа,НастройкаИД,НастройкаНаименование,Подсказка,ОписаниеТипа,Список,Значение");
	СоздатьДеревоНастроек(ДеревоНастроек,"Партнеры",Неопределено);
	
	Для Каждого СтрокаНастройкиПоУмолчанию Из СтруктураСети.НастройкиПоУмолчанию Цикл
		СтрокиНастроекИзМакета = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("НастройкаИД",СтрокаНастройкиПоУмолчанию.ИмяНастройки),Истина);
		Если СтрокиНастроекИзМакета.Количество()=1 Тогда
			ТипНастройки = СтрокиНастроекИзМакета[0].ОписаниеТипа;
			СтруктураПолейПартнера.Вставить(СтрокаНастройкиПоУмолчанию.ИмяНастройки,	ТипНастройки.ПривестиЗначение(СтрокаНастройкиПоУмолчанию.Значение));
		КонецЕсли;
	КонецЦикла;
	
	СохранитьЭлементСправочника("Партнеры",СсылкаСети,СтруктураПолейПартнера);
	
	ТаблицаЮрФизЛиц = Новый ТаблицаЗначений;
	ТаблицаЮрФизЛиц.Колонки.Добавить("ЮрФизЛицо");
	ТаблицаЮрФизЛиц.Колонки.Добавить("GLN");
	
	Для каждого Стр Из ТаблицаКонтрагентов Цикл
		
		НоваяСтрока = ТаблицаЮрФизЛиц.Добавить();
		
		НоваяСтрока.ЮрФизЛицо	= Стр.ЮрФизЛицо;
		НоваяСтрока.GLN			= Стр.GLN;
		
	КонецЦикла;
	
	СохранитьСписокЭлементовСправочника("ЮрФизЛицаСторонние",ТаблицаЮрФизЛиц,СсылкаСети);
    	
КонецФункции

Функция ОбновитьСписокТорговыхСетейССервера() Экспорт
	
	ТаблицаПартнеров_API = Новый ТаблицаЗначений;
	
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаПартнеров_API,"ORDERS,ORDRSP,DESADV,RECADV,INVOIC",Новый ОписаниеТипов("Булево"));
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаПартнеров_API,"GLN,Наименование");
	
	ТаблицаПартнеров_Подключенных = ПолучитьСписокЭлементовСправочника("Партнеры");
	УчетныеЗаписи = ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");
	
	Для Каждого СтрокаУчетнойЗаписи Из УчетныеЗаписи Цикл
		
		УчетнаяЗапись = ПолучитьЭлементСправочника("УчетныеЗаписи",СтрокаУчетнойЗаписи.Ссылка);
		
		Если УчетнаяЗапись.Неактивная = Истина Тогда 
			Продолжить; 
		КонецЕсли;
		#Если Клиент Тогда
		Состояние("Получение настроек партнеров...");
		#КонецЕсли
		НастройкиПартнеров=API_ПолучитьПараметрыСообщений(УчетнаяЗапись);
		#Если Клиент Тогда
		Состояние("Обновление настроек партнеров в модуле...");
		#КонецЕсли
	
		Для Каждого Партнер Из НастройкиПартнеров.DocumentsSettingsForPartner Цикл
			
			СтрокаТаблицыПартнеров = ТаблицаПартнеров_API.Найти(Партнер.Partner.PartnerGln,"GLN");
			Если СтрокаТаблицыПартнеров = Неопределено Тогда
				СтрокаТаблицыПартнеров = ТаблицаПартнеров_API.Добавить();
				СтрокаТаблицыПартнеров.GLN = Партнер.Partner.PartnerGln;
				СтрокаТаблицыПартнеров.Наименование = Партнер.Partner.PartnerName
			КонецЕсли;	
			
			Для Каждого СтрокаСообщения Из Партнер.DocumentSettings.DocumentSettings Цикл
				КолонкаТаблицы = ТаблицаПартнеров_API.Колонки.Найти(ВРЕГ(СтрокаСообщения.DocumentType));
				Если КолонкаТаблицы<>Неопределено Тогда
					СтрокаТаблицыПартнеров[КолонкаТаблицы.Имя] = Истина;//у нас есть такое сообщение в этой цепочке
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	
	//теперь пройдемся по таблице партнеров из API и добавим недостающих партнеров
	//а у существующих обновим настройки цепочки
	
	ТорговыеСети = ПолучитьСписокТорговыхСетей();
	
	Если ТорговыеСети.Количество() = 0 Тогда
		ВывестиПредупреждение_КонтурEDI("Не удалось загрузить актуальный список сетей.");
	КонецЕсли;
	
	Для Каждого СтрокаПартнеровAPI Из ТаблицаПартнеров_API Цикл
		ПодключенныйПартнер = ТаблицаПартнеров_Подключенных.Найти(СтрокаПартнеровAPI.GLN,"GLN");
		
		Если ПодключенныйПартнер=Неопределено Тогда
			
			СтрокаТорговойСети = ТорговыеСети.Найти(СтрокаПартнеровAPI.GLN,"GLN");
			
			ТаблицаКонтрагентов = Новый ТаблицаЗначений;//пустая таблица для совместимости
			ТаблицаКонтрагентов.Колонки.Добавить("GLN");
			ТаблицаКонтрагентов.Колонки.Добавить("ЮрФизЛицо");
			
			Если СтрокаТорговойСети<>Неопределено Тогда //нашли такого партнера в PARTIN
			//подключим его
			
				ТаблицаКонтрагентов = Новый ТаблицаЗначений;
				ТаблицаКонтрагентов.Колонки.Добавить("GLN");
				ТаблицаКонтрагентов.Колонки.Добавить("ЮрФизЛицо");
				
				СохранитьТорговуюСеть(СокрЛП(СтрокаТорговойСети.Код),ТаблицаКонтрагентов,,,Ложь);
				Сообщить("Добавлена торговая сеть: "+СокрЛП(СтрокаТорговойСети.Наименование)+" (GLN "+СтрокаТорговойСети.GLN+")");
				//и отсюда же перейти во второй цикл, в настройки
				ПодключенныйПартнер = ТаблицаПартнеров_Подключенных.Добавить();
				ПодключенныйПартнер.Ссылка = ПолучитьТорговуюСетьПоКоду(СтрокаТорговойСети.Код);
			Иначе	//партнера нет в PARTIN, добавим его с названием, GLN и цепочкой сообщений
				КодТорговойСети = СокрЛП(СтрокаПартнеровAPI.GLN);
				СохранитьТорговуюСеть(КодТорговойСети,ТаблицаКонтрагентов,КодТорговойСети,СтрокаПартнеровAPI.Наименование,Ложь);
				ПодключенныйПартнер = ТаблицаПартнеров_Подключенных.Добавить();
				ПодключенныйПартнер.Ссылка = ПолучитьТорговуюСетьПоКоду(КодТорговойСети);
			КонецЕсли;	
			
		КонецЕсли;	
			
		Если ПодключенныйПартнер<>Неопределено Тогда
			//проверим цепочку сообщений
			Партнер = ПолучитьЭлементСправочника("Партнеры",ПодключенныйПартнер.Ссылка);
			Если Партнер=Неопределено Тогда
				Сообщить("Не удалось добавить партнера: "+СтрокаПартнеровAPI.Наименование+" (GLN: "+СтрокаПартнеровAPI.GLN+"). Добавьте его вручную");
				Продолжить;
			КонецЕсли;	
			ЕстьИзменения = Ложь;
			Для Каждого КолонкаНастроек Из ТаблицаПартнеров_API.Колонки Цикл
				Если КолонкаНастроек.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
					Если Партнер[КолонкаНастроек.Имя]<>СтрокаПартнеровAPI[КолонкаНастроек.Имя] Тогда
						Сообщить("Обновлена настройка цепочки для партнера: "+Партнер.Наименование+" : сообщение "+КолонкаНастроек.Имя+?(СтрокаПартнеровAPI[КолонкаНастроек.Имя]=Истина," включено"," выключено"));
						Партнер[КолонкаНастроек.Имя] = СтрокаПартнеровAPI[КолонкаНастроек.Имя];
						ЕстьИзменения = Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			
			Если ЕстьИзменения Тогда
				//запишем его
				Партнер.Вставить("ЭтоТорговаяСеть",Партнер.ТорговаяСеть);
				Партнер.Вставить("ЭтоПоставщик",Партнер.Поставщик);//костыль
				СохранитьЭлементСправочника("Партнеры",ПодключенныйПартнер.Ссылка,Партнер)
			КонецЕсли;	
			
		Иначе
			Сообщить("Не удалось добавить партнера: "+СтрокаПартнеровAPI.Наименование+" (GLN: "+СтрокаПартнеровAPI.GLN+"). Добавьте его вручную");
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецФункции


//смотрит в настроенные сети и проверяет, не появились ли в них новые точки доставки
Функция ПроверитьОбновлениеТочекДоставки(ПолнаяПроверка = Ложь) Экспорт
	
	СтруктураСетей=ПолучитьСтруктуруДанныхТорговойСети("list");
	Если СтруктураСетей=Неопределено Тогда
		//нет интернета
		Возврат Неопределено;
	КонецЕсли;	
	
	//получим дату последнего обновления. При сокращенной (автоматической, в момент запуска) проверке не будем проверять сети, в которых date_upd меньше этой даты
	//ДатаПоследнегоОбновления=ПолучитьКонстантуEDI("ДатаПоследнегоОбновления"); //эту константу можно использовать в будущем при проверках обновлений самого модуля
	
	СтруктураСетей.Сети.Колонки.Добавить("Ссылка");
	
	Для Каждого Строка Из СтруктураСетей.Сети Цикл
		Строка.Ссылка = ПолучитьТорговуюСетьПоКоду(Строка.Код);
		Строка.Подключена = ЗначениеЗаполнено(Строка.Ссылка);//здесь можно проверить права доступа к ней
	КонецЦикла;
	
	//не будем проверять обновление для тех сетей, которые недоступны текущему пользователю
	Если ЗначениеЗаполнено(ПараметрыПользователяEDI.НедоступныеПартнеры) Тогда
		
		Для Каждого НедоступныйПартнер Из ПараметрыПользователяEDI.НедоступныеПартнеры Цикл
			СтрокаПартнера = СтруктураСетей.Сети.Найти(НедоступныйПартнер,"Ссылка");
			Если НЕ СтрокаПартнера=Неопределено Тогда
				СтрокаПартнера.Подключена = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	ПодключенныеСети=СтруктураСетей.Сети.НайтиСтроки(Новый Структура("Подключена",Истина));
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ТекстСообщения");
	ТаблицаСообщений.Колонки.Добавить("ПараметрыДействия");
	ТаблицаСообщений.Колонки.Добавить("Выполнено");
	
	Партнеры=ПолучитьСписокЭлементовСправочника("Партнеры");//дату обновления добавить здесь
	Для Каждого Сеть Из ПодключенныеСети Цикл
		
		НадоОбновлятьТочкиДоставки = Ложь;
		
		ТекПартнер=Партнеры.Найти(Сеть.GLN,"GLN");
		Если ТекПартнер=Неопределено Тогда 
			Продолжить; 
		КонецЕсли;
		
		//не обновилась ли наша сеть с момента прошлого запуска?
		Если ЗначениеЗаполнено(ТекПартнер.ДатаОбновленияPARTIN)
			И Формат(Сеть.ДатаОбновления,"ДФ=yyyyMMddHHmmss")<=ТекПартнер.ДатаОбновленияPARTIN
			И Не ПолнаяПроверка
		Тогда
			Продолжить;	//нечего проверять
		КонецЕсли;	
		
		СтруктураСети=ПолучитьСтруктуруДанныхТорговойСети(Сеть.Код);
		
		Если СтруктураСети=Неопределено Тогда
			//не удалось получить сеть
			Продолжить;
		КонецЕсли;
		
		ТочкиДоставкиВБазе=	ПолучитьСписокЭлементовСправочника("ТочкиДоставкиСторонние",Сеть.Ссылка);
		
		ТекстДобавленныхТочекДоставки = "";

		СчетчикСтрок = 0;
		КоличествоСтрокДляВывода = 5;
		Для Каждого СтрокаТД Из СтруктураСети.ТочкиДоставки Цикл
			ТДВБазе=ТочкиДоставкиВБазе.Найти(СтрокаТД.GLN,"GLN");
			Если ТДВБазе=Неопределено Тогда
				
				СчетчикСтрок=СчетчикСтрок+1;
								
				Если СчетчикСтрок<КоличествоСтрокДляВывода Тогда
					ТекстДобавленныхТочекДоставки=ТекстДобавленныхТочекДоставки+?(ТекстДобавленныхТочекДоставки="","",Символы.ПС)
									+"	GLN "+СтрокаТД.GLN+"; "+СтрокаТД.Адрес;
				ИначеЕсли СчетчикСтрок=КоличествоСтрокДляВывода Тогда
					ТекстДобавленныхТочекДоставки=ТекстДобавленныхТочекДоставки+Символы.ПС+"	....";
				КонецЕсли;//остальные не пишем
								
				НадоОбновлятьТочкиДоставки=Истина;
			КонецЕсли;	
		КонецЦикла;	

		Если НадоОбновлятьТочкиДоставки Тогда
			
			НовСтрокаСообщения = ТаблицаСообщений.Добавить();
			НовСтрокаСообщения.ТекстСообщения = "Сеть: "+Сеть.Наименование+".	Новые точки доставки:
				|
				|"+ТекстДобавленныхТочекДоставки+"
				|
				|Нажмите дважды для открытия";

			УФ = Ложь; //заготовка, портировать на УФ со временем
			Если Не УФ Тогда
				ВыполняемыйКод = 
				"
				|Форма = ПолучитьФорму(""ФормаСервис_ОбновлениеДанныхПартнера"");
				|Форма.Параметры = Новый Структура(""КодСети"", ПараметрыДействия.КодСети);
				|Форма.ОткрытьМодально();
				|УстановитьЗначениеСвойстваОбъекта(ПараметрыДействия.Ссылка,""ДатаОбновленияPARTIN"",ПараметрыДействия.ДатаОбновленияPARTIN);
				|ВыбраннаяСтрока.Выполнено = Истина;"
				;
			Иначе
				ВыполняемыйКод = 
					""
				;
			КонецЕсли;
		
			СтруктураПараметровДействия = Новый Структура;
			
			СтруктураПараметровДействия.Вставить("Ссылка",Сеть.Ссылка);
			СтруктураПараметровДействия.Вставить("КодСети",Сеть.Код);
			СтруктураПараметровДействия.Вставить("ДатаОбновленияPARTIN",Формат(Сеть.ДатаОбновления,"ДФ=yyyyMMddHHmmss"));
			СтруктураПараметровДействия.Вставить("ВыполняемыйКод",ВыполняемыйКод);
			
			НовСтрокаСообщения.ПараметрыДействия = ЗначениеВСтрокуВнутр(СтруктураПараметровДействия);
		КонецЕсли;	
	КонецЦикла;	
	
	ПараметрыДиалога = Новый Структура;
	
	ПараметрыДиалога.Вставить("Заголовок","Сообщения");
	ПараметрыДиалога.Вставить("ТекстЗаголовка","Обновились данные торговых сетей");
	ПараметрыДиалога.Вставить("ТаблицаСообщений",ТаблицаСообщений);
	
	Возврат ПараметрыДиалога;
	
КонецФункции

Функция ПолучитьТаблицуИННТорговыхСетей()
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)); 
	 
	ТаблицаИНН = Новый ТаблицаЗначений;
	ТаблицаИНН.Колонки.Добавить("Наименование",	ТипСтрока);
	ТаблицаИНН.Колонки.Добавить("КодСети",		ТипСтрока);
	ТаблицаИНН.Колонки.Добавить("ИНН",			ТипСтрока);
	ТаблицаИНН.Колонки.Добавить("СсылкаНаСайте",ТипСтрока);
	
	ТабДок 	= Новый ТабличныйДокумент;
	Макет 	= ПолучитьМакет("ИННСетей");
	
	ТабДок.Вывести(Макет.ПолучитьОбласть("Данные"));
	
	сч = 1;
	Пока Истина Цикл
		
		НомерСтроки = Формат(сч,"ЧГ=");
		
		ТекстНаименование	= ТабДок.Область("R"+НомерСтроки+"C1").Текст;
		
		Если ПустаяСтрока(ТекстНаименование) Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаИНН.Добавить();
		НоваяСтрока.Наименование	= ТекстНаименование;
		НоваяСтрока.КодСети			= ТабДок.Область("R"+НомерСтроки+"C3").Текст;
		НоваяСтрока.ИНН				= ТабДок.Область("R"+НомерСтроки+"C4").Текст;
		НоваяСтрока.СсылкаНаСайте	= ТабДок.Область("R"+НомерСтроки+"C5").Текст;
		
		сч = сч+1;
		
	КонецЦикла;
	
	Возврат ТаблицаИНН;
	
КонецФункции

Функция ПолучитьСписокНеподключенныхТорговыхСетей() Экспорт
	
	// для начала просто будем искать контрагентов по ИНН
	// в будущем можно смотреть были ли отгрузки по этим контрагентом и получали ли сообщения по уже настроенным сетям (может просто добавили, но не подключены)
	
	МассивСетей = Новый Массив;
	
	Если НЕ ПолучитьКонстантуEDI("МыПоставщик") = Истина Тогда
		Возврат МассивСетей;
	КонецЕсли;
	
	Если Метаданные.НайтиПоПолномуИмени("Справочник.Контрагенты") = Неопределено Тогда
		Возврат МассивСетей;
	Иначе		
		СправочникКонтрагентов = Метаданные.НайтиПоПолномуИмени("Справочник.Контрагенты");
		Если СправочникКонтрагентов.Реквизиты.Найти("ИНН")=Неопределено Тогда
			Возврат МассивСетей;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаИНН = ПолучитьТаблицуИННТорговыхСетей();
	
	Если ТаблицаИНН.Количество()=0 Тогда
		Возврат МассивСетей;
	КонецЕсли;	
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаИНН
	|ИЗ
	|	&ТаблицаИНН КАК ТаблицаИНН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
	|	ТаблицаИНН.Наименование,
	|	ТаблицаИНН.КодСети КАК КодСети,
	|	ТаблицаИНН.СсылкаНаСайте
	|ИЗ
	|	ТаблицаИНН КАК ТаблицаИНН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ТаблицаИНН.ИНН = Контрагенты.ИНН
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСети";
				   
	Запрос.УстановитьПараметр("ТаблицаИНН",ТаблицаИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденнаяСеть = ПолучитьТорговуюСетьПоКоду(Выборка.КодСети);
		Если НЕ ЗначениеЗаполнено(НайденнаяСеть) Тогда
			
			СтруктураСети = Новый Структура("Наименование, КодСети, СсылкаНаСайте");
			ЗаполнитьЗначенияСвойств(СтруктураСети,Выборка);
			
			МассивСетей.Добавить(СтруктураСети);
			
		КонецЕсли;
			
	КонецЦикла;	
	
	Возврат МассивСетей;
	
КонецФункции

//}}}


Функция ПриОткрытииФормыСообщения(Сообщение,ФормаСообщения) Экспорт
	
	ОбработкаСобытияПодключаемогоМодуля("ПриОткрытииФормыСообщения",,
			Новый Структура("Сообщение,ФормаСообщения",
			Сообщение,ФормаСообщения));
	
КонецФункции

//*******************************************************************
//{{{ ТОЧКИ ДОСТАВКИ

Функция ПолучитьДеревоТочекДоставки(КодСети, Фильтр = "все") Экспорт
	                                             
	СтруктураСети = ПолучитьСтруктуруДанныхТорговойСети(КодСети);
	Если СтруктураСети=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПартнерСсылка  			= ПолучитьТорговуюСетьПоКоду(КодСети);
	
//	ТаблицаРегионов 		= ПодготовитьТаблицуРегионов();
	
	ТаблицаСсылокТекущихТД	= ПодготовитьТаблицуСсылокТекущихТД(СтруктураСети.ТочкиДоставки);
	ТаблицаТочекДоставки 	= СформироватьТаблицуТочекДоставки(СтруктураСети.ТочкиДоставки, ТаблицаСсылокТекущихТД, ТаблицаКодовРегионов(), Фильтр);
	ДеревоТочекДоставки		= ЗаполнитьДеревоТочекДоставки(ТаблицаТочекДоставки);            	
	
	Возврат ДеревоТочекДоставки;
					
КонецФункции

Функция ЗаписатьДанныеТочекДоставки(КодСети, ОбновленныеТД) Экспорт
	
	РезультатСохранения		= ИнициализироватьРезультатСохраненияТД();
	СтруктураСети = ПолучитьСтруктуруДанныхТорговойСети(КодСети);
	ПартнерСсылка           = ПолучитьТорговуюСетьПоКоду(КодСети);
	ТаблицаСсылокТекущихТД 	= ПодготовитьТаблицуСсылокТекущихТД(СтруктураСети.ТочкиДоставки);
	ДанныеТДДляЗаписи 		= ПодготовитьДанныеТДДляЗаписи(ПартнерСсылка, ТаблицаСсылокТекущихТД, ОбновленныеТД);	
	
	Состояние_КонтурEDI("Сохраняем данные точек доставки...");
	
	СохранитьДанныеТД(ДанныеТДДляЗаписи, РезультатСохранения);
	
	Возврат РезультатСохранения; 
	
КонецФункции

Функция ИнициализироватьРезультатСохраненияТД()
	
	ТаблицаУведомлений = Новый ТаблицаЗначений;
	ТаблицаУведомлений.Колонки.Добавить("Текст");
	
	РезультатСохранения = Новый Структура("Успешно,ТаблицаУведомлений",Ложь,ТаблицаУведомлений);	
	
	Возврат РезультатСохранения;
	
КонецФункции

Функция ЗаполнитьДеревоТочекДоставки(ТаблицаТочекДоставки)
    	
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаТочекДоставки);
	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ПЗ.ИсточникДанных.Колонки["Регион"].Измерение = Истина;
	ПЗ.ЗаполнитьНастройки();
	ПЗ.Выполнить();
	ДеревоТочекДоставки = ПЗ.Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого Строка Из ДеревоТочекДоставки.Строки Цикл
		Строка.ЭтоРегион = Истина;
	КонецЦикла;
	
	Возврат ДеревоТочекДоставки;
				
КонецФункции

Функция СформироватьТаблицуТочекДоставки(ТекущиеТД, ТаблицаСсылокТекущихТД, ТаблицаРегионов, Фильтр)
	
	ТаблицаТочекДоставки = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаТочекДоставки,
		"Регион
		|Обновить
		|GLN
		|НаименованиеТекущее
		|АдресТочкиДоставкиТекущий
		|НаименованиеТС
		|АдресТочкиДоставкиТС
		|НаименованиеНовое
		|АдресТочкиДоставкиНовый
		|НоваяТД
		|ИзмениласьТД	
		|ОтредактированаТД
		|ЭтоРегион"
	);
	
	ТаблицаТочекДоставки.Индексы.Добавить("Регион");
	ТаблицаТочекДоставки.Индексы.Добавить("GLN");
	
	Счетчик 	 = 0;
	КоличествоТД = ТекущиеТД.Количество();
		
	Для Каждого Строка Из ТекущиеТД Цикл
		
		Счетчик = Счетчик + 1;
				
		АдресТД		    = ?(Строка.Индекс="","",Строка.Индекс+", ")+(Строка.Адрес);
		НаименованиеТД 	= Строка.Наименование;
		Если НЕ ЗначениеЗаполнено(НаименованиеТД) Тогда
			НаименованиеТД = АдресТД;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТочекДоставки.Добавить();
		
		НоваяСтрока.Регион 					= ПолучитьНаименованиеРегиона(ТаблицаРегионов, Строка.КодРегиона);
		НоваяСтрока.Обновить 				= 1;
		НоваяСтрока.GLN		 				= СокрЛП(Строка.GLN);
		НоваяСтрока.НаименованиеТС		 	= СокрЛП(НаименованиеТД);
		НоваяСтрока.АдресТочкиДоставкиТС	= СокрЛП(АдресТД);
        НоваяСтрока.НаименованиеНовое		= СокрЛП(НаименованиеТД);
		НоваяСтрока.АдресТочкиДоставкиНовый	= СокрЛП(АдресТД);
		НоваяСтрока.НоваяТД					= 1;
		НоваяСтрока.ИзмениласьТД			= 0;
		НоваяСтрока.ОтредактированаТД		= 0;
		НоваяСтрока.ЭтоРегион				= Ложь;
		
		СтрокаТД = ТаблицаСсылокТекущихТД.Найти(Строка.GLN, "GLN");

        Если СтрокаТД <> Неопределено Тогда
			НоваяСтрока.НаименованиеТекущее 		= СокрЛП(СтрокаТД.Наименование);
			НоваяСтрока.АдресТочкиДоставкиТекущий	= СокрЛП(СтрокаТД.АдресДоставки);
			НоваяСтрока.НоваяТД						= 0;
			Если Не НоваяСтрока.НаименованиеТекущее 	  = НоваяСтрока.НаименованиеТС 		 или
				 Не НоваяСтрока.АдресТочкиДоставкиТекущий = НоваяСтрока.АдресТочкиДоставкиТС Тогда
				НоваяСтрока.ИзмениласьТД			= 1; 
			КонецЕсли;
		КонецЕсли;
		
		//фильтруем
		Если Не Фильтр = "все" Тогда
			Если Фильтр = "новые" Тогда
				Если ((НоваяСтрока.НоваяТД = 0) и (НоваяСтрока.ИзмениласьТД = 1)) или
					 ((НоваяСтрока.НоваяТД = 0) и (НоваяСтрока.ИзмениласьТД = 0))Тогда
					ТаблицаТочекДоставки.Удалить(НоваяСтрока);		
				КонецЕсли;
			ИначеЕсли Фильтр = "изменившиеся" Тогда
				Если ((НоваяСтрока.НоваяТД = 1) и (НоваяСтрока.ИзмениласьТД = 0)) или
					 ((НоваяСтрока.НоваяТД = 0) и (НоваяСтрока.ИзмениласьТД = 0)) Тогда
					ТаблицаТочекДоставки.Удалить(НоваяСтрока);		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	ТаблицаТочекДоставки.Сортировать("Регион,GLN");
	
	Возврат ТаблицаТочекДоставки;
	
КонецФункции

Функция ПолучитьНаименованиеРегиона(ТаблицаРегионов, КодРегиона)
	
	НаименованиеРегиона = "";
	
	СтрокаРегиона = ТаблицаРегионов.Найти(КодРегиона, "КодЧисло");
	
	Если Не СтрокаРегиона = Неопределено Тогда
		НаименованиеРегиона = СтрокаРегиона.Наименование;
	Иначе
		НаименованиеРегиона = "Неопределено";
	КонецЕсли;
	
	Возврат НаименованиеРегиона;
	
КонецФункции

Функция ПодготовитьТаблицуСсылокТекущихТД(ТекущиеТД)
	
	МассивGLNТекущихТД 		= ТекущиеТД.ВыгрузитьКолонку("GLN");
	ТаблицаСсылокТекущихТД	= ПолучитьТаблицуСсылокТочекДоставки(МассивGLNТекущихТД);
	
	Возврат ТаблицаСсылокТекущихТД; 
		
КонецФункции

Функция ПодготовитьДанныеТДДляЗаписи(Партнер, ТаблицаСсылокТекущихТД, ОбновленныеТД)
	
	ДанныеДляЗаписи = Новый Массив;
	
	Для Каждого СтрокаРегион Из ОбновленныеТД.Строки Цикл
		
		Для Каждого СтрокаТД Из СтрокаРегион.Строки Цикл
				 
			СсылкаТД 		= Неопределено;
			СтруктураПолей  = Неопределено;
			 
			//добавляем новую точку доставки
			Если (СтрокаТД.НоваяТД = 1 и СтрокаТД.Обновить = 1) или
				 (СтрокаТД.НоваяТД = 1 и СтрокаТД.Обновить = 0 и СтрокаТД.ОтредактированаТД = 1) Тогда
				
				СтруктураПолей = Новый Структура();
				СтруктураПолей.Вставить("Партнер",								Партнер);
				СтруктураПолей.Вставить("Наименование",							СокрЛП(СтрокаТД.НаименованиеНовое));
				СтруктураПолей.Вставить("GLN",									СокрЛП(СтрокаТД.GLN));
				СтруктураПолей.Вставить("АдресДоставки",						СокрЛП(СтрокаТД.АдресТочкиДоставкиНовый));
				СтруктураПолей.Вставить("ЮрФизЛицо",							Неопределено);
				СтруктураПолей.Вставить("ТочкаДоставкиСвойСправочник",			Неопределено);
				СтруктураПолей.Вставить("Подразделение",						Неопределено);
				СтруктураПолей.Вставить("ЗагружатьСообщенияПоТочкеДоставки",	Ложь);
								
			КонецЕсли;
			
			//добавляем изменившуюсь точку доставки
			Если (СтрокаТД.ИзмениласьТД = 1 и СтрокаТД.Обновить = 1) или
				 (СтрокаТД.ИзмениласьТД = 1 и СтрокаТД.Обновить = 0 и СтрокаТД.ОтредактированаТД = 1) или
				 (СтрокаТД.ИзмениласьТД = 0 и СтрокаТД.Обновить = 0 и СтрокаТД.ОтредактированаТД = 1 и СтрокаТД.НоваяТД = 0) Тогда
				
				СсылкаТД = ПолучитьСсылкуТДПоGLN(ТаблицаСсылокТекущихТД, СтрокаТД.GLN);
				Если ЗначениеЗаполнено(СсылкаТД) Тогда
					СтруктураПолей = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",СсылкаТД);
					Если ЗначениеЗаполнено(СтруктураПолей) Тогда
						Если Не СокрЛП(СтруктураПолей.Наименование)  = СокрЛП(СтрокаТД.НаименованиеНовое) Тогда
							СтруктураПолей.Вставить("Наименование",				СокрЛП(СтрокаТД.НаименованиеНовое));
						КонецЕсли;
						Если Не СокрЛП(СтруктураПолей.АдресДоставки) = СокрЛП(СтрокаТД.АдресТочкиДоставкиНовый) Тогда
							СтруктураПолей.Вставить("АдресДоставки",			СокрЛП(СтрокаТД.АдресТочкиДоставкиНовый));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				    					
			КонецЕсли;
								
			Если ЗначениеЗаполнено(СтруктураПолей) Тогда
				СтруктураПолей.Вставить("СсылкаТД", СсылкаТД);
				ДанныеДляЗаписи.Добавить(СтруктураПолей);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции

Процедура СохранитьДанныеТД(ДанныеТДДляЗаписи, РезультатСохранения)

	Для Каждого СтруктураПолей Из ДанныеТДДляЗаписи Цикл
		
		НоваяТД = Не ЗначениеЗаполнено(СтруктураПолей.СсылкаТД);
		
		СохранитьЭлементСправочника("ТочкиДоставкиСторонние",СтруктураПолей.СсылкаТД,СтруктураПолей);
		
		НовоеУведомление = РезультатСохранения.ТаблицаУведомлений.Добавить();
		Если НоваяТД Тогда
			НовоеУведомление.Текст = "Добавлена новая точка доставки """ + СтруктураПолей.Наименование + """ с адресом """ + СтруктураПолей.АдресДоставки + """.";
		Иначе
			НовоеУведомление.Текст = "Обновлена точка доставки """ + СтруктураПолей.Наименование + """ с адресом """ + СтруктураПолей.АдресДоставки + """.";
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатСохранения.Успешно = Истина;
	
КонецПроцедуры

Функция ПолучитьТаблицуСсылокТочекДоставки(МассивGLN)
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ТочкиДоставки.Ссылка КАК Ссылка,
	|	КонтурEDI_ТочкиДоставки.GLN КАК GLN,
	|	КонтурEDI_ТочкиДоставки.Наименование КАК Наименование,
	|	КонтурEDI_ТочкиДоставки.АдресДоставки КАК АдресДоставки
	|ИЗ
	|	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
	|ГДЕ
	|	КонтурEDI_ТочкиДоставки.GLN В(&МассивGLN)";
	Если ВнешнееХранилище Тогда
		Запрос.УстановитьПараметр("МассивGLN", СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивGLN)));
	Иначе
		Запрос.УстановитьПараметр("МассивGLN", МассивGLN);
	КонецЕсли;	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ВнешнееХранилище Тогда
		Результат = ПолучитьТаблицуИзВнешнейБазы(Результат);
	КонецЕсли;	
	
	Результат.Индексы.Добавить("GLN");
	Результат.Индексы.Добавить("Ссылка");//может, и не пригодитс
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкуТДПоGLN(ТаблицаСсылокТекущихТД, GLN)
	
	НайденнаяТочкаДоставки = Неопределено;
	
	СтрокаТД 				= Неопределено;
	НайденнаяТочкаДоставки 	= Неопределено;
	СтрокаТД = ТаблицаСсылокТекущихТД.Найти(GLN, "GLN");
	Если ЗначениеЗаполнено(СтрокаТД) Тогда
		НайденнаяТочкаДоставки = СтрокаТД.Ссылка;
	КонецЕсли;
		
	Возврат НайденнаяТочкаДоставки;
	
КонецФункции

//}}}

//*******************************************************************
//{{{ СТАРТОВЫЙ ПОМОЩНИК

Функция АвторизоватьсяВAPI(ЛогинFTP, ПарольFTP) Экспорт
	
	Заголовки="Authorization: KonturEdiAuth konturediauth_api_client_id="+API_КлючРазработчика()+" , konturediauth_login="""+ЛогинFTP+""" , konturediauth_password="""+ПарольFTP+"""";
	
	ИмяФайлаЗапроса=ПолучитьИмяВременногоФайла();
	ТД=Новый ТекстовыйДокумент;
	ТД.Записать(ИмяФайлаЗапроса,КодировкаТекста.UTF8);//чтоб хоть что-то туда записалось
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	Попытка
		СоединениеАПИ = ПолучитьСоединениеHTTP(?(ЭтоТестовыйAPI(),"test-edi-api.kontur.ru","edi-api.kontur.ru"));
		Состояние_КонтурEDI("Авторизация на сервере...");
		СоединениеАПИ.ОтправитьДляОбработки(ИмяФайлаЗапроса,"/V1/Authenticate",ИмяФайлаОтвета,Заголовки);
		ТД=Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);
		Токен=ТД.ПолучитьТекст();
		УдалитьФайлы(ИмяФайлаОтвета);
		Возврат "ок";
	Исключение
		_Ош = ОписаниеОшибки();
		Сообщить_КонтурEDI(_Ош);
		Если Найти(_Ош,"Authenticate")>0 Тогда
			Возврат "пароль";
		Иначе
			Возврат "подключение";
		КонецЕсли;	
		Возврат Ложь;
	КонецПопытки;	

	Возврат Истина; //удалось
	
КонецФункции

Функция ПрочитатьНастройкиССервера(УчетныеДанные) Экспорт
	
	НастройкиССервера = Новый Структура("МыПоставщик,МыТорговаяСеть,ЮрФизЛицоСвое,GLNЮрФизЛица");
		
	МыПоставщик		= Неопределено;
	МыТорговаяСеть 	= Неопределено;
	ЮрФизЛицоСвое	= Неопределено;
	GLNЮрФизЛица	= Неопределено;
	
	Сервер 			= УчетныеДанные.Сервер;
	Порт 			= УчетныеДанные.Порт;
	Логин 			= УчетныеДанные.Логин;
	Пароль	 		= УчетныеДанные.Пароль;
	ПассивныйРежим 	= УчетныеДанные.ПассивныйРежим;
	
	Если ПолучитьКонстантуEDI("ПротоколОбмена_КонтурEDI") = "API" Тогда
		
		УчетныеЗаписи = ПолучитьСписокЭлементовСправочника("УчетныеЗаписи");
		Для Каждого СтрокаУчетнойЗаписи Из УчетныеЗаписи Цикл
			УчетнаяЗапись = ПолучитьЭлементСправочника("УчетныеЗаписи",СтрокаУчетнойЗаписи.Ссылка);
			АдресЗапроса = "/V1/Parties/GetAccessiblePartiesInfo";

			ОтветСтрокой = API_ВыполнитьHTTPЗапрос(АдресЗапроса,"GET",УчетнаяЗапись);
			Если ОтветСтрокой = Неопределено Тогда
				Возврат НастройкиССервера;
			КонецЕсли;	

			ДоступныеОрганизации = Прочитать_XML_API(ОтветСтрокой,"PartiesInfo");
			Для Каждого ДоступнаяОрганизация Из ДоступныеОрганизации.Parties.PartyInfo Цикл
				
				GLNЮрФизЛица	= ДоступнаяОрганизация.GLN;
				ЮрФизЛицоСвое	= ПодобратьЮрФизЛицоПоНаименованию(ДоступнаяОрганизация.Name); 
				
				Если ДоступнаяОрганизация.PartyTypeCode = "Buyer" Тогда
					
					МыТорговаяСеть = Истина;
					
				ИначеЕсли ДоступнаяОрганизация.PartyTypeCode = "Supplier" Тогда
					
					МыПоставщик = Истина;
					
				ИначеЕсли ДоступнаяОрганизация.PartyTypeCode = "Distributor" Тогда
					
					МыПоставщик = Истина;
					МыТорговаяСеть = Истина;
					
				КонецЕсли;
				
				НастройкиССервера.Вставить("МыПоставщик", 		МыПоставщик);
				НастройкиССервера.Вставить("МыТорговаяСеть", 	МыТорговаяСеть);
				НастройкиССервера.Вставить("ЮрФизЛицоСвое", 	ЮрФизЛицоСвое);
				НастройкиССервера.Вставить("GLNЮрФизЛица", 		GLNЮрФизЛица);
				
				Возврат НастройкиССервера;	//в стартовом помощнике покажем пока только первую организацию
				
			КонецЦикла;
			
		КонецЦикла;	
		
	Иначе//FTP, Каталог, DialMail
		
		Попытка
			ФТПСоединение = Новый FTPСоединение(СокрЛП(Сервер), Порт, СокрЛП(Логин), СокрЛП(Пароль), , ПассивныйРежим);
		Исключение
			Возврат НастройкиССервера;
		КонецПопытки;
		
		ЗагрузилиНастройки = Истина;
		
		Попытка
			ПутьКФайлу = мРабочийКаталог+"KonturEDI_party.xml";
			ФТПСоединение.Получить("settings/party.xml", ПутьКФайлу);
		Исключение
			Возврат НастройкиССервера;
		КонецПопытки;
		
		СтруктураНастроек = ПрочитатьФайлНастроек(ПутьКФайлу);
		
		Если НЕ СтруктураНастроек = Неопределено Тогда
			
			GLNЮрФизЛица	= СтруктураНастроек.GLN;
			ЮрФизЛицоСвое	= ПодобратьЮрФизЛицоПоНаименованию(СтруктураНастроек.Наименование); 
			
			Если СтруктураНастроек.КемЯвляется = "Buyer" Тогда
				
				МыТорговаяСеть = Истина;
				
			Иначе
				
				МыПоставщик = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Возврат НастройкиССервера;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиССервера.Вставить("МыПоставщик", 		МыПоставщик);
	НастройкиССервера.Вставить("МыТорговаяСеть", 	МыТорговаяСеть);
	НастройкиССервера.Вставить("ЮрФизЛицоСвое", 	ЮрФизЛицоСвое);
	НастройкиССервера.Вставить("GLNЮрФизЛица", 		GLNЮрФизЛица);
	
	Возврат НастройкиССервера;
	
КонецФункции

//}}}


//***************************************************************
// Поиск объектов

Функция ВернутьСписокЮрЛицСети(КодСети) Экспорт
	#Если Клиент Тогда
		Состояние("Получаем актуальный список торговых сетей..");
	#КонецЕсли
	
	СтруктураСети = ПолучитьСтруктуруДанныхТорговойСети(КодСети);
	СсылкаСети = ПолучитьТорговуюСетьПоКоду(КодСети);
	
	Возврат СтруктураСети.ЮрФизЛица;
	
КонецФункции

//**************************************************************
// Вывод ссылок в форме сообщения

//неправильный раздел: должно быть в печатных формах или около того.
//кроме того, некорректно преобразуется регион (здесь он идет кодом ISO)
Функция ПолучитьПредставлениеАдресаEDI(Адрес) Экспорт
	
	СписокРеквизитов = Новый СписокЗначений;
		
	Если Адрес.ВидАдреса = "Иностранный" Тогда
		
		СписокРеквизитов.Добавить("КодСтраны"	, " Код страны: ");
		СписокРеквизитов.Добавить("Адрес"		, " ");
		
	Иначе
		
		СписокРеквизитов.Добавить("Индекс"			, " ");
		СписокРеквизитов.Добавить("Регион"			, " ");
		СписокРеквизитов.Добавить("Район"			, " ");
		СписокРеквизитов.Добавить("Город"			, " ");
		СписокРеквизитов.Добавить("НаселенныйПункт"	, " ");
		СписокРеквизитов.Добавить("Улица"			, " ");
		СписокРеквизитов.Добавить("Дом"				, " д. ");
		СписокРеквизитов.Добавить("Корпус"			, " корп. ");
		СписокРеквизитов.Добавить("Квартира"		, " кв. ");
		
	КонецЕсли;
	
	Представление = "";
	
	Для каждого Стр Из СписокРеквизитов Цикл
		
		ИмяПоля			= Стр.Значение;
		
		Если ИмяПоля="Регион" Тогда//Регион у нас приходит в ISO (RU-YAR, например)
			ЗначениеПоля	= ПредставлениеРегионаПоКоду(Адрес.Регион);
		Иначе	
			ЗначениеПоля	= СокрЛП(Адрес[ИмяПоля]);
		КонецЕсли;
		
		Префикс			= Стр.Представление;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			Знак = ?(Представление = "","",",");
			
			Представление = Представление+Знак+Префикс+ЗначениеПоля;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СокрЛП(Представление);
	
КонецФункции

Функция ПолучитьПолноеНаименованиеЮрФизЛица(ЮрФизЛицоEDI) Экспорт
	
	Если ЮрФизЛицоEDI.Вид = "ЮрЛицо" Тогда
		
		Возврат ЮрФизЛицоEDI.Наименование;
		
	Иначе
		
		Возврат СокрЛП(СокрЛП(ЮрФизЛицоEDI.Фамилия)+" "+СокрЛП(ЮрФизЛицоEDI.Имя)+" "+СокрЛП(ЮрФизЛицоEDI.Отчество));
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеЮрФизЛица(ЮрФизЛицоEDI,ЮрФизЛицо1С,ТочкаДоставки = Ложь) Экспорт
	
	Наименование = ПолучитьПолноеНаименованиеЮрФизЛица(ЮрФизЛицоEDI);

	Если ПустаяСтрока(Наименование) Тогда
		Наименование = СокрЛП(ЮрФизЛицо1С);
	КонецЕсли;
	
	Адрес = ПолучитьПредставлениеАдресаEDI(ЮрФизЛицоEDI.Адрес);
	
	СписокРеквизитов = Новый СписокЗначений;
	СписокРеквизитов.Добавить("GLN"				, " GLN ");
	СписокРеквизитов.Добавить("ИНН"				, " ИНН ");
	СписокРеквизитов.Добавить("КПП"				, " КПП ");
	СписокРеквизитов.Добавить("Телефон"			, " тел.: ");
	СписокРеквизитов.Добавить("НомерСчета"		, " р/с ");
	СписокРеквизитов.Добавить("Банк"			, " в банке ");
	СписокРеквизитов.Добавить("БИК"				, " БИК ");
	СписокРеквизитов.Добавить("Руководитель"	, " руков.: ");
	СписокРеквизитов.Добавить("ГлавныйБухгалтер", " гл. бух.: ");
	
	ПредставлениеДопРеквизитов = "";
	
	Для каждого Стр Из СписокРеквизитов Цикл
		
		ИмяПоля			= Стр.Значение;
		ЗначениеПоля	= СокрЛП(ЮрФизЛицоEDI[ИмяПоля]);
		Префикс			= Стр.Представление;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			Знак = ?(ПредставлениеДопРеквизитов = "","",",");
			
			ПредставлениеДопРеквизитов = ПредставлениеДопРеквизитов+Знак+Префикс+ЗначениеПоля;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ПредставлениеДопРеквизитов = СокрЛП(ПредставлениеДопРеквизитов);
	
	СписокПолей = Новый СписокЗначений;
	
	Если ТочкаДоставки Тогда
		
		СписокПолей.Добавить(Адрес						, " Адрес: ");
		СписокПолей.Добавить(Наименование				, " ");
		СписокПолей.Добавить(ПредставлениеДопРеквизитов	, " ");
		
	Иначе
		
		СписокПолей.Добавить(Наименование				, " ");
		СписокПолей.Добавить(ПредставлениеДопРеквизитов	, " ");
		СписокПолей.Добавить(Адрес						, " Адрес: ");
		
	КонецЕсли;
	
	Представление = "";
	
	Для каждого Стр Из СписокПолей Цикл
		
		ЗначениеПоля	= СокрЛП(Стр.Значение);
		Префикс			= Стр.Представление;
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			Знак = ?(Представление = "","",",");
			
			Представление = Представление+Знак+Префикс+ЗначениеПоля;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = "не указан";
	КонецЕсли;
	
	Возврат СокрЛП(Представление);
	
КонецФункции

Процедура ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек,ИмяПоля,ТипСсылки,ТекстСсылки)
	
	НоваяСтрока = ТаблицаНастроек.Добавить();
	
	НоваяСтрока.ИмяПоля		= ИмяПоля;
	НоваяСтрока.ТипСсылки	= ТипСсылки;
	НоваяСтрока.ТекстСсылки = ТекстСсылки;
	
КонецПроцедуры

Функция ПолучитьНастройкуВыводаСсылокНаОбъектыСообщения() Экспорт
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("ИмяПоля");
	ТаблицаНастроек.Колонки.Добавить("ТипСсылки");
	ТаблицаНастроек.Колонки.Добавить("ТекстСсылки");
	
	ТаблицаНастроек.Индексы.Добавить("ИмяПоля");
	
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Покупатель1С",			"КарточкаКонтрагента",  "Установить соответствие");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Продавец1С",			"КарточкаКонтрагента",  "Установить соответствие");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Грузоотправитель1С",	"КарточкаКонтрагента",  "Установить соответствие");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Грузополучатель1С",		"КарточкаКонтрагента",  "Установить соответствие");
		
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ПокупательEDI",			"КарточкаКонтрагента",  "Открыть карточку организации");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ПродавецEDI",			"КарточкаКонтрагента",  "Открыть карточку продавца");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ГрузоотправительEDI",	"КарточкаКонтрагента",  "Открыть карточку грузоотправителя");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ГрузополучательEDI",	"КарточкаКонтрагента",  "Открыть карточку грузополучателя");
	
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "СтавкаНДСEDI",			"Документ1С", 		    "Открыть документ");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Комментарий",			"Документ1С", 		    "Открыть документ");
	
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "GTIN",                  "НоменклатураСсылка",   "Заполнить штрихкод");
	
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "СтатусДиадок",			"ДокументДиадок", 		"Открыть документ");
		
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ВыполнитьДействиеДляИсправлениеОшибкиСообщения(Сообщение,ИмяПоля,ТипСсылки,НомерСтроки = Неопределено,ТекстОшибки = Неопределено) Экспорт //Только для ОФ.
	                                                                                                                                              //Для УФ эта клиентская функция определена в ФормаСообщенияУправляемая
	Если ТипСсылки = "КарточкаКонтрагента" Тогда
		
		Если ИмяПоля = "Грузополучатель1С" Тогда
			Если Сообщение.ТипСообщения = "ORDERS" Тогда
				Если Найти(ТекстОшибки,"не указана связь с точкой доставк")>0 или Найти(ТекстОшибки,"не указана связь с юр.")>0 Тогда
					
					ФормаТД = ПолучитьФорму("ФормаТочкиДоставкиСторонние_Элемент");
					ФормаТД.СсылкаТочкиДоставки = Сообщение.Грузополучатель1С;
					ФормаТД.ОткрытьМодально();
					
					Возврат Неопределено;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Прав(ИмяПоля,3) = "EDI" Тогда
			ИмяПоляКонтрагента = Лев(ИмяПоля,СтрДлина(ИмяПоля)-3);
		ИначеЕсли Прав(ИмяПоля,2) = "1С" Тогда
			ИмяПоляКонтрагента = Лев(ИмяПоля,СтрДлина(ИмяПоля)-2);
		Иначе 
			ИмяПоляКонтрагента = ИмяПоля;
		КонецЕсли;
		
		Форма = ПолучитьФорму("ФормаКонтрагента");
		Форма.Сообщение			= Сообщение;
		Форма.ИмяПоляСообщения 	= ИмяПоляКонтрагента;
		
		Форма.ОткрытьМодально();
		
	ИначеЕсли ТипСсылки = "Документ1С" Тогда
		
		Сообщение.ДокументСсылка.ПолучитьФорму().ОткрытьМодально();
		
	ИначеЕсли ТипСсылки = "НоменклатураСсылка" Тогда
		
		Если Сообщение.ТипСообщения = "PORDERS" Тогда
			
			Если НомерСтроки > 0 Тогда
				Номенклатура  		= Сообщение.Товары[НомерСтроки-1].Номенклатура;
				ЕдиницаИзмерения 	= Сообщение.Товары[НомерСтроки-1].ЕдиницаИзмерения;
				Если ЗначениеЗаполнено(Номенклатура) и ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ХарактеристикаНоменклатуры = Сообщение.Товары[НомерСтроки-1].ХарактеристикаНоменклатуры;
					Штрихкод = ПолучитьШтрихкодНоменклатуры(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения",Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения));
					ФормаНоменклатуры = ПолучитьФорму("ФормаНоменклатура_Элемент");
					ФормаНоменклатуры.Партнер				= Сообщение.Получатель1С;
					ФормаНоменклатуры.Наименование			= Номенклатура.Наименование;
					ФормаНоменклатуры.GTIN					= Штрихкод;
					ФормаНоменклатуры.КодТовараВнутренний 	= Номенклатура.Код;
					СписокНоменклатуры = ФормаНоменклатуры.СписокНоменклатуры;
					НоваяСтрока = СписокНоменклатуры.Добавить();
					НоваяСтрока.Номенклатура 				= Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
					НоваяСтрока.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
					ФормаНоменклатуры.ОткрытьМодально();
				КонецЕсли;				
			КонецЕсли;
			
		Иначе
		
			Если НомерСтроки>0 Тогда
				Номенклатура = Сообщение.Товары[НомерСтроки-1].Номенклатура;
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					Номенклатура.ПолучитьФорму().ОткрытьМодально();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипСсылки = "ДокументДиадок" Тогда
		
		Если Не Найти(ТекстОшибки, "Отказ в подписи накладной") = 0 Тогда
			
			boxId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "boxId"));
			messageId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "messageId"));
			torg12Id = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "torg12Id"));
			Если ЗначениеЗаполнено(boxId) и ЗначениеЗаполнено(messageId) и ЗначениеЗаполнено(torg12Id) Тогда
				ЗапуститьПриложение("https://diadoc.kontur.ru/"+boxId+"/Document/Show?letterId="+messageId+"&documentId="+torg12Id);
			КонецЕсли;
			
		ИначеЕсли Не Найти(ТекстОшибки, "Запрос на уточнение счета-фактуры") = 0 Тогда
			
			boxId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "boxId"));
			messageId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "messageId"));
			invoiceId = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.ДокументСсылка, "invoiceId"));
			Если ЗначениеЗаполнено(boxId) и ЗначениеЗаполнено(messageId) и ЗначениеЗаполнено(invoiceId) Тогда
				ЗапуститьПриложение("https://diadoc.kontur.ru/"+boxId+"/Document/Show?letterId="+messageId+"&documentId="+invoiceId);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьНастройкуВыводаСсылокНаОбъектыЮрФизЛица(ТипЮрФизЛица, КтоМы) Экспорт
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("ИмяПоля");
	ТаблицаНастроек.Колонки.Добавить("ТипСсылки");
	ТаблицаНастроек.Колонки.Добавить("ТекстСсылки");
	
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек,"ИНН", 	"ФормаЭлемента", "Открыть форму элемента");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек,"КПП", 	"ФормаЭлемента", "Открыть форму элемента");
	ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек,"Регион",	"ФормаЭлемента", "Открыть форму элемента"); // ?
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ПодобратьЮрФизЛицоПоНаименованию(Наименование) Экспорт
	
	ТекОрганизация = Неопределено;
	ТекКоэфф = 0;
	
	ТипРеквизитаОрганизация = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое", Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	" + ТипРеквизитаОрганизация + " КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	ТЗ = Запрос.Выполнить().Выгрузить();			   
	
	Для каждого Стр Из ТЗ Цикл
		
		Коэфф = ПолучитьКоэффициентПохожестиСтрок(Наименование,Стр.Наименование);
		
		Если Коэфф>ТекКоэфф Тогда
			
			ТекОрганизация	= Стр.Ссылка;
			ТекКоэфф		= Коэфф;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекОрганизация;
	
КонецФункции

Функция НайтиПартнераПоЮрФизЛицу(ЮрФизЛицоСтороннее) Экспорт
	
	//перенаправление в функцию ОпределитьПартнера(Параметры)
	Возврат ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",ЮрФизЛицоСтороннее));

КонецФункции

Функция ОпределитьПартнера(Параметры) Экспорт
	
	Партнер = Неопределено;   
	
	Если Не ТипЗнч(Параметры) = Тип("Структура") Тогда
		Возврат Партнер;
	ИначеЕсли Не Параметры.Свойство("ТипЗначения") Тогда
		Возврат Партнер;
	КонецЕсли;
	
	Если Параметры.ТипЗначения = "Сообщение" Тогда // замена функции ОпределитьПартнераСообщения(Сообщение) 
		
		Если Не Параметры.Свойство("Сообщение") Тогда
			Возврат Партнер;
		ИначеЕсли Не ТипЗнч(Параметры.Сообщение) = Тип("Структура") Тогда
			Возврат Партнер;	
		КонецЕсли;
		Сообщение = Параметры.Сообщение;
		
		//по GLN отправителя/получателя
		Если Сообщение.Направление = "Входящее" Тогда
			ОсновнойGLN = Сообщение.ОтправительEDI.GLN;
		Иначе
			ОсновнойGLN = Сообщение.ПолучательEDI.GLN;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОсновнойGLN) Тогда
			Партнер = НайтиОбъектПоЗначениюСвойства("GLN_Партнера", ОсновнойGLN);
			// + Внешнее хранилище. kns 2014.08.22
			// kns _метка_ понять что возвращать - ком или строку
			Если ВнешнееХранилище Тогда
				Если ТипЗнч(Партнер) = Тип("COMОбъект") Тогда
					Партнер = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Партнер);
				КонецЕсли;		
			КонецЕсли;
			// - Внешнее хранилище. kns 2014.08.22
		КонецЕсли;
			
		//по GLN юр./физ. лица
		МыПоставщик = (ОпределитьКемМыЯвляемся(Сообщение)="Поставщик");
		Если НЕ ЗначениеЗаполнено(Партнер) Тогда
			Если МыПоставщик Тогда
				ЮрЛицоGLN = Сообщение.ПокупательEDI.GLN;
			Иначе
				ЮрЛицоGLN = Сообщение.ПродавецEDI.GLN;
			КонецЕсли;
			ЮрЛицо = НайтиОбъектПоЗначениюСвойства("GLN_Контрагента", ЮрЛицоGLN);     
			Если ЗначениеЗаполнено(ЮрЛицо) Тогда
				//ас
				//Партнер	= ПолучитьЗначениеСвойстваОбъектаEDI(ЮрЛицо, "ПартнерКонтрагента");
				Партнер	= ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",ЮрЛицо));
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли Параметры.ТипЗначения = "ЮрФизЛицо" Тогда //замена функции НайтиПартнераПоЮрФизЛицу(ЮрФизЛицоСтороннее)
		
		Если Не Параметры.Свойство("ЮрФизЛицо") Тогда
			Возврат Партнер;
		ИначеЕсли Не ЗначениеЗаполнено(Параметры.ЮрФизЛицо) Тогда
			Возврат Партнер;	
		КонецЕсли;
		ЮрФизЛицо = Параметры.ЮрФизЛицо;
		
		Партнер = ПолучитьЗначениеСвойстваОбъектаEDI(ЮрФизЛицо, "ПартнерКонтрагента");
		
		Если НЕ ЗначениеЗаполнено(Партнер) Тогда
			
			ТочкаДоставки = НайтиОбъектПоЗначениюСвойства("ЮрФизЛицо_ТочкиДоставки",ЮрФизЛицо);
			Если ЗначениеЗаполнено(ТочкаДоставки) Тогда
				ТочкаДоставкиПолностью = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",ТочкаДоставки);
				Партнер = ТочкаДоставкиПолностью.Партнер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Партнер;
	
КонецФункции

Функция ПеревыставитьЗаказПоставщику(Заказ,ТаблицаСравнения) Экспорт
	
	Док = Заказ.Скопировать();
	
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	
	Для каждого Стр ИЗ Док.Товары Цикл
		НайденнаяСтрока = ТаблицаСравнения.Найти(Стр.Номенклатура,"Номенклатура");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Если НайденнаяСтрока.Количество = 0 Тогда
				СписокУдаляемыхСтрок.Добавить(Стр);
			Иначе
				Если НЕ НайденнаяСтрока.Количество = Стр.Количество Тогда
					
					Стр.Количество = НайденнаяСтрока.Количество;
					
					//ткпт
					Если ИмяКонфигурации1С = "ТКПТ" Тогда						
						Стр.КоличествоБазовое 		= НайденнаяСтрока.Количество;
						Стр.КоличествоФактическое 	= НайденнаяСтрока.Количество;
						Док.ОбработкаРеквизита("Товары.Номенклатура",Стр,,);
					Иначе
					
						Выполнить("ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(Стр, Док);");
						Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Стр, Док);");
						Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Стр, Док);");
						
					//ткпт
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СписокУдаляемыхСтрок Цикл
		Док.Товары.Удалить(Стр.Значение);
	КонецЦикла;
	
	Форма = Док.ПолучитьФорму();
	Форма.Модифицированность = Истина;
	Форма.ОткрытьМодально();
	
	Если Док.ЭтоНовый() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОтвязатьСообщениеОтДокумента(Сообщение,ДокументСсылка) Экспорт
	
	НачатьТранзакцию_КонтурEDI();
	
	Сообщение.Документ1С		= Неопределено;
	Сообщение.ДокументСсылка	= Неопределено;
	
	Если Сообщение.ТипСообщения = "DESADV" Тогда
		
		Сообщение.Накладная1С = Неопределено;
		
	КонецЕсли;
	
	СообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
	СообщениеОбъект.Статус		= "ВходящийОжидаетУстановкиСоответствий";
	СохранитьОбъектСообщения(СообщениеОбъект,Сообщение);
	
	Если Сообщение.ТипСообщения = "ORDERS"
		И Сообщение.Направление = "Входящее" Тогда
		МагическиОбработатьДублиORDERS(Сообщение,"ВходящийОжидаетУстановкиСоответствий");
	КонецЕсли;
	
	ЗафиксироватьТранзакцию_КонтурEDI();
	
КонецПроцедуры

Процедура СвязатьСообщениеСДокументом(Сообщение,ДокументСсылка) Экспорт
	
	НачатьТранзакцию_КонтурEDI();
	
	Сообщение.Документ1С		= ДокументСсылка;
	Сообщение.ДокументСсылка	= ДокументСсылка;
	
	Если Сообщение.ТипСообщения = "DESADV" Тогда
		
		Сообщение.Накладная1С = ДокументСсылка;
		
	КонецЕсли;
	
	СообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
	СообщениеОбъект.Статус = "Загружен";
	СохранитьОбъектСообщения(СообщениеОбъект,Сообщение);
	
	Если Сообщение.ТипСообщения = "ORDERS"
		И Сообщение.Направление = "Входящее" Тогда
		МагическиОбработатьДублиORDERS(Сообщение,СообщениеОбъект.Статус);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию_КонтурEDI();
	
КонецПроцедуры

Процедура УдалитьСообщение(Сообщение,ДокументСсылка = Неопределено) Экспорт
	//на рефакторинг: второй параметр не нужен, оставим для совместимости со старыми ПМ
	
	СообщениеОбъект = ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
	СообщениеОбъект.Документ		= Неопределено;
	СообщениеОбъект.ТипСообщения	= "#"+СообщениеОбъект.ТипСообщения;
	СообщениеОбъект.Статус			= "#"+СообщениеОбъект.Статус;
	СохранитьОбъектСообщения(СообщениеОбъект);//внутри Структуры ссылки останутся - пусть будут на всякий пожарный
	
	СообщениеОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

Функция ПриПопыткеИзмененияНакладнойВСообщении(Сообщение,Накладная) Экспорт
	
	РезультатПроверки = Новый Структура();
	РезультатПроверки.Вставить("Успешно",		Истина);
	РезультатПроверки.Вставить("ТекстОшибки",	"");
	
	// проверка контрагента
	
	Если НЕ Сообщение.Покупатель1С = Накладная.Контрагент Тогда
		
		РезультатПроверки.Успешно = Ложь;
		РезультатПроверки.ТекстОшибки = "Необходимо выбрать накладную на контрагента """+СокрЛП(Сообщение.Покупатель1С)+"""!";
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	// проверка дубля
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.УстановитьПараметр("Объект", ПреобразоватьЗначениеДляВнешнегоХранилища(Накладная));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.Документ = &Объект
	|	И КонтурEDI_Сообщения.ТипСообщения = ""RECADV""";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда 
		
		РезультатПроверки.Успешно = Ложь;
		РезультатПроверки.ТекстОшибки = "По данной накладной уже загружалось уведомление о приемке!";
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПолучитьСвязанныеСообщения(СообщениеСсылка =  Неопределено, Знач ДокументСсылка = Неопределено) Экспорт
	
	//еще на рефакторинг: нам не нужен первый параметр - СообщениеСсылка
	Заказ = Неопределено;
	Накладная = Неопределено;
	СчетФактура = Неопределено;
	
	// если вызывают связанные из корр\испр СФ, то будем подменять ДокументСсылка на первичную реализацию
	Если ЕстьКоррИспрСФ Тогда
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
				Для Каждого Стр ИЗ ДокументСсылка.ДокументыОснования Цикл
					Если ТипЗнч(Стр.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
						ДокументСсылка = Стр.ДокументОснование.ДокументРеализации;
						Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
							ДокументСсылка = ДокументСсылка.ДокументРеализации;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначеесли НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
				Если ТипЗнч(ДокументСсылка.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
					ДокументСсылка = ДокументСсылка.ДокументОснование.ДокументОснование;   //основание корректировки
				КонецЕсли;
			КонецЕсли;
			
			//
		КонецЕсли;
	КонецЕсли;
	
	ДеревоДокументов = Новый ДеревоЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ДеревоДокументов,
		"Вид
		|Ссылка
		|Статус
		|Представление
		|Сумма
		|ТипСообщения
		|Направление
		|Проведен
		|ПометкаУдаления
		|Иконка"
	);
	//для Дерева тоже нормально работает
	
	Запрос = Новый Запрос;
	ИменаГруппировок = "";
	
	МассивДокументов = Новый Массив;//документы, для которых будем искать связанные
	МассивДокументов.Добавить(ДокументСсылка);
	
	
	ТипДокумента = "ДокументСсылка."+ДокументСсылка.Метаданные().Имя;
	СтрокаТаблицыТипов = ТаблицаТипов.Найти(ТипДокумента,"ИмяТипа");
	//здесь нам достаточно одной строки, т.к. предполагаем, что один и тот же документ никогда не будет работать и в режиме поставщика, и в режиме покупателя
	РежимРаботы = СтрокаТаблицыТипов.Сторона;
	
	Запрос.Текст = ПолучитьТекстЗапросаПоСвязаннымДокументам(ДокументСсылка,РежимРаботы,ИменаГруппировок);
		
	Если РежимРаботы="Поставщик" Тогда
		//привяжем сюда же все множественные документы, созданные из одного общего ORDERS
		ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(ДокументСсылка);
		
		Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
			Если ЗначениеЗаполнено(Стр.Документ) Тогда
				МассивДокументов.Добавить(Стр.Документ);
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;	
	
	//добавим итоги
	Запрос.Текст = Запрос.Текст+Символы.ПС+"ИТОГИ ПО "+ИменаГруппировок;
	
	Запрос.УстановитьПараметр("Ссылка",МассивДокументов);
		
	//и выведем результат запроса
	
	Если Запрос.Текст = "" Тогда
		//если текст запроса пустой, то и вернем пустоту. Это случай, когда конфигурация нам не известна
		Возврат ДеревоДокументов;
	КонецЕсли;	
	
	ТаблицаРеализаций = Новый ТаблицаЗначений;
	ТаблицаРеализаций.Колонки.Добавить("Реализация");
	ТаблицаРеализаций.Колонки.Добавить("СтрокаДерева");
	
	ДеревоЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
 	ВывестиСтрокиЗапросаСвязанныхСообщенийРекурсивно(ДеревоЗапроса,ДеревоДокументов,ИменаГруппировок,1,ТаблицаРеализаций);
	
	ВывестиСвязанныеКоррИспрСФ(ТаблицаРеализаций);
			
	Возврат ДеревоДокументов;
	
КонецФункции

Процедура ВывестиСвязанныеКоррИспрСФ(ТаблицаРеализаций)
	
	Если НЕ ЕстьКоррИспрСФ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРеализаций.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросКСФ = Новый Запрос();
	ЗапросКСФ.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                  |	КорректировкаРеализации.ДокументРеализации КАК Реализация,
	                  |	КорректировкаРеализации.Ссылка КАК КорректировкаРеализации,
	                  |	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура
	                  |ИЗ
	                  |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	                  |		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = КорректировкаРеализации.Ссылка)
	                  |ГДЕ
	                  |	КорректировкаРеализации.ДокументРеализации В(&ДокументыРеализации)
	                  |ИТОГИ ПО
	                  |	Реализация,
	                  |	КорректировкаРеализации,
	                  |	СчетФактура";
	
	ТаблицаКорректировокРеализаций = Новый ТаблицаЗначений;
	ТаблицаКорректировокРеализаций.Колонки.Добавить("Реализация");
	ТаблицаКорректировокРеализаций.Колонки.Добавить("СтрокаДерева");
	
	ЗапросКСФ.УстановитьПараметр("ДокументыРеализации",ТаблицаРеализаций.ВыгрузитьКолонку("Реализация"));
	
	Если ИмяКонфигурации1С="УФ_УТ" Тогда 
		ЗапросКСФ.Текст = УФ_ТекстЗапросаПоСвязаннымКоррИспрСФ();
	КонецЕсли;
	
	ВыборкаРеализаций = ЗапросКСФ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Реализация");
	Пока ВыборкаРеализаций.Следующий() Цикл
		НайденнаяСтрока = ТаблицаРеализаций.Найти(ВыборкаРеализаций.Реализация,"Реализация");
		ВыборкаКорректировок = ВыборкаРеализаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"КорректировкаРеализации");
		Пока ВыборкаКорректировок.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаКорректировок.КорректировкаРеализации) Тогда
				НоваяСтрока = НайденнаяСтрока.СтрокаДерева.Строки.Добавить();
				НоваяСтрока.Ссылка	= ВыборкаКорректировок.КорректировкаРеализации;
				ВывестиСтрокуДокумента(НоваяСтрока);
				
				Если ТипЗнч(НоваяСтрока.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					НоваяСтрокаРеализаций = ТаблицаКорректировокРеализаций.Добавить();
					НоваяСтрокаРеализаций.Реализация	= НоваяСтрока.Ссылка;
					НоваяСтрокаРеализаций.СтрокаДерева	= НоваяСтрока;
				КонецЕсли;
				
				ВыборкаСФ = ВыборкаКорректировок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"СчетФактура");
				Пока ВыборкаСФ.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаСФ.СчетФактура) Тогда
						НоваяСтрокаСФ = НоваяСтрока.Строки.Добавить();
						НоваяСтрокаСФ.Ссылка = ВыборкаСФ.СчетФактура;
						ВывестиСтрокуДокумента(НоваяСтрокаСФ);
					КонецЕсли;
				КонецЦикла;
            КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВывестиСвязанныеКоррИспрСФ(ТаблицаКорректировокРеализаций);
	
КонецПроцедуры

Функция УФ_ТекстЗапросаПоСвязаннымКоррИспрСФ()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КорректировкаРеализации.ДокументОснование КАК Реализация,
	|	КорректировкаРеализации.Ссылка КАК КорректировкаРеализации,
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданныйДокументыОснования
	|		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = КорректировкаРеализации.Ссылка)
	|ГДЕ
	|	КорректировкаРеализации.ДокументОснование В(&ДокументыРеализации)
	|ИТОГИ ПО
	|	Реализация,
	|	КорректировкаРеализации,
	|	СчетФактура";	
	Возврат ТекстЗапроса;
	
КонецФункции // УФ_ТекстЗапросаПоСвязанным()


Функция ЭтоПоследнееСообщениеВЦепочке(СообщениеСсылка,ДокументСсылка) Экспорт
	//на рефакторинг: перевести в конструктор
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДеревоДокументов = ПолучитьСвязанныеСообщения(СообщениеСсылка, ДокументСсылка);
	
	НашлиСообщение = Ложь;
	
	Для Каждого СтрокаЗаказа ИЗ ДеревоДокументов.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаЗаказа.Ссылка) Тогда
			
			Если СтрокаЗаказа.Вид = "Сообщение" Тогда
				Если СтрокаЗаказа.Ссылка = СообщениеСсылка Тогда
					НашлиСообщение = Истина;
					Продолжить;
				КонецЕсли;
				Если НашлиСообщение Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Для каждого СтрокаНакладной ИЗ СтрокаЗаказа.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаНакладной.Ссылка) Тогда
					
					Если СтрокаНакладной.Вид = "Сообщение" Тогда
						Если СтрокаНакладной.Ссылка = СообщениеСсылка Тогда
							НашлиСообщение = Истина;
							Продолжить;
						КонецЕсли;
						Если НашлиСообщение Тогда
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Для каждого СтрокаСФ Из СтрокаНакладной.Строки Цикл
						Если ЗначениеЗаполнено(СтрокаСФ.Ссылка) Тогда
							
							Если СтрокаСФ.Вид = "Сообщение" Тогда
								Если СтрокаСФ.Ссылка = СообщениеСсылка Тогда
									НашлиСообщение = Истина;
									Продолжить;
								КонецЕсли;
								Если НашлиСообщение Тогда
									Возврат Ложь;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиСообщениеДокумента(ДокументСсылка,ТипСообщения,Направление = Неопределено) Экспорт
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.УстановитьПараметр("Объект", ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка));
	
	Запрос.Текст = "ВЫБРАТЬ 
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ 
	|	КонтурEDI_Сообщения.Документ = &Объект 
	|	И КонтурEDI_Сообщения.ТипСообщения = """+ТипСообщения+"""";
		
    Если ЗначениеЗаполнено(Направление) Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И КонтурEDI_Сообщения.Направление = """+Направление+"""";
	КонецЕсли;
		
	Сообщение = ПолучитьРезультатЗапроса(Запрос);
	Если ВнешнееХранилище И Сообщение<>Неопределено Тогда
		Сообщение = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Сообщение);
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ОткрытьКарточкуСообщения(СообщениеСсылка =  Неопределено,ДокументСсылка =  Неопределено,ТипСообщения,Направление) Экспорт
	#Если Клиент Тогда
	Сообщение = ПрочитатьСообщение(СообщениеСсылка,ДокументСсылка,ТипСообщения,Направление);
	ФормаСообщения = ПолучитьФорму("ФормаСообщения");
	ФормаСообщения.Сообщение = Сообщение;
	ФормаСообщения.ТолькоПросмотрСообщения = Истина;
	ФормаСообщения.ОткрытьМодально();
	#КонецЕсли
КонецПроцедуры

Функция ПолучитьСписокФоновыхСообщенийОжидающихОтправки() Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Документ");
	ТЗ.Колонки.Добавить("Примечание");
	
	ТабСтатусных = ПолучитьСообщенияПоКоторымНеОтправленыУведомления();
	Для каждого Стр Из ТабСтатусных Цикл
		НоваяСтрока = ТЗ.Добавить();
		Если Стр.ТипСообщения = "ORDERS" Тогда
			НоваяСтрока.Документ = Стр.Документ;
			НоваяСтрока.Примечание = "Статусное сообщение о прочтении заказа";
		ИначеЕсли Стр.ТипСообщения = "DESADV" Тогда
			НоваяСтрока.Документ = Стр.Документ;
			НоваяСтрока.Примечание = "Статусное сообщение о результате валидации уведомления об отгрузке";
		КонецЕсли;
	КонецЦикла;
	ТабАлко = ПолучитьДокументыПоКоторымНужноОтправитьALCRPT();
	Для каждого Стр Из ТабАлко Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Документ = Стр.Документ;
		НоваяСтрока.Примечание = "ALCRPT - сведения о продаже алкогольной продукции";
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Функция МожноОтправлятьУведомлениеОбОтгрузке(Накладная,ВыводитьПредупреждение = Истина) Экспорт

	Заказ = Неопределено;
	
	ТекстОшибки = "Необходимо сначала отправить подтверждение заказа!";
	
	Если ЗначениеЗаполнено(Накладная) Тогда
		
		Заказ = НайтиСвязанныйДокументПоТипуСообщения(Накладная,"ORDRSP");
		
		Если ЗначениеЗаполнено(Заказ) Тогда
			
			СтатусДокумента = ПолучитьСтатусДокумента(Заказ,"Заказ");
			
			Если СтатусДокумента = "Отклонен" Тогда
				
				ТекстОшибки = "Вы отменили заказ по этой накладной!";
				
			ИначеЕсли СтатусДокумента = Неопределено Тогда
				
				Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КонтурEDI_ДополнительныеРеквизиты.Значение КАК НужноОтправлятьОтветНаЗаказ 		
				|ИЗ
				|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
				|ГДЕ
				|	КонтурEDI_ДополнительныеРеквизиты.Объект В		
				|		(ВЫБРАТЬ 
				|			КонтурEDI_Сообщения.Партнер КАК Партнер
				|		ИЗ 
				|			Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
				|		ГДЕ 
				|			КонтурEDI_Сообщения.Документ = &Объект 
				|			И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS"")
				|	И КонтурEDI_ДополнительныеРеквизиты.Свойство = ""ORDRSP"""; 	
				Запрос.УстановитьПараметр("Объект", ПреобразоватьЗначениеДляВнешнегоХранилища(Заказ));
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					Если Выборка.НужноОтправлятьОтветНаЗаказ <> Истина Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
				
			//проверим, нет ли у данного заказа дублей - повторных заказов с такими же номерами, но разными данными
			
			//Если ПолучитьКонстантуEDI("СворачиватьЗаказыСОдинаковымиНомерами")=Истина	Тогда
				Запрос=Новый Запрос(
				"ВЫБРАТЬ
				|	КонтурEDI_Сообщения.Ссылка КАК Ссылка,
				|	КонтурEDI_Сообщения.НомерДокумента,
				|	КонтурEDI_Сообщения.ДатаДокумента,
				|	КонтурEDI_Сообщения.ТипСообщения,
				|	КонтурEDI_Сообщения.Партнер,
				|	КонтурEDI_Сообщения.ID,
				|	КонтурEDI_Сообщения.ТочкаДоставки
				|ИЗ
				|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
				|ГДЕ
				|	КонтурEDI_Сообщения.Документ = &Объект
				|	И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS"""
				);
				
				Запрос.УстановитьПараметр("Объект",Заказ);
				Выб=Запрос.Выполнить().Выбрать();
				Если Выб.Следующий() Тогда
					Дубли=ПолучитьДублирующиеСообщения(Выб.Ссылка);
					Если Дубли<>Неопределено 
						И Дубли.Количество()>1 
						Тогда
						Если Дубли.Найти(Ложь,"Загружен")<>Неопределено Тогда
							ВывестиПредупреждение_КонтурEDI("По заказу "+Выб.НомерДокумента+" зарегистрировано несколько незагруженных версий. 
							|Перед отправкой уведомления об отгрузке сначала актуализируйте заказ.");
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
			//КонецЕсли;

			Запрос = Новый Запрос();
			
			Запрос.Текст = "ВЫБРАТЬ 
			|	КонтурEDI_Сообщения.Статус КАК Статус
			|ИЗ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			|ГДЕ 
			|	КонтурEDI_Сообщения.Документ = &Объект 
			|	И КонтурEDI_Сообщения.ТипСообщения = ""ORDRSP""";
			
			Запрос.УстановитьПараметр("Объект",Заказ);
				
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Если Выборка.Статус = "Доставлен" ИЛИ Выборка.Статус = "Доставлен с уточнением" ИЛИ Выборка.Статус = "Пропущен" Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			//заглушка для случаев, когда ORDRSP по ТС не отправляем 
			СтрокаКэша = ТаблицаКэшПартнеровКонтрагентов.Найти(Заказ.Контрагент,"Контрагент");
			Если СтрокаКэша<>Неопределено
				И Не СтрокаКэша.ORDRSP Тогда
				Возврат Истина;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПредупреждение Тогда
		
		ВывестиПредупреждение_КонтурEDI(ТекстОшибки);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПропуститьСообщение(ДокументСсылка,ТипСообщения) Экспорт

	Если ВнешнееХранилище Тогда
		ПропущенноеСообщение = Справочники.КонтурEDI_Сообщения.СоздатьЭлемент();
	Иначе
		ПропущенноеСообщение = СоединениеСХранилищем.Справочники.КонтурEDI_Сообщения.СоздатьЭлемент();
	КонецЕсли;	
	
	ПропущенноеСообщение.Направление = "Исходящее";
	ПропущенноеСообщение.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка);
	ПропущенноеСообщение.ТипСообщения = ТипСообщения;
	ПропущенноеСообщение.Статус = "Пропущен";

	СохранитьОбъектСообщения(ПропущенноеСообщение);
		
КонецПроцедуры

Процедура ПрекратитьОбработкуЗаказа(СообщениеСсылка) Экспорт
	
	Статус = "ВходящийПропущен";
	
	НачатьТранзакцию_КонтурEDI();
	Попытка
		
		УстановитьСтатусСообщения(СообщениеСсылка, , , Статус);
		
		_Сообщение = ПолучитьОбъектСообщения(СообщениеСсылка);
		
		_ДокументСсылка = Неопределено;
		Если ЗначениеЗаполнено(_Сообщение.Документ) Тогда
			_ДокументСсылка = ?(ВнешнееХранилище,ЗначениеИзСтрокиВнутр(_Сообщение.Документ),_Сообщение.Документ);
			Если ЗначениеЗаполнено(_ДокументСсылка) Тогда
				ДокОбъект = _ДокументСсылка.ПолучитьОбъект();
				ДокОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЕсли;	
		
		Если _ДокументСсылка<>Неопределено Тогда
			ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(_Сообщение.Документ);

			Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
				Если ЗначениеЗаполнено(Стр.ORDERS)
					И Стр.ORDERS <> СообщениеСсылка
					Тогда
					//УстановитьСтатусСообщения_БМИ(Стр.ORDERS, , "ORDERS", Статус);
					УстановитьСтатусСообщения(Стр.ORDERS, , "ORDERS", Статус);
					
					//ОбработкаСобытияПодключаемогоМодуля("ПриУстановкеСтатусаСообщения",,Новый Структура("СообщениеСсылка,ДокументСсылка,ТипСообщения,Статус",Стр.ORDERS, , "ORDERS", Статус));
					
					Если ЗначениеЗаполнено(Стр.Документ) Тогда

						_Документ = ?(ВнешнееХранилище,ЗначениеИзСтрокиВнутр(Стр.Документ),Стр.Документ);
						Если ЗначениеЗаполнено(_Документ) Тогда
							ДокОбъект = _Документ.ПолучитьОбъект();
							ДокОбъект.УстановитьПометкуУдаления(Истина);
						КонецЕсли;
					КонецЕсли;	
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		ЗафиксироватьТранзакцию_КонтурEDI();
	Исключение
		ОтменитьТранзакцию_КонтурEDI();
		_Ошибка = ОписаниеОшибки();
		ВывестиПредупреждение_КонтурEDI(_Ошибка);
	КонецПопытки;	
КонецПроцедуры

Функция ПолучитьСчетФактуруНакладной(Накладная) Экспорт
	//В действительности нам надо в большинстве случаев получать документы, соответствующие разным типам сообщений.
	//Конкретно здесь - из документа для DESADV перейти в документ для INVOIC.
	
	Возврат НайтиСвязанныйДокументПоТипуСообщения(Накладная,"INVOIC");
	
КонецФункции

Функция ПолучитьНакладнуюСчетаФактуры(СчетФактура) Экспорт
	
	Возврат НайтиСвязанныйДокументПоТипуСообщения(СчетФактура,"DESADV");
	
КонецФункции


//По номеру сообщения выдается список всех сообщений с таким же номером в пределах недели (плюс и минус).
//Из выборки исключаются "виртуальные" сообщения.
//Т.е. если вдруг было принято несколько версий сообщения, и по каждой из них создано несколько виртуальных для привязки к нескольким документам,
//	то будет выбрано по одной строке для каждого ID
Функция ПолучитьДублирующиеСообщения(СообщениеСсылка) Экспорт
	
	//здесь еще не хватает НомерСерииЗаказов
	
	//Если Партнер = Неопределено
	//	Или ТочкаДоставки = Неопределено Тогда
	//	//для определения дублей нам нужен заполненный партнер и точка доставки
	//	Возврат Новый ТаблицаЗначений;
	//	//что будет в режиме ВХ??
	//КонецЕсли;	
	//
	//Если ПолучитьКонстантуEDI("СворачиватьЗаказыСОдинаковымиНомерами")<>Истина Тогда
	//	Возврат Новый ТаблицаЗначений;
	//КонецЕсли;
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаСообщений.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(ТаблицаСообщений.Документ) КАК Документ1С,
	|	МАКСИМУМ(ТаблицаСообщений.ДатаДокумента) КАК ДатаДокумента,
	|	МАКСИМУМ(ТаблицаСообщений.ТипСообщения) КАК ТипСообщения,
	|	ТаблицаСообщений.ID КАК ID,
	|	МАКСИМУМ(ТаблицаСообщений.ДатаЗагрузки) КАК ДатаЗагрузки,
	|	СУММА(0) КАК НомерСтроки,
	|	МАКСИМУМ(ВЫРАЗИТЬ("""" КАК СТРОКА(36))) КАК УникальныйИдентификатор,
	|	МАКСИМУМ(ТаблицаСообщений.Статус) КАК Статус,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаСообщений.Статус = ""ВходящийОжидаетУстановкиСоответствий""
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Загружен
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК ТаблицаСообщений
	|ГДЕ
	|	ТаблицаСообщений.ТипСообщения В(&ТипыСообщения)
	|	И ТаблицаСообщений.Направление = ""Входящее""
	|	И ТаблицаСообщений.НомерДокумента = &НомерДокумента
	|	И ТаблицаСообщений.НомерСерииЗаказов = &НомерСерииЗаказов
	|	И ТаблицаСообщений.Партнер = &Партнер
	|	И ТаблицаСообщений.ТочкаДоставки = &ТочкаДоставки
	|	И ТаблицаСообщений.ДатаДокумента МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаДокумента, НЕДЕЛЯ, -1) И ДОБАВИТЬКДАТЕ(&ДатаДокумента, НЕДЕЛЯ, 1)
	|	И (ТаблицаСообщений.ID <> &ID
	|			ИЛИ ТаблицаСообщений.Ссылка = &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСообщений.ID
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	ДатаЗагрузки,
	|	Ссылка"
	;

	СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
	
	ТипыСообщений = ?(ВнешнееХранилище,СоединениеСХранилищем.NewObject("Массив"),Новый Массив);
	ТипыСообщений.Добавить("ORDERS");
	ТипыСообщений.Добавить("#ORDERS");
	
	//ТипыСообщений.Добавить(СообщениеОбъект.ТипСообщения);
	//ТипыСообщений.Добавить("#"+СообщениеОбъект.ТипСообщения);
	
	Запрос.УстановитьПараметр("ID"					,СообщениеОбъект.ID);
	Запрос.УстановитьПараметр("Ссылка"				,СообщениеОбъект.Ссылка);
	Запрос.УстановитьПараметр("Партнер"				,СообщениеОбъект.Партнер);
	Запрос.УстановитьПараметр("ТочкаДоставки"		,СообщениеОбъект.ТочкаДоставки);
	Запрос.УстановитьПараметр("ТипыСообщения"		,ТипыСообщений);
	Запрос.УстановитьПараметр("НомерДокумента"		,СообщениеОбъект.НомерДокумента);
	Запрос.УстановитьПараметр("НомерСерииЗаказов"	,СообщениеОбъект.НомерСерииЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента"		,СообщениеОбъект.ДатаДокумента);

	Таб = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Таб Цикл
		Стр.НомерСтроки=Таб.Индекс(Стр)+1;
		Стр.УникальныйИдентификатор = Стр.Ссылка.УникальныйИдентификатор(); //для возможности выбирать нужную версию в форме сообщения
	КонецЦикла;	
	
	Если ВнешнееХранилище Тогда
		Таб = ПолучитьТаблицуИзВнешнейБазы(Таб,Новый Структура("Документ1С",Документы.ТипВсеСсылки())); //на рефакторинг: опираться на ТаблицаТипов
	КонецЕсли;	
	
	Возврат Таб;
	
КонецФункции	

//для случаев, когда ORDERS загружаются в документ РеализацияТоваровУслуг, но при этом поставщик разбивает одну накладную на несколько
//возвращает таблицу с колонками: ORDERS и ORDRSP - ссылка на одноименные сообщения, Документ - ссылка на реализацию
//используется только для своих объектов
Функция ПолучитьВиртуальныеСвязанныеORDERS(ДокументСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		//подстрахуемся, это важно. Вернем пустую ТЗ
		Таб = Новый ТаблицаЗначений;
		ДобавитьКолонкиВТаблицуЗначений(Таб,"ORDERS,ORDERS_ТипСообщения,ORDERS_Статус,Документ,ORDRSP,ORDRSP_Статус,ЭтоТекущийДокумент");
		
		Возврат Таб;
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.УстановитьПараметр("Документ",ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтурEDI_Сообщения.Ссылка,
	|	КонтурEDI_Сообщения.ID
	|ПОМЕСТИТЬ ВТ_ИД_ORDERS
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
	|	И КонтурEDI_Сообщения.Документ = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтурEDI_Сообщения_ORDERS.Ссылка КАК ORDERS,
	|	КонтурEDI_Сообщения_ORDERS.ТипСообщения КАК ORDERS_ТипСообщения,
	|	КонтурEDI_Сообщения_ORDERS.Статус КАК ORDERS_Статус,
	|	КонтурEDI_Сообщения_ORDERS.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА КонтурEDI_Сообщения_ORDERS.Документ = &Документ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТекущийДокумент
	|ПОМЕСТИТЬ ВТ_ORDERS
	|ИЗ
	|	ВТ_ИД_ORDERS КАК ВТ_ИД_ORDERS
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения_ORDERS
	|		ПО ВТ_ИД_ORDERS.ID = КонтурEDI_Сообщения_ORDERS.ID
	|			И (КонтурEDI_Сообщения_ORDERS.ТипСообщения = ""ORDERS""
	|				ИЛИ КонтурEDI_Сообщения_ORDERS.ТипСообщения = ""#ORDERS"")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтурEDI_Сообщения_ORDRSP.Ссылка КАК ORDRSP,
	|	КонтурEDI_Сообщения_ORDRSP.Статус КАК ORDRSP_Статус,
	|	ВТ_ORDERS.ORDERS,
	|	ВТ_ORDERS.ORDERS_ТипСообщения,
	|	ВТ_ORDERS.ORDERS_Статус,
	|	ВТ_ORDERS.Документ,
	|	ВТ_ORDERS.ЭтоТекущийДокумент
	|ИЗ
	|	ВТ_ORDERS КАК ВТ_ORDERS
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения_ORDRSP
	|		ПО ВТ_ORDERS.Документ = КонтурEDI_Сообщения_ORDRSP.Документ
	|			И (КонтурEDI_Сообщения_ORDRSP.ТипСообщения = ""ORDRSP"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ORDERS.ORDERS";
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	Если ВнешнееХранилище Тогда
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура;
		СтруктураКолонокПреобразуемыхВСсылки.Вставить("Документ",		Документы.ТипВсеСсылки());//на рефакторинг: тип брать из ТаблицаТипов
		Таб = ПолучитьТаблицуИзВнешнейБазы(Таб,СтруктураКолонокПреобразуемыхВСсылки);
	КонецЕсли;		
	
	Возврат Таб;
	
КонецФункции

Процедура УФ_ЗаполнитьСписокЕдиницИзмерения(_Номенклатура,СписокВыбора=неопределено)Экспорт
	
	Если СписокВыбора=неопределено тогда
		СписокВыбора=новый СписокЗначений;
	КонецЕсли;
	
	_Параметры = новый Структура;
	_Параметры.Вставить("Номенклатура",_Номенклатура);
	_Параметры.Вставить("Отбор",новый структура);
	_Параметры.Вставить("СтрокаПоиска ",""); 
	_Параметры.Вставить("ДобавлятьПустуюУпаковку ",истина); 
	_Параметры.Вставить("ВыборГруппИЭлементов ",ИспользованиеГруппИЭлементов.Элементы); 
	
	Если ИмяКонфигурации1С="УФ_УТ" Тогда
		Если ОпределитьРелизКонфигурации() = "11.2" Тогда
			ТипЕдиницИзмерения=Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения");
			СписокВыбора=Справочники.УпаковкиЕдиницыИзмерения.ПолучитьДанныеВыбора(ТипЕдиницИзмерения, _Параметры);
			//начиная с определенной версии, 1С ники стали подсовывать структуры вместо значений упаковок
			Для Каждого ЭлементСписка Из СписокВыбора Цикл
				Если ТипЗнч(ЭлементСписка.Значение)= Тип("Структура") Тогда
					ЭлементСписка.Значение=ЭлементСписка.Значение.Значение;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТипЕдиницИзмерения=Тип("СправочникСсылка.УпаковкиНоменклатуры");
			СписокВыбора=Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ТипЕдиницИзмерения, _Параметры);
		КонецЕсли;
	ИначеЕсли  ИмяКонфигурации1С="УФ_УНФ" Тогда
		ТипЕдиницИзмерения=Тип("СправочникСсылка.ЕдиницыИзмерения");
		
	//заполним отбор	
	_Параметры.Отбор.Вставить("Владелец",_Номенклатура);
	СписокВыбора=Справочники.ЕдиницыИзмерения.ПолучитьДанныеВыбора(_Параметры);
	
	СписокВыбора.Добавить(_Номенклатура.ЕдиницаИзмерения, _Номенклатура.ЕдиницаИзмерения.Наименование + " (ед. хранения)");
	
	ИначеЕсли  ИмяКонфигурации1С="УФ_БП" Тогда
		ТипЕдиницИзмерения=Тип("СправочникСсылка.КлассификаторЕдиницИзмерения");
		
	СписокВыбора=Справочники.КлассификаторЕдиницИзмерения.ПолучитьДанныеВыбора(_Параметры);
	Иначе	
		ТипЕдиницИзмерения=Тип("СправочникСсылка.ЕдиницыИзмерения");
	КонецЕсли;
	
	
КонецПроцедуры

Функция УФ_ПолучитьБазовуюЕдиницуИзмерения(_Номенклатура)Экспорт
	Возврат _Номенклатура.ЕдиницаИзмерения;
КонецФункции

Функция НайтиТоварыПоШтрихкоду(Штрихкод) Экспорт
	
//	Возврат НайтиТоварыПоШтрихкоду(Штрихкод);
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("ХарактеристикаНоменклатуры");
	Результат.Колонки.Добавить("ЕдиницаИзмерения");
	
	Если НЕ ИмяКонфигурации1С = "БП"
		И НЕ ИмяКонфигурации1С = "УФ_БП"
		И НЕ ИмяКонфигурации1С = "УФ_УНФ"
		И ЗначениеЗаполнено(Штрихкод) Тогда
		
		// убираем лидирующие нули, если они есть:
		ТекКод = СокрЛП(Штрихкод);
		ДлинаКода = СтрДлина(ТекКод);
		Для н = 1 По ДлинаКода Цикл
			Если Лев(ТекКод,1) = "0" Тогда
				ТекКод = Сред(ТекКод,2);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Если  ИмяКонфигурации1С = "УФ_УТ" Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Штрихкоды.Номенклатура КАК Номенклатура,
			|	Штрихкоды.Характеристика КАК ХарактеристикаНоменклатуры,
			|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод";
		ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Штрихкоды.Объект КАК Номенклатура,
			|	Штрихкоды.ХарактеристикаНоменклатуры,
			|	Штрихкоды.ЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.ОсновнойШтрихкод = &Штрихкод";	
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Штрихкоды.Номенклатура КАК Номенклатура,
			|	Штрихкоды.ХарактеристикаПартия КАК ХарактеристикаНоменклатуры,
			|	Штрихкоды.ЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.ШтриховыеКоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод";
		ИначеЕсли  ИмяКонфигурации1С = "ДалионУМ" Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Штрихкоды.Номенклатура КАК Номенклатура,
			|	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	Штрихкоды.ЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Штрихкоды.Владелец КАК Номенклатура,
			|	Штрихкоды.ХарактеристикаНоменклатуры,
			|	Штрихкоды.ЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Штрихкод",ТекКод);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//***************************************************************
// Соответствие товаров
Функция СоответствиеТоваров_НайтиНоменклатуру(GTIN,Знач КодТовараПартнера,Знач Владелец) Экспорт
	
	
	//Завернем все это на аналогичный метод для ТаблицыЗначений
	//И кода меньше, и надежнее
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	ТаблицаТоваров.Колонки.Добавить("GTIN",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(14)));
	ТаблицаТоваров.Колонки.Добавить("КодТовараПокупателя",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(35)));
	
	НоваяСтрока = ТаблицаТоваров.Добавить();
	НоваяСтрока.GTIN					= GTIN;
	НоваяСтрока.КодТовараПокупателя		= КодТовараПартнера;
	
	Возврат ПолучитьСоответствияТоваровДляПересчета(ТаблицаТоваров,Владелец);
	
	
	//Результат = Новый ТаблицаЗначений;
	//ДобавитьКолонкиВТаблицуЗначений(Результат,"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Основной,ЕдиницаEDI,КоэффициентEDIВ1С");
	//
	//Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	//
	//Если ВнешнееХранилище Тогда
	//	Если ТипЗнч(Владелец) = Тип("Строка") Тогда
	//		Владелец = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Владелец);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КонтурEDI_СоответствияТоваров.Номенклатура,
	//|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	//|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
	//|	КонтурEDI_СоответствияТоваров.ЕдиницаEDI КАК ЕдиницаEDI,
	//|	КонтурEDI_СоответствияТоваров.GTIN,
	//|	КонтурEDI_СоответствияТоваров.КодТовараПартнера,
	//|	КонтурEDI_СоответствияТоваров.ОсновноеСоответствие КАК Основной,
	//|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
	//|ИЗ
	//|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	//|ГДЕ
	//|	КонтурEDI_СоответствияТоваров.Партнер = &Партнер
	//|	И (КонтурEDI_СоответствияТоваров.GTIN = &GTIN ИЛИ &GTIN = """")
	//|	И ВЫБОР
	//|			КОГДА (&СинхронизироватьТоварыТолькоПоGTIN И &GTIN <> """")
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ КонтурEDI_СоответствияТоваров.КодТовараПартнера = &КодТовараПартнера
	//|		КОНЕЦ";
	//
	//
	//Запрос.УстановитьПараметр("СинхронизироватьТоварыТолькоПоGTIN",			ПолучитьЗначениеСвойстваОбъектаEDI(Владелец, "СинхронизироватьТоварыТолькоПоGTIN") = Истина);
	//Запрос.УстановитьПараметр("Партнер",			Владелец);
	//Запрос.УстановитьПараметр("GTIN",				СокрЛП(GTIN));
	//Запрос.УстановитьПараметр("КодТовараПартнера",	КодТовараПартнера);
	//
	//Если ВнешнееХранилище Тогда
	//	
	//	СтруктураКолонокПреобразуемыхВСсылки = Новый Структура();
	//	СтруктураКолонокПреобразуемыхВСсылки.Вставить("Номенклатура",				Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("Номенклатура")));
	//	СтруктураКолонокПреобразуемыхВСсылки.Вставить("ЕдиницаИзмерения",			Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЕдиницаИзмерения")));
	//	Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
	//		СтруктураКолонокПреобразуемыхВСсылки.Вставить("ХарактеристикаНоменклатуры",	Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры")));
	//	Иначе	
	//		СтруктураКолонокПреобразуемыхВСсылки.Вставить("ХарактеристикаНоменклатуры",	Неопределено);
	//	КонецЕсли;	
	//	
	//	ТЗ = ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить(),СтруктураКолонокПреобразуемыхВСсылки);
	//	
	//Иначе
	//	
	//	ТЗ = Запрос.Выполнить().Выгрузить();			   
	//	
	//КонецЕсли;
	//
	//СтараяНоменклатура = Неопределено;
	//СтараяХарактеристикаНоменклатуры = Неопределено;
	//
	//СписокСоответствий = Новый СписокЗначений;
	//
	//Для каждого Стр ИЗ ТЗ Цикл
	//	
	//	НоваяСтрока = Результат.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	//	
	//КонецЦикла;
	//
	//Результат.Сортировать("Основной Убыв,Номенклатура");
	//
	//Возврат Результат;
		
КонецФункции

Функция СоответствиеТоваров_Сохранить(ТаблицаНоменклатуры,GTIN,КодТовараПартнера,Наименование,Знач Владелец,ТекущееСоответствие) Экспорт//+
	
	//не будем записывать ШК в случае если по нему нет синхронизации
	//в таком случае в исходящем сообщении от поставщика мы не отправим GTIN, и он будет примержен сервером с предыдущего сообщения.
	//для старта работы с сетью по "обрывочным" (без заказа) сделкам потребуется либо временно снимать галку СинхронизироватьТоварыТолькоПоКодуПартнера, либо использовать ПМ "ПослеКонвертацииСообщения1СвEDI", где заполнить недостающие GTIN (если их ждет сеть)
	СинхронизироватьТоварыТолькоПоКодуПартнера = 	(ПолучитьЗначениеСвойстваОбъектаEDI(Владелец, "СинхронизироватьТоварыТолькоПоКодуПартнера") = Истина);
	Если СинхронизироватьТоварыТолькоПоКодуПартнера и ПолучитьЭлементСправочника("Партнеры",Владелец).Поставщик=ложь Тогда //не записываем GTIN только для сети и значения настройки партнера
		GTIN="";
	КонецЕсли;
	
	Владелец = ПреобразоватьЗначениеДляВнешнегоХранилища(Владелец);
	РезультатСохранения = ИнициализироватьСтруктуруРезультатаФункции();
	ЗапросПроверка = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	//сначала проверим: не затрет ли новое соответствие какое-либо другое, установленное ранее
	ЗапросПроверка.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_СоответствияТоваров.Номенклатура,
	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	|	КонтурEDI_СоответствияТоваров.Единица,
	|	КонтурEDI_СоответствияТоваров.GTIN,
	|	КонтурEDI_СоответствияТоваров.КодТовараПартнера,
	|	КонтурEDI_СоответствияТоваров.НаименованиеПартнера
	|ИЗ
	|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	|ГДЕ
	|	КонтурEDI_СоответствияТоваров.Партнер = &Партнер
	|	И КонтурEDI_СоответствияТоваров.Номенклатура = &Номенклатура
	|	И КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И КонтурEDI_СоответствияТоваров.Единица = &Единица
	|	И КонтурEDI_СоответствияТоваров.ЕдиницаEDI = &ЕдиницаEDI
	|	И (КонтурEDI_СоответствияТоваров.GTIN <> &GTIN
	|			ИЛИ КонтурEDI_СоответствияТоваров.КодТовараПартнера <> &КодТовараПартнера)
	|	И КонтурEDI_СоответствияТоваров.GTIN <> &ТекущийGTIN
	|	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> &ТекущийКодТовараПартнера
	|	И &ДопУсловие";
	
	Если ПолучитьЗначениеСвойстваОбъектаEDI(Владелец, "НесколькоТоваровСетиНаОдинТоварПоставщика") = Истина Тогда
		ТекстДопУсловия = " КонтурEDI_СоответствияТоваров.Контрагент = &Контрагент И КонтурEDI_СоответствияТоваров.Договор = &Договор ";
	Иначе
		ТекстДопУсловия = " Истина ";
	КонецЕсли;
	
	ЗапросПроверка.Текст = СтрЗаменить(ЗапросПроверка.Текст,"&ДопУсловие",ТекстДопУсловия);
	
	Для Каждого Стр Из ТаблицаНоменклатуры Цикл
		
		ЗапросПроверка.УстановитьПараметр("Партнер",Владелец);
		ЗапросПроверка.УстановитьПараметр("GTIN",GTIN);
		ЗапросПроверка.УстановитьПараметр("КодТовараПартнера",КодТовараПартнера);
		ЗапросПроверка.УстановитьПараметр("ТекущийGTIN",ТекущееСоответствие.GTIN);//+
		ЗапросПроверка.УстановитьПараметр("ТекущийКодТовараПартнера",ТекущееСоответствие.КодТовараПартнера);//+
		
		ЗапросПроверка.УстановитьПараметр("Номенклатура",ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Номенклатура));
		ЗапросПроверка.УстановитьПараметр("ХарактеристикаНоменклатуры",?(ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры),ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ХарактеристикаНоменклатуры),Неопределено));
		ЗапросПроверка.УстановитьПараметр("Единица",ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ЕдиницаИзмерения));
		ЗапросПроверка.УстановитьПараметр("ЕдиницаEDI", ?(ЗначениеЗаполнено(Стр.ЕдиницаEDI),Стр.ЕдиницаEDI,""));
		
		ЗапросПроверка.УстановитьПараметр("Контрагент",	?(ЗначениеЗаполнено(Стр.Контрагент),ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Контрагент),Неопределено));
		ЗапросПроверка.УстановитьПараметр("Договор",	?(ЗначениеЗаполнено(Стр.Договор),	ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Договор),Неопределено));
		
		Выб=ЗапросПроверка.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			
			ДопТекстКонтрагентДоговор = "";
			Если ЗначениеЗаполнено(Стр.Контрагент) Тогда
				ДопТекстКонтрагентДоговор = " контрагент: "+Стр.Контрагент+" ("+Стр.Контрагент.Код+")";
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.Договор) Тогда
				ДопТекстКонтрагентДоговор = ДопТекстКонтрагентДоговор + " договор: "+Стр.Договор+" ("+Стр.Договор.Код+")";
			КонецЕсли;
			
			ЗарегистрироватьОшибку(РезультатСохранения,
			"Товар """+Стр.Номенклатура+""" с единицей """+Стр.ЕдиницаИзмерения+""" и характеристикой """+Стр.ХарактеристикаНоменклатуры
			+""" уже сопоставлен с товаром """+Выб.НаименованиеПартнера+""" с кодом """+Выб.КодТовараПартнера+""" и GTIN """+Выб.GTIN+"""."
			+?(ЗначениеЗаполнено(ДопТекстКонтрагентДоговор)," В разрезе:"+ДопТекстКонтрагентДоговор,""));
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если РезультатСохранения.ТаблицаОшибок.Количество()>0 Тогда
		
		ЗарегистрироватьОшибку(РезультатСохранения,"Зайдите в меню ""Торговые сети"", откройте карточку партнера """+Владелец+""" и проверьте существующие соответствия товаров.");
		ОповеститьОбОшибках(РезультатСохранения,"Не удалось сохранить соответствия товаров");
		
		Возврат РезультатСохранения;
		
	КонецЕсли;	
	
	//затрем текущие соответствия
	ТекущиеСоответствия = СоответствиеТоваров_НайтиНоменклатуру(GTIN,КодТовараПартнера,Владелец);
	
	Если ВнешнееХранилище Тогда
		МенеджерЗаписиСоответствийТоваров = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьМенеджерЗаписи();
	Иначе
		МенеджерЗаписиСоответствийТоваров = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьМенеджерЗаписи();
	КонецЕсли;
	
	Для каждого Стр Из ТекущиеСоответствия Цикл
		
		МенеджерЗаписиСоответствийТоваров.Партнер						= Владелец;
		МенеджерЗаписиСоответствийТоваров.Номенклатура					= ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Номенклатура);
		МенеджерЗаписиСоответствийТоваров.Единица						= ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ЕдиницаИзмерения);
		Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
			Характеристика = ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ХарактеристикаНоменклатуры);
		Иначе
			Характеристика = Неопределено;
		КонецЕсли;
		МенеджерЗаписиСоответствийТоваров.ХарактеристикаНоменклатуры	= Характеристика;
		МенеджерЗаписиСоответствийТоваров.ЕдиницаEDI					= Стр.ЕдиницаEDI;
		
		МенеджерЗаписиСоответствийТоваров.Контрагент = ?(ЗначениеЗаполнено(Стр.Контрагент),ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Контрагент),Неопределено);
		МенеджерЗаписиСоответствийТоваров.Договор = ?(ЗначениеЗаполнено(Стр.Договор),ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Договор),Неопределено);
		
		МенеджерЗаписиСоответствийТоваров.Прочитать();
		МенеджерЗаписиСоответствийТоваров.Удалить();
		
	КонецЦикла;
	
	//Запишем обновленные соответствия
	Для Каждого Стр ИЗ ТаблицаНоменклатуры Цикл
		
		Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
			Характеристика = ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ХарактеристикаНоменклатуры);
		Иначе
			Характеристика = Неопределено;
		КонецЕсли;
		
		МенеджерЗаписиСоответствийТоваров.Партнер						= Владелец;
		МенеджерЗаписиСоответствийТоваров.Номенклатура					= ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Номенклатура);
		МенеджерЗаписиСоответствийТоваров.Единица						= ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ЕдиницаИзмерения);
		МенеджерЗаписиСоответствийТоваров.ХарактеристикаНоменклатуры	= Характеристика;
		МенеджерЗаписиСоответствийТоваров.ЕдиницаEDI					= Стр.ЕдиницаEDI;
		
		МенеджерЗаписиСоответствийТоваров.Контрагент					= ?(ЗначениеЗаполнено(Стр.Контрагент),ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Контрагент),Неопределено);
		МенеджерЗаписиСоответствийТоваров.Договор						= ?(ЗначениеЗаполнено(Стр.Договор),ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Договор),Неопределено);
		
		МенеджерЗаписиСоответствийТоваров.Прочитать();
		
		МенеджерЗаписиСоответствийТоваров.Партнер						= Владелец;
		МенеджерЗаписиСоответствийТоваров.Номенклатура					= ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Номенклатура);
		МенеджерЗаписиСоответствийТоваров.ХарактеристикаНоменклатуры	= Характеристика;
		МенеджерЗаписиСоответствийТоваров.ЕдиницаEDI					= Стр.ЕдиницаEDI;
		МенеджерЗаписиСоответствийТоваров.КодТовараПартнера				= СокрЛП(КодТовараПартнера);
		МенеджерЗаписиСоответствийТоваров.GTIN							= СокрЛП(GTIN);
		МенеджерЗаписиСоответствийТоваров.НаименованиеПартнера			= Наименование;
		МенеджерЗаписиСоответствийТоваров.Единица						= ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ЕдиницаИзмерения);
		МенеджерЗаписиСоответствийТоваров.ОсновноеСоответствие			= Стр.Основной;
		МенеджерЗаписиСоответствийТоваров.КоэффициентEDIВ1С				= ?(Стр.ДействиеПересчета = "разделить", -Стр.КоэффициентEDIВ1С, Стр.КоэффициентEDIВ1С);
		
		МенеджерЗаписиСоответствийТоваров.Контрагент					= ?(ЗначениеЗаполнено(Стр.Контрагент),ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Контрагент),Неопределено);
		МенеджерЗаписиСоответствийТоваров.Договор						= ?(ЗначениеЗаполнено(Стр.Договор),ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Договор),Неопределено);
		
		МенеджерЗаписиСоответствийТоваров.Записать();
		
	КонецЦикла;

	Возврат РезультатСохранения;
	
КонецФункции

Функция ПолучитьШтрихкодНоменклатуры(Параметры) Экспорт

	СтандартнаяОбработкаEDI = Истина;
	
	Штрихкод = ОбработкаСобытияПодключаемогоМодуля("ПолучитьШтрихкодНоменклатуры",СтандартнаяОбработкаEDI,
			Новый Структура("Параметры",
			Параметры));

	Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Штрихкод;
	КонецЕсли;
	
//	Штрихкод = ПолучитьШтрихкодНоменклатуры(Параметры);

	Штрихкод = Неопределено;
	
	Если ИмяКонфигурации1С = "КА" ИЛИ
		 ИмяКонфигурации1С = "УПП" ИЛИ
		 ИмяКонфигурации1С = "УТ_10_3" ИЛИ
		 ИмяКонфигурации1С = "УТ_10_2" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец
		|	И Штрихкоды.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|	И Штрихкоды.ЕдиницаИзмерения = &ЕдиницаИзмерения";
		Запрос.УстановитьПараметр("Владелец", 					Параметры.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Параметры.ХарактеристикаНоменклатуры);   
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", 			Параметры.ЕдиницаИзмерения);
		
		Штрихкод = ПолучитьРезультатЗапроса(Запрос, "Штрихкод");
				 
	КонецЕсли;
	
	Возврат Штрихкод;
			  
КонецФункции

Функция ПолучитьСписокДействийПересчета() Экспорт
	СписокДействийПересчета = Новый СписокЗначений;
	СписокДействийПересчета.Добавить("умножить",  "умножить");
	СписокДействийПересчета.Добавить("разделить", "разделить"); 
	Возврат СписокДействийПересчета;
КонецФункции // ПолучитьСписокДействийПересчета()

Функция ПолучитьСписокЕдиницEDI() Экспорт

	СписокЕдиницКлассификатора = ЗагрузитьКлассификаторИзМакета("КодЕдиницы");	
	
	СписокЕдиницEDI = Новый СписокЗначений;
	
	Для Каждого Эл Из СписокЕдиницКлассификатора Цикл
		СписокЕдиницEDI.Добавить(Эл.Значение,Эл.Значение+" ("+СокрЛП(Эл.Представление)+")");
	КонецЦикла;

	Возврат СписокЕдиницEDI;
	
КонецФункции

//***************************************************************
// Подключаемый модуль

Функция ПолучитьСсылкуНаРСчет() Экспорт
	
	ИмяСправочника	= НастройкиМодуля.СоздаваемыйДокументРСчетВид;
	GUIDСсылка		= НастройкиМодуля.СоздаваемыйДокументРСчетGUID;

	Если НЕ ИмяСправочника = Неопределено И НЕ GUIDСсылка = Неопределено Тогда
		
		НовыйGUID = Новый УникальныйИдентификатор(GUIDСсылка);
		СсылкаМодуль = Справочники[ИмяСправочника].ПолучитьСсылку(НовыйGUID);
		
		Если ЗначениеЗаполнено(СсылкаМодуль) Тогда
			Возврат СсылкаМодуль;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ПолучитьСсылкуНаПодключаемыйМодуль() Экспорт
	
	ИмяСправочника = НастройкиПодключаемогоМодуля.ПодключаемыйМодульВидСправочника;
	GUIDСсылка	   = НастройкиПодключаемогоМодуля.ПодключаемыйМодульGUID;

	Если НЕ ИмяСправочника = Неопределено И НЕ GUIDСсылка = Неопределено Тогда
		
		НовыйGUID = Новый УникальныйИдентификатор(GUIDСсылка);
		СсылкаМодуль = Справочники[ИмяСправочника].ПолучитьСсылку(НовыйGUID);
		
		Если ЗначениеЗаполнено(СсылкаМодуль) Тогда
			Возврат СсылкаМодуль;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОбновитьКэшПартнеров() Экспорт
	
	ЗапросСКэшемПартнеров = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	ЗапросСКэшемПартнеров.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочники.Ссылка КАК Партнер,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоОбратныйЗаказ.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК PORDERS,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоЗаказ.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК ORDERS,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоОтветНаЗаказ.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК ORDRSP,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоОтгрузка.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК DESADV,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоПриемка.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК RECADV,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоСФ.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК INVOIC,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоКСФ.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК COINVOIC,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоНеОтправлять_I_INVOIC.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК НеОтправлять_I_INVOIC,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвойствоINVOICДоОбработкиRECADV.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК INVOICДоОбработкиRECADV
	|ПОМЕСТИТЬ _ТаблицаКэшПартнеров
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоОбратныйЗаказ
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоОбратныйЗаказ.Объект
	|			И (СвойствоОбратныйЗаказ.Свойство = ""PORDERS"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоЗаказ
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоЗаказ.Объект
	|			И (СвойствоЗаказ.Свойство = ""ORDERS"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоОтветНаЗаказ
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоОтветНаЗаказ.Объект
	|			И (СвойствоОтветНаЗаказ.Свойство = ""ORDRSP"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоОтгрузка
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоОтгрузка.Объект
	|			И (СвойствоОтгрузка.Свойство = ""DESADV"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоПриемка
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоПриемка.Объект
	|			И (СвойствоПриемка.Свойство = ""RECADV"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоСФ
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоСФ.Объект
	|			И (СвойствоСФ.Свойство = ""INVOIC"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоКСФ
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоКСФ.Объект
	|			И (СвойствоКСФ.Свойство = ""COINVOIC"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоНеОтправлять_I_INVOIC
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоНеОтправлять_I_INVOIC.Объект
	|			И (СвойствоНеОтправлять_I_INVOIC.Свойство = ""НеОтправлять_I_INVOIC"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК СвойствоINVOICДоОбработкиRECADV
	|		ПО КонтурEDI_ДополнительныеСправочники.Ссылка = СвойствоINVOICДоОбработкиRECADV.Объект
	|			И (СвойствоINVOICДоОбработкиRECADV.Свойство = ""INVOICДоОбработкиRECADV"")
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""Партнеры""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_ТаблицаКэшПартнеров.Партнер,
	|	_ТаблицаКэшПартнеров.PORDERS,
	|	_ТаблицаКэшПартнеров.ORDERS,
	|	_ТаблицаКэшПартнеров.ORDRSP,
	|	_ТаблицаКэшПартнеров.DESADV,
	|	_ТаблицаКэшПартнеров.RECADV,
	|	_ТаблицаКэшПартнеров.INVOIC,
	|	_ТаблицаКэшПартнеров.COINVOIC,
	|	_ТаблицаКэшПартнеров.НеОтправлять_I_INVOIC,
	|	_ТаблицаКэшПартнеров.INVOICДоОбработкиRECADV,
	|	ВЫБОР
	|		КОГДА _ТаблицаКэшПартнеров.PORDERS
	|			ТОГДА ""PORDERS""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СообщениеБлокирующееORDERS,
	|	""ORDERS"" КАК СообщениеБлокирующееORDRSP,
	|	ВЫБОР
	|		КОГДА _ТаблицаКэшПартнеров.ORDRSP
	|			ТОГДА ""ORDRSP""
	|		КОГДА _ТаблицаКэшПартнеров.ORDERS
	|			ТОГДА ""ORDERS""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СообщениеБлокирующееDESADV,
	|	ВЫБОР
	|		КОГДА _ТаблицаКэшПартнеров.DESADV
	|			ТОГДА ""DESADV""
	|		КОГДА _ТаблицаКэшПартнеров.ORDRSP
	|			ТОГДА ""ORDRSP""
	|		КОГДА _ТаблицаКэшПартнеров.ORDERS
	|			ТОГДА ""ORDERS""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СообщениеБлокирующееRECADV,
	|	ВЫБОР
	|		КОГДА _ТаблицаКэшПартнеров.INVOICДоОбработкиRECADV
	|			ТОГДА ВЫБОР
	|					КОГДА _ТаблицаКэшПартнеров.DESADV
	|						ТОГДА ""DESADV""
	|					КОГДА _ТаблицаКэшПартнеров.ORDRSP
	|						ТОГДА ""ORDRSP""
	|					КОГДА _ТаблицаКэшПартнеров.ORDERS
	|						ТОГДА ""ORDERS""
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА _ТаблицаКэшПартнеров.RECADV
	|					ТОГДА ""RECADV""
	|				КОГДА _ТаблицаКэшПартнеров.DESADV
	|					ТОГДА ""DESADV""
	|				КОГДА _ТаблицаКэшПартнеров.ORDRSP
	|					ТОГДА ""ORDRSP""
	|				КОГДА _ТаблицаКэшПартнеров.ORDERS
	|					ТОГДА ""ORDERS""
	|				ИНАЧЕ """"
	|			КОНЕЦ

	|	КОНЕЦ КАК СообщениеБлокирующееINVOIC
	|ПОМЕСТИТЬ ТаблицаКэшПартнеров
	|ИЗ
	|	_ТаблицаКэшПартнеров КАК _ТаблицаКэшПартнеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Партнер,
	|	ВложенныйЗапрос.PORDERS,
	|	ВложенныйЗапрос.ORDERS,
	|	ВложенныйЗапрос.ORDRSP,
	|	ВложенныйЗапрос.DESADV,
	|	ВложенныйЗапрос.RECADV,
	|	ВложенныйЗапрос.INVOIC,
	|	ВложенныйЗапрос.COINVOIC,
	|	ВложенныйЗапрос.НеОтправлять_I_INVOIC,
	|	ВложенныйЗапрос.INVOICДоОбработкиRECADV,
	|	ВложенныйЗапрос.СообщениеБлокирующееORDERS,
	|	ВложенныйЗапрос.СообщениеБлокирующееORDRSP,
	|	ВложенныйЗапрос.СообщениеБлокирующееDESADV,
	|	ВложенныйЗапрос.СообщениеБлокирующееRECADV,
	|	ВложенныйЗапрос.СообщениеБлокирующееINVOIC
	|ПОМЕСТИТЬ ТаблицаКэшПартнеровКонтрагентов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(КонтурEDI_ДополнительныеРеквизиты.Объект КАК Справочник.Контрагенты) КАК Контрагент,
	|		ТаблицаКэшПартнеров.Партнер КАК Партнер,
	|		ТаблицаКэшПартнеров.PORDERS КАК PORDERS,
	|		ТаблицаКэшПартнеров.ORDERS КАК ORDERS,
	|		ТаблицаКэшПартнеров.ORDRSP КАК ORDRSP,
	|		ТаблицаКэшПартнеров.DESADV КАК DESADV,
	|		ТаблицаКэшПартнеров.RECADV КАК RECADV,
	|		ТаблицаКэшПартнеров.INVOIC КАК INVOIC,
	|		ТаблицаКэшПартнеров.COINVOIC КАК COINVOIC,
	|		ТаблицаКэшПартнеров.НеОтправлять_I_INVOIC КАК НеОтправлять_I_INVOIC,
	|		ТаблицаКэшПартнеров.INVOICДоОбработкиRECADV КАК INVOICДоОбработкиRECADV,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееORDERS КАК СообщениеБлокирующееORDERS,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееORDRSP КАК СообщениеБлокирующееORDRSP,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееDESADV КАК СообщениеБлокирующееDESADV,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееRECADV КАК СообщениеБлокирующееRECADV,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееINVOIC КАК СообщениеБлокирующееINVOIC
	|	ИЗ
	|		РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеров КАК ТаблицаКэшПартнеров
	|			ПО КонтурEDI_ДополнительныеРеквизиты.Значение = ТаблицаКэшПартнеров.Партнер
	|				И (КонтурEDI_ДополнительныеРеквизиты.Свойство = ""ПартнерКонтрагента"")
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(КонтурEDI_ТочкиДоставки.СвязанныйСправочник1 КАК Справочник.Контрагенты),
	|		ТаблицаКэшПартнеров.Партнер,
	|		ТаблицаКэшПартнеров.PORDERS,
	|		ТаблицаКэшПартнеров.ORDERS,
	|		ТаблицаКэшПартнеров.ORDRSP,
	|		ТаблицаКэшПартнеров.DESADV,
	|		ТаблицаКэшПартнеров.RECADV,
	|		ТаблицаКэшПартнеров.INVOIC,
	|		ТаблицаКэшПартнеров.COINVOIC,
	|		ТаблицаКэшПартнеров.НеОтправлять_I_INVOIC,
	|		ТаблицаКэшПартнеров.INVOICДоОбработкиRECADV,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееORDERS,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееORDRSP,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееDESADV,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееRECADV,
	|		ТаблицаКэшПартнеров.СообщениеБлокирующееINVOIC
	|	ИЗ
	|		Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеров КАК ТаблицаКэшПартнеров
	|			ПО (ТаблицаКэшПартнеров.Партнер = КонтурEDI_ТочкиДоставки.Партнер)
	|	ГДЕ
	|		НЕ КонтурEDI_ТочкиДоставки.СвязанныйСправочник1 = НЕОПРЕДЕЛЕНО) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент";
	
	//стоит добавить в модуль справочника КонтурEDI_ТочкиДоставки проверку на заполненность поля "СвязанныйСправочник1": если выбрана пустая ссылка, то сбрасывать на Неопределено
	
	//на рефакторинг: возможно, удастся ускорить выполнение запроса
	Если ВнешнееХранилище Тогда
		ЗаменитьСсылкиДляВнешнегоХранилищаВЗапросе(ЗапросСКэшемПартнеров.Текст);
	КонецЕсли;	
	
	ЗапросСКэшемПартнеров.Выполнить();
	
	ЗапросСКэшемПартнеров.Текст = "Выбрать * ИЗ ТаблицаКэшПартнеров";
		

	Если ВнешнееХранилище Тогда
		
		//как бы так избавиться от необходимости пересоздавать таблицу, и передавать во внешнюю базу/обратно сразу транслированную таблицу?
		
		ТаблицаКэшПартнеров = ПолучитьТаблицуИзВнешнейБазы(ЗапросСКэшемПартнеров.Выполнить().Выгрузить());
		
	Иначе	

		ТаблицаКэшПартнеров = ЗапросСКэшемПартнеров.Выполнить().Выгрузить();
	КонецЕсли;	
												
	ЗапросСКэшемПартнеров.Текст = "Выбрать * ИЗ ТаблицаКэшПартнеровКонтрагентов";
	

	Если ВнешнееХранилище Тогда
		
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура(
							"Контрагент",
							Новый ОписаниеТипов("СправочникСсылка.Контрагенты")
							);
					
		ТаблицаКэшПартнеровКонтрагентов = ПолучитьТаблицуИзВнешнейБазы(ЗапросСКэшемПартнеров.Выполнить().Выгрузить(),СтруктураКолонокПреобразуемыхВСсылки);
		
	Иначе	

		ТаблицаКэшПартнеровКонтрагентов = ЗапросСКэшемПартнеров.Выполнить().Выгрузить();
	КонецЕсли;
	
	//хранить полученные таблицы будем хранить в переменных модуля, а не на сервере.
	ЗапросСКэшемПартнеров.Текст = "Уничтожить ТаблицаКэшПартнеровКонтрагентов; Уничтожить ТаблицаКэшПартнеров;";
	ЗапросСКэшемПартнеров.Выполнить();
	ЗапросСКэшемПартнеров=Неопределено;
	
	ТаблицаКэшПартнеров.Индексы.Добавить("Партнер");
	ТаблицаКэшПартнеровКонтрагентов.Индексы.Добавить("Партнер,Контрагент");
	
КонецПроцедуры

Функция СравнитьСообщения(Сообщение1,Сообщение2,ПроверяемыеПоля,ПропускатьНулевыеЗначения = Ложь) Экспорт
	                                                
	СообщенияРавны=Истина;
	Для Каждого Эл из ПроверяемыеПоля Цикл
		ТекущиеЭлементыРавны=Ложь;
		Попытка
			Выполнить("ТекущиеЭлементыРавны=(Сообщение1."+Эл+"=Сообщение2."+Эл+")");
		Исключение
			ТекущиеЭлементыРавны=Ложь;
		КонецПопытки;
		СообщенияРавны=СообщенияРавны и ТекущиеЭлементыРавны;
	КонецЦикла;	
	
	//теперь сравним товары
	
	СравниваемыеПоля = Новый СписокЗначений;
	СравниваемыеПоля.Добавить("Количество");
	СравниваемыеПоля.Добавить("ЦенаБезНДС");
	СравниваемыеПоля.Добавить("ЦенаСНДС");
	СравниваемыеПоля.Добавить("СтавкаНДСEDI");
	СравниваемыеПоля.Добавить("СуммаБезНДС");
	СравниваемыеПоля.Добавить("СуммаСНДС");
	
	СтруктураТаблицы1 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы1.Вид			= "Сообщение";
	СтруктураТаблицы1.ТипСообщения	= "ORDERS";
	СтруктураТаблицы1.Товары		= Сообщение1.Товары;
	
	СтруктураТаблицы2 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы2.Вид			= "Сообщение";
	СтруктураТаблицы2.ТипСообщения	= "ORDERS";
	СтруктураТаблицы2.Товары		= Сообщение2.Товары;
	
	
	РезультатСравнения = СравнитьТаблицыТоваров(СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля,,ПропускатьНулевыеЗначения);
	
	Если РезультатСравнения.Успешно 
		И РезультатСравнения.ЕстьРасхождения 
	Тогда	
		СообщенияРавны=Ложь;
	КонецЕсли;
	
	Возврат СообщенияРавны;
КонецФункции	

Функция МодульТиповой_РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС)
	
	Если (УчитыватьНДС=Истина) И (СуммаВключаетНДС=Истина) Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;
	
	Если УчитыватьНДС=Истина Тогда 
		Если НЕ СуммаВключаетНДС=Истина Тогда
			СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;
		КонецЕсли;
	Иначе
		СуммаНДС = 0;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

Функция МодульТиповой_ПолучитьСтавкуНДС(СтавкаНДС) Экспорт
	
	Если ИмяКонфигурации1С = "Розница" Тогда
		
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
			Возврат 20;
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
			Возврат 10;
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
			Возврат 18;
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
		
		Если СтавкаНДС.Ставка = 20 Тогда
			Возврат 20;
		ИначеЕсли СтавкаНДС.Ставка = 10 Тогда
			Возврат 10;
		ИначеЕсли СтавкаНДС.Ставка = 18 Тогда
			Возврат 18;
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
		
		Если СтавкаНДС.Ставка = 10 ИЛИ СтавкаНДС.Ставка = 18 ИЛИ СтавкаНДС.Ставка = 20 Тогда
			Возврат СтавкаНДС.Ставка;
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
		
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Возврат 10;
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
			Возврат 18;
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда
		
		Возврат СтавкаНДС.Ставка;
		
		
	Иначе
		
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			Возврат 20;
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Возврат 10;
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
			Возврат 18;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ПолучитьСтавкуНДС()

Процедура ДобавитьВиртуальныйORDERS(ТекущийДокумент,ДокументДляПривязки) Экспорт
	
	//а еще надо создать ORDRSP и статус документа, если уже отправлен хотя бы один ORDRSP
	ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(ТекущийДокумент);
	СтрокаДляКопирования = ТабВиртуальныхСообщений.Найти(ТекущийДокумент,"Документ");
	Если СтрокаДляКопирования<>Неопределено 
		И ЗначениеЗаполнено(СтрокаДляКопирования.ORDERS) Тогда
		
		НачатьТранзакцию_КонтурEDI();
		
		Попытка
			                       
			НовСообщение = ПреобразоватьЗначениеДляВнешнегоХранилища(СтрокаДляКопирования.ORDERS).Скопировать();
			НовСообщение.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументДляПривязки);
			НовСообщение.УстановитьНовыйКод();
			СохранитьОбъектСообщения(НовСообщение);
			
			Если ЗначениеЗаполнено(СтрокаДляКопирования.ORDRSP) Тогда
				
				УдалитьORDRSP = Ложь;
				Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
					Если ЗначениеЗаполнено(Стр.ORDRSP) 
						И Стр.ORDRSP_Статус = "Ожидает отправки" Тогда
						УдалитьORDRSP = Истина;
					КонецЕсли;	
				КонецЦикла;	
						
				Если УдалитьORDRSP Тогда
					//удалим все ORDRSP и статусы документов, чтобы сообщение вернулось в статус "Подтвердите заказ"
					Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
						
						Если ЗначениеЗаполнено(Стр.ORDRSP) Тогда
							
							ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ORDRSP).ПолучитьОбъект().Удалить();
							
							Если ВнешнееХранилище Тогда
								МЗ = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
							Иначе
								МЗ = РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
							КонецЕсли;	
							
							МЗ.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Документ);
							МЗ.ИмяСтатуса = "Заказ";
							МЗ.Удалить();
							
						КонецЕсли;
						
					КонецЦикла;	
					
				Иначе	//не УдалитьORDRSP
					
					//заодно создать ORDRSP и скопировать статус документа
					НовСообщение = ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.ORDRSP).Скопировать();
					НовСообщение.УстановитьНовыйКод();
					НовСообщение.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументДляПривязки);
					СохранитьОбъектСообщения(НовСообщение);
					
					Если ВнешнееХранилище Тогда
						МЗ = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
					Иначе
						МЗ = РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
					КонецЕсли;
				
					МЗ.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(ТекущийДокумент);
					МЗ.ИмяСтатуса = "Заказ";
					МЗ.Прочитать();
					_Статус = МЗ.Статус;//получим текущий статус документа
					
					МЗ.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументДляПривязки);
					МЗ.ИмяСтатуса = "Заказ";
					МЗ.Статус = _Статус;//и скопируем его в остальные документы
					МЗ.Записать();
						
				КонецЕсли;
			КонецЕсли;	
			
			ЗафиксироватьТранзакцию_КонтурEDI();
		Исключение
			ОтменитьТранзакцию_КонтурEDI();
			_Ошибка = ОписаниеОшибки();
			Сообщить(_Ошибка);
		КонецПопытки;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПересчитатьТоварыСообщения(ТаблицаТоваров,Партнер,Направление)
	
	Если НЕ НастройкиМодуля.ИспользоватьПересчетЕдиницИзмерения = Истина Тогда
		//экспериментальная функция, по умолчанию выключена
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуля("ПересчитатьТоварыСообщения",СтандартнаяОбработкаEDI,Новый Структура("ТаблицаТоваров,Партнер,Направление",ТаблицаТоваров,Партнер,Направление));
	Если Не СтандартнаяОбработкаEDI Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСообщения Из ТаблицаТоваров Цикл
		
		ДействиеПересчета = "";
		КоэффициентEDIВ1С = 1;

		Если ЗначениеЗаполнено(СтрокаСообщения.КоэффициентEDIВ1С) Тогда
			ДействиеПересчета = ?(СтрокаСообщения.КоэффициентEDIВ1С>0, "умножить", "разделить");
			КоэффициентEDIВ1С = Макс(-СтрокаСообщения.КоэффициентEDIВ1С,СтрокаСообщения.КоэффициентEDIВ1С);
		КонецЕсли;
		
		Если ДействиеПересчета = "умножить" Тогда
			Коэффициент = 1/КоэффициентEDIВ1С;
		ИначеЕсли ДействиеПересчета = "разделить" Тогда
			Коэффициент = КоэффициентEDIВ1С;
		Иначе
			Коэффициент = 1;
		КонецЕсли;
		
		Если Направление = "ВEDI" Тогда
			Коэффициент = 1/Коэффициент;//для исходящих будет обратный пересчет
		КонецЕсли;
		
		//теперь собственно расчеты
		СтрокаСообщения.Количество			= СтрокаСообщения.Количество / Коэффициент;

		СтрокаСообщения.ЦенаБезНДС			= СтрокаСообщения.ЦенаБезНДС * Коэффициент;
		СтрокаСообщения.ЦенаСНДС			= СтрокаСообщения.ЦенаСНДС   * Коэффициент;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствияТоваровДляПересчета(ТаблицаТоваров,ЗНАЧ Партнер)
	
	//TODO постараться завернуть на ПолучитьТаблицуСоответствийДляТоваров1С 
	//сюда же завернуть и СоответствиеТоваров_НайтиНоменклатуру по возможности
	//а саму эту функцию постараться завернуть на конвертацию товаров - "ПолучитьТаблицуСоответствийДляТоваров1С"
	
	ТаблицаДляЗапроса = Новый ТаблицаЗначений;
	ТаблицаДляЗапроса.Колонки.Добавить("GTIN",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(14)));
	ТаблицаДляЗапроса.Колонки.Добавить("КодТовараПокупателя",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(35)));
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл//типизируем колонки таблицы
		НоваяСтрокаДляЗапроса = ТаблицаДляЗапроса.Добавить();
		НоваяСтрокаДляЗапроса.GTIN					= СтрокаТоваров.GTIN;
		НоваяСтрокаДляЗапроса.КодТовараПокупателя	= СтрокаТоваров.КодТовараПокупателя;
	КонецЦикла;
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Если ВнешнееХранилище Тогда
		Запрос.УстановитьПараметр("Парам",ПоместитьТаблицуВоВнешнююБазу(ТаблицаДляЗапроса));
	Иначе	
		Запрос.УстановитьПараметр("Парам",ТаблицаДляЗапроса);
	КонецЕсли;
	Запрос.УстановитьПараметр("СинхронизироватьТоварыТолькоПоКодуПартнера",	ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СинхронизироватьТоварыТолькоПоКодуПартнера") = Истина);
	Запрос.УстановитьПараметр("СинхронизироватьТоварыТолькоПоGTIN",			ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СинхронизироватьТоварыТолькоПоGTIN") = Истина);
	Запрос.УстановитьПараметр("Партнер",									ПреобразоватьЗначениеДляВнешнегоХранилища(Партнер));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Парам.GTIN КАК GTIN,
	|	Парам.КодТовараПокупателя КАК КодТовараПокупателя
	|ПОМЕСТИТЬ ВТКоды
	|ИЗ
	|	&парам КАК Парам
	|ГДЕ
	|	(Парам.GTIN <> """"
	|			ИЛИ Парам.КодТовараПокупателя <> """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	GTIN,
	|	КодТовараПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоды.GTIN КАК GTIN,
	|	ВложенныйЗапрос.КодТовараПартнера КАК КодТовараПартнера,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Единица КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ОсновноеСоответствие КАК Основной,
	|	ВложенныйЗапрос.ЕдиницаEDI КАК ЕдиницаEDI,
	|	ВложенныйЗапрос.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор
	|ИЗ
	|	ВТКоды КАК ВТКоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
	|			КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КонтурEDI_СоответствияТоваров.Единица КАК Единица,
	|			КонтурEDI_СоответствияТоваров.ЕдиницаEDI КАК ЕдиницаEDI,
	|			КонтурEDI_СоответствияТоваров.GTIN КАК GTIN,
	|			КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера,
	|			КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С,
	|			КонтурEDI_СоответствияТоваров.ОсновноеСоответствие КАК ОсновноеСоответствие,
	|			КонтурEDI_СоответствияТоваров.Контрагент КАК Контрагент,
	|			КонтурEDI_СоответствияТоваров.Договор КАК Договор
	|		ИЗ
	|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	|		ГДЕ
	|			КонтурEDI_СоответствияТоваров.Партнер = &Партнер
	|			И (КонтурEDI_СоответствияТоваров.GTIN = """"
	|					ИЛИ КонтурEDI_СоответствияТоваров.GTIN В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ВТКоды.GTIN
	|						ИЗ
	|							ВТКоды КАК ВТКоды)
	|					ИЛИ (КонтурEDI_СоответствияТоваров.КодТовараПартнера = """"
	|						ИЛИ КонтурEDI_СоответствияТоваров.КодТовараПартнера В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ВТКоды.КодТовараПокупателя
	|							ИЗ
	|								ВТКоды КАК ВТКоды)))) КАК ВложенныйЗапрос
	|		ПО (ВЫБОР
	|				КОГДА &СинхронизироватьТоварыТолькоПоGTIN
	|						И ВТКоды.GTIN <> """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВложенныйЗапрос.КодТовараПартнера = ВТКоды.КодТовараПокупателя
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &СинхронизироватьТоварыТолькоПоКодуПартнера
	|						И ВТКоды.КодТовараПокупателя <> """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВложенныйЗапрос.GTIN = ВТКоды.GTIN
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	GTIN,
	|	КодТовараПартнера,
	|	Основной УБЫВ";
	
	
	ТабСоответствий = Запрос.Выполнить().Выгрузить();
	
	Если ВнешнееХранилище Тогда
		//объясним, какие колонки внешней базы мы будем преобразовывать в Ссылки локальной базы
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура;
		СтруктураКолонокПреобразуемыхВСсылки.Вставить("Номенклатура",				Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("Номенклатура")));
		СтруктураКолонокПреобразуемыхВСсылки.Вставить("ЕдиницаИзмерения", 			Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЕдиницаИзмерения")));
		
		Если Не НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("ХарактеристикаНоменклатуры",	Новый ОписаниеТипов("Строка"));
		Иначе
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("ХарактеристикаНоменклатуры",	Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры")));
		КонецЕсли;
		
		Если ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "НесколькоТоваровСетиНаОдинТоварПоставщика") = Истина Тогда
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("Контрагент",	Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее")));
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("Договор", 	Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("Договор")));
		КонецЕсли;
		
		ТабСоответствий = ПолучитьТаблицуИзВнешнейБазы(ТабСоответствий,СтруктураКолонокПреобразуемыхВСсылки);
		
	КонецЕсли;
	
	Возврат ТабСоответствий;
	
КонецФункции

Процедура УбратьВиртуальныйORDERS(ОтвязываемыйДокумент) Экспорт
	
	ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(ОтвязываемыйДокумент);
			
	СтрокаДляУдаления = ТабВиртуальныхСообщений.Найти(ОтвязываемыйДокумент,"Документ");
	
	Если СтрокаДляУдаления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию_КонтурEDI();
	
	Попытка
		УдаляемоеСообщениеОбъект = ПолучитьОбъектСообщения(СтрокаДляУдаления.ORDERS);
		УдаляемоеСообщениеОбъект.Удалить();
		
		Если ЗначениеЗаполнено(СтрокаДляУдаления.ORDRSP) Тогда
			
			УдалитьORDRSP = Ложь;
			Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
				Если ЗначениеЗаполнено(Стр.ORDRSP) 
					И Стр.ORDRSP_Статус = "Ожидает отправки" Тогда
					УдалитьORDRSP = Истина;
				КонецЕсли;	
			КонецЦикла;	
			
			//удалим все ORDRSP и статусы документов, чтобы сообщения вернулись в статус "Подтвердите заказ"
			Если УдалитьORDRSP Тогда
				Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
					
					Если ЗначениеЗаполнено(Стр.ORDRSP) Тогда
						
						УдаляемоеСообщениеОбъект = ПолучитьОбъектСообщения(СтрокаДляУдаления.ORDRSP);
						УдаляемоеСообщениеОбъект.Удалить();
						
						Если ВнешнееХранилище Тогда
							МЗ = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
						Иначе
							МЗ = РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
						КонецЕсли;	
						
						МЗ.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(Стр.Документ);
						МЗ.ИмяСтатуса = "Заказ";
						МЗ.Удалить();
						
					КонецЕсли;	
				КонецЦикла;	
				
			Иначе //у нас не было сообщений в статусе "ОжидаетОтправки", тогда удалим только одно сообщение
				//заодно удалить ORDRSP и статус документа
				УдаляемоеСообщениеОбъект = ПолучитьОбъектСообщения(СтрокаДляУдаления.ORDRSP);
				УдаляемоеСообщениеОбъект.Удалить();
				
				Если ВнешнееХранилище Тогда
					МЗ = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
				Иначе
					МЗ = РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
				КонецЕсли;	
				МЗ.Документ = ПреобразоватьЗначениеДляВнешнегоХранилища(СтрокаДляУдаления.Документ);
				МЗ.ИмяСтатуса = "Заказ";
				МЗ.Удалить();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию_КонтурEDI();
	Исключение
		ОтменитьТранзакцию_КонтурEDI();
		_Ошибка = ОписаниеОшибки();
		Сообщить(_Ошибка);
	КонецПопытки;
	
КонецПроцедуры


//}#КонецОбласти //МодульИнтеграции_Новый


//{#Область 09_Модуль_Интеграция_УТ_УПП_КА

	
//печать заявок.	

Функция ПодготовитьПечатнуюФормуЗаказа(Сообщение, Макет) Экспорт
	
	Товары = Сообщение.Товары;
	ТабДок = Новый ТабличныйДокумент;
	
	Если ЗначениеЗаполнено(Сообщение.НомерСерииЗаказов) Тогда
		ЗаголовокЛиста = "Заказ № "+Сообщение.ДокументEDI.Номер+" ("+Сообщение.НомерСерииЗаказов+") "
		+" от "+Формат(Сообщение.ДокументEDI.Дата,"ДЛФ=Д")+" "+Строка(Сообщение.Партнер);
	Иначе ЗаголовокЛиста = "Заказ № "+Сообщение.ДокументEDI.Номер
		+" от "+Формат(Сообщение.ДокументEDI.Дата,"ДЛФ=Д")+" "+Строка(Сообщение.Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение.Статус) Тогда
		ЗаголовокЛиста = ЗаголовокЛиста+" - "+Сообщение.Статус;
	КонецЕсли;
	
	Если Сообщение.Свойство("ДатаВывозаОтПоставщика") Тогда
		ДатаВывозаОтПоставщика = ?(ЗначениеЗаполнено(Сообщение.ДатаВывозаОтПоставщика),Формат(Сообщение.ДатаВывозаОтПоставщика, "ДФ=""дд.ММ.гггг ЧЧ:мм"""),"");
	КонецЕсли;
		
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьВсего 			= Макет.ПолучитьОбласть("Всего");
	
	ОбластьШапка.Параметры.Заголовок = ЗаголовокЛиста;
	ОбластьШапка.Параметры.ВремяДоставки = Формат(Сообщение.ДатаПоставки, "ДФ=""дд.ММ.гггг ЧЧ:мм""");										
	ОбластьШапка.Параметры.ВремяВыезда = ДатаВывозаОтПоставщика;
	ОбластьШапка.Параметры.Договор = "";										
	ОбластьШапка.Параметры.Промоакция = Строка(Сообщение.ПромоНомер);
	ОбластьШапка.Параметры.КтоОтгружает = "";										
	ОбластьШапка.Параметры.Комментарий = Строка(Сообщение.Комментарий);										
	ОбластьШапка.Параметры.ТипПоставки = Строка(Товары[0].ТипПоставки);										
	
	ОбластьШапка.Параметры.ПокупательНаименование = Сообщение.ПокупательEDI.Наименование;	
	ОбластьШапка.Параметры.ПокупательАдрес        = ПолучитьПредставлениеАдресаEDI(Сообщение.ПокупательEDI.Адрес);
	ОбластьШапка.Параметры.ПокупательИННКПП       = ?(ЗначениеЗаполнено(Сообщение.ПокупательEDI.ИНН),Сообщение.ПокупательEDI.ИНН+?(ЗначениеЗаполнено(Сообщение.ПокупательEDI.КПП),"-"+Сообщение.ПокупательEDI.КПП,""),"");
	ОбластьШапка.Параметры.ПокупательGLN          = ?(ЗначениеЗаполнено(Сообщение.ПокупательEDI.GLN),Сообщение.ПокупательEDI.GLN,"");

	ОбластьШапка.Параметры.МестоДоставкиНаименование = Сообщение.ГрузополучательEDI.Наименование;	
	ОбластьШапка.Параметры.МестоДоставкиАдрес        = ПолучитьПредставлениеАдресаEDI(Сообщение.ГрузополучательEDI.Адрес);
	ОбластьШапка.Параметры.МестоДоставкиИННКПП       = ?(ЗначениеЗаполнено(Сообщение.ГрузополучательEDI.ИНН),Сообщение.ГрузополучательEDI.ИНН+?(ЗначениеЗаполнено(Сообщение.ГрузополучательEDI.КПП),"-"+Сообщение.ГрузополучательEDI.КПП,""),"");
	ОбластьШапка.Параметры.МестоДоставкиGLN          = ?(ЗначениеЗаполнено(Сообщение.ГрузополучательEDI.GLN),Сообщение.ГрузополучательEDI.GLN,"");
	
	ОбластьШапка.Параметры.ПолучательДокументовНаименование = Сообщение.ПлательщикEDI.Наименование;	
	ОбластьШапка.Параметры.ПолучательДокументовАдрес        = ПолучитьПредставлениеАдресаEDI(Сообщение.ПлательщикEDI.Адрес);
	ОбластьШапка.Параметры.ПолучательДокументовИННКПП       = ?(ЗначениеЗаполнено(Сообщение.ПлательщикEDI.ИНН),Сообщение.ПлательщикEDI.ИНН+?(ЗначениеЗаполнено(Сообщение.ПлательщикEDI.КПП),"-"+Сообщение.ПлательщикEDI.КПП,""),"");
	ОбластьШапка.Параметры.ПолучательДокументовGLN          = ?(ЗначениеЗаполнено(Сообщение.ПлательщикEDI.GLN),Сообщение.ПлательщикEDI.GLN,"");
	
	ОбластьШапка.Параметры.ПоставщикНаименование = Сообщение.ПродавецEDI.Наименование;	
	ОбластьШапка.Параметры.ПоставщикАдрес        = ПолучитьПредставлениеАдресаEDI(Сообщение.ПродавецEDI.Адрес);
	ОбластьШапка.Параметры.ПоставщикИННКПП       = ?(ЗначениеЗаполнено(Сообщение.ПродавецEDI.ИНН),Сообщение.ПродавецEDI.ИНН+?(ЗначениеЗаполнено(Сообщение.ПродавецEDI.КПП),"-"+Сообщение.ПродавецEDI.КПП,""),"");
	ОбластьШапка.Параметры.ПоставщикGLN          = ?(ЗначениеЗАполнено(Сообщение.ПродавецEDI.GLN),Сообщение.ПродавецEDI.GLN,"");
	
	ОбластьШапка.Параметры.ГрузоотправительНаименование = Сообщение.ГрузоотправительEDI.Наименование;
	ОбластьШапка.Параметры.ГрузоотправительАдрес        = ПолучитьПредставлениеАдресаEDI(Сообщение.ГрузоотправительEDI.Адрес);
	ОбластьШапка.Параметры.ГрузоотправительИННКПП       = ?(ЗначениеЗаполнено(Сообщение.ГрузоотправительEDI.ИНН),Сообщение.ГрузоотправительEDI.ИНН+?(ЗначениеЗаполнено(Сообщение.ГрузоотправительEDI.КПП),"-"+Сообщение.ГрузоотправительEDI.КПП,""),"");
	ОбластьШапка.Параметры.ГрузоотправительGLN          = ?(ЗначениеЗаполнено(Сообщение.ГрузоотправительEDI.GLN),Сообщение.ГрузоотправительEDI.GLN,"");
	
	ТабДок.Вывести(ОбластьШапка);
	
	ТребуетсяРассчитатьСуммы=ТребуетсяРассчитатьСуммы(Товары);
	
	ТабДок.Вывести(ОбластьЗаголовокТаблицы);
	
	Если ТребуетсяРассчитатьСуммы.ТребуетсяРассчитатьСуммуБезНДС Тогда
		ЯчейкаРассчетИтого=Макет.ПолучитьОбласть("РассчСумма");
		ЯчейкаРассчетИтого.Параметры.РассчСумма="*Расч. сумма без НДС";
		ТабДок.Присоединить(ЯчейкаРассчетИтого);
	КонецЕсли;
	Если ТребуетсяРассчитатьСуммы.ТребуетсяРассчитатьСуммуСНДС Тогда
		ЯчейкаРассчетИтого=Макет.ПолучитьОбласть("РассчСумма");
		ЯчейкаРассчетИтого.Параметры.РассчСумма="*Расч. сумма с НДС";
		ТабДок.Присоединить(ЯчейкаРассчетИтого);
	КонецЕсли;
	
	СписокЕИ = Новый СписокЗначений;
	СписокЕИ.Добавить("PCE", "шт");
	СписокЕИ.Добавить("KGM", "кг");
	СписокЕИ.Добавить("CT",  "упаковка");
	СписокЕИ.Добавить("PA",  "упаковка");
	НомСтр = 0;
	ИтогоКоличествоСчет = 0;
	ИтогоРасчетнаяСуммаБезНДС = 0;
	ИтогоРасчетнаяСуммаСНДС = 0;

	Для Каждого Товар Из Товары Цикл
		ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");

		НомСтр = НомСтр + 1;
		ОбластьСтрокаТаблицы.Параметры.НомерСтроки = НомСтр;
		ОбластьСтрокаТаблицы.Параметры.Штрихкод	   = Товар.GTIN;
		
		Если ЗначениеЗаполнено(СокрЛП(Строка(Товар.Наименование))) Тогда  //некоторые партнеры не шлют название в сообщении
			ОбластьСтрокаТаблицы.Параметры.Наименование = Строка(Товар.Наименование);
		ИначеЕсли ЗначениеЗаполнено(Товар.Номенклатура) Тогда
			ОбластьСтрокаТаблицы.Параметры.Наименование = Строка(Товар.Номенклатура);
		КонецЕсли;
	
		ОбластьСтрокаТаблицы.Параметры.КодСети = Товар.КодТовараПокупателя;	
		ОбластьСтрокаТаблицы.Параметры.Артикул = Товар.КодТовараПоставщика;	
		ОбластьСтрокаТаблицы.Параметры.Количество = ?(ЗначениеЗаполнено(Товар.Количество),Товар.Количество,"");	
		ОбластьСтрокаТаблицы.Параметры.КоличествоВОдномМесте = ?(ЗначениеЗаполнено(Товар.КоличествоВОдномМесте),Товар.КоличествоВОдномМесте,"");	
		Если СписокЕИ.НайтиПоЗначению(Товар.КодЕдиницыИзмеренияEDI) <> Неопределено Тогда
			ОбластьСтрокаТаблицы.Параметры.ЕдиницаИзмерения = СписокЕИ.НайтиПоЗначению(Товар.КодЕдиницыИзмеренияEDI).Представление;
		Иначе 
			ОбластьСтрокаТаблицы.Параметры.ЕдиницаИзмерения = Товар.КодЕдиницыИзмеренияEDI;
		КонецЕсли;
		ОбластьСтрокаТаблицы.Параметры.ЦенаБезНДС = ?(ЗначениеЗаполнено(Товар.ЦенаБезНДС),Товар.ЦенаБезНДС,"");	
		ОбластьСтрокаТаблицы.Параметры.СтавкаНДС = ?(ЗначениеЗаполнено(Товар.СтавкаНДСEDI),Товар.СтавкаНДСEDI+"%","");
		ОбластьСтрокаТаблицы.Параметры.ЦенаСНДС = ?(ЗначениеЗаполнено(Товар.ЦенаСНДС),Товар.ЦенаСНДС,"");	
		ОбластьСтрокаТаблицы.Параметры.СуммаБезНДС = ?(ЗначениеЗаполнено(Товар.СуммаБезНДС),Товар.СуммаБезНДС,"");	
		ОбластьСтрокаТаблицы.Параметры.СуммаНДС = ?(ЗначениеЗаполнено(Товар.СуммаНДС),Товар.СуммаНДС,"");	
		ОбластьСтрокаТаблицы.Параметры.СуммаСНДС = ?(ЗначениеЗаполнено(Товар.СуммаСНДС),Товар.СуммаСНДС,"");
		ИтогоКоличествоСчет = ИтогоКоличествоСчет + Товар.Количество;
		
		ТабДок.Вывести(ОбластьСтрокаТаблицы);
		Если ТребуетсяРассчитатьСуммы.ТребуетсяРассчитатьСуммуБезНДС Тогда
			ЯчейкаРассчетИтого=Макет.ПолучитьОбласть("РассчСумма");
			РасчетнаяСуммаБезНДС = окр(Товар.ЦенаБезНДС*Товар.Количество,2);
			ЯчейкаРассчетИтого.Параметры.РассчСумма=РасчетнаяСуммаБезНДС;
			ТабДок.Присоединить(ЯчейкаРассчетИтого);
			ИтогоРасчетнаяСуммаБезНДС=ИтогоРасчетнаяСуммаБезНДС+РасчетнаяСуммаБезНДС;
		КонецЕсли;
		Если ТребуетсяРассчитатьСуммы.ТребуетсяРассчитатьСуммуСНДС Тогда
			ЯчейкаРассчетИтого=Макет.ПолучитьОбласть("РассчСумма");
			Если ЗначениеЗаполнено(Товар.ЦенаБезНДС) Тогда
				РасчетнаяСуммаСНДС = окр(Товар.ЦенаСНДС*Товар.Количество,2);
			Иначе
				РасчетнаяСуммаСНДС = окр((Товар.ЦенаБезНДС*(1+( ?(ЗначениеЗаполнено(Товар.СтавкаНДСEDI),Число(Товар.СтавкаНДСEDI),""))/100))*Товар.Количество,2);
			КонецЕсли;
			ЯчейкаРассчетИтого.Параметры.РассчСумма=РасчетнаяСуммаСНДС;
			ТабДок.Присоединить(ЯчейкаРассчетИтого);
			ИтогоРасчетнаяСуммаСНДС=ИтогоРасчетнаяСуммаСНДС+РасчетнаяСуммаСНДС;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ОбластьВсего.Параметры.ИтогоКоличество  = ?(ЗначениеЗаполнено(ИтогоКоличествоСчет),ИтогоКоличествоСчет,"");
	ОбластьВсего.Параметры.ИтогоСуммаБезНДС = ?(ЗначениеЗаполнено(Сообщение.СуммаВсегоБезНДС),Число(Сообщение.СуммаВсегоБезНДС),"");	
	ОбластьВсего.Параметры.ИтогоСуммаНДС    = ?(ЗначениеЗаполнено(Сообщение.СуммаВсегоНДС),Число(Сообщение.СуммаВсегоНДС),"");	
	ОбластьВсего.Параметры.ИтогоСуммаСНДС   = ?(ЗначениеЗаполнено(Сообщение.СуммаВсего),Число(Сообщение.СуммаВсего),"");
	
	ТабДок.Вывести(ОбластьВсего);
	Если ТребуетсяРассчитатьСуммы.ТребуетсяРассчитатьСуммуБезНДС Тогда
		ЯчейкаРассчетИтого.Параметры.РассчСумма=ИтогоРасчетнаяСуммаБезНДС;
		ЯчейкаРассчетИтого.ТекущаяОбласть.Шрифт=Новый Шрифт(ЯчейкаРассчетИтого.ТекущаяОбласть.Шрифт,,,Истина);
		ТабДок.Присоединить(ЯчейкаРассчетИтого);
	КонецЕсли;
	
	Если ТребуетсяРассчитатьСуммы.ТребуетсяРассчитатьСуммуСНДС Тогда
		ЯчейкаРассчетИтого.Параметры.РассчСумма=ИтогоРасчетнаяСуммаСНДС;
		ЯчейкаРассчетИтого.ТекущаяОбласть.Шрифт=Новый Шрифт(ЯчейкаРассчетИтого.ТекущаяОбласть.Шрифт,,,Истина);
		ТабДок.Присоединить(ЯчейкаРассчетИтого);
	КонецЕсли;
	
	
	Если ТребуетсяРассчитатьСуммы.ТребуетсяРассчитатьСуммуСНДС или ТребуетсяРассчитатьСуммы.ТребуетсяРассчитатьСуммуБезНДС Тогда
		ПредупреждениеРассчет=Макет.ПолучитьОбласть("ПредупреждениеРассчет");
		ЯчейкаРассчетИтого.Параметры.РассчСумма="*суммы рассчитаны автоматически, они не были отправлены партнером!";
		ТабДок.Вывести(ПредупреждениеРассчет);
	КонецЕсли;
	
Возврат ТабДок;

КонецФункции

Функция ТребуетсяРассчитатьСуммы(Товары)
	
	ТребуетсяРассчитатьСуммуСНДС=Ложь;
	ТребуетсяРассчитатьСуммуБезНДС=Ложь;
	
	Для Каждого СтрокаТоваров Из Товары Цикл 
		Если СтрокаТоваров.СуммаСНДС = 0 Тогда 
			ТребуетсяРассчитатьСуммуСНДС=Истина;
		КонецЕсли;	
		Если СтрокаТоваров.СуммаБезНДС = 0 Тогда 
			ТребуетсяРассчитатьСуммуБезНДС=Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Новый Структура("ТребуетсяРассчитатьСуммуСНДС, ТребуетсяРассчитатьСуммуБезНДС",ТребуетсяРассчитатьСуммуСНДС,ТребуетсяРассчитатьСуммуБезНДС);	
	
КонецФункции

Функция ОбработатьМассовуюПечатьЗаказов(МассивСообщений) Экспорт
	
	Макет = ПолучитьМакет("ПечатнаяФормаORDERS");	
	ТабДокОбщий = Новый ТабличныйДокумент;
	
	Для Каждого Строка Из МассивСообщений Цикл
		СообщениеORDERS = Строка.Хранилище.Получить();
		ТабДок = ПодготовитьПечатнуюФормуЗаказа(СообщениеORDERS, Макет);
		ТабДокОбщий.Вывести(ТабДок);
		ТабДокОбщий.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
	ТабДокОбщий.ВывестиВертикальныйРазделительСтраниц();

	//и установим параметры печати
	ТабДокОбщий.ИмяПараметровПечати = "КонтурEDI_ПечатьЗаказов";
	ТабДокОбщий.ИмяСохраненияПоложенияОкна = "КонтурEDI_ПечатьЗаказов";
	ТабДокОбщий.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокОбщий.ОтображатьСетку = Ложь;
	ТабДокОбщий.АвтоМасштаб = Ложь;
	ТабДокОбщий.РазмерСтраницы = "A4";
	ТабДокОбщий.ПолеСверху = 20;
	ТабДокОбщий.ПолеСнизу = 20;
	ТабДокОбщий.ПолеСлева = 5;
	ТабДокОбщий.ПолеСправа = 5;
	ТабДокОбщий.РазмерКолонтитулаСверху = 0;
	ТабДокОбщий.РазмерКолонтитулаСверху = 0;
	
	Возврат ТабДокОбщий;
	
КонецФункции

//Печать палетного листа

Функция ОбработатьМассовуюПечатьПалетныхЛистов(МассивСообщенийДляОтбора) Экспорт
	
	Результат = Новый Структура("Успешно, ТабДокОбщий, КоличествоЛистов");
	Успешно = Истина;
	КоличествоЛистов = 0;
	Результат.Вставить("Успешно", Успешно);
	Результат.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	МассивСообщений = Новый Массив;
	
	Для Каждого ТекСообщение Из МассивСообщенийДляОтбора Цикл
		Если ТекСообщение.ТипСообщения = "DESADV" Тогда
			СообщениеDESADV = ТекСообщение.Хранилище.Получить();
			Если СообщениеDESADV.Транспортныеупаковки.Строки.Количество()>0 Тогда
				МассивСообщений.Добавить(СообщениеDESADV);
				КоличествоЛистов = КоличествоЛистов + 1;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЛистов = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Компонент = ПолучитьВнешнююКомпонентуКартинкаШтрихкода();
	Если Компонент = Неопределено Тогда
		Результат.Успешно = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ПалетныйЛист");	
	ТабДокОбщий = Новый ТабличныйДокумент;
	
	Для Каждого СообщениеDESADV Из МассивСообщений Цикл
		ТабДок = ПодготовитьПечатнуюФормуПалетногоЛиста(СообщениеDESADV, Макет, Компонент);
		ТабДокОбщий.Вывести(ТабДок);
		ТабДокОбщий.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
	ТабДокОбщий.ВывестиВертикальныйРазделительСтраниц();

	//и установим параметры печати
	ТабДокОбщий.ИмяПараметровПечати = "КонтурEDI_ПечатьПалетныхЛистов";
	ТабДокОбщий.ИмяСохраненияПоложенияОкна = "КонтурEDI_ПечатьПалетныхЛистов";
	ТабДокОбщий.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокОбщий.ОтображатьСетку = Ложь;
	ТабДокОбщий.АвтоМасштаб = Ложь;
	ТабДокОбщий.РазмерСтраницы = "A4";
	ТабДокОбщий.ПолеСверху = 20;
	ТабДокОбщий.ПолеСнизу = 20;
	ТабДокОбщий.ПолеСлева = 5;
	ТабДокОбщий.ПолеСправа = 5;
	ТабДокОбщий.РазмерКолонтитулаСверху = 0;
	ТабДокОбщий.РазмерКолонтитулаСверху = 0;
	
	Результат.Вставить("ТабДокОбщий", ТабДокОбщий);
    Результат.Вставить("КоличествоЛистов", КоличествоЛистов);

	Возврат Результат;	

КонецФункции // ОбработатьМассовуюПечатьПалетныхЛистов()

Функция ПодготовитьПечатнуюФормуПалетногоЛиста(Сообщение, Макет, Компонент) Экспорт

	СообщениеORDERS = ПрочитатьСообщение(,Сообщение.Заказ1С,"ORDERS","Входящее");
	
	ТабДокумент 				   	= Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	
	//грузополучатель
	Грузополучатель  					= НайтиОбъектПоЗначениюСвойства("GLN_ТочкиДоставки",Сообщение.ГрузополучательEDI.GLN);
	ГрузополучательНаименование			= "";
	ГрузополучательАдрес				= "";
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		Попытка
			ГрузополучательНаименование 	= Грузополучатель.Наименование;
			ГрузополучательАдрес  			= Грузополучатель.АдресДоставки;
		Исключение
		КонецПопытки;
	КонецЕсли;
	//конечный грузополучатель
	КонечныйГрузополучатель				= "";
	КонечныйГрузополучательНаименование = "";
	КонечныйГрузополучательАдрес		= "";
	Если Сообщение.Свойство("КонечныйГрузополучательEDI") Тогда
		Если Сообщение.Свойство("КонечныйГрузополучательEDI") И ЗначениеЗаполнено(Сообщение.КонечныйГрузополучательEDI.GLN) Тогда
			КонечныйГрузополучатель		= НайтиОбъектПоЗначениюСвойства("GLN_ТочкиДоставки",Сообщение.КонечныйГрузополучательEDI.GLN);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(КонечныйГрузополучатель) Тогда
		Попытка
			КонечныйГрузополучательНаименование = КонечныйГрузополучатель.Наименование;
			КонечныйГрузополучательАдрес		= КонечныйГрузополучатель.АдресДоставки;
		Исключение
		КонецПопытки;
	КонецЕсли;
	//поставщик
	НомерПоставщика						= "";
	СведенияОПоставщике					= "";
	ПоставщикНаименование               = "";
	Если ЗначениеЗаполнено(СообщениеORDERS) Тогда
		НомерПоставщика					= СообщениеORDERS.ПродавецEDI.КодВСистемеПокупателя;
	КонецЕсли;
	НомерЗаказа							= Сообщение.ЗаказEDI.Номер;
	ПлановаяДатаПоступления				= Сообщение.ДатаПоставки;
	Попытка
		Если ИмяКонфигурации1С = "УФ_УТ" Тогда
			Выполнить("СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Сообщение.Продавец1С,ТекущаяДата());");
		ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
			Выполнить("СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Сообщение.Продавец1С,ТекущаяДата());");
		ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда  
			Выполнить("СведенияОПоставщике = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Сообщение.Продавец1С,ТекущаяДата());");
		Иначе //все конфигурации на обычных формах
			Выполнить("СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Сообщение.Продавец1С,ТекущаяДата());");
		КонецЕсли;
	Исключение
		Выполнить("СведенияОЮрФизЛице = СведенияОЮрФизЛице(Сообщение.Продавец1С,ТекущаяДата());");
	КонецПопытки;
	ПоставщикНаименование = "";
	Если ИмяКонфигурации1С = "УФ_УНФ" Тогда
		Выполнить("ПоставщикНаименование = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике,""ПолноеНаименование"")");    
	Иначе
		Выполнить("ПоставщикНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике,""ПолноеНаименование"")");    
	КонецЕсли;

	//sscc
	ВсегоУпаковок = Сообщение.ТранспортныеУпаковки.Строки.Количество();
	
	ПорядковыйНомерУпаковки = 1;
	СписокЕИ = Новый СписокЗначений;
	СписокЕИ.Добавить("PCE", "Штука");
	СписокЕИ.Добавить("KGM", "Килограмм");
	СписокЕИ.Добавить("CT",  "Коробка");
	СписокЕИ.Добавить("PA",  "Упаковка");	
	
	Для Каждого Упаковка Из Сообщение.Транспортныеупаковки.Строки Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.ГрузополучательНаименование 		= ГрузополучательНаименование;
		ОбластьМакета.Параметры.ГрузополучательАдрес 				= ГрузополучательАдрес;
		ОбластьМакета.Параметры.КонечныйГрузополучательНаименование = КонечныйГрузополучательНаименование;
		ОбластьМакета.Параметры.КонечныйГрузополучательАдрес 		= КонечныйГрузополучательАдрес;
		ОбластьМакета.Параметры.НомерПоставщика 					= НомерПоставщика;
		ОбластьМакета.Параметры.НомерЗаказа 						= НомерЗаказа;
		ОбластьМакета.Параметры.ПлановаяДатаПоступления 			= ПлановаяДатаПоступления;
		ОбластьМакета.Параметры.ПоставщикНаименование 				= ПоставщикНаименование;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("SSCC");
		ОбластьМакета.Параметры.SSCC 					= Упаковка.SSCC;
		КартинкаSSCCКода 								= ПолучитьКартинкуШтрихкода(Компонент, Упаковка.SSCC);
		Если Не КартинкаSSCCКода = Неопределено Тогда
			Рисунок = ОбластьМакета.Область("Картинка");
			Рисунок.Картинка = КартинкаSSCCКода;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.НомерТекущейУпаковки	= ПорядковыйНомерУпаковки;
		ОбластьМакета.Параметры.ВсегоУпаковок			= ВсегоУпаковок;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СоставШапка");
		ТабДокумент.Вывести(ОбластьМакета);
		ПорядковыйНомерТовара = 1;
		Для Каждого Товар Из Упаковка.Строки Цикл
			СтрокаВСообщении 			= Сообщение.Товары[Товар.НомерСтроки-1];
			НаименованиеНоменклатуры 	= ?(ЗначениеЗаполнено(СтрокаВСообщении.Номенклатура),Строка(СтрокаВСообщении.Номенклатура),СтрокаВСообщении.Наименование);
			НаименованиеХарактеристики	= Строка(СтрокаВСообщении.ХарактеристикаНоменклатуры);
			НаименованиеТовара			= НаименованиеНоменклатуры + ?(ЗначениеЗаполнено(НаименованиеХарактеристики), "("+НаименованиеХарактеристики+")", "");
			КодТовараПокупателя 		= СтрокаВСообщении.КодТовараПокупателя;
			ЕдиницаИзмерения 			= СтрокаВСообщении.КодЕдиницыИзмеренияEDI;
			ЕдиницаИзмеренияПредставление = "";
			НайденнаяЕИ 				= СписокЕИ.НайтиПоЗначению(ЕдиницаИзмерения);
			Если НайденнаяЕИ <> Неопределено Тогда
				ЕдиницаИзмеренияПредставление = НайденнаяЕИ.Представление;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть("СоставДанные");					
			ОбластьМакета.Параметры.НомерСтроки						= ПорядковыйНомерТовара;
			ОбластьМакета.Параметры.КодТовараПокупателя				= КодТовараПокупателя;
			ОбластьМакета.Параметры.НаименованиеТовара				= НаименованиеТовара;
			ОбластьМакета.Параметры.ЕдиницаИзмеренияПредставление	= ЕдиницаИзмеренияПредставление;
			ОбластьМакета.Параметры.Количество						= Товар.Количество;
			ПорядковыйНомерТовара = ПорядковыйНомерТовара + 1;
			ТабДокумент.Вывести(ОбластьМакета);	
		КонецЦикла;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ПорядковыйНомерУпаковки = ПорядковыйНомерУпаковки + 1;
		
	КонецЦикла;
	
	Возврат ТабДокумент;	

КонецФункции // ПодготовитьПечатнуюФормуПалетногоЛиста()

Функция ПолучитьВнешнююКомпонентуКартинкаШтрихкода() Экспорт

	КомпонентаЗагружена  = Ложь;
	КомпонентаПодключена = Ложь;
	КомпонентУстановлена = Ложь;
	
	Попытка
		Компонент = Новый("AddIn.КартинкаШтрихкода.Barcode");
		КомпонентУстановлена = Истина;
	Исключение
	КонецПопытки;
	Если Не КомпонентУстановлена Тогда
		НаименованиеКомпоненты = "";
		ИнформацияОСистеме = Новый СистемнаяИнформация;
		Если ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			НаименованиеКомпоненты = "КомпонентаПечатиШтрихкодовWindows32.dll";
		ИначеЕсли ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			НаименованиеКомпоненты = "КомпонентаПечатиШтрихкодовWindows64.dll";
		КонецЕсли;
		Файл = Новый Файл(КаталогВременныхФайлов()+НаименованиеКомпоненты);
		Если Файл.Существует() Тогда
			КомпонентаЗагружена = Истина;
			Файл = Неопределено;
		КонецЕсли;
		Если Не КомпонентаЗагружена Тогда
				Состояние_КонтурEDI("Загрузка компоненты печати штрихкодов...");
			Если Не	ПолучитьФайлHTTP(ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
				"/1c/support/"+НаименованиеКомпоненты,
				КаталогВременныхФайлов()+НаименованиеКомпоненты) Тогда 
				ТекстСообщения = "Не удалось загрузить компоненту " + Лев(НаименованиеКомпоненты,СтрДлина(НаименованиеКомпоненты)-4) + " с сервера.";
				Сообщить_КонтурEDI(ТекстСообщения);
				Возврат Неопределено;
			Иначе
				КомпонентаЗагружена = Истина;
			КонецЕсли;
				Состояние_КонтурEDI("");
			Если Не КомпонентаЗагружена Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если КомпонентаЗагружена Тогда
			Попытка
				КомпонентаПодключена = ПодключитьВнешнююКомпоненту(КаталогВременныхФайлов()+НаименованиеКомпоненты, "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
			Исключение
			КонецПопытки;
			Если Не КомпонентаПодключена Тогда
				ТекстСообщения = "Не удалось подключить компоненту " + Лев(НаименованиеКомпоненты,СтрДлина(НаименованиеКомпоненты)-4) + ".";
				Сообщить_КонтурEDI(ТекстСообщения);
				Возврат Неопределено;
			Иначе
				Попытка
					Компонент = Новый("AddIn.КартинкаШтрихкода.Barcode");
					КомпонентУстановлена = Истина;
				Исключение
				КонецПопытки;
				Если Не КомпонентУстановлена Тогда
					ТекстСообщения = "Не удалось использовать компоненту " + Лев(НаименованиеКомпоненты,СтрДлина(НаименованиеКомпоненты)-4) + " по причине: не может быть создан объект ""AddIn.КартинкаШтрихкода.Barcode"".";
					Сообщить_КонтурEDI(ТекстСообщения);
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Компонент;

КонецФункции // ПолучитьВнешнююКомпонентуКартинкаШтрихкода()

Функция ПолучитьКартинкуШтрихкода(Компонент, ШтрихКод) Экспорт
		
	Если НЕ Компонент.ГрафикаУстановлена Тогда
		Возврат Неопределено;
    КонецЕсли;

	Если Компонент.НайтиШрифт("Tahoma") = Истина Тогда
		Компонент.Шрифт = "Tahoma";
   	Иначе
		Для Сч = 0 По Компонент.КоличествоШрифтов -1 Цикл
        	ТекущийШрифт = Компонент.ШрифтПоИндексу(Сч);
            Если ТекущийШрифт <> Неопределено Тогда
                Компонент.Шрифт = ТекущийШрифт;
				Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
 
	Компонент.РазмерШрифта = 12;

	Компонент.Ширина = 100;
	Компонент.Высота = 90;

	Компонент.АвтоТип = Ложь;
	Компонент.ТипКода = 4;
	
	Компонент.СодержитКС = СтрДлина(ШтрихКод) = 18;

	Компонент.ЗначениеКода = ШтрихКод;

	Если Компонент.Ширина < Компонент.МинимальнаяШиринаКода Тогда
    	Компонент.Ширина = Компонент.МинимальнаяШиринаКода + 10;
    КонецЕсли;
 
	ДвоичныеДанныеКартинки = Компонент.ПолучитьШтрихкод();
 
	Если НЕ ДвоичныеДанныеКартинки = Неопределено Тогда
        Возврат Новый Картинка(ДвоичныеДанныеКартинки);
    КонецЕсли;

	Возврат Неопределено;	
	
КонецФункции // ПолучитьКартинкуШтрихкода()

// ЮрФизЛица

//Зеркальная функция для "ПолучитьКодРегиона": по ISO коду региона возвращает его текстовое представление
Функция ПредставлениеРегионаПоКоду(КодРегионаСтрокой)
	
	Результат = "";
	
	НайденнаяСтрока = ТаблицаКодовРегионов().Найти(КодРегионаСтрокой,"КодСтрока");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		Результат = СокрЛП(НайденнаяСтрока.КраткоеНаименование+" "+НайденнаяСтрока.Сокращение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//Возвращает ISO код региона по текстовому представлению ("Свердловская обл"=>"RU-SVE")
Функция ПолучитьКодРегиона(ЗНАЧ ИмяРегиона)
	
	Если ИмяРегиона = "" Тогда
		Возврат "";
	КонецЕсли;
	
	//приведем синонимы к единому виду:
	
	//ИмяРегиона = СтрЗаменить(ИмяРегиона,"Санкт",		"Ленинград");//продумать.
	ИмяРегиона = СтрЗаменить(ИмяРегиона,"Камчатская",	"Камчатский");
	ИмяРегиона = СтрЗаменить(ИмяРегиона,"Читинская",	"Забайкальского");
	ИмяРегиона = СтрЗаменить(ИмяРегиона,"Пермская",		"Пермский");
	ИмяРегиона = СтрЗаменить(ИмяРегиона,"Горьковская",	"Нижегородская");
	
	ИмяРегионаПоиск = Врег(ИмяРегиона);
	
	Для каждого  Стр Из ТаблицаКодовРегионов() Цикл
		
		Если Найти(ИмяРегионаПоиск, Стр.ПредставлениеДляПоиска)>0 Тогда
			
			Возврат Стр.КодСтрока;      
			
		КонецЕсли;
		
	КонецЦикла;   
	
	Возврат "";
	
КонецФункции

Функция РазобратьАдресУФ(Объект, ВидАдреса = "")
	Если ВидАдреса="" Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	КонецЕсли;
	
	СтруктураАдреса = ПолучитьСтруктуруАдреса();
	
	Если Объект.КонтактнаяИнформация.Количество()=0 Тогда
		Возврат СтруктураАдреса; //не заведен адрес в 1С
	КонецЕсли;
	
	ЗначенияПолей=Объект.КонтактнаяИнформация[0].ЗначенияПолей;
	Если ОпределитьРелизКонфигурации()= "11.0" ИЛИ ОпределитьРелизКонфигурации()="1.4" Тогда //неповезло, старая БСП, затолкаем все в улицу
		КИ_УТ11_0_Строка="";
		Выполнить("КИ_УТ11_0_Строка = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Объект,ВидАдреса)");
		НайденныеСтрокиРоссии = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Страна", "РОССИЯ"));
		
		Если НайденныеСтрокиРоссии.Количество()>0 Тогда 
			СтруктураАдреса.Вставить("ВидАдреса", "Российский");
			СтруктураАдреса.Вставить("Улица", КИ_УТ11_0_Строка);
			СтруктураАдреса.Вставить("КодСтраны", "643");
		ИНаче
			СтруктураАдреса.Вставить("ВидАдреса", "Иностранный");
			СтруктураАдреса.Вставить("Адрес", КИ_УТ11_0_Строка);
		КонецЕсли;
		
	Иначе //УТ11.1, УНФ1.5, БП3.0, ERP2.0
		СтруктураАдресаУФ=СтруктураАдреса;
		ВерсияКонфигурации=Метаданные.Версия;
		МассивСловВерсии=EDI_РазложитьСтрокуВМассивСлов(ВерсияКонфигурации,".");
		Если МассивСловВерсии.Количество()>=3   //11.1.4 - с этой версии переехали в УправлениеКонтактнойИнформацией из КонтактнаяИнформацияСлужебный
			И Число(МассивСловВерсии[0])=11 
			И Число(МассивСловВерсии[1])=1 
			И Число(МассивСловВерсии[2])<=3 Тогда
			Выполнить("СтруктураАдресаУФ=КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(ЗначенияПолей, ВидАдреса)");
		Иначе
			Выполнить("СтруктураАдресаУФ=УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(ЗначенияПолей, ВидАдреса)");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураАдреса,СтруктураАдресаУФ);
		Если СтруктураАдреса.КодСтраны <> "643" и СтруктураАдреса.Улица=Неопределено Тогда 
			СтруктураАдреса.Вставить("ВидАдреса", "Иностранный");
			СтруктураАдреса.Вставить("Адрес", СтруктураАдресаУФ.Представление);
		Иначе
			СтруктураАдреса.Вставить("ВидАдреса", "Российский");
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция РазобратьАдрес(Объект, ТипАдреса = "") Экспорт
	
	СтруктураАдреса = ПолучитьСтруктуруАдреса();
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	// значение по умолчанию
	СтруктураАдреса.Вставить("ВидАдреса", "Российский");
	
	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		
		Если ТипАдреса="Фактический" Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресФактический;
		ИначеЕсли ТипАдреса="Регистрации"
			Или ТипАдреса="Юридический" Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресЮридический;
		КонецЕсли;
	Иначе
			
		ОбъектКИ = Объект;
		
		Если ТипЗнч(Объект) = Тип(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое")) Тогда
			
			Если ИмяКонфигурации1С = "КА" ИЛИ ИмяКонфигурации1С = "УПП" ИЛИ ИмяКонфигурации1С = "БП" Тогда
				Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					Окончание = "ФизЛица";
					ОбъектКИ = Объект.ИндивидуальныйПредприниматель;
				Иначе
					Окончание = "Организации";
				КонецЕсли;
			Иначе
				Окончание = "Организации";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
		КонецЕсли;
	
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание].ПолучитьОбъект().Ссылка;

	КонецЕсли;
	
	//УФ - без всяких запросов
	Если Лев(ИмяКонфигурации1С,3)= "УФ_" Тогда 
		Возврат РазобратьАдресУФ(Объект, ВидАдреса);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", ОбъектКИ);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Поле1 КАК Индекс,
	|	КонтактнаяИнформация.Поле2 КАК Область,
	|	КонтактнаяИнформация.Поле3 КАК Район,
	|	КонтактнаяИнформация.Поле4 КАК Город,
	|	КонтактнаяИнформация.Поле5 КАК НаселенныйПункт,
	|	КонтактнаяИнформация.Поле6 КАК Улица,
	|	КонтактнаяИнформация.Поле7 КАК Дом,
	|	КонтактнаяИнформация.Поле8 КАК Корпус,
	|	КонтактнаяИнформация.Поле9 КАК Квартира,
	|	КонтактнаяИнформация.Поле10
	// |,Регионы.КодРегионаВКоде
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			АдресныйКлассификатор.КодРегионаВКоде КАК КодРегионаВКоде,
	//|			АдресныйКлассификатор.Наименование КАК Наименование
	//|		ИЗ
	//|			РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	//|		ГДЕ
	//|			АдресныйКлассификатор.ТипАдресногоЭлемента = 1) КАК Регионы
	//|		ПО (КонтактнаяИнформация.Поле2 ПОДОБНО Регионы.Наименование + ""%"")
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда 
		
		Если 	Выборка.Область = "" и 
			Выборка.Район = "" и 
			Выборка.Город = "" и 
			Выборка.НаселенныйПункт = "" и 
			Выборка.Улица = "" и  
			Выборка.Дом = "" и 
			Выборка.Корпус = "" и 
			Выборка.Квартира = "" Тогда 
			
			СтруктураАдреса.Вставить("КодСтраны",  ?(ЗначениеЗаполнено(Выборка.индекс), Справочники.КлассификаторСтранМира.НайтиПоНаименованию(Выборка.Индекс).Код, "") );
			СтруктураАдреса.Вставить("Адрес", 		СтрЗаменить(Выборка.Представление, Выборка.Индекс, ""));
			
			СтруктураАдреса.Вставить("ВидАдреса", "Иностранный"); 
			
		Иначе 
			
			СтруктураАдреса.Вставить("Индекс", 			Выборка.Индекс);
			СтруктураАдреса.Вставить("Регион", 			"");
			СтруктураАдреса.Вставить("Район", 			Выборка.Район);
			СтруктураАдреса.Вставить("Город", 			Выборка.Город);
			СтруктураАдреса.Вставить("НаселенныйПункт", Выборка.НаселенныйПункт);
			СтруктураАдреса.Вставить("Улица", 			Выборка.Улица);
			Дом = Выборка.Дом;
			Если ЗначениеЗаполнено(Выборка.Корпус) Тогда
				Дом = Дом + " "+СокрЛП(Выборка.Корпус);
			КонецЕсли;
			СтруктураАдреса.Вставить("Дом", 			Дом);
			//СтруктураАдреса.Вставить("Корпус", 		Выборка.Корпус);
			СтруктураАдреса.Вставить("Квартира", 		Выборка.Квартира);
			
			СтруктураАдреса.Вставить("КодСтраны");
			СтруктураАдреса.Вставить("Адрес");
			
			Если ЗначениеЗаполнено(Выборка.Область) Тогда 
				СтруктураАдреса.Вставить("Регион", ПолучитьКодРегиона(Выборка.Область));
			КонецЕсли;	
			
			СтруктураАдреса.Вставить("ВидАдреса", "Российский");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат СтруктураАдреса;
	
КонецФункции 

Функция ПолучитьСтруктуруАдреса()
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("Регион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселенныйПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Квартира");
	
	СтруктураАдреса.Вставить("КодСтраны");
	СтруктураАдреса.Вставить("Адрес");
	
	СтруктураАдреса.Вставить("ВидАдреса");
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьФИО(Объект,ДатаДок)
	
	Фамилия		= "";
	Имя			= "";
	Отчество	= "";
	
	
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		
		ФИО = Неопределено;
		
		ЮрФизЛицо = Объект;
		Если ИмяКонфигурации1С = "КА" ИЛИ ИмяКонфигурации1С = "УПП"  Тогда
			ЮрФизЛицо = Объект.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
		Если ИмяКонфигурации1С = "БП" Тогда
			
			Выполнить("ОтветственыеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(ЮрФизЛицо, ТекущаяДата());
			|ФИО = ОтветственыеЛицаОрганизации.РуководительФИО;");
			
		Иначе
			
			Попытка
				Выполнить("ФИО	= ФормированиеПечатныхФорм.ФамилияИмяОтчество(ЮрФизЛицо, ДатаДок);");
			Исключение
				Выполнить("ФИО	= ФамилияИмяОтчество(ЮрФизЛицо, ДатаДок);");
			КонецПопытки;
			
		КонецЕсли;
		
		Фамилия		= ФИО.Фамилия;
		Имя			= ФИО.Имя;
		Отчество	= ФИО.Отчество;
		
	КонецЕсли;
	
	Если СокрЛП(Фамилия)+СокрЛП(Имя)+СокрЛП(Отчество) = "" Тогда
		
		// разложим строку
		
		ФИО = Новый СписокЗначений;
		Стр = СокрЛП(Объект.НаименованиеПолное);
		Пока Истина Цикл
			Поз = Найти(Стр," ");
			Если Поз=0 Тогда
				ФИО.Добавить(СокрЛП(Стр));
				Прервать;
			КонецЕсли;
			ФИО.Добавить(СокрЛП(Лев(Стр,Поз-1)));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
		
		ФИО.Количество();
		
		Фамилия  = СокрЛП(?(0 < ФИО.Количество(), ФИО.Получить(0).Значение, ""));
		Имя		 = СокрЛП(?(1 < ФИО.Количество(), ФИО.Получить(1).Значение, ""));
		Отчество = "";                                                  
		
		Если ФИО.Количество() > 2 Тогда 
			// а вот отчество бывает и не из одного слова				
			Для Сч = 3 По ФИО.Количество() Цикл
				Отчество = Отчество + ФИО.Получить(Сч-1).Значение + " ";
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(Отчество) Тогда
				Отчество = Лев(Отчество,СтрДлина(Отчество)-1);
			КонецЕсли;
		КонецЕсли; 
		
		Отчество = СокрЛП(Отчество);		
		
	КонецЕсли;
	
	ФИО = Новый  Структура;
	ФИО.Вставить("Фамилия",		Фамилия);
	ФИО.Вставить("Имя",			Имя);
	ФИО.Вставить("Отчество",	Отчество);
	
	Возврат ФИО;
	
КонецФункции

Функция ПреобразоватьЮрФизЛицо_1С_в_EDI(Объект,ТипАдреса,ТолькоGLN = Ложь) Экспорт
	
	ЮрФизЛицо = Новый Структура;
	ЮрФизЛицо.Вставить("Вид"); // ЮрЛицо ФизЛицо ТолькоGLN
	ЮрФизЛицо.Вставить("GLN");
	ЮрФизЛицо.Вставить("ИНН");
	ЮрФизЛицо.Вставить("КПП");
	
	ЮрФизЛицо.Вставить("Наименование");
	
	ЮрФизЛицо.Вставить("Фамилия");
	ЮрФизЛицо.Вставить("Имя");
	ЮрФизЛицо.Вставить("Отчество");
	
	ЮрФизЛицо.Вставить("ТипАдреса");   // Юридический Фактический
	ЮрФизЛицо.Вставить("Адрес",ПолучитьСтруктуруАдреса());
	
	ЮрФизЛицо.Вставить("Телефон");
	
	ЮрФизЛицо.Вставить("Банк");
	ЮрФизЛицо.Вставить("БИК");
	ЮрФизЛицо.Вставить("НомерСчета");
	
	ЮрФизЛицо.Вставить("Руководитель");
	ЮрФизЛицо.Вставить("ГлавныйБухгалтер");
	ЮрФизЛицо.Вставить("КодВСистемеПокупателя");
	
	GLN = "";
	
	ТипОбъекта_НашейТочкиДоставки = ПолучитьТипЗначенияОбъекта("ТочкаДоставкиСвоя");
	ТипОбъекта_НашейСтороннейТочкиДоставки = ПолучитьКонстантуEDI("СвойСправочникТочекДоставки");
	
	Если ТипЗнч(Объект) = Тип(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое")) Тогда
		
		GLN = ПолучитьЗначениеСвойстваОбъектаEDI(Объект, "GLN_Организации");		
		
	ИначеЕсли ТипЗнч(Объект) = Тип(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее")) Тогда
		
		GLN = ПолучитьЗначениеСвойстваОбъектаEDI(Объект, "GLN_Контрагента");	
		
		Если GLN = Неопределено Тогда
			ТочкаДоставки = НайтиОбъектПоЗначениюСвойства("ЮрФизЛицо_ТочкиДоставки",Объект);
			Если ЗначениеЗаполнено(ТочкаДоставки) Тогда
				ТочкаДоставкиПолностью = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",ТочкаДоставки);
				GLN = ТочкаДоставкиПолностью.GLN;
				//на рефакторинг: избыточность   //конвертация
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Объект) = Тип(ТипОбъекта_НашейТочкиДоставки) Тогда
		
		GLN = ПолучитьЗначениеСвойстваОбъектаEDI(Объект, "GLN_НашейТочкиДоставки");	
		
		ЮрФизЛицо.Вставить("GLN", GLN);
		Возврат ЮрФизЛицо;
		
	ИначеЕсли ЗначениеЗаполнено(ТипОбъекта_НашейСтороннейТочкиДоставки) И ТипЗнч(Объект) = Тип("СправочникСсылка."+ТипОбъекта_НашейСтороннейТочкиДоставки) Тогда
		
		ТочкаДоставки = НайтиОбъектПоЗначениюСвойства("СвойСправочник_ТочкиДоставки",Объект);
		Если ЗначениеЗаполнено(ТочкаДоставки) Тогда 
			ЮрФизЛицо.Вставить("GLN", ТочкаДоставки.GLN);                  
			Возврат ЮрФизЛицо;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("Строка") Тогда
		
		Возврат ЮрФизЛицо;
		
	КонецЕсли;
	
	ЮрФизЛицо.Вставить("GLN", GLN);
	
	Если ТолькоGLN Тогда
		Возврат ЮрФизЛицо;
	КонецЕсли;
	
	СведенияОЮрФизЛице = Неопределено;
	
	Попытка
		Если ИмяКонфигурации1С = "УФ_УТ" Тогда
			Выполнить("СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект,ТекущаяДата());");
		ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
			Выполнить("СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект,ТекущаяДата());");
		ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда  
			Выполнить("СведенияОЮрФизЛице = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Объект,ТекущаяДата());");
		Иначе //все конфигурации на обычных формах
			Выполнить("СведенияОЮрФизЛице = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Объект,ТекущаяДата());");
		КонецЕсли;
	Исключение
		Выполнить("СведенияОЮрФизЛице = СведенияОЮрФизЛице(Объект,ТекущаяДата());");
	КонецПопытки;
	
	ЮрФизЛицо.Вставить("Наименование",	СведенияОЮрФизЛице.ПолноеНаименование);
	
	ЮрФизЛицо.Вставить("ИНН",			СведенияОЮрФизЛице.ИНН);
	ЮрФизЛицо.Вставить("КПП",			СведенияОЮрФизЛице.КПП);
	
	ЮрФизЛицо.Вставить("Телефон",		СведенияОЮрФизЛице.Телефоны);
	
	Если НЕ ИмяКонфигурации1С = "Розница" Тогда
		
		ЮрФизЛицо.Вставить("Банк",			СокрЛП(СведенияОЮрФизЛице.Банк));
		ЮрФизЛицо.Вставить("БИК",			СведенияОЮрФизЛице.БИК);
		ЮрФизЛицо.Вставить("НомерСчета",	СведенияОЮрФизЛице.НомерСчета);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Если ИмяКонфигурации1С = "ТКПТ" Тогда
			Если (ТипЗнч(Объект)=Тип("СправочникСсылка.Организации")) ИЛИ
				((ТипЗнч(Объект)=Тип("СправочникСсылка.Контрагенты")) И (Объект.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо)) Тогда
				Вид = "ЮрЛицо";
			Иначе
				Вид = "ФизЛицо";
			КонецЕсли;
		ИначеЕсли ИмяКонфигурации1С="УФ_БП" Тогда
			Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				Вид = "ЮрЛицо";
			Иначе
				Вид = "ФизЛицо";
			КонецЕсли;
		ИначеЕсли ИмяКонфигурации1С="УФ_УНФ" И ОпределитьРелизКонфигурации()="1.6" Тогда
			Если (ТипЗнч(Объект)=Тип("СправочникСсылка.Организации") И Объект.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) 
				ИЛИ (ТипЗнч(Объект)=Тип("СправочникСсылка.Контрагенты")	И Объект.ВидКонтрагента=Перечисления.ВидыКонтрагентов.ЮридическоеЛицо) Тогда
				Вид = "ЮрЛицо";
			Иначе
				Вид = "ФизЛицо";
			КонецЕсли;
		Иначе	
			Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				Вид = "ЮрЛицо";
			Иначе
				Вид = "ФизЛицо";
			КонецЕсли;
		КонецЕсли;
		
		ЭтоНерезидент = Ложь;
		ИмяСправочникаКонтрагенты = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее",,Истина);
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка."+ИмяСправочникаКонтрагенты) Тогда
			Если Метаданные.Справочники[ИмяСправочникаКонтрагенты].Реквизиты.Найти("НеЯвляетсяРезидентом")<>Неопределено Тогда
				ЭтоНерезидент = Объект.НеЯвляетсяРезидентом;
			КонецЕсли;	
			Если ЭтоНерезидент Тогда
				Вид =  "Нерезидент";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЮрФизЛицо.Вставить("Вид",Вид);
	
	Если Вид = "ФизЛицо" Тогда
		
		ФИО = ПолучитьФИО(Объект,ТекущаяДата());
		
		ЮрФизЛицо.Вставить("Фамилия",	ФИО.Фамилия);
		ЮрФизЛицо.Вставить("Имя",		ФИО.Имя);
		ЮрФизЛицо.Вставить("Отчество",	ФИО.Отчество);
		
	КонецЕсли;
	
	// адрес структурой
	ЮрФизЛицо.Вставить("ТипАдреса", ТипАдреса);
	ЮрФизЛицо.Вставить("Адрес",		РазобратьАдрес(Объект,ТипАдреса));
	
	Если ТипЗнч(Объект) = Тип(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое")) Тогда
		
		ВторойВариант = Ложь;
		
		Руководители = Новый Структура();
		Руководители.Вставить("Руководитель",		"");
		Руководители.Вставить("ГлавныйБухгалтер",	"");
		
		Попытка
			
			Выполнить("Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Объект, ТекущаяДата());");
			
		Исключение
			
			ВторойВариант = Истина;
			
		КонецПопытки;
		
		Если ВторойВариант Тогда
			
			Попытка
				Выполнить("Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Объект, ТекущаяДата());");
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		ЮрФизЛицо.Вставить("Руководитель",		Руководители.Руководитель);
		ЮрФизЛицо.Вставить("ГлавныйБухгалтер",	Руководители.ГлавныйБухгалтер);
		
	КонецЕсли;
	
	//Если ИспользуетсяКЭШ = Истина Тогда
	//	
	//	НоваяСтрока = Контур_КЭШ.ЮрЛица.Добавить();
	//	НоваяСтрока.Значение1С	= ПолеПоиска;
	//	НоваяСтрока.ЗначениеEDI = ЮрФизЛицо;
	//	
	//КонецЕсли;
	
	Возврат ЮрФизЛицо;
	
КонецФункции

Функция КонвертироватьТоварыEDIв1С(Знач ТаблицаТоваров, Сообщение) Экспорт
	
	Если ТаблицаТоваров.Колонки.Найти("КодТовараСвойЧисло") = Неопределено Тогда
	
		ТаблицаТоваров.Колонки.Добавить("КодТовараСвойЧисло",Новый ОписаниеТипов("Число"));
		Для Каждого Стр Из ТаблицаТоваров Цикл
			Стр.КодТовараСвойЧисло = Стр.КодТовараСвой;
		КонецЦикла;
		
	КонецЕсли; 
	
	// оставляем поиск соответствия по шк для стороны торговой сети
	РежимРаботы = ОпределитьКемМыЯвляемся(Сообщение);
	ИскатьСоответствиеПоШК = (РежимРаботы = "Покупатель");
	
	//В режиме торговой сети ищем соответствия по регистру "Штрихкоды".
	//В режиме поставщика - по регистру "КонтурEDI_СоответствияТоваров".
	//В режиме поставщика берем основное соответствие
	
	ТекстЗапросаПоРегиструСоответствий = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.GTIN,
	|	Таб.КодТовараСторонний КАК КодТовараСторонний,
	|	Таб.КодЕдиницыИзмеренияEDI КАК КодЕдиницыИзмеренияEDI,
	|	Таб.КодТовараСвой КАК КодТовараСвой,
	|	Таб.КодТовараСвойЧисло КАК КодТовараСвойЧисло
	|ПОМЕСТИТЬ ТабТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТоваров.GTIN КАК GTIN,
	|	ТабТоваров.КодТовараСторонний КАК КодТовараСторонний,
	|	ТабТоваров.КодТовараСвой КАК КодТовараСвой,
	|	ТабТоваров.КодЕдиницыИзмеренияEDI КАК КодЕдиницыИзмеренияEDI,
	|	КонтурEDI_СоответствияТоваров.Номенклатура,
	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
	|ПОМЕСТИТЬ ТабСоответствий_КонтурEDI
	|ИЗ
	|	ТабТоваров КАК ТабТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	|		ПО (КонтурEDI_СоответствияТоваров.Партнер = &Партнер)
	|			И (ТабТоваров.КодЕдиницыИзмеренияEDI = КонтурEDI_СоответствияТоваров.ЕдиницаEDI
	|				ИЛИ КонтурEDI_СоответствияТоваров.ЕдиницаEDI = """")
	|			И (ВЫБОР
	|				КОГДА &СинхронизироватьТоварыТолькоПоGTIN
	|						И ТабТоваров.GTIN <> """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТабТоваров.КодТовараСторонний = КонтурEDI_СоответствияТоваров.КодТовараПартнера
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &СинхронизироватьТоварыТолькоПоКодуПартнера
	|						И ТабТоваров.КодТовараСторонний <> """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТабТоваров.GTIN = КонтурEDI_СоответствияТоваров.GTIN
	|						ИЛИ ТабТоваров.GTIN = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &БратьОсновноеСоответствие
	|				ТОГДА КонтурEDI_СоответствияТоваров.ОсновноеСоответствие
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	GTIN,
	|	КодТовараСторонний,
	|	КодТовараСвой";
	
	//Теперь вторая часть запроса
	ТекстЗапросаПоШтрихкодам = "";
	
	Если РежимРаботы = "Поставщик" Тогда
		
		//здесь не ищем штрихкоды, что нашли в регистре "КонтурEDI_СоответствияТоваров", то и выкатим
		ТекстЗапросаПоШтрихкодам = 
		"ВЫБРАТЬ
		|	ТаблицаТоваровИсходная.GTIN,
		|	ТаблицаТоваровИсходная.КодТовараСвой,
		|	ТаблицаТоваровИсходная.КодТовараСторонний,
		|	ТаблицаТоваровИсходная.КодЕдиницыИзмеренияEDI,
		|	ТаблицаСоответствий.Номенклатура,
		|	ТаблицаСоответствий.ХарактеристикаНоменклатуры,
		|	ТаблицаСоответствий.ЕдиницаИзмерения,
		|	ТаблицаСоответствий.КоэффициентEDIВ1С
		|ИЗ
		|	ТабТоваров КАК ТаблицаТоваровИсходная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСоответствий_КонтурEDI КАК ТаблицаСоответствий
		|		ПО ТаблицаТоваровИсходная.GTIN = ТаблицаСоответствий.GTIN
		|			И ТаблицаТоваровИсходная.КодТовараСторонний = ТаблицаСоответствий.КодТовараСторонний
		|			И ТаблицаТоваровИсходная.КодТовараСвой = ТаблицаСоответствий.КодТовараСвой
		|			И ТаблицаТоваровИсходная.КодЕдиницыИзмеренияEDI = ТаблицаСоответствий.КодЕдиницыИзмеренияEDI"
		;
		
	ИначеЕсли РежимРаботы = "Покупатель" Тогда//Ищем по РС "Штрихкоды". В Рарусе вроде еще использовались "Прайсы поставщиков".
		
		// Кастомизируемый запрос
		//По умолчанию берем сначала данные из нашего регистра соответствий, потом пытаемся найти по справочнику "Номенклатура", потом - по РС "Штрихкоды"
		ТекстЗапросаПоШтрихкодам = ПолучитьТекстЗапросаКонвертацииТоваровEDIв1С();
		
		//Теперь выберем наилучшее соответствие из всех вариантов, полученных выше
		ТекстЗапросаПоШтрихкодам = ТекстЗапросаПоШтрихкодам+
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"+
		"ВЫБРАТЬ
		|	ТаблицаТоваровИсходная.GTIN КАК GTIN,
		|	ТаблицаТоваровИсходная.КодТовараСторонний КАК КодТовараСторонний,
		|	ТаблицаТоваровИсходная.КодТовараСвой КАК КодТовараСвой,
		|	"""" КАК КодЕдиницыИзмеренияEDI,
		|	1 КАК КоэффициентEDIВ1С,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.ЕдиницаИзмерения
		|ИЗ
		|	ТабТоваров КАК ТаблицаТоваровИсходная
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТ_НайденныеСоответствия.GTIN КАК GTIN,
		|			ВТ_НайденныеСоответствия.КодТовараСторонний КАК КодТовараСторонний,
		|			ВТ_НайденныеСоответствия.КодТовараСвой КАК КодТовараСвой,
		|			ВТ_НайденныеСоответствия.Номенклатура КАК Номенклатура,
		|			ВТ_НайденныеСоответствия.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			ВТ_НайденныеСоответствия.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|		ИЗ
		|			ВТ_НайденныеСоответствия КАК ВТ_НайденныеСоответствия
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ВТ_НайденныеСоответствия.GTIN КАК GTIN,
		|					ВТ_НайденныеСоответствия.КодТовараСторонний КАК КодТовараСторонний,
		|					ВТ_НайденныеСоответствия.КодТовараСвой КАК КодТовараСвой,
		|					МАКСИМУМ(ВТ_НайденныеСоответствия.Приоритет) КАК Приоритет
		|				ИЗ
		|					ВТ_НайденныеСоответствия КАК ВТ_НайденныеСоответствия
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ВТ_НайденныеСоответствия.GTIN,
		|					ВТ_НайденныеСоответствия.КодТовараСторонний,
		|					ВТ_НайденныеСоответствия.КодТовараСвой) КАК МаксимальныйПриоритет
		|				ПО ВТ_НайденныеСоответствия.GTIN = МаксимальныйПриоритет.GTIN
		|					И ВТ_НайденныеСоответствия.КодТовараСторонний = МаксимальныйПриоритет.КодТовараСторонний
		|					И ВТ_НайденныеСоответствия.КодТовараСвой = МаксимальныйПриоритет.КодТовараСвой
		|					И ВТ_НайденныеСоответствия.Приоритет = МаксимальныйПриоритет.Приоритет) КАК ВложенныйЗапрос
		|		ПО ТаблицаТоваровИсходная.GTIN = ВложенныйЗапрос.GTIN
		|			И ТаблицаТоваровИсходная.КодТовараСторонний = ВложенныйЗапрос.КодТовараСторонний
		|			И ТаблицаТоваровИсходная.КодТовараСвой = ВложенныйЗапрос.КодТовараСвой";
		
	КонецЕсли;
	
	ЗапросПоСоответствиям = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	ПартнерСообщения = ПреобразоватьЗначениеДляВнешнегоХранилища(Сообщение.Партнер);
	
	СинхронизироватьТоварыТолькоПоGTIN = 			(ПолучитьЗначениеСвойстваОбъектаEDI(ПартнерСообщения, "СинхронизироватьТоварыТолькоПоGTIN") = Истина);
	СинхронизироватьТоварыТолькоПоКодуПартнера = 	(ПолучитьЗначениеСвойстваОбъектаEDI(ПартнерСообщения, "СинхронизироватьТоварыТолькоПоКодуПартнера") = Истина);
	ЗапросПоСоответствиям.УстановитьПараметр("СинхронизироватьТоварыТолькоПоGTIN",			СинхронизироватьТоварыТолькоПоGTIN);
	ЗапросПоСоответствиям.УстановитьПараметр("СинхронизироватьТоварыТолькоПоКодуПартнера",	СинхронизироватьТоварыТолькоПоКодуПартнера);
	
	ЗапросПоСоответствиям.УстановитьПараметр("Партнер",ПартнерСообщения);
	ЗапросПоСоответствиям.УстановитьПараметр("ТаблицаТоваров",?(ВнешнееХранилище,ПоместитьТаблицуВоВнешнююБазу(ТаблицаТоваров),ТаблицаТоваров));			   
	ЗапросПоСоответствиям.УстановитьПараметр("БратьОсновноеСоответствие",(РежимРаботы = "Поставщик"));//если мы - поставщик, то берем только основное соответствие
	ЗапросПоСоответствиям.УстановитьПараметр("Поставщик",Сообщение.Продавец1С); //если кто-то в кастомном запросе захочет это задействовать (напр.ТКПТ - по прайсам поставщиков).
	
	ЗапросПоСоответствиям.Текст = ТекстЗапросаПоРегиструСоответствий;
	
	//событие, позволяющее переопределить конвертацию EDI в 1С
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимРаботы",	РежимРаботы);
	ДополнительныеПараметры.Вставить("Сообщение",	Сообщение);
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросКонвертацииТоваровEDIв1С",,
		Новый Структура("Запрос,ДополнительныеПараметры",
			ЗапросПоСоответствиям,ДополнительныеПараметры));
			
	Если РезультатПМ <> Неопределено Тогда
		ЗапросПоСоответствиям = РезультатПМ;
	КонецЕсли;
	
	ЗапросПоСоответствиям.Выполнить();//создали  врем.таблицу "ТабСоответствий_КонтурEDI"
	
	
	ЗапросПоСоответствиям.Текст = ТекстЗапросаПоШтрихкодам;
	
	Если ВнешнееХранилище Тогда
		
		//объясним, что какие колонки внешней базы мы будем преобразовывать в Ссылки локальной базы
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура;
		СтруктураКолонокПреобразуемыхВСсылки.Вставить("Номенклатура",				Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("Номенклатура")));
		СтруктураКолонокПреобразуемыхВСсылки.Вставить("ЕдиницаИзмерения", 			Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЕдиницаИзмерения")));
		
		Если Не НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("ХарактеристикаНоменклатуры",	Новый ОписаниеТипов("Строка"));
		Иначе
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("ХарактеристикаНоменклатуры",	Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры")));
		КонецЕсли;	

		ЗапросПоСоответствиям_Локальный = ИнициализироватьЗапрос_КонтурEDI(Ложь);//создадим локальный запрос
		ЗапросПоСоответствиям_Локальный.Текст = ТекстЗапросаПоШтрихкодам;
		//передадим ВТ "ТабСоответствий_КонтурEDI" в локальную базу
		ПередатьВременнуюТаблицуВЛокальныйЗапрос("ТабСоответствий_КонтурEDI"	,ЗапросПоСоответствиям_Локальный,ЗапросПоСоответствиям,СтруктураКолонокПреобразуемыхВСсылки);
		ПередатьВременнуюТаблицуВЛокальныйЗапрос("ТабТоваров"					,ЗапросПоСоответствиям_Локальный,ЗапросПоСоответствиям);
		ЗапросПоСоответствиям = ЗапросПоСоответствиям_Локальный;//подменим запросы
		
	КонецЕсли;
	
	ТЗ = ЗапросПоСоответствиям.Выполнить().Выгрузить();
	
	//Для отладки: ВремТабДляПросмотра = ПросмотретьВременнуюТаблицуЗапроса(ЗапросПоСоответствиям,"ТабТоваров")//"ТабСоответствий_КонтурEDI", "ВТ_НайденныеСоответствия"
	
	ЗапросПоСоответствиям = Неопределено;
	
	Возврат ТЗ;
	
КонецФункции

// конвертация полей и табличной части

//Приемник, Источник - тип "Структура"
//Поля - тип "Строка", перечень полей через запятую
//Копирует каждое Поле из Источника в Приемник, попутно проверяя наличие этих полей в источнике и приемнике
Процедура ЗаполнитьПоляСтруктурыИзИсточника(Приемник,Источник,Поля,НеПроверятьЗаполненность = Истина)
	
	Для Каждого Поле Из EDI_РазложитьСтрокуВМассивСлов(Поля,",") Цикл
		
		Если Приемник.Свойство(Поле) и Источник.Свойство(Поле) Тогда
			Если НеПроверятьЗаполненность или ЗначениеЗаполнено(Источник[Поле]) Тогда
				Приемник[Поле] = Источник[Поле];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

//дополняет в исходящем сообщении поля из предыдущих входящих:
//дата/номер заказа, GLN отправителя/получателя/плательщика/...
Процедура ПослеКонвертацииСообщения1СвEDI(Сообщение)
	
	Если Сообщение.Направление <> "Исходящее" Тогда
		//дозаполняем только исходящие
		Возврат;
	КонецЕсли;	
	
	ПараметрыПолучателя = ПолучитьСписокСвойствEDI("ДополнятьGTINдо13,ОбрезатьЛидирующиеНулиGTIN,СинхронизироватьТоварыТолькоПоGTIN",Сообщение.Получатель1С);
	
	//Обработаем GTIN в табличной части
	Для каждого Стр Из Сообщение.Товары Цикл
		
		//Дополняем до 13 символов по необходимости
		Если ПараметрыПолучателя.ДополнятьGTINдо13 = Истина  Тогда
			Если ЗначениеЗаполнено(Стр.GTIN) Тогда
				Стр.GTIN = Прав("0000000000000"+СокрЛП(Стр.GTIN),13);
			КонецЕсли;
		КонецЕсли;
		
		//И обрезаем лидирующие нули если нужно
		Если ПараметрыПолучателя.ОбрезатьЛидирующиеНулиGTIN = Истина Тогда
			ТекКод = СокрЛП(Стр.GTIN);
			ДлинаКода = СтрДлина(ТекКод);
			Для н = 1 По ДлинаКода Цикл
				Если Лев(ТекКод,1) = "0" Тогда
					ТекКод = Сред(ТекКод,2);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Стр.GTIN = ТекКод;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Сообщение.ДокументСсылка) Тогда

		Возврат;
	КонецЕсли;	
	
	БазовыйДокумент = Сообщение.ДокументСсылка;
	
	Если Сообщение.ТипСообщения = "COINVOIC" ИЛИ
		(Сообщение.ТипСообщения = "INVOIC" И Сообщение.Свойство("Исправление") И Сообщение.Исправление = Истина) Тогда
		
		БазовыйДокумент = Сообщение.Накладная1С;
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "RETREC" Тогда
		
		ВходящийRETDES = ПрочитатьСообщение(,Сообщение.ДокументСсылка,"RETDES","Входящее");

		Если ЗначениеЗаполнено(ВходящийRETDES) Тогда
			
			Сообщение.ОтправительEDI.GLN		= ВходящийRETDES.ПолучательEDI.GLN;
			Сообщение.ПолучательEDI.GLN			= ВходящийRETDES.ОтправительEDI.GLN;
			Сообщение.ПокупательEDI.GLN 		= ВходящийRETDES.ПокупательEDI.GLN;
			Сообщение.ПродавецEDI.GLN			= ВходящийRETDES.ПродавецEDI.GLN;
			Сообщение.ГрузоотправительEDI.GLN	= ВходящийRETDES.ГрузоотправительEDI.GLN;
			Сообщение.ГрузополучательEDI.GLN	= ВходящийRETDES.ГрузополучательEDI.GLN;
			
			Сообщение.ЗаказEDI.Номер			= ВходящийRETDES.ЗаказEDI.Номер;
			Сообщение.ЗаказEDI.Дата				= ВходящийRETDES.ЗаказEDI.Дата;
			
			Сообщение.НакладнаяEDI.Номер		= ВходящийRETDES.ДокументEDI.Номер;
			Сообщение.НакладнаяEDI.Дата			= ВходящийRETDES.ДокументEDI.Дата;

			Сообщение.Партнер			= ВходящийRETDES.Партнер;
			Сообщение.Получатель1С		= ВходящийRETDES.Партнер;
			Сообщение.ТочкаДоставки		= ВходящийRETDES.ТочкаДоставки;
			
		КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	////надо найти ORDERS,ORDRSP,RECADV
	ДокументДляORDERS	= НайтиСвязанныйДокументПоТипуСообщения(БазовыйДокумент,"ORDERS");
	ДокументДляORDRSP	= НайтиСвязанныйДокументПоТипуСообщения(БазовыйДокумент,"ORDRSP");
	ДокументДляRECADV	= НайтиСвязанныйДокументПоТипуСообщения(БазовыйДокумент,"RECADV");
	
	ВходящийORDERS	= Неопределено;
	ИсходящийORDRSP = Неопределено;
	ВходящийRECADV	= Неопределено;
	
	//нашли документ для входящего ORDERS, начнем дозаполнять реквизиты
	//сначала короткие заполнялки
	Если Сообщение.ТипСообщения = "ORDRSP" Тогда
		
		//обрежем дату ответа на заказ. В этом блоке не нужно
		ДатаОтветаНаЗаказ = Сообщение.ДокументEDI.Дата;
		Если ЗначениеЗаполнено(ДатаОтветаНаЗаказ) Тогда
			
			Если ДатаОтветаНаЗаказ>ТекущаяДата() Тогда
				Сообщение.ДокументEDI.Дата = ТекущаяДата();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Сообщение.ТипСообщения = "RECADV"
		Или Сообщение.ТипСообщения = "INVOIC" Тогда
		
		//если в RECADV или INVOIC нет номера заказа, то будем считать, что он совпадает с номером накладной
		Если ПустаяСтрока(Сообщение.ЗаказEDI.Номер) Тогда
			ЗаполнитьЗначенияСвойств(Сообщение.ЗаказEDI, Сообщение.НакладнаяEDI, "Номер,Дата");
		КонецЕсли;
		
	КонецЕсли;
	
	//теперь крупные заполнялки
	

	//попробуем прочитать данные из ORDERS
	ЗаполнилиПоЗаказу = Ложь;

	Если ЗначениеЗаполнено(ДокументДляORDERS) Тогда
		
		ВходящийORDERS = ПрочитатьСообщение(,ДокументДляORDERS,"ORDERS","Входящее");
		
		Если ЗначениеЗаполнено(ВходящийORDERS) Тогда
			СообщениеДляЗаполненияОсновныхРеквизитов = ВходящийORDERS;
			
			ЗаполнилиПоЗаказу = Истина;
			
			Попытка
				Сообщение.ПродавецEDI.КодВСистемеПокупателя 		= ВходящийORDERS.ПродавецEDI.КодВСистемеПокупателя;
				Сообщение.ГрузополучательEDI.КодВСистемеПокупателя 	= ВходящийORDERS.ГрузополучательEDI.КодВСистемеПокупателя;
			Исключение
			КонецПопытки;
			Попытка
				Если ВходящийORDERS.Свойство("Контракт") И Сообщение.Свойство("Контракт")Тогда 
					Сообщение.Контракт								= ВходящийORDERS.Контракт;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		
		//Удалить 
		//блок, все давно вынесено в ОпределитьДатуПоставки - там полный алгоритм, который вызывается в том числе на подготовить уведомление об отгрузке
		//Если Сообщение.ТипСообщения = "DESADV" Тогда
		//	//дату поставки в DESADV протянем из входящего ORDERS
		//	//надо бы вытянуть наружу, чтоб везде заполнялось
		//	ИсходящийORDRSP = ПрочитатьСообщение(,ДокументДляORDRSP,"ORDRSP","Исходящее");
		//	
		//	Если ЗначениеЗаполнено(ИсходящийORDRSP) И ЗначениеЗаполнено(ИсходящийORDRSP.ДатаПоставки) Тогда
		//		Сообщение.ДатаПоставки = ИсходящийORDRSP.ДатаПоставки;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	//попробуем прочитать данные из RECADV
	Если НЕ ЗаполнилиПоЗаказу И ЗначениеЗаполнено(ДокументДляRECADV) Тогда
		
		ВходящийRECADV = ПрочитатьСообщение(,ДокументДляRECADV,"RECADV","Входящее");

		СообщениеДляЗаполненияОсновныхРеквизитов = ВходящийRECADV;
		
		Если НЕ СообщениеДляЗаполненияОсновныхРеквизитов=Неопределено
			И ЗначениеЗаполнено(ВходящийRECADV.ЗаказEDI.Номер) Тогда
			
			ЗаполнитьЗначенияСвойств(Сообщение.ЗаказEDI, ВходящийRECADV.ЗаказEDI, "Номер,Дата");
			
		КонецЕсли;
		
	КонецЕсли;
	
	//возьмем отправителя, получателя, плательщика и т.д. из полученного ORDERS/RECADV, смотря что нашли
	Если ЗначениеЗаполнено(СообщениеДляЗаполненияОсновныхРеквизитов) Тогда
		
		//ОтправительEDI,ПолучательEDI поменяем местами
		ЗаполнитьПоляСтруктурыИзИсточника(Сообщение.ОтправительEDI,	СообщениеДляЗаполненияОсновныхРеквизитов.ПолучательEDI,		"GLN",	Ложь);
		ЗаполнитьПоляСтруктурыИзИсточника(Сообщение.ПолучательEDI,	СообщениеДляЗаполненияОсновныхРеквизитов.ОтправительEDI,	"GLN",	Ложь);
		
		//следующие реквизиты сообщения скопируем "как есть"
		КопируемыеРеквизиты = "ПокупательEDI,ПродавецEDI,ПлательщикEDI,ГрузополучательEDI,КонечныйГрузополучательEDI,ПромежуточныйГрузополучательEDI";
		
		Для Каждого Поле Из EDI_РазложитьСтрокуВМассивСлов(КопируемыеРеквизиты,",") Цикл
			Если Сообщение.Свойство(Поле) И СообщениеДляЗаполненияОсновныхРеквизитов.Свойство(Поле) И Не ПустаяСтрока(СообщениеДляЗаполненияОсновныхРеквизитов[Поле].GLN) Тогда
				Сообщение[Поле].GLN = СообщениеДляЗаполненияОсновныхРеквизитов[Поле].GLN;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьПоляСтруктурыИзИсточника(Сообщение, СообщениеДляЗаполненияОсновныхРеквизитов, "НомерСерииЗаказов");
		
		Если ПараметрыПользователяEDI.НеБратьАдресаПартнераИз1С <> Истина Тогда
			АдресГрузополучателя = СообщениеДляЗаполненияОсновныхРеквизитов.ГрузополучательEDI.Адрес;
			Если ЗначениеЗаполнено(АдресГрузополучателя.Улица) И ЗначениеЗаполнено(АдресГрузополучателя.Регион) Тогда
				Сообщение.ГрузополучательEDI.Адрес = АдресГрузополучателя;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПользователяEDI.НеБратьАдресаПартнераИз1С <> Истина Тогда
			
			Если Сообщение.ТипСообщения = "ALCRPT" 
				И ЗначениеЗаполнено(ВходящийORDERS) Тогда
				
				Сообщение.ПокупательEDI			= ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ВходящийORDERS.ПокупательEDI));
				Сообщение.ГрузополучательEDI	= ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ВходящийORDERS.ГрузополучательEDI));
				
				Если НЕ ЗначениеЗаполнено(Сообщение.ГрузополучательEDI.ИНН) Тогда
					ЗаполнитьЗначенияСвойств(Сообщение.ГрузополучательEDI,Сообщение.ПокупательEDI,"ИНН,КПП");
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ПараметрыПолучателя.СинхронизироватьТоварыТолькоПоGTIN = Истина Тогда
			
			// будем брать код товара покупателя из соответствующего входящего сообщения
			// считаем, что во входящем заказе не может быть несколько товаров с одинаковым GTIN и разными buyer кодами
			Для Каждого Стр Из Сообщение.Товары Цикл
				НайденнаяСтрока = СообщениеДляЗаполненияОсновныхРеквизитов.Товары.Найти(Стр.GTIN,"GTIN");
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Стр.КодТовараПокупателя = НайденнаяСтрока.КодТовараПокупателя;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;	
	
	Сообщение.ТочкаДоставки = НайтиОбъектПоЗначениюСвойства("GLN_ТочкиДоставки",Сообщение.ГрузополучательEDI.GLN);
		
	Если Сообщение.ТипСообщения = "INVOIC" ИЛИ Сообщение.ТипСообщения = "COINVOIC" Тогда
		
		Если НЕ ЗначениеЗаполнено(Сообщение.ГрузоотправительEDI.GLN) Тогда
			
			Сообщение.ГрузоотправительEDI.GLN = Сообщение.ПродавецEDI.GLN;
			
		КонецЕсли;
		
		//заполним номер и дату приемки
		//здесь мы  снова ищем входящий RECADV
		Если Не ЗначениеЗаполнено(ВходящийRECADV) Тогда
			ВходящийRECADV = ПрочитатьСообщение(,ДокументДляRECADV,"RECADV","Входящее");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВходящийRECADV) Тогда
			Если Сообщение.Свойство("ПриемкаEDI") и ВходящийRECADV.Свойство("ДокументEDI") Тогда
				ЗаполнитьПоляСтруктурыИзИсточника(Сообщение.ПриемкаEDI,		ВходящийRECADV.ДокументEDI,	"Дата,Номер");
				ЗаполнитьПоляСтруктурыИзИсточника(Сообщение,				ВходящийRECADV,				"НомерПриемкиПокупателя");
			КонецЕсли;
		КонецЕсли;
		
		//заполним номер и дату ответа на заказ
		//здесь мы  снова ищем исходящий ORDRSP
		Если Не ЗначениеЗаполнено(ИсходящийORDRSP) Тогда
			ИсходящийORDRSP = ПрочитатьСообщение(,ДокументДляORDRSP,"ORDRSP","Исходящее");
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ИсходящийORDRSP) Тогда 
			Если Сообщение.Свойство("ОтветНаЗаказEDI") и ИсходящийORDRSP.Свойство("ДокументEDI") Тогда 
				ЗаполнитьПоляСтруктурыИзИсточника(Сообщение.ОтветНаЗаказEDI,	ИсходящийORDRSP.ДокументEDI,	"Дата,Номер");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//для ИСФ/КСФ требуется особенное заполнение полей "Номер/дата документа"
	Если ЕстьКоррИспрСФ И (Сообщение.ТипСообщения = "INVOIC" ИЛИ Сообщение.ТипСообщения = "COINVOIC") Тогда
		
		Если ЗначениеЗаполнено(Сообщение.СчетФактура1С) Тогда
			Если ТипЗнч(Сообщение.СчетФактура1С) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				
				Если Сообщение.СчетФактура1С.Исправление Тогда
					
					Сообщение.СчетФактураEDI.Вставить("Исправление",		Истина);
					Сообщение.СчетФактураEDI.Вставить("НомерИсправления",	Сообщение.СчетФактура1С.НомерИсправления);
					Сообщение.СчетФактураEDI.Вставить("ДатаИсправления",	Сообщение.СчетФактура1С.Дата);
					
					Если Сообщение.ТипСообщения = "INVOIC" Тогда
						Сообщение.ДокументEDI.Номер = Сообщение.СчетФактураEDI.Номер;
						Сообщение.ДокументEDI.Дата	= Сообщение.СчетФактураEDI.Дата;
					КонецЕсли;
					
				КонецЕсли;
				
				//протянем ID из Диадока для ИСФ и КСФ
				Если Сообщение.СчетФактура1С.Исправление
					Или Сообщение.ТипСообщения = "COINVOIC" Тогда
					
					ИсходныеID = ПолучитьСписокСвойствEDI("messageID,invoiceId",Сообщение.СчетФактура1С);
					Если ЗначениеЗаполнено(СокрЛП(ИсходныеID.messageID)) И ЗначениеЗаполнено(СокрЛП(ИсходныеID.invoiceId)) Тогда
						Сообщение.СчетФактураEDI.Вставить("ДиадокID",СокрЛП(ИсходныеID.messageID)+":"+СокрЛП(ИсходныеID.invoiceId));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		//Если это исправление - то укажем нужный номер (может быть Исправление Корректировки или Исправление Исправления)
		Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда
			Если ТипЗнч(Сообщение.Документ1С) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				Если Сообщение.Документ1С.Исправление Тогда
					Если Сообщение.ТипСообщения = "INVOIC" Тогда
						Если ИмяКонфигурации1С="УФ_УТ" Тогда
							Сообщение.ДокументEDI.Номер = Сообщение.Документ1С.СчетФактураОснование.Номер;
							Сообщение.ДокументEDI.Дата	= Сообщение.Документ1С.СчетФактураОснование.Дата;
						Иначе
							Сообщение.ДокументEDI.Номер = Сообщение.Документ1С.НомерИсходногоДокумента;
							Сообщение.ДокументEDI.Дата	= Сообщение.Документ1С.ДатаИсходногоДокумента;
						КонецЕсли;
					Иначе
						ВидСФКорректировочный = Ложь;
						Если ИмяКонфигурации1С="УФ_УТ" Тогда
							Выполнить("ВидСФКорректировочный = Сообщение.Документ1С.Корректировочный");
						Иначе
							Выполнить("ВидСФКорректировочный = (Сообщение.Документ1С.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный)");
						КонецЕсли;
						
						Если ВидСФКорректировочный Тогда
							//исправление корректировки
							Если ИмяКонфигурации1С="УФ_УТ" Тогда
								Сообщение.ДокументEDI.Номер = Сообщение.Документ1С.СчетФактураОснование.Номер;
								Сообщение.ДокументEDI.Дата	= Сообщение.Документ1С.СчетФактураОснование.Дата;
							Иначе
								Сообщение.ДокументEDI.Номер = Сообщение.Документ1С.НомерИсправляемогоКорректировочногоДокумента;
								Сообщение.ДокументEDI.Дата	= Сообщение.Документ1С.ДатаИсправляемогоКорректировочногоДокумента;
							КонецЕсли;
						Иначе
							//исправление исправления
							Если ИмяКонфигурации1С="УФ_УТ" Тогда
								Сообщение.ДокументEDI.Номер = Сообщение.Документ1С.СчетФактураОснование.Номер;
								Сообщение.ДокументEDI.Дата	= Сообщение.Документ1С.СчетФактураОснование.Дата;
							Иначе
								Сообщение.ДокументEDI.Номер = Сообщение.Документ1С.НомерИсходногоДокумента;
								Сообщение.ДокументEDI.Дата	= Сообщение.Документ1С.ДатаИсходногоДокумента;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

//После получения и парсинга входящего сообщения дозаполняет в нем поля:
//Грузополучатель1С, Покупатель1С, ТочкаДоставки, ДатаПоставки, Договор.
Процедура ПослеКонвертацииСообщенияEDIв1С(Сообщение)
	
	КтоМы = ОпределитьКемМыЯвляемся(Сообщение); 
	
	Если КтоМы = "Поставщик" Тогда 
		
		Если ЭтоОбратнаяОтгрузка(Сообщение.ТипСообщения) Тогда
			Сообщение.ТочкаДоставки = Сообщение.Грузоотправитель1С;
		Иначе
			Сообщение.ТочкаДоставки = Сообщение.Грузополучатель1С;
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(Сообщение.ПлательщикEDI.GLN) 
			И ЗначениеЗаполнено(Сообщение.Плательщик1С) Тогда
			//Сообщение.ПокупательEDI = Сообщение.ПлательщикEDI;
			Сообщение.Покупатель1С = Сообщение.Плательщик1С;//костыль для Елисея в свое время.
		КонецЕсли;
		
		//на рефакторинг: убрать в ПринятьВходящееСообщение со временем.
		Если ПараметрыПользователяEDI.ГрузополучательИзЮрФизЛицаТД = Ложь Тогда
			
			Если Сообщение.ТипСообщения = "RETDES" Тогда
				ТочкаДоставкиПартнера 	= "Грузоотправитель1С";
				ЮрФизЛицоПартнера		= "Продавец1С";
			Иначе
				ТочкаДоставкиПартнера 	= "Грузополучатель1С";
				ЮрФизЛицоПартнера		= "Покупатель1С";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение[ТочкаДоставкиПартнера]) Тогда 
				
				ТочкаДоставки = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",Сообщение[ТочкаДоставкиПартнера]); 
				
				Если ЗначениеЗаполнено(ТочкаДоставки.ЮрФизЛицо) Тогда 
					Сообщение[ЮрФизЛицоПартнера] = ТочкаДоставки.ЮрФизЛицо; 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Сообщение.ТипСообщения = "RECADV"
			И Не ЗначениеЗаполнено(Сообщение.ДатаПоставки) 
			И ЗначениеЗаполнено(Сообщение.Накладная1С) Тогда
			
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			Запрос.УстановитьПараметр("Документ", ПреобразоватьЗначениеДляВнешнегоХранилища(Сообщение.Накладная1С));
			
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КонтурEDI_Сообщения.ДатаПоставки
			|ИЗ
			|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			|ГДЕ
			|	КонтурEDI_Сообщения.Документ = &Документ
			|	И КонтурEDI_Сообщения.ТипСообщения = ""DESADV""
			|	И НЕ КонтурEDI_Сообщения.ПометкаУдаления";
			ДатаПоставки = ПолучитьРезультатЗапроса(Запрос, "ДатаПоставки");
			Если ЗначениеЗаполнено(ДатаПоставки) Тогда
				Сообщение.ДатаПоставки = ДатаПоставки;		
			КонецЕсли;
		КонецЕсли;
		
		//в КонвертироватьЗначениеEDIв1с для RECADV мы не конвертируем Сообщение.Документ1с поэтому записываем здесь, т.к. накладную мы уже нашли
		Если Сообщение.ТипСообщения = "RECADV"              
			И Не ЗначениеЗаполнено(Сообщение.Документ1С) 
			И ЗначениеЗаполнено(Сообщение.Накладная1С) Тогда
			Сообщение.Документ1С = Сообщение.Накладная1С;
		КонецЕсли;	
	КонецЕсли;
	
	//БЛОК Сторона СЕТИ
	
	Если Сообщение.ТипСообщения = "INVOIC" 
		И Сообщение.Направление = "Входящее" Тогда
		Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда//если мы загружаем пришедшую СЧФ и оказалось что документ уже есть - проставим его
			Сообщение.ДокументСсылка = Сообщение.Документ1С;
		КонецЕсли;
		Сообщение.ТочкаДоставки = Сообщение.Грузополучатель1С;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ORDRSP" 
		И Сообщение.Направление = "Входящее" Тогда
		Если ЗначениеЗаполнено(Сообщение.Заказ1С) Тогда//если мы загружаем пришедший ответ на заказ и документ-заказ сконвертировался то проставим его
			Сообщение.ДокументСсылка = Сообщение.Заказ1С;
			Сообщение.Документ1С = Сообщение.Заказ1С;
		КонецЕсли;
		Сообщение.ТочкаДоставки = Сообщение.Грузополучатель1С;
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "DESADV" 
		И Сообщение.Направление = "Входящее"
		И ПолучитьТипЗначенияОбъекта("ИсходящийЗаказПоставщику",,Истина) = ПолучитьТипЗначенияОбъекта("ВходящееУведомлениеОбОтгрузке",,Истина) Тогда
		Если ЗначениеЗаполнено(Сообщение.Заказ1С) Тогда//в качестве заказа и документа для desadv выступает один и тот же документ - соотв. мы знаем документ1С для сообщеиня
			Сообщение.ДокументСсылка = Сообщение.Заказ1С;
			Сообщение.Документ1С = Сообщение.Заказ1С;
		КонецЕсли;
		Сообщение.ТочкаДоставки = Сообщение.Грузополучатель1С;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипПоставкиСообщения(Сообщение) Экспорт
	
	//возвращает тип поставки (сток\транзит) из первой строки
	ТипПоставки = "";
	ТабЧасть = Сообщение.Товары;
	Если ТабЧасть.Количество()>0 Тогда
		Если НЕ ТабЧасть.Колонки.Найти("ТипПоставки")=Неопределено Тогда
			ТипПоставки = СокрЛП(ТабЧасть[0].ТипПоставки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипПоставки;
	
КонецФункции

// установка соответствий

//Устарела, грозится исчезнуть (более нигде не вызывается)
Функция Товары_НайтиПоИдентификаторам(ВладелецСпискаТоваров = Неопределено, GTIN = Неопределено, КодТовараПартнера = Неопределено, НашКодТовара = Неопределено, ПоПриоритету = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("GTIN", GTIN);
	
	Запрос.Текст = "ВЫБРАТЬ "+?(ПоПриоритету,"","РАЗЛИЧНЫЕ")+"
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.ЕдиницаИзмерения
	|	"+?(ПоПриоритету,", ВложенныйЗапрос.Порядок КАК Порядок ","") + "
	|ИЗ
	|	(
	|";
	
	ВложенныйЗапрос = "";
	
	Если НЕ ПустаяСтрока(GTIN) Тогда
		
		// уберем поиск соответствий товара по штрихкоду
		
		//Если НЕ ИмяКонфигурации1С = "БП" Тогда
		//	
		//	ВложенныйЗапрос = "ВЫБРАТЬ
		//					|	Штрихкоды.Владелец КАК Номенклатура,
		//					|	Штрихкоды.ХарактеристикаНоменклатуры,
		//					|	Штрихкоды.ЕдиницаИзмерения,
		//					|	3 КАК Порядок
		//					|ИЗ
		//					|	РегистрСведений.Штрихкоды КАК Штрихкоды
		//					|ГДЕ
		//					|	Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
		//					|	И Штрихкоды.Штрихкод = ПОДСТРОКА(&GTIN, 2, 13)";
		//	
		//КонецЕсли;				 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецСпискаТоваров) Тогда
		
		Если ЗначениеЗаполнено(GTIN) Тогда
			
			Если НЕ ПустаяСтрока(ВложенныйЗапрос) Тогда
				
				ВложенныйЗапрос = ВложенныйЗапрос + " Объединить все ";
				
			КонецЕсли;
			
			ВложенныйЗапрос = ВложенныйЗапрос+ "
			|	
			|ВЫБРАТЬ
			|	КонтурEDI_СоответствияТоваров.Номенклатура,
			|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
			|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
			|	2 КАК Порядок
			|ИЗ
			|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
			|ГДЕ
			|	КонтурEDI_СоответствияТоваров.GTIN = &GTIN
			|	И КонтурEDI_СоответствияТоваров.Контрагент = &Контрагент
			|
			|";
				
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодТовараПартнера) Тогда
			
			Если НЕ ПустаяСтрока(ВложенныйЗапрос) Тогда
				
				ВложенныйЗапрос = ВложенныйЗапрос + " Объединить все ";
				
			КонецЕсли;
			
			ВложенныйЗапрос = ВложенныйЗапрос+ "
			|	
			|ВЫБРАТЬ
			|	КонтурEDI_СоответствияТоваров.Номенклатура,
			|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
			|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
			|	1 КАК Порядок
			|ИЗ
			|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
			|ГДЕ
			|	КонтурEDI_СоответствияТоваров.КодТовараПартнера = &КодТовараПартнера
			|	И КонтурEDI_СоответствияТоваров.Контрагент = &Контрагент
			|";
			
			Запрос.УстановитьПараметр("КодТовараПартнера",	КодТовараПартнера);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Контрагент",	ВладелецСпискаТоваров);
		
	КонецЕсли;
	
	Если ВложенныйЗапрос = "" Тогда
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Номенклатура");
		ТЗ.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
		
		Возврат ТЗ;
		
	Иначе
		
		Запрос.Текст = Запрос.Текст+ ВложенныйЗапрос +"
		|) КАК ВложенныйЗапрос "+?(ПоПриоритету,"Упорядочить ПО ВложенныйЗапрос.Порядок", "");
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТЗ;	
	
КонецФункции

//Устарела, грозится исчезнуть (более нигде не вызывается)
Функция Товары_ЗаписатьСоответствие(ВладелецСпискаТоваров, Номенклатура, ХарактеристикаНоменклатуры = Неопределено, ЕдиницаИзмерения, GTIN =  Неопределено, КодТовараПартнера =  Неопределено, НашКодТовара =  Неопределено, Отказ =  Ложь)
	
	Запись = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьМенеджерЗаписи();
	
	Запись.Контрагент					= ВладелецСпискаТоваров;
	Запись.Номенклатура					= Номенклатура;
	Запись.ХарактеристикаНоменклатуры	= ХарактеристикаНоменклатуры;
	Запись.Единица						= ЕдиницаИзмерения;
	
	Запись.GTIN						= GTIN;
	Запись.КодТовараПартнера		= КодТовараПартнера;
	
	Попытка
		Запись.Записать();
	Исключение
		Отказ = Истина;	
	КонецПопытки;
	
КонецФункции

Процедура УстановитьGLN(Ссылка,ИмяСвойства,GLN,Отказ = Ложь)
	
	//на рефакторинг: опасный цикл
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Если НЕ ИмяСвойства = "GLN_ТочкиДоставки" Тогда
			
			Пока Истина Цикл
				
				ТекЗначение = НайтиОбъектПоЗначениюСвойства(ИмяСвойства, GLN);
				
				Если ЗначениеЗаполнено(ТекЗначение) Тогда
					УдалитьЗначениеСвойстваОбъекта(ТекЗначение, ИмяСвойства);
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		УстановитьЗначениеСвойстваОбъекта(Ссылка, ИмяСвойства, GLN);
		
	КонецЕсли;	
	
КонецПроцедуры

//Создадим запрос, в котором уже будут временные таблицы партнеров и их цепочек сообщений
Функция ИнициализироватьЗапросСКэшемПартнеров(ДляВнешнегоХранилища = Ложь,НачалоПериода,КонецПериода,МассивПартнеров)
	
	Если ДляВнешнегоХранилища Тогда
		Запрос = СоединениеСХранилищем.NewObject("Запрос");
		Запрос.МенеджерВременныхТаблиц  = СоединениеСХранилищем.NewObject("МенеджерВременныхТаблиц");
		
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура(
							"Партнер",
							"КонтурEDI_ДополнительныеСправочники"
							);
		
		Запрос.УстановитьПараметр("ТаблицаКэшПартнеров",				ПоместитьТаблицуВоВнешнююБазу(ТаблицаКэшПартнеров,СтруктураКолонокПреобразуемыхВСсылки));
		Запрос.УстановитьПараметр("ТаблицаКэшПартнеровКонтрагентов",	ПоместитьТаблицуВоВнешнююБазу(ТаблицаКэшПартнеровКонтрагентов,СтруктураКолонокПреобразуемыхВСсылки));
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ТаблицаКэшПартнеров",				ТаблицаКэшПартнеров);
		Запрос.УстановитьПараметр("ТаблицаКэшПартнеровКонтрагентов",	ТаблицаКэшПартнеровКонтрагентов);
		
	КонецЕсли;
	
	Если ДляВнешнегоХранилища Тогда
		МассивВнешнейБазы = СоединениеСХранилищем.NewObject("Массив");
		Для Каждого Эл Из МассивПартнеров Цикл
			МассивВнешнейБазы.Добавить(СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Эл));
		КонецЦикла;
		Запрос.УстановитьПараметр("Партнеры",				МассивВнешнейБазы);
	Иначе
		Запрос.УстановитьПараметр("Партнеры",				МассивПартнеров);
	КонецЕсли;	
	
	Запрос.Текст = 
	"Выбрать * Поместить ТаблицаКэшПартнеров из &ТаблицаКэшПартнеров как _ТаблицаКэшПартнеров 
	| Где _ТаблицаКэшПартнеров.Партнер в (&Партнеры) 
	|Индексировать по Партнер,СообщениеБлокирующееORDERS,СообщениеБлокирующееORDRSP,СообщениеБлокирующееDESADV,СообщениеБлокирующееRECADV,СообщениеБлокирующееINVOIC;
	|Выбрать * Поместить ТаблицаКэшПартнеровКонтрагентов из &ТаблицаКэшПартнеровКонтрагентов как _ТаблицаКэшПартнеровКонтрагентов
	| Где _ТаблицаКэшПартнеровКонтрагентов.Партнер в (&Партнеры) 
	| Индексировать по Контрагент, Партнер,СообщениеБлокирующееORDERS,СообщениеБлокирующееORDRSP,СообщениеБлокирующееDESADV,СообщениеБлокирующееRECADV,СообщениеБлокирующееINVOIC";
	//может, и остальные поля индексировать? Надо глянуть, что в соединениях еще участвует
	
	Если ДляВнешнегоХранилища Тогда
		//СоединениеСХранилищем.ВыполнитьЗапросСОтладкой(Запрос);
		Запрос.Выполнить();
	Иначе
		Запрос.Выполнить();
	КонецЕсли;	
	
	//здесь же заполним даты для отбора
	//ну и отборы по партнерам удобно сюда же закинуть
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",КонецПериода);
	
	Возврат Запрос;
	
КонецФункции	

// получение и отправка сообщений

//суффикс БМИ - функция располагалась в базовом модуле интеграции
//с основной функцией большая разница в параметрах, поэтому объединять сложно
Функция ПринятьВходящееСообщение_БМИ(ЗНАЧ Сообщение,ПервоначальнаяЗагрузкаСообщения = Истина) Экспорт//само Сообщение больше не меняем. Данная функция занимается только заполнением документа в 1С по сообщению.
	
	Если НЕ Сообщение = Неопределено Тогда
		Если Сообщение.ТипСообщения = "PORDERS" Тогда
			Возврат ПринятьОбратныйЗаказПоставщика(Сообщение,ПервоначальнаяЗагрузкаСообщения);
		ИначеЕсли Сообщение.ТипСообщения = "ORDERS" Тогда
			Возврат ПринятьЗаказПокупателя(Сообщение,ПервоначальнаяЗагрузкаСообщения);
		ИначеЕсли Сообщение.ТипСообщения = "RECADV" Тогда
			Возврат ПринятьУведомлениеОПриемке(Сообщение);
		ИначеЕсли Сообщение.ТипСообщения = "ORDRSP" Тогда
			Возврат ПринятьОтветНаЗаказ(Сообщение);
		ИначеЕсли Сообщение.ТипСообщения = "DESADV" Тогда		
			Возврат ПринятьУведомлениеОбОтгрузке(Сообщение);
		ИначеЕсли Сообщение.ТипСообщения = "INVOIC" Тогда
			Возврат ПринятьСчетФактуру(Сообщение);
		ИначеЕсли Сообщение.ТипСообщения = "RETANN" ИЛИ Сообщение.ТипСообщения = "RETDES" Тогда
			Возврат ПринятьВозвратТоваров(Сообщение,ПервоначальнаяЗагрузкаСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

//ORDRSP входящий
Функция ПринятьОтветНаЗаказ(Сообщение)
	
	ТипДокументаЗаказПоставщику = ПолучитьТипЗначенияОбъекта("ИсходящийЗаказПоставщику");
	ИмяТипаДокумента = СтрЗаменить(ТипДокументаЗаказПоставщику,"ДокументСсылка.","");
	
	НайденныйДокумент = Сообщение.Заказ1С; // уже искали этот документ при конвертации по полю "Заказ"
	Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда 
		НайденныйДокумент = Документы[ИмяТипаДокумента].НайтиПоНомеру(Сообщение.ЗаказEDI.Номер,ТекущаяДата());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
		
		Если Сообщение.Статус = "Rejected" Тогда
			УстановитьСтатусДокумента(НайденныйДокумент,"ЗаказОтклонен","Заказ");
		ИначеЕсли Сообщение.Статус = "Changed" Тогда
			УстановитьСтатусДокумента(НайденныйДокумент,"ЗаказУточнен","Заказ");
		Иначе
			УстановитьСтатусДокумента(НайденныйДокумент,"ЗаказПодтвержден","Заказ");
		КонецЕсли;
		
		Возврат НайденныйДокумент;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	
КонецФункции

//DESADV входящий
Функция ПринятьУведомлениеОбОтгрузке(Сообщение)
	
	Если ИспользоватьМаппингМетаданных Тогда
		ДокументСсылка = Маппинг_ПринятьУведомлениеОбОтгрузке(Сообщение);
		Возврат ДокументСсылка;
	КонецЕсли;
	
	СтандартнаяОбработкаEDI = Истина;
	Док = ОбработкаСобытияПодключаемогоМодуля("ПринятьУведомлениеОбОтгрузке",СтандартнаяОбработкаEDI,Новый Структура("Сообщение",Сообщение));
	
	Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Док.Ссылка;			
	КонецЕсли;
	
	ТипДокументаORDERS = ПолучитьТипЗначенияОбъекта("ИсходящийЗаказПоставщику",,Истина);
	ТипДокументаDESADV = ПолучитьТипЗначенияОбъекта("ВходящееУведомлениеОбОтгрузке",,Истина);

	ДатаДокумента = Сообщение.ЗаказEDI.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;	
	НайденныйЗаказ = Документы[ТипДокументаORDERS].НайтиПоНомеру(Сообщение.ЗаказEDI.Номер,ДатаДокумента);

	Если ЗначениеЗаполнено(НайденныйЗаказ) Тогда

		ЕстьОтклонения = Ложь;
		ИмяТабЧастиДокумента = "Товары";
		
		//В какой документ грузить? новый или нужно заполнить существующий
		Если ТипДокументаORDERS = ТипДокументаDESADV Тогда
			Док = НайденныйЗаказ.ПолучитьОбъект();
		Иначе
			Док = Документы[ТипДокументаDESADV].СоздатьДокумент();
			Если ИмяКонфигурации1С = "АСТОР" Тогда
				ИмяТабЧастиДокумента = "Состав";
			КонецЕсли;
			Док.Заполнить(НайденныйЗаказ);
			Док.Дата = ТекущаяДата();
		КонецЕсли;
		
		Если ИмяКонфигурации1С = "ТКПТ" Тогда
			
			Док.ВхДокНомер	= Сообщение.ДокументEDI.Номер;
			Док.ВхДокДата	= Сообщение.ДокументEDI.Дата;
			Товары = НайденныйЗаказ.Товары.Выгрузить();
			Товары.Индексы.Добавить("Номенклатура");
		   	флСуммаВключаетНДС = Истина;
		    Если ЗначениеЗаполнено(Док.ТипЦен) Тогда
				ФлСуммаВключаетНДС = Док.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			Док.СтруктурнаяЕдиница = НайденныйЗаказ.СтруктурнаяЕдиница;
			Запрос = Новый Запрос( 
			"ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Значение КАК Склад
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Объект = &Объект
			|	И ЗначенияСвойствОбъектов.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
			|	И ЗначенияСвойствОбъектов.Свойство = &Свойство");
			
			ТекПользователь = Неопределено;
			Выполнить("ТекПользователь = глЗначениеПеременной(""глТекущийПользователь"")");
			Запрос.УстановитьПараметр("Объект", 			ТекПользователь);
			Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Док.СтруктурнаяЕдиница);
			Запрос.УстановитьПараметр("Свойство", 			ПланыВидовХарактеристик.СвойстваОбъектов.Склад);
			Док.Склад = ПолучитьРезультатЗапроса(Запрос, "Склад");
			Док.НомерДокумента	= Сообщение.ДокументEDI.Номер;
			Док.ДатаДокумента	= Сообщение.ДокументEDI.Дата;
			Товары = НайденныйЗаказ.Состав.Выгрузить();
			Товары.Индексы.Добавить("Номенклатура");
			флСуммаВключаетНДС = Истина;
			Попытка
				Выполнить("флУчитыватьНДС = ОмУчетНДС.НДС(Док.Фирма);");
			Исключение
			КонецПопытки;
			
		ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
			Док.ВидОперации 		= Перечисления.ВидыОперацийПриходнаяНакладная.НаСклад;
			Док.ВходящийНомер 		= Сообщение.ДокументEDI.Номер;
			Док.ДатаСчетаФактуры    = Сообщение.ДокументEDI.Дата;	//почему-то реквизит называется "ДатаСчетаФактуры"
			флУчитыватьНДС			= Док.УчитыватьНДС;
			флСуммаВключаетНДС		= Док.СуммаВключаетНДС;
			
		ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
			Док.НомерВходящегоДокумента	= Сообщение.ДокументEDI.Номер;
			Док.ДатаВходящегоДокумента	= Сообщение.ДокументEDI.Дата;
			//флУчитыватьНДС		= Док.УчитыватьНДС;  //не будет использоваться
			флСуммаВключаетНДС	= Док.ЦенаВключаетНДС;
			
		ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
			Док.НомерВходящегоДокумента	= Сообщение.ДокументEDI.Номер;
			Док.ДатаВходящегоДокумента	= Сообщение.ДокументEDI.Дата;
			//флУчитыватьНДС		= Док.УчитыватьНДС;  //не будет использоваться
			флСуммаВключаетНДС	= Док.СуммаВключаетНДС;
			
		Иначе
			Док.НомерВходящегоДокумента	= Сообщение.ДокументEDI.Номер;
			Док.ДатаВходящегоДокумента	= Сообщение.ДокументEDI.Дата;
			флУчитыватьНДС		= Док.УчитыватьНДС;
			флСуммаВключаетНДС	= Док.СуммаВключаетНДС;
			
		КонецЕсли;
		
		Док[ИмяТабЧастиДокумента].Очистить();
				
		Для Каждого Стр Из Сообщение.Товары Цикл
			
			Если ИмяКонфигурации1С = "ТКПТ" или ИмяКонфигурации1С = "АСТОР" Тогда
				// исключаем товары, по которым не смогли найти соответствия
				Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
					Продолжить;
				КонецЕсли;
				// исключаем товар, которого не было в заказе
				Если Товары.Найти(Стр.Номенклатура) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			НоваяСтрока = Док[ИмяТабЧастиДокумента].Добавить();
			НоваяСтрока.Номенклатура		= Стр.Номенклатура;
			
			Если ИмяКонфигурации1С = "УФ_УТ" Тогда
				
				ЗаполнитьСтрокуПоступления_УФ(Док,НоваяСтрока,Стр,НайденныйЗаказ,флСуммаВключаетНДС);
				
			ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда 
				
				ЗаполнитьСтрокуПоступления_УФ_БП(Док,НоваяСтрока,Стр,НайденныйЗаказ,флСуммаВключаетНДС);
				
			Иначе  //Все остальные конфигурации кроме УФ_УТ и УФ_БП
				
				НоваяСтрока.ЕдиницаИзмерения	= Стр.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент			= Стр.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.Количество			= Стр.Количество;
				
				Если флСуммаВключаетНДС Тогда
					НоваяСтрока.Цена			= Стр.ЦенаСНДС;
					НоваяСтрока.Сумма			= Стр.СуммаСНДС;
				Иначе
					НоваяСтрока.Цена			= Стр.ЦенаБезНДС;
					НоваяСтрока.Сумма			= Стр.СуммаБезНДС;
				КонецЕсли;
				
				НоваяСтрока.СтавкаНДС			= Стр.СтавкаНДС1С;
			КонецЕсли;
			
			Если ИмяКонфигурации1С = "Розница" Тогда
				
				Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док, флУчитыватьНДС, флСуммаВключаетНДС);");
				
			ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
				
				//НоваяСтрока.КоличествоБазовое	= Стр.Количество;
				//НоваяСтрока.СуммаНДС 			= Стр.СуммаНДС;
				//НоваяСтрока.СуммаВсего			= Стр.СуммаСНДС;
				//Док.СуммаДокумента 				= Док.СуммаДокумента + НоваяСтрока.СуммаВсего;
				
				Док.ОбработкаРеквизита("Товары.Количество", НоваяСтрока);
				Док.ОбработкаРеквизита("УстановитьРозничнуюЦену", НоваяСтрока);
				НоваяСтрока.СуммаВсего			= Стр.СуммаСНДС;
				Док.ОбработкаРеквизита("Товары.СуммаВсего", НоваяСтрока);
				
			ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
				НоваяСтрока.КоличествоПоДокументу = Стр.Количество;
				Выполнить("ОмРаботаСФормами.РассчитатьСуммуТабЧасти(НоваяСтрока);");
				Выполнить("ОмРаботаСФормами.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док.ВариантРасчетаНДС);");
				Выполнить("ОмРаботаСФормами.РассчитатьВсегоТабЧасти(НоваяСтрока, Док.ВариантРасчетаНДС);");
				
			ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
				
				НоваяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
				
				СвойстваТЧТовары = Новый Структура;
				СвойстваТЧТовары.Вставить("ИмяТЧ", "Товары");
				СвойстваТЧТовары.Вставить("ХарактеристикаНоменклатуры");
				СвойстваТЧТовары.Вставить("ЕдиницаИзмерения");
				СвойстваТЧТовары.Вставить("Цена");
				СвойстваТЧТовары.Вставить("НомерГТД");
				СвойстваТЧТовары.Вставить("СрокГодности");
				СвойстваТЧТовары.Вставить("КатегорияЦен", Справочники.КатегорииЦен.Закупочная);
				
				//Выполнить("тчПриИзмененииКоличестваТабЧасти(НоваяСтрока, Док, СвойстваТЧТовары);");
				Выполнить("тчПриИзмененииСтавкиНДСТабЧасти(НоваяСтрока, Док, СвойстваТЧТовары);");
				
			ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" 
				ИЛИ ИмяКонфигурации1С = "УФ_БП" Тогда
				//специфических действий не требуется
				
			Иначе
				
				Попытка
					Выполнить("НоваяСтрока.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма,флУчитыватьНДС, флСуммаВключаетНДС,УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));");
				Исключение
					Выполнить("НоваяСтрока.СуммаНДС = МодульТиповой_РассчитатьСуммуНДС(НоваяСтрока.Сумма,флУчитыватьНДС, флСуммаВключаетНДС,МодульТиповой_ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));");
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИмяКонфигурации1С = "УФ_БП" Тогда 
			Попытка
				//Появилось где-то между 3.0.36 и 3.0.43 релизом
				Выполнить("СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Док)");
			Исключение
				Если ЗначениеЗаполнено(Док.Организация)
					И ЗначениеЗаполнено(Док.Контрагент)
					И ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
					Выполнить("Документы.ПоступлениеТоваровУслуговаровУслуг.ЗаполнитьСчетаУчетаРасчетов(Док)");
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
		Док.Записать();
		
		Возврат Док.Ссылка;
		
	КонецЕсли;
	
КонецФункции

//RECADV входящий
Функция ПринятьУведомлениеОПриемке(Сообщение)

	НайденныйДокумент = Сообщение.Накладная1С;
	
	Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
		НайденныйДокумент = НайтиИПолучитьНакладную(Сообщение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
		
		Параметры = Новый Структура();
		//Параметры.Вставить("ВходящийЗаказ",СообщениеЗаказ);
		Параметры.Вставить("Действие","ПринятьУведомлениеОПриемке");
		
		DESADV = ПодготовитьИсходящееСообщение("DESADV",НайденныйДокумент,Параметры);
		//тут надо пересчитать обратно
		ПересчитатьТоварыСообщения(DESADV.Товары,DESADV.Получатель1С,"В1С");
		
		
		СтруктураТаблицы1 = ПолучитьСтруктуруТаблицыТоваров();
		СтруктураТаблицы1.Вид			= "Сообщение";
		СтруктураТаблицы1.ТипСообщения	= "RECADV";
		СтруктураТаблицы1.Товары		= Сообщение.Товары;
		
		СтруктураТаблицы2 = ПолучитьСтруктуруТаблицыТоваров();
		СтруктураТаблицы2.Вид			= "Сообщение";
		СтруктураТаблицы2.ТипСообщения	= "DESADV";
		СтруктураТаблицы2.Товары		= DESADV.Товары;
		
		_СверятьВRECADVЦеныИСтавки = ПолучитьЗначениеСвойстваОбъектаEDI(DESADV.Получатель1С, "СверятьВRECADVЦеныИСтавки");
		
		СравниваемыеПоля = Новый СписокЗначений;
		СравниваемыеПоля.Добавить("Количество");
		
		РассчитыватьНДСПриСравнении = Ложь;
		Если _СверятьВRECADVЦеныИСтавки = Истина Тогда
			СравниваемыеПоля.Добавить("ЦенаБезНДС"); 
			СравниваемыеПоля.Добавить("ЦенаСНДС"); 
			РассчитыватьНДСПриСравнении = Истина;
		КонецЕсли;
		
		РезультатСравнения = СравнитьТаблицыТоваров(СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля,РассчитыватьНДСПриСравнении,Истина);
		
		Если РезультатСравнения.Успешно = Истина И НЕ РезультатСравнения.ЕстьРасхождения Тогда
			ЕстьОтклонения = Ложь;
		Иначе
			ЕстьОтклонения = Истина;
		КонецЕсли;	
		
		Если ЕстьОтклонения Тогда
			УстановитьСтатусДокумента(НайденныйДокумент,"НакладнаяПринятЧастично",	"Приемка",Сообщение.СообщениеСсылка);
		Иначе
			УстановитьСтатусДокумента(НайденныйДокумент,"НакладнаяПринятПолностью",	"Приемка",Сообщение.СообщениеСсылка);
		КонецЕсли;	
		
		Возврат НайденныйДокумент;
		
	КонецЕсли;
	
КонецФункции

//RETANN входящий
Функция ПринятьВозвратТоваров(Сообщение,ПервоначальнаяЗагрузкаСообщения = Истина)
	
	Если Сообщение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИД = СокрЛП(Сообщение.ID);
	
	Если ПервоначальнаяЗагрузкаСообщения Тогда
		
		Если ЗначениеЗаполнено(ИД) Тогда
			
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтурEDI_Сообщения.Документ
			|ИЗ
			|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			|ГДЕ
			|	КонтурEDI_Сообщения.ID = &ID";
			
			Запрос.УстановитьПараметр("ID",ИД);
			
			НайденныйДокумент = ПолучитьРезультатЗапроса(Запрос,"Документ");
			
			Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ИспользоватьМаппингМетаданных Тогда
		ДокументСсылка = Маппинг_ПринятьВозвратТоваров(Сообщение,ПервоначальнаяЗагрузкаСообщения);
		Возврат ДокументСсылка;
	КонецЕсли;
	
	ТипЦен				= Неопределено;
	флУчитыватьНДС		= Истина;
	флСуммаВключаетНДС	= Истина;
	
	ДоговорКонтрагента = Сообщение.Договор;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) и ИмяКонфигурации1С<>"УФ_УТ" и ИмяКонфигурации1С<>"УФ_УНФ"  Тогда
		ТипЦен = ДоговорКонтрагента.ТипЦен;
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			
			Если ИмяКонфигурации1С = "БП" Тогда
				ЗначениеРассчитывается = Ложь;
			Иначе
				ЗначениеРассчитывается = ТипЦен.Рассчитывается;
			КонецЕсли;			
			
			Если ТипЗнч(ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") И ЗначениеРассчитывается Тогда
				флСуммаВключаетНДС = ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
			Иначе
				флСуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;
				
	ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) и ИмяКонфигурации1С="УФ_УНФ" Тогда
		
		ВидЦен = ДоговорКонтрагента.ВидЦен;
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			ЗначениеРассчитывается = ВидЦен.РассчитываетсяДинамически;
			флСуммаВключаетНДС = ВидЦен.БазовыйВидЦен.ЦенаВключаетНДС;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда

		// запомним договор по-умолчанию
		УстановитьЗначениеСвойстваОбъекта(Сообщение.Покупатель1С, "GUIDДоговораПоУмолчанию", СокрЛП(ДоговорКонтрагента.УникальныйИдентификатор()));
		
	КонецЕсли;
	
	
	Если ПервоначальнаяЗагрузкаСообщения Тогда
		
		ТипRETANN = ПолучитьТипЗначенияОбъекта("ВходящийВозврат",,Истина);
		
		Если ТипRETANN<>Неопределено и ТипRETANN<>"" Тогда 
			НовыйДокумент = Документы[ТипRETANN].СоздатьДокумент();
		ИначеЕсли ИмяКонфигурации1С="УФ_УТ" Тогда 
			НовыйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		Иначе
			НовыйДокумент = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		КонецЕсли;
		
	Иначе
		
		НовыйДокумент = Сообщение.ДокументСсылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	Попытка
		НовыйДокумент.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	Исключение
	КонецПопытки;
	
	//УФ в отдельное место, иначе станет нечитаемо
	Если ИмяКонфигурации1С= "УФ_УТ" или ИмяКонфигурации1С= "УФ_БП" или ИмяКонфигурации1С= "УФ_УНФ"  Тогда
		СоздатьВозвратУФ(Сообщение, НовыйДокумент);
	иначе
		
		НовыйДокумент.ТипЦен			= ТипЦен;
		НовыйДокумент.УчитыватьНДС		= флУчитыватьНДС;
		НовыйДокумент.СуммаВключаетНДС	= флСуммаВключаетНДС;
		
		НовыйДокумент.Дата = ТекущаяДата();
		
		Если Сообщение.ТипСообщения = "RETDES" Тогда
			НовыйДокумент.Организация	= Сообщение.Покупатель1С;
			НовыйДокумент.Контрагент	= Сообщение.Продавец1С;
		Иначе		
			НовыйДокумент.Организация	= Сообщение.Продавец1С;
			НовыйДокумент.Контрагент	= Сообщение.Покупатель1С;
		КонецЕсли;	
		
		НовыйДокумент.ДоговорКонтрагента = ДоговорКонтрагента;
		
		Если 	//ИмяКонфигурации1С = "УТ_10_2" ИЛИ  //в УТ 10.2 уже "СкладОрдер"
			ИмяКонфигурации1С = "БП" Тогда
			
			НовыйДокумент.Склад = ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
			Попытка
				Выполнить("НовыйДокумент.ЗаполнитьСчетаУчетаРасчетов();");
			Исключение
			КонецПопытки;
		Иначе
			
			НовыйДокумент.СкладОрдер = ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
			
			Если ЗначениеЗаполнено(Сообщение.Заказ1С) Тогда
				Попытка
					НовыйДокумент.Сделка = Сообщение.Заказ1С;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйДокумент.ВалютаДокумента			= Сообщение.Валюта1С;
		НовыйДокумент.КурсВзаиморасчетов		= 1; 
		НовыйДокумент.КратностьВзаиморасчетов	= 1;
		
		Попытка
			Выполнить("НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;");
		Исключение
		КонецПопытки;
		
		Если ЕстьНеобходимыеМетаданные("Документы.ВозвратТоваровОтПокупателя.Реквизиты.Грузополучатель") Тогда
			Если Сообщение.ТипСообщения = "RETDES" Тогда
				Грузополучатель1С = Сообщение.Грузоотправитель1С;
			Иначе
				Грузополучатель1С = Сообщение.Грузополучатель1С;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Грузополучатель1С) Тогда
				ТочкаДоставкиСторонняя		= ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",Грузополучатель1С);
				Если ПараметрыПользователяEDI.ГрузополучательИзЮрФизЛицаТД = Истина Тогда
					НовыйДокумент.Грузополучатель = ТочкаДоставкиСторонняя.ЮрФизЛицо;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Кол = 0;
		
		НовыйДокумент.Товары.Очистить();
		
		//выясним, по всем ли позициям пришла цена
		//критерием будет являться отсутствие и ЦенаБезНДС и ценысндс
		ЦеныПроставлены=истина;
		СписокНоменклатурыБезЦен= новый СписокЗначений;
		
		Для Каждого Стр Из Сообщение.Товары Цикл
			Если Стр.ЦенаСНДС=0 и стр.ЦенаБезНДС=0 тогда
				ЦеныПроставлены=Ложь;
				СписокНоменклатурыБезЦен.Добавить(Стр.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		ТабличкаЦен=Неопределено;
		Если Не ЦеныПроставлены и СписокНоменклатурыБезЦен.Количество()>0  Тогда
			Попытка
				ТипЦеныВДоговоре= Сообщение.Договор.ТипЦен;
				Если ЗначениеЗаполнено(ТипЦеныВДоговоре) Тогда 
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
					|	ЦеныНоменклатурыСрезПоследних.Цена
					|ИЗ
					|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
					|			&Дата,
					|			ТипЦен = &ТипЦен
					|				И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних";
					
					Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатурыБезЦен);
					Запрос.УстановитьПараметр("ТипЦен", ТипЦеныВДоговоре);
					Если Сообщение.ТипСообщения = "RETDES" Тогда
						Запрос.УстановитьПараметр("Дата",?(ЗначениеЗаполнено(Сообщение.ДатаДокумента),Сообщение.ДатаДокумента,ТекущаяДата()));
					Иначе
						Запрос.УстановитьПараметр("Дата",?(ЗначениеЗаполнено(Сообщение.ДатаПоставки),Сообщение.ДатаПоставки,ТекущаяДата()));
					КонецЕсли;	
					
					Результат = Запрос.Выполнить();
					ТабличкаЦен	= Результат.Выгрузить();			
					
				КонецЕсли;
			Исключение
				ТабличкаЦен=Неопределено;
			КонецПопытки;
		КонецЕсли; //составили табличку цен
		
		ЕстьРеквизитЕдиницаИзмерения	= ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"ЕдиницаИзмерения",	"Товары");
		ЕстьРеквизитКачество			= ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"Качество",			"Товары");
		
		Для Каждого Стр Из Сообщение.Товары Цикл
			
			Если Стр.НеЗагружать = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НовыйДокумент.Товары.Добавить();
			
			НоваяСтрока.Номенклатура		= Стр.Номенклатура;
			Если ЕстьРеквизитЕдиницаИзмерения Тогда
				НоваяСтрока.ЕдиницаИзмерения	= Стр.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если НЕ ИмяКонфигурации1С = "БП" Тогда
				НоваяСтрока.Коэффициент			= Стр.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.ХарактеристикаНоменклатуры	= Стр.ХарактеристикаНоменклатуры;
			КонецЕсли;
			
			НоваяСтрока.Количество			= Стр.Количество;
			НоваяСтрока.Цена				= Стр.ЦенаБезНДС;
			НоваяСтрока.Сумма				= Стр.СуммаБезНДС;
			
			Если ЕстьРеквизитКачество Тогда
				НоваяСтрока.Качество			= Справочники.Качество.Новый;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Стр.СтавкаНДС1С) Тогда
				Если  Стр.СтавкаНДС1С=Перечисления.СтавкиНДС.НДС0 и Стр.ЦенаБезНДС=0 и Стр.ЦенаСНДС=0 Тогда 
					Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
						НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
						Стр.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
					КонецЕсли;
				Иначе
					НоваяСтрока.СтавкаНДС			= Стр.СтавкаНДС1С;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
					НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
					Стр.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Стр.ЦенаСНДС) и не ЗначениеЗаполнено(Стр.ЦенаБезНДС) и ТабличкаЦен<>Неопределено Тогда  
				Попытка
					НайденнаяЦенаПоУмолч=ТабличкаЦен.Найти(Стр.Номенклатура,"Номенклатура");
					Если НайденнаяЦенаПоУмолч  <> Неопределено		 Тогда
						Если флСуммаВключаетНДС Тогда
							
							НоваяСтрока.Цена=НайденнаяЦенаПоУмолч.Цена;
							Стр.ЦенаСНДС=НайденнаяЦенаПоУмолч.Цена;
							Стр.СуммаСНДС=НайденнаяЦенаПоУмолч.Цена*Стр.Количество;
						иначе
							НоваяСтрока.Цена=НайденнаяЦенаПоУмолч.Цена;
							Стр.ЦенаБезНДС=НайденнаяЦенаПоУмолч.Цена;
							Стр.СуммаБезНДС=НайденнаяЦенаПоУмолч.Цена*Стр.Количество;
						КонецЕсли;
					КонецЕсли;
				исключение
				КонецПопытки;
			КонецЕсли;
			
			Если флСуммаВключаетНДС Тогда
				
				Если Стр.ЦенаСНДС = 0 Тогда   
					Если Стр.Количество > 0 Тогда
						Если Стр.СуммаСНДС = 0 Тогда
							НоваяСтрока.Цена = (Стр.СуммаБезНДС+Стр.СуммаНДС)/Стр.Количество;
						Иначе
							НоваяСтрока.Цена = Стр.СуммаСНДС/Стр.Количество;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НоваяСтрока.Цена = Стр.ЦенаСНДС;
				КонецЕсли;             
				
				Если Стр.СуммаСНДС = 0 Тогда
					Если Стр.СуммаБезНДС = 0 Тогда
						НоваяСтрока.Сумма = НоваяСтрока.Цена*НоваяСтрока.Количество;
					Иначе
						НоваяСтрока.Сумма = Стр.СуммаБезНДС+Стр.СуммаНДС;
					КонецЕсли;
				Иначе
					НоваяСтрока.Сумма = Стр.СуммаСНДС;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
					
					СтавкаНДС1С = Стр.СтавкаНДС1С;
					
					Если НЕ ЗначениеЗаполнено(СтавкаНДС1С) Тогда
						Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
							СтавкаНДС1С = Стр.Номенклатура.СтавкаНДС;
						КонецЕсли;
					КонецЕсли;
					
					СтавкаНДС = 0;
					Если СтавкаНДС1С = Перечисления.СтавкиНДС.НДС18 Тогда
						СтавкаНДС = 18;
					ИначеЕсли СтавкаНДС1С = Перечисления.СтавкиНДС.НДС10 Тогда
						СтавкаНДС = 10;
					КонецЕсли;
					
					НоваяСтрока.Цена = Стр.ЦенаБезНДС*(100+СтавкаНДС)/100;
					НоваяСтрока.Сумма = НоваяСтрока.Количество*НоваяСтрока.Цена;
					
				КонецЕсли;
				
			Иначе        
				
				Если Стр.ЦенаБезНДС = 0 Тогда   
					Если Стр.Количество > 0 Тогда
						Если Стр.СуммаБезНДС = 0 Тогда
							НоваяСтрока.Цена = (Стр.СуммаСНДС-Стр.СуммаНДС)/Стр.Количество;
						Иначе
							НоваяСтрока.Цена = Стр.СуммаБезНДС/Стр.Количество;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НоваяСтрока.Цена = Стр.ЦенаБезНДС;
				КонецЕсли;             
				
				Если Стр.СуммаБезНДС = 0 Тогда
					Если Стр.СуммаСНДС = 0 Тогда
						НоваяСтрока.Сумма = НоваяСтрока.Цена*НоваяСтрока.Количество;
					Иначе
						НоваяСтрока.Сумма = Стр.СуммаСНДС-Стр.СуммаНДС;
					КонецЕсли;	
				Иначе
					НоваяСтрока.Сумма = Стр.СуммаБезНДС;
				КонецЕсли;      
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И ЗначениеЗаполнено(Стр.ЦенаБезНДС) И ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
				
				СтавкаНДС = Окр((Стр.ЦенаСНДС * 100) / Стр.ЦенаБезНДС-100,0);
				
				Если СтавкаНДС = 18 Тогда
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ИначеЕсли СтавкаНДС = 10 Тогда
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Стр.СуммаНДС = 0 Тогда
				
				Попытка
					Выполнить("НоваяСтрока.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(НоваяСтрока.Сумма,флУчитыватьНДС, флСуммаВключаетНДС,УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));");
				Исключение
					Выполнить("НоваяСтрока.СуммаНДС = МодульТиповой_РассчитатьСуммуНДС(НоваяСтрока.Сумма,флУчитыватьНДС, флСуммаВключаетНДС, МодульТиповой_ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));");
				КонецПопытки;
				
			Иначе
				
				НоваяСтрока.СуммаНДС = Стр.СуммаНДС;
				
			КонецЕсли;
			
			// -) конец расчета с учетом НДС
			
		КонецЦикла;	
		
		Комментарий="";//В некоторых сообщениях может не быть комментария
		Сообщение.Свойство("Комментарий",Комментарий);
		НовыйДокумент.Комментарий = "Загружен из EDI"+?(СокрЛП(Комментарий)<>"",": "+Комментарий,"")+" Номер возврата сети: "+СокрЛП(Сообщение.ДокументEDI.Номер);
		
		НовыйДокумент.Ответственный = ПолучитьТекущегоПользователя1С();
		
		Если ИмяКонфигурации1С = "УТ_10_2" Тогда
			
			Попытка
				Выполнить("НовыйДокумент.ОтражатьВУправленческомУчете	= НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, ""НеОтражатьДокументыВУправленческомУчете"");");
				Выполнить("НовыйДокумент.ОтражатьВБухгалтерскомУчете	= НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, ""НеОтражатьДокументыВБухгалтерскомУчете"");");
				Выполнить("НовыйДокумент.ОтражатьВНалоговомУчете		= НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, ""НеОтражатьДокументыВНалоговомУчете"");");
			Исключение
			КонецПопытки;
			
		ИначеЕсли ИмяКонфигурации1С = "БП" Тогда
			
			Попытка // для БП 1.6
				Выполнить("НовыйДокумент.ОтражатьВНалоговомУчете		= НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""НеОтражатьДокументыВНалоговомУчете"");");
			Исключение
			КонецПопытки;
			
			ЗаполнилиСчета = Истина;
			Попытка
				//заполнение счетов учета таб части
				Для каждого СтрокаТоваров из НовыйДокумент.ТОвары Цикл
					НовыйДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТоваров, "Товары", истина, НовыйДокумент.ОтражатьВНалоговомУчете);
				КонецЦикла;
			Исключение
				ЗаполнилиСчета = Ложь;
			КонецПопытки;
			
			Если НЕ ЗаполнилиСчета Тогда
				Для каждого СтрокаТоваров из НовыйДокумент.ТОвары Цикл
					НовыйДокумент.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТоваров, "Товары", истина);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Попытка
				
				Выполнить("НовыйДокумент.ОтражатьВУправленческомУчете	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОтражатьДокументыВУправленческомУчете"");");
				Выполнить("НовыйДокумент.ОтражатьВБухгалтерскомУчете	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОтражатьДокументыВБухгалтерскомУчете"");");
				Выполнить("НовыйДокумент.ОтражатьВНалоговомУчете		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОтражатьДокументыВНалоговомУчете"");");
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаСобытияПодключаемогоМодуля("ПриЗагрузкеВходящегоСообщения",,Новый Структура("Сообщение,ДокументСсылка",Сообщение,НовыйДокумент));
	
	НовыйДокумент.Записать();
	
	СсылкаНаДокумент = НовыйДокумент.Ссылка;
	
	Возврат СсылкаНаДокумент;
	
КонецФункции

Функция СоздатьВозвратУФ(Сообщение,Док)
	
	Если ИмяКонфигурации1С="УФ_УНФ" Тогда   //в УНФ пока никто не просил retann
		ВызватьИсключение("Не поддерживается в текущем релизе.");
	КонецЕсли;
	
	ИспользуютсяХарактеристики=НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры;
	
	Партнер = Сообщение.Партнер;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяКонфигурации1С = "УФ_БП" Тогда 
		Док.ВидОперации					= Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
		Док.ДеятельностьНаПатенте		= Ложь;
		Док.Склад						= ПолучитьГлобальноеСвойство("СоздаваемыйДокументСклад");
		Док.ВалютаДокумента				= Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Док.НомерВходящегоДокумента		= Сообщение.ДокументEDI.Номер;
	Док.ДатаВходящегоДокумента		= Сообщение.ДокументEDI.Дата;
	Док.Дата						= Сообщение.ДокументEDI.Дата;
	
	Док.Менеджер		= ПолучитьТекущегоПользователя1С();
	Если ЗначениеЗаполнено(Док.Менеджер) Тогда 
		Попытка //только в старых релизах
			Док.Подразделение	= Док.Менеджер.ТекущееПодразделение;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Док.Организация		= Сообщение.Продавец1С;
	ЮрФизЛицоСтороннее  = Сообщение.Покупатель1С;
	Док.Контрагент		= ЮрФизЛицоСтороннее; 
	Грузополучатель		= Сообщение.Грузополучатель1С;
	
	Если ИмяКонфигурации1С="УФ_УТ" Тогда
		Док.Валюта			= Константы.ВалютаРегламентированногоУчета.Получить();
		
		Если УТ11_1_Константа_ИспользоватьПартнеровИКонтрагентов() = истина Тогда
			Если СокрЛП(ПолучитьКонстантуEDI("СвойСправочникТочекДоставки"))<>"" Тогда 
				Док.Партнер					= Грузополучатель.СвязанныйСправочник2;//использованы магазины-партнеры(клиенты). Правильный учет по рекомендациям 1С.
			Иначе
				Док.Партнер					= Док.Контрагент.Партнер;//партнер юр лица (поля контрагент)
			КонецЕсли;
			
		иначе //отключено использование партнеров в конфигурации
			Док.Партнер					= Док.Контрагент.Партнер;     //1Сники мастера мутных функциональных опций    "ИспользоватьПартнеровИКонтрагентов" & "ИспользоватьПартнеровКакКонтрагентов"
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С="УФ_БП" Тогда
		
		СписокВидовДоговоров = Новый Массив;
		Выполнить("СписокВидовДоговоров.Добавить(ПредопределенноеЗначение(""Перечисление.ВидыДоговоровКонтрагентов.СПокупателем""))");//в 8.1 нет такого метода
		
		Попытка //реорганизация в типовой БП30
			Выполнить("РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Док.ДоговорКонтрагента, Док.Контрагент, Док.Организация,СписокВидовДоговоров);");
		исключение
			Выполнить("БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Док.ДоговорКонтрагента, Док.Контрагент, Док.Организация,СписокВидовДоговоров);");
		КонецПопытки;
		РеквизитыДоговора = неопределено;
		
		Выполнить("РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Док.ДоговорКонтрагента, ""Владелец,ТипЦен,ВидДоговора"")");
		
		СтруктураКурсаДокумента=неопределено;
		Выполнить("СтруктураКурсаДокумента     = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Док.ВалютаДокумента, ТекущаяДата())");
		Док.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Док.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		
		Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
			Док.ТипЦен           = РеквизитыДоговора.ТипЦен;
			Док.СуммаВключаетНДС = РеквизитыДоговора.ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	Док.ЗаполнитьУсловияПродажПоУмолчанию();
	
	Если ЗначениеЗаполнено(Док.Соглашение) Тогда 
		Док.ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
	Если Сообщение.НакладнаяEDI.Номер<>"" Тогда 
		Док.ДокументРеализации=НайтиИПолучитьНакладную(Сообщение);
	КонецЕсли;
	
	Для каждого Стр Из Сообщение.Товары Цикл
		
		НоваяСтрока = Док.Товары.Добавить();
		
		НоваяСтрока.Номенклатура		= Стр.Номенклатура;
		Если ИмяКонфигурации1С="УФ_УТ" Тогда
			НоваяСтрока.Упаковка			= Стр.ЕдиницаИзмерения;
			НоваяСтрока.КоличествоУпаковок	= Стр.Количество;
		ИначеЕсли ИмяКонфигурации1С="БП" Тогда
			НоваяСтрока.Количество	= Стр.Количество;
		КонецЕсли;
		
		//НоваяСтрока.Характеристика		= Стр.ХарактеристикаНоменклатуры;
		
		Если ЗначениеЗаполнено(Стр.СтавкаНДС1С) Тогда
			Если  Стр.СтавкаНДС1С=Перечисления.СтавкиНДС.НДС0 и Стр.ЦенаБезНДС=0 и Стр.ЦенаСНДС=0 Тогда 
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
					НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
					Стр.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
				КонецЕсли;
			Иначе
				НоваяСтрока.СтавкаНДС			= Стр.СтавкаНДС1С;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
				НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
				Стр.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьНедостающиеПоляСтрокиТоваров(Стр);
			
		Если Док.ЦенаВключаетНДС Тогда
			
			НоваяСтрока.Цена = Стр.ЦенаСНДС;
			НоваяСтрока.Сумма = Стр.СуммаСНДС;
			
		Иначе        
			
			НоваяСтрока.Цена = Стр.ЦенаБезНДС;
			НоваяСтрока.Сумма = Стр.СуммаБезНДС;
			
		КонецЕсли;	
		
		НоваяСтрока.СуммаНДС = Стр.СуммаНДС;
		Док.ПричинаВозврата=Док.ПричинаВозврата+"Поз."+Стр.НомерСтроки+": "+Стр.ПричинаВозврата+" "; 
		
		Если ИмяКонфигурации1С="БП" Тогда
			Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Док.СуммаВключаетНДС)");
		КонецЕсли;
		
		//попытаемся поставить документ в тч
		Если ИмяКонфигурации1С="УФ_УТ" Тогда 
			Если ЗначениеЗаполнено(Док.ДокументРеализации) Тогда 
				НоваяСтрока.ДокументРеализации = Док.ДокументРеализации;
			КонецЕсли;
			
			//Если Стр.НакладнаяEDI<>Неопределено Тогда 
			//	НоваяСтрока.ДокументРеализации = НайтиИПолучитьНакладную(Стр); //магически! (у строки возврата те же используемые ключи что и у сообщения для определения накладной)
			//КонецЕсли;
		ИначеЕсли ИмяКонфигурации1С="УФ_БП" Тогда
			//нет документа в ТЧ
		КонецЕсли;
	
	КонецЦикла;
	
	//реквизиты печати
	Док.Покупатель= Строка(Док.Партнер);
	
	Док.Записать();
	
КонецФункции // СоздатьВозвратУФ()

//PORDERS входящий
Функция ПринятьОбратныйЗаказПоставщика(Сообщение,ПервоначальнаяЗагрузкаСообщения = Истина)
	
	Если Лев(ИмяКонфигурации1С,3)="УФ_" Тогда 
		Возврат ПринятьОбратныйЗаказПоставщика_УФ(Сообщение,ПервоначальнаяЗагрузкаСообщения);
	КонецЕсли;
	
	Если Сообщение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИД = СокрЛП(Сообщение.ID);
	
	Если ИспользоватьМаппингМетаданных Тогда
		СсылкаНаДокумент = Маппинг_ПринятьОбратныйЗаказПоставщика(Сообщение,ПервоначальнаяЗагрузкаСообщения);
		Возврат СсылкаНаДокумент;
	КонецЕсли;
	
	ИмяРеквизитаОрганизация = ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
	ИмяРеквизитаТипЦен 		= ?(ИмяКонфигурации1С = "ДалионУМ", "КатегорияЦен", "ТипЦен"); 
	ИмяРеквизитаДоговор		= ?(ИмяКонфигурации1С = "АСТОР", "Договор", "ДоговорКонтрагента");
	ИмяРеквизитаВалюта 		= ?(ИмяКонфигурации1С = "АСТОР", "Валюта", "ВалютаДокумента");
	ИмяТабличнойЧастиТовары = ?(ИмяКонфигурации1С = "АСТОР", "Состав", "Товары");
	ИмяРеквизитаХарактеристикаНоменклатуры = ?(ИмяКонфигурации1С = "АСТОР", "Характеристика", "ХарактеристикаНоменклатуры");
	
	ТипЦен				= Неопределено;
	флУчитыватьНДС		= Истина;
	флСуммаВключаетНДС	= Истина;
	
	Если ЗначениеЗаполнено(Сообщение.Договор) Тогда
		ДоговорКонтрагента = Сообщение.Договор;
	Иначе
		Если ИмяКонфигурации1С = "АСТОР" Тогда
			Выполнить("ДоговорКонтрагента = ОмРаботаСФормами.ПолучитьОсновнойДоговор(Сообщение.Покупатель1С,Сообщение.Продавец1С,Перечисления.ВидыДоговоров.Покупка);");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента)
		И ЕстьРеквизитОбъекта_Контур(ДоговорКонтрагента,ИмяРеквизитаТипЦен) Тогда
		ТипЦен = ДоговорКонтрагента[ИмяРеквизитаТипЦен];
		УстановитьЗначениеСвойстваОбъекта(Сообщение.Покупатель1С, "GUIDДоговораПоУмолчанию", СокрЛП(ДоговорКонтрагента.УникальныйИдентификатор()));
	КонецЕсли;
	
	Если ИмяКонфигурации1С = "ДалионУМ" Тогда
		Склад  				= ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
		УчетнаяПолитика		= Неопределено;
		Выполнить("УчетнаяПолитика = ПолучитьУчетнуюПолитику(ТекущаяДата(), Сообщение.Продавец1С, Склад);");
		Если Не УчетнаяПолитика = Неопределено Тогда
			флУчитыватьНДС 		= НЕ УчетнаяПолитика.НеЯвляетсяПлательщикомНДС;			
			флСуммаВключаетНДС 	= УчетнаяПолитика.СуммаВключаетНДС;
		КонецЕсли;
	ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			флУчитыватьНДС 		= ?(ДоговорКонтрагента.ТипДоговора = Перечисления.ТипыДоговоров.Комиссия, Ложь, Истина);
			флСуммаВключаетНДС	= флУчитыватьНДС;
		КонецЕсли;
	Иначе 
	    Если ЗначениеЗаполнено(ТипЦен) Тогда
			флСуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
		
	Если ПервоначальнаяЗагрузкаСообщения Тогда
		Если Не ИмяКонфигурации1С = "БП" Тогда
			ТипДокументаЗаказ = ПолучитьТипЗначенияОбъекта("ВходящийОбратныйЗаказ",,Истина); 
			НовыйДокумент = Документы[ТипДокументаЗаказ].СоздатьДокумент();
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
		
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,ИмяРеквизитаТипЦен) Тогда
		НовыйДокумент[ИмяРеквизитаТипЦен]	= ТипЦен;
	КонецЕсли;
	
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"УчитыватьНДС") Тогда
		НовыйДокумент.УчитыватьНДС			= флУчитыватьНДС;
	КонецЕсли;
	
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"СуммаВключаетНДС") Тогда
		НовыйДокумент.СуммаВключаетНДС		= флСуммаВключаетНДС;
	КонецЕсли;
	
	НовыйДокумент.Дата = ТекущаяДата();
	
	НовыйДокумент[ИмяРеквизитаОрганизация]	= Сообщение.Покупатель1С;
	НовыйДокумент.Контрагент				= Сообщение.Продавец1С;
	НовыйДокумент[ИмяРеквизитаДоговор] 		= ДоговорКонтрагента;
	
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"Склад") Тогда
		НовыйДокумент.Склад 				= Сообщение.Грузополучатель1С;
	КонецЕсли;
	
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"СтруктурнаяЕдиница") Тогда
		Если ЗначениеЗаполнено(Сообщение.Покупатель1С)
			И ЕстьРеквизитОбъекта_Контур(Сообщение.Покупатель1С,"ОсновнойБанковскийСчет") Тогда
			НовыйДокумент.СтруктурнаяЕдиница = Сообщение.Покупатель1С.ОсновнойБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"ДатаПоступления") Тогда
		НовыйДокумент.ДатаПоступления = Сообщение.ДатаПоставки;
	ИначеЕсли ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"ДатаПоставки") Тогда
		НовыйДокумент.ДатаПоставки = Сообщение.ДатаПоставки;
	КонецЕсли;
		
	НовыйДокумент[ИмяРеквизитаВалюта] = Сообщение.Валюта1С;
	
	Если ИмяКонфигурации1С = "АСТОР" Тогда
		НовыйДокумент.КурсВалютыДоговора	= 1;
	Иначе
		НовыйДокумент.КурсВзаиморасчетов		= 1; 
		НовыйДокумент.КратностьВзаиморасчетов	= 1;
	КонецЕсли;
	
	Кол = 0;
	НовыйДокумент[ИмяТабличнойЧастиТовары].Очистить();
	
	//выясним, по всем ли позициям пришла цена
	//критерием будет являться отсутствие и ЦенаБезНДС и ЦенаСНДС
	ЦеныПроставлены = Истина;
	СписокНоменклатурыБезЦен = Новый СписокЗначений;
	
	Для Каждого Стр Из Сообщение.Товары Цикл
		Если Стр.ЦенаСНДС=0 и стр.ЦенаБезНДС=0 тогда
			ЦеныПроставлены=Ложь;
			СписокНоменклатурыБезЦен.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	ТабличкаЦен=Неопределено;
	Если Не ЦеныПроставлены и СписокНоменклатурыБезЦен.Количество()>0  Тогда
		Попытка
			Если ЗначениеЗаполнено(ТипЦен) Тогда 
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
				|	ЦеныНоменклатурыСрезПоследних.Цена
				|ИЗ
				|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|			&Дата,
				|			ТипЦен = &ТипЦен
				|				И Номенклатура В (&СписокНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних";
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТипЦен = &ТипЦен", ИмяРеквизитаТипЦен+" = &ТипЦен");	
				Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатурыБезЦен);
				Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
				Запрос.УстановитьПараметр("Дата",?(ЗначениеЗаполнено(Сообщение.ДатаПоставки),Сообщение.ДатаПоставки,ТекущаяДата()));
				
				Результат = Запрос.Выполнить();
				ТабличкаЦен	= Результат.Выгрузить();			
				
			КонецЕсли;
		Исключение
			ТабличкаЦен=Неопределено;
		КонецПопытки;
	КонецЕсли; //составили табличку цен
	
	Для Каждого Стр Из Сообщение.Товары Цикл
		
		Если Стр.НеЗагружать = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НовыйДокумент[ИмяТабличнойЧастиТовары].Добавить();
		
		НоваяСтрока.Номенклатура		= Стр.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения	= Стр.ЕдиницаИзмерения;
		
		НоваяСтрока.Коэффициент			= Стр.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока[ИмяРеквизитаХарактеристикаНоменклатуры]	= Стр.ХарактеристикаНоменклатуры;
	
		НоваяСтрока.Количество			= Стр.Количество;
		
		Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"СтавкаНДС",ИмяТабличнойЧастиТовары) Тогда
			Если ЗначениеЗаполнено(Стр.СтавкаНДС1С) Тогда
				Если  Стр.СтавкаНДС1С=Перечисления.СтавкиНДС.НДС0 и Стр.ЦенаБезНДС=0 и Стр.ЦенаСНДС=0 Тогда 
					Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
						НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
						Стр.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
					КонецЕсли;
				Иначе
					НоваяСтрока.СтавкаНДС			= Стр.СтавкаНДС1С;
				КонецЕсли;	
			Иначе
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
					НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
					Стр.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если Найти("/УТ_10_2/RIT/ДалионУМ/АСТОР/","/"+ИмяКонфигурации1С+"/")>0 Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ЕдиницаИзмеренияМест) Тогда
				Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(НоваяСтрока,НовыйДокумент,Ложь);");
			КонецЕсли;	
		КонецЕсли;

		ЗаполнитьНедостающиеПоляСтрокиТоваров(Стр);
		
		Если флСуммаВключаетНДС Тогда
			НоваяСтрока.Цена = Стр.ЦенаСНДС;
			НоваяСтрока.Сумма = Стр.СуммаСНДС;
		Иначе        
			НоваяСтрока.Цена = Стр.ЦенаБезНДС;
			НоваяСтрока.Сумма = Стр.СуммаБезНДС;
		КонецЕсли;	
		
		Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"СуммаНДС",ИмяТабличнойЧастиТовары) Тогда
			НоваяСтрока.СуммаНДС = Стр.СуммаНДС;
		КонецЕсли;

	КонецЦикла;	
	
	Комментарий="";//В некоторых сообщениях может не быть комментария
	Сообщение.Свойство("Комментарий",Комментарий);
	НовыйДокумент.Комментарий = "Загружен из EDI"+?(СокрЛП(Комментарий)<>"",": "+Комментарий,"");
	
	Если ИмяКонфигурации1С = "ДалионУМ" 
		или ИмяКонфигурации1С = "АСТОР" Тогда
		НовыйДокумент.Автор = ПолучитьТекущегоПользователя1С();
	Иначе
		НовыйДокумент.Ответственный = ПолучитьТекущегоПользователя1С();
	КонецЕсли;

	ОбработкаСобытияПодключаемогоМодуля("ПриЗагрузкеВходящегоСообщения",,Новый Структура("Сообщение,ДокументСсылка",Сообщение,НовыйДокумент));
	
	#Если Клиент Тогда
	Если ПолучитьКонстантуEDI("ОткрыватьФормуОбратногоЗаказаПередЗаписью") = Истина Тогда
		
		ФормаДокумента = НовыйДокумент.ПолучитьФорму();
		ФормаДокумента.ЭлементыФормы.Склад.ОграничениеТипа = Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ТочкаДоставкиСвоя"));
		ФормаДокумента.ОткрытьМодально();
		
		СсылкаНаДокумент = НовыйДокумент.Ссылка;		
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			Возврат Неопределено;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
		
	//в регламентном задании всегда будем попадать сюда
	НовыйДокумент.Записать();
	Если ПолучитьКонстантуEDI("ПроводитьЗагруженныеОбратныеЗаказы") = Истина Тогда
		ПроводитьЗаказ = Истина;
	Иначе
		ПроводитьЗаказ = НовыйДокумент.Проведен;
	КонецЕсли;
	Если ПроводитьЗаказ Тогда
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Контур-EDI: Не удалось провести документ "+СокрЛП(НовыйДокумент.Ссылка));
		КонецПопытки;
	КонецЕсли;
	СсылкаНаДокумент = НовыйДокумент.Ссылка;
		
	Возврат СсылкаНаДокумент;
	
КонецФункции

//INVOIC входящий
Функция ПринятьСчетФактуру(Сообщение)
	
	Если ИспользоватьМаппингМетаданных Тогда
		ДокументСсылка = Маппинг_ПринятьСчетФактуру(Сообщение);
		Возврат ДокументСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
        |	ПоступлениеТоваров.Ссылка
        |ИЗ
        |	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
        |ГДЕ
        |	ПоступлениеТоваров.ВхДокНомер = &НомерВходящегоДокумента
        |	И ПоступлениеТоваров.ВхДокДата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаВходящегоДокумента, МЕСЯЦ, -2) И ДОБАВИТЬКДАТЕ(&ДатаВходящегоДокумента, МЕСЯЦ, 1)";	
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Сообщение.НакладнаяEDI.Номер);
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  Сообщение.НакладнаяEDI.Дата);
		Если Не Сообщение.Покупатель1С = Справочники.Организации.ПустаяСсылка() Тогда
			Запрос.Текст = Запрос.Текст +  "	И ПоступлениеТоваров.Организация = &Организация ";
			Запрос.УстановитьПараметр("Организация", Сообщение.Покупатель1С);
		КонецЕсли;
		Если Не Сообщение.Продавец1С   = Справочники.Организации.ПустаяСсылка() Тогда
			Запрос.Текст = Запрос.Текст +  "	И ПоступлениеТоваров.Контрагент = &Контрагент ";
			Запрос.УстановитьПараметр("Контрагент", Сообщение.Продавец1С );
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
		
	    Запрос.Текст = 
		"ВЫБРАТЬ
        |	ПриходнаяНакладная.Ссылка
        |ИЗ
        |	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
        |ГДЕ
        |	ПриходнаяНакладная.НомерДокумента = &НомерВходящегоДокумента
        |	И ПриходнаяНакладная.ДатаДокумента МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаВходящегоДокумента, МЕСЯЦ, -2) И ДОБАВИТЬКДАТЕ(&ДатаВходящегоДокумента, МЕСЯЦ, 1)";	
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Сообщение.НакладнаяEDI.Номер);
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  Сообщение.НакладнаяEDI.Дата);
		Если Не Сообщение.Покупатель1С = Справочники.Организации.ПустаяСсылка() Тогда
			Запрос.Текст = Запрос.Текст +  "	И ПриходнаяНакладная.Фирма = &Организация ";
			Запрос.УстановитьПараметр("Организация", Сообщение.Покупатель1С);
		КонецЕсли;
		Если Не Сообщение.Продавец1С   = Справочники.Организации.ПустаяСсылка() Тогда
			Запрос.Текст = Запрос.Текст +  "	И ПриходнаяНакладная.Контрагент = &Контрагент ";
			Запрос.УстановитьПараметр("Контрагент", Сообщение.Продавец1С );
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
		
	    Запрос.Текст = 
		"ВЫБРАТЬ
        |	ПриходнаяНакладная.Ссылка
        |ИЗ
        |	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
        |ГДЕ
        |	ПриходнаяНакладная.ВходящийНомер = &НомерНакладной
        |	И ПриходнаяНакладная.ДатаСчетаФактуры МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНакладной, МЕСЯЦ, -2) И ДОБАВИТЬКДАТЕ(&ДатаНакладной, МЕСЯЦ, 1)";	//уточнить что это: номер СФ или номер накладной все таки?	
		Запрос.УстановитьПараметр("НомерНакладной", Сообщение.НакладнаяEDI.Номер);
		Запрос.УстановитьПараметр("ДатаНакладной",  Сообщение.НакладнаяEDI.Дата);
		Если Не Сообщение.Покупатель1С = Справочники.Фирмы.ПустаяСсылка() Тогда
			Запрос.Текст = Запрос.Текст +  "	И ПриходнаяНакладная.Фирма = &Фирма ";
			Запрос.УстановитьПараметр("Фирма", Сообщение.Покупатель1С);
		КонецЕсли;
		Если Не Сообщение.Продавец1С = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Запрос.Текст = Запрос.Текст +  "	И ПриходнаяНакладная.Контрагент = &Контрагент ";
			Запрос.УстановитьПараметр("Контрагент", Сообщение.Продавец1С );
		КонецЕсли;
		
	Иначе
	    ТипДокумента = ПолучитьТипЗначенияОбъекта("ВходящееУведомлениеОбОтгрузке",,Истина);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка
		|ИЗ
		|	Документ."+ТипДокумента+" КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
		|	И ПоступлениеТоваровУслуг.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
		|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("НомерВходящегоДокумента",	Сообщение.НакладнаяEDI.Номер);
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента",		Сообщение.НакладнаяEDI.Дата);
		Запрос.УстановитьПараметр("Контрагент",					Сообщение.Продавец1С);
	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Сообщить("Не смог найти поступление с вх. номером "+Сообщение.НакладнаяEDI.Номер);
		
	ИначеЕсли РезультатЗапроса.Выгрузить().Количество() > 1 Тогда

		//нашли несколько подходящих поступлений, скажем об этом
		Если ИмяКонфигурации1С = "АСТОР" Тогда
			Сообщить("Не удается однозначно сопоставить регистрацию счета-фактуры и приходную накладную с вх. номером " + Сообщение.НакладнаяEDI.Номер + " и вх. датой " + Сообщение.НакладнаяEDI.Дата);	
		Иначе
			Сообщить("Не удается однозначно сопоставить счет-фактуру и поступление с вх. номером " + Сообщение.НакладнаяEDI.Номер + " и вх. датой " + Сообщение.НакладнаяEDI.Дата);
		КонецЕсли;
		
	Иначе//только одно подходящее поступление, можем продолжать.
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Поступление = Выборка.Ссылка;
		
		//пробуем найти счет-фактуру (в случае повторного INVOIC или уже введенного вручную)
		СчетФактура = НайтиСвязанныйДокументПоТипуСообщения(Поступление,"INVOIC");
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			Док = СчетФактура.ПолучитьОбъект();
			
		Иначе	
			
			ИмяДокументаСФ = ПолучитьТипЗначенияОбъекта("ВходящийСчетФактура",,Истина);
			Док = Документы[ИмяДокументаСФ].СоздатьДокумент();	
			Док.Заполнить(Поступление);
			
		КонецЕсли;

		Если ИмяКонфигурации1С = "ТКПТ" Тогда
			Док.ВхДокДата  = Сообщение.ДокументEDI.Дата;
			Док.ВхДокНомер = Сообщение.ДокументEDI.Номер;
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			Док.ДатаСчетаФактуры  = Сообщение.ДокументEDI.Дата;
			Док.НомерСчетаФактуры = Сообщение.ДокументEDI.Номер;
		ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
			Док.НомерСчетаФактуры = Сообщение.ДокументEDI.Номер;
			Док.Комментарий = "Входящий счет-фактура №" + СокрЛП(Сообщение.ДокументEDI.Номер) + " от " + Формат(Сообщение.ДокументEDI.Дата,"ДФ=dd.MM.yyyy");
		ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
			Док.Дата  = Сообщение.ДокументEDI.Дата;
			Док.Номер = Сообщение.ДокументEDI.Номер;
			Док.ПолученВЭлектронномВиде  = Истина;  //Электронно
		Иначе
			Док.ДатаВходящегоДокумента	= Сообщение.ДокументEDI.Дата;
			Док.НомерВходящегоДокумента = Сообщение.ДокументEDI.Номер;
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта_Контур(Док,"КодСпособаПолучения") Тогда
			//установим нужные реквизиты в счет-фактуре
			Док.КодСпособаПолучения = 2; //Электронно
			//Док.Выставлен = Истина;
			//Док.ДатаВыставления = Док.ДатаВходящегоДокумента;
		КонецЕсли;	
		
		Док.Записать();
		
		//ПроверитьСчетФактуруПолученную(Док.Ссылка);
		
		Возврат Док.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьДатуПоставки(Сообщение,ВходящийЗаказ=Неопределено)
	
	//Используется при подготовке ORDRSP и DESADV на стороне поставщика
	//"ВходящийЗаказ" - передается только для ORDRSP
	
	Перем ДатаПоставкиORDERS, ДатаПоставкиORDRSP, ДатаПоставкиЗаказ;//инициализируем возможные даты
	
	ТипСообщения 				= Сообщение.ТипСообщения;
	//ОбщийДокументДля_ORDRSP_И_DESADV = (ПолучитьТипЗначенияОбъекта("ИсходящийОтветНаЗаказ") = ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке"));
	//один документ или разные используются для DESADV и ORDRSP. Скорей всего, можно даже без этого обходиться.
	
	//постараемся определить все возможные даты поставки, из которых дальше выберем какую-то одну
	//для начала пройдемся по сообщениям в базе и определим ДатаПоставкиORDERS, ДатаПоставкиORDRSP, ДатаПоставкиЗаказ
	Если ТипСообщения = "ORDRSP" Тогда
		
		ДатаПоставкиORDERS 	= ВходящийЗаказ.ДатаПоставки;
		
	ИначеЕсли ТипСообщения = "DESADV" Тогда
		
		//поищем дату поставки в сообщениях ORDERS и ORDRSP по данному документу - прямо в базе.
		Если ЗначениеЗаполнено(Сообщение.Заказ1С) Тогда
			ФлагиСообщений = ПолучитьСписокСвойствEDI("ORDERS,ORDRSP",Сообщение.Партнер);//вернет Структуру
			
			ЗапросДатыПоставки = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			ЗапросДатыПоставки.Текст = 
			"ВЫБРАТЬ
			|	КонтурEDI_Сообщения.ДатаПоставки КАК ДатаПоставки
			|ИЗ
			|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
			|ГДЕ
			|	КонтурEDI_Сообщения.Документ = &Документ
			|	И КонтурEDI_Сообщения.ТипСообщения = &ТипСообщения
			|	И КонтурEDI_Сообщения.Направление = ""Исходящее""";
		    ЗапросДатыПоставки.УстановитьПараметр("Документ",ПреобразоватьЗначениеДляВнешнегоХранилища(Сообщение.Заказ1С));
			
			Для Каждого Эл Из ФлагиСообщений Цикл
				Если Эл.Значение = Истина Тогда //есть такое сообщение в цепочке с этим партнером
					ЗапросДатыПоставки.УстановитьПараметр("ТипСообщения",Эл.Ключ);
					НайденнаяДата = ПолучитьРезультатЗапроса(ЗапросДатыПоставки,"ДатаПоставки");
					Выполнить("ДатаПоставки"+Эл.Ключ+" = НайденнаяДата"); //например, ДатаПоставкиORDERS = НайденнаяДата
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Еще постараемся поискать дату поставки в реквизитах документа, отвечающего за ORDERS (как правило, "ЗаказПокупателя").
	//Обычно она там присутствует, только называется по-разному.
	ДокументДляПоискаДатыПоставки = ?(ТипСообщения = "ORDRSP",Сообщение.ДокументСсылка,Сообщение.Заказ1С);
	Если ЗначениеЗаполнено(ДокументДляПоискаДатыПоставки)
		Тогда
		
		//ДатаПоставкиЗаказ = ПолучитьРеквизитДокументаДляСообщения(ДокументДляПоискаДатыПоставки,"ДатаОтгрузки");
		Для Каждого ВариантНазвания Из EDI_РазложитьСтрокуВМассивСлов("ДатаОтгрузки,СрокПоставки",",") Цикл//СрокПоставки - это в ТКПТ
			
			Если ЕстьРеквизитОбъекта_Контур(ДокументДляПоискаДатыПоставки,ВариантНазвания) Тогда
				ДатаПоставкиЗаказ 	= ДокументДляПоискаДатыПоставки[ВариантНазвания];
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	//теперь выберем из всех найденных дат ту, что нам нужна
	Если ЗначениеЗаполнено(ДатаПоставкиORDRSP) Тогда
		//дата поставки в ORDRSP при отправке DESADV приоритетна. Если она есть, остальные нам не интересны.
		Возврат ДатаПоставкиORDRSP;	
		
	ИначеЕсли ЗначениеЗаполнено(ДатаПоставкиORDERS) И ЗначениеЗаполнено(ДатаПоставкиЗаказ) Тогда
		//есть обе даты поставки - и в сообщении ORDERS, и в специальном реквизите документа, связанного с этим сообщением
		Если НачалоДня(ДатаПоставкиORDERS) = НачалоДня(ДатаПоставкиЗаказ) Тогда
			//если они равны (в пределах дня), то выдаем дату в сообщении, т.к. она может содержать еще время.
			Возврат ДатаПоставкиORDERS;
		Иначе
			//иначе - в документе.
			Возврат ДатаПоставкиЗаказ;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДатаПоставкиЗаказ) Тогда
		//есть дата поставки в специальном реквизите документа документа 1С
		Возврат ДатаПоставкиЗаказ;
		
	ИначеЕсли ЗначениеЗаполнено(ДатаПоставкиORDERS) Тогда
		//есть дата поставки есть в сообщении ORDERS, а в документе 1С отсутствует, тогда берем из сообщения ORDERS
		Возврат ДатаПоставкиORDERS;
		
	Иначе
		Если ТипСообщения = "DESADV" Тогда	
			Возврат НачалоДня(Сообщение.Документ1С.Дата);	//Не нашли никаких подходящих дат, вернем просто дату документа
		Иначе
			Возврат Дата(1,1,1);//для ORDRSP так делать не станем, дата заказа в общем случае не равна дате отгрузки. Вернем пустую.
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция НайтиИПолучитьНакладную(Сообщение) Экспорт
	
	//Определимся с типами документов
	Тип_ORDERS = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина);
	Тип_DESADV = ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке",,Истина);
	ЗаказЗагружаетсяВРеализацию = (Тип_ORDERS = Тип_DESADV);
	
	//заполним список контрагентов, по которым будем искать накладную
	Если ТаблицаКэшПартнеровКонтрагентов=Неопределено Тогда
	    ОбновитьКэшПартнеров();
	КонецЕсли;
	
	СтрокиКонтрагентов = ТаблицаКэшПартнеровКонтрагентов.НайтиСтроки(Новый Структура("Партнер",Сообщение.Отправитель1С));
	МассивКонтрагентов = Новый Массив;
	Для Каждого Стр Из СтрокиКонтрагентов Цикл
		МассивКонтрагентов.Добавить(Стр.Контрагент);
	КонецЦикла;	
	
	НайденныйДокумент = Неопределено;
	НайденныйЗаказПоORDERS = Неопределено;
	
	НайденнаяНакладнаяПоORDERS = Неопределено;
	НайденнаяНакладнаяПоDESADV = Неопределено;
	
	//ищем накладную по номеру и дате ORDERS *********************************************************************

	//находим документ-заказ по номеру и дате ORDERS и устанавливаем приоритет поиска:
	//5 - заказ найден по дате и номеру 
	//4 - заказ найден по дате и частичному совпадению номера
	//3 - заказ найден по номеру среди документов за последние 2 месяца
	//2 - заказ найден по частичному совпадению номера среди документов за последние 2 месяца
	
	//К сожалению, старые версии платформы содержат ошибку при попытке упорядочить таблицу по полю, являющемуся константой
	//10091717  (SW633006)  Константное выражение в УПОРЯДОЧИТЬ ПО
	//А поскольку некоторые пользователи не хотят обновлять платформу, то для них пришлось делать костыль и закидывать весь результат запроса в ВТДокументы и упорядочивать уже ее.
	
	ЗапросЗаказы = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	ЗапросЗаказы.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА (НЕ &ДатаЗаказа = ДАТАВРЕМЯ(1, 1, 1))
	|				И КонтурEDI_Сообщения.НомерДокумента = &НомерЗаказа
	|				И НАЧАЛОПЕРИОДА(КонтурEDI_Сообщения.ДатаДокумента, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаЗаказа, ДЕНЬ)
	|			ТОГДА 5
	|		КОГДА (НЕ &ДатаЗаказа = ДАТАВРЕМЯ(1, 1, 1))
	|				И КонтурEDI_Сообщения.НомерДокумента ПОДОБНО ""%"" + &НомерЗаказа
	|				И НАЧАЛОПЕРИОДА(КонтурEDI_Сообщения.ДатаДокумента, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаЗаказа, ДЕНЬ)
	|			ТОГДА 4
	|		КОГДА &ДатаЗаказа = ДАТАВРЕМЯ(1, 1, 1)
	|				И КонтурEDI_Сообщения.НомерДокумента = &НомерЗаказа
	|			ТОГДА 3
	|		КОГДА &ДатаЗаказа = ДАТАВРЕМЯ(1, 1, 1)
	|				И КонтурEDI_Сообщения.НомерДокумента ПОДОБНО ""%"" + &НомерЗаказа
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА КонтурEDI_Сообщения.Документ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ВЫРАЗИТЬ(КонтурEDI_Сообщения.Документ КАК Документ.ЗаказПокупателя)
	|		КОГДА КонтурEDI_Сообщения.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(КонтурEDI_Сообщения.Документ КАК Документ.РеализацияТоваровУслуг)
	|		ИНАЧЕ КонтурEDI_Сообщения.Документ
	|	КОНЕЦ КАК ДокументЗаказ,
	|	ВЫБОР
	|		КОГДА КонтурEDI_Сообщения.Документ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ВЫРАЗИТЬ(КонтурEDI_Сообщения.Документ КАК Документ.ЗаказПокупателя)
	|		КОГДА КонтурEDI_Сообщения.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(КонтурEDI_Сообщения.Документ КАК Документ.РеализацияТоваровУслуг)
	|		ИНАЧЕ КонтурEDI_Сообщения.Документ
	|	КОНЕЦ КАК КоличествоДокументов
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
	|	И (НЕ КонтурEDI_Сообщения.ПометкаУдаления)
	|	И КонтурEDI_Сообщения.ДатаДокумента > НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2), ДЕНЬ)
	|	И (НЕ &НомерЗаказа = """")
	|	И (КонтурEDI_Сообщения.НомерДокумента = &НомерЗаказа
	|			ИЛИ КонтурEDI_Сообщения.НомерДокумента ПОДОБНО ""%"" + &НомерЗаказа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.Приоритет КАК Приоритет,
	|	ВТДокументы.ДокументЗаказ КАК ДокументЗаказ,
	|	ВТДокументы.КоличествоДокументов КАК КоличествоДокументов
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(ДокументЗаказ),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоДокументов)
	|ПО
	|	Приоритет";
	ЗапросЗаказы.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата());
	ЗапросЗаказы.УстановитьПараметр("НомерЗаказа", 	Сообщение.ЗаказEDI.Номер);
	ЗапросЗаказы.УстановитьПараметр("ДатаЗаказа", 	Сообщение.ЗаказEDI.Дата);
	
	Если ВнешнееХранилище Тогда
		ЗапросЗаказы.Текст = СтрЗаменить(ЗапросЗаказы.Текст,"ССЫЛКА Документ.РеализацияТоваровУслуг","ЕСТЬ НЕ NULL");
		ЗапросЗаказы.Текст = СтрЗаменить(ЗапросЗаказы.Текст,"ССЫЛКА Документ.ЗаказПокупателя","ЕСТЬ НЕ NULL");
		ЗапросЗаказы.Текст = СтрЗаменить(ЗапросЗаказы.Текст,"Документ.РеализацияТоваровУслуг","Строка(80)");
		ЗапросЗаказы.Текст = СтрЗаменить(ЗапросЗаказы.Текст,"Документ.ЗаказПокупателя","Строка(80)");
	Иначе
		ЗапросЗаказы.Текст = СтрЗаменить(ЗапросЗаказы.Текст,"Документ.РеализацияТоваровУслуг","Документ."+Тип_DESADV);
		ЗапросЗаказы.Текст = СтрЗаменить(ЗапросЗаказы.Текст,"Документ.ЗаказПокупателя","Документ."+Тип_ORDERS);
	КонецЕсли;	
	
	ВидОбходаЗапроса = ОбходРезультатаЗапроса.ПоГруппировкам;
	Если ВнешнееХранилище Тогда
		ВидОбходаЗапроса = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ВидОбходаЗапроса));
	КонецЕсли;	
	
	РезультатЗаказы = ЗапросЗаказы.Выполнить().Выбрать(ВидОбходаЗапроса);
	
	Если РезультатЗаказы.Следующий() Тогда
		Если РезультатЗаказы.Приоритет>0 И РезультатЗаказы.КоличествоДокументов = 1 Тогда
			
			НайденныйЗаказПоORDERS = РезультатЗаказы.ДокументЗаказ;
			
			Если ВнешнееХранилище И ЗначениеЗаполнено(НайденныйЗаказПоORDERS) Тогда
				НайденныйЗаказПоORDERS = ЗначениеИзСтрокиВнутр(НайденныйЗаказПоORDERS);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(НайденныйЗаказПоORDERS) Тогда
				Если ЗаказЗагружаетсяВРеализацию Тогда
					НайденнаяНакладнаяПоORDERS = НайденныйЗаказПоORDERS;
				Иначе
					//находим документ-накладную по реквизиту связи с документом-заказ (в типовом варианте "Сделка") и устанавливаем приоритет поиска:
					//5 - накладная найдена по реквизиту связи с документом-заказ, дате и номеру 
					//4 - накладная найдена по реквизиту связи с документом-заказ, дате и частичному совпадению номера
					//3 - накладная найдена по реквизиту связи с документом-заказ, номеру среди документов за последние 2 месяца
					//2 - накладная найдена по реквизиту связи с документом-заказ, частичному совпадению номера среди документов за последние 2 месяца
					//1 - накладная найдена по реквизиту связи с документом-заказ 
					ЗапросНакладные = Новый Запрос;
					ЗапросНакладные.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ВЫБОР
					|		КОГДА (НЕ &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1))
					|				И (НЕ &НомерНакладной = """")
					|				И НАЧАЛОПЕРИОДА(_РеализацияТоваровУслуг_псевдоним.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаНакладной, ДЕНЬ)
					|				И _РеализацияТоваровУслуг_псевдоним.Номер = &НомерНакладной
					|			ТОГДА 5
					|		КОГДА (НЕ &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1))
					|				И (НЕ &НомерНакладной = """")
					|				И &НомерНакладной ПОДОБНО ""%"" + &НомерНакладной + ""%""
					|				И НАЧАЛОПЕРИОДА(_РеализацияТоваровУслуг_псевдоним.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаНакладной, ДЕНЬ)
					|			ТОГДА 4
					|		КОГДА &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1)
					|				И (НЕ &НомерНакладной = """")
					|				И _РеализацияТоваровУслуг_псевдоним.Номер = &НомерНакладной
					|			ТОГДА 3
					|		КОГДА &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1)
					|				И (НЕ &НомерНакладной = """")
					|				И _РеализацияТоваровУслуг_псевдоним.Номер ПОДОБНО ""%"" + &НомерНакладной + ""%""
					|			ТОГДА 2
					|		КОГДА &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1)
					|				И &НомерНакладной = """"
					|			ТОГДА 1
					|		ИНАЧЕ 0
					|	КОНЕЦ КАК Приоритет,
					|	_РеализацияТоваровУслуг_псевдоним.Ссылка КАК ДокументНакладная,
					|	_РеализацияТоваровУслуг_псевдоним.Ссылка КАК КоличествоДокументов
					|ПОМЕСТИТЬ ВТДокументы
					|ИЗ
					|	Документ.РеализацияТоваровУслуг КАК _РеализацияТоваровУслуг_псевдоним
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК _ЗаказПокупателя_псевдоним
					|		ПО (&УсловиеСвязи_DESADV_ORDERS)
					|ГДЕ
					|	_ЗаказПокупателя_псевдоним.Ссылка = &ДокументЗаказ
					|	И _РеализацияТоваровУслуг_псевдоним.Дата > НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2), ДЕНЬ)
					|	И _РеализацияТоваровУслуг_псевдоним.Контрагент В(&МассивКонтрагентов)
					|	И (НЕ _РеализацияТоваровУслуг_псевдоним.ПометкаУдаления)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТДокументы.Приоритет КАК Приоритет,
					|	ВТДокументы.ДокументНакладная КАК ДокументНакладная,
					|	ВТДокументы.КоличествоДокументов КАК КоличествоДокументов
					|ИЗ
					|	ВТДокументы КАК ВТДокументы
					|
					|УПОРЯДОЧИТЬ ПО
					|	Приоритет УБЫВ
					|ИТОГИ
					|	МАКСИМУМ(ДокументНакладная),
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоДокументов)
					|ПО
					|	Приоритет";
					ЗапросНакладные.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата());
					ЗапросНакладные.УстановитьПараметр("НомерНакладной", 	Сообщение.НакладнаяEDI.Номер);
					ЗапросНакладные.УстановитьПараметр("ДатаНакладной", 	Сообщение.НакладнаяEDI.Дата);
					ЗапросНакладные.УстановитьПараметр("ДокументЗаказ",		НайденныйЗаказПоORDERS);
					ЗапросНакладные.УстановитьПараметр("МассивКонтрагентов",МассивКонтрагентов);
					
					ЗапросНакладные.Текст = СтрЗаменить(ЗапросНакладные.Текст,"Документ.РеализацияТоваровУслуг","Документ."+Тип_DESADV);
					ЗапросНакладные.Текст = СтрЗаменить(ЗапросНакладные.Текст,"Документ.ЗаказПокупателя","Документ."+Тип_ORDERS);
					
					ТаблицаСоединенийДокументов = ПолучитьТаблицуДляСборкиЗапросов("Поставщик");
					СтрокаДокументаORDERS = ТаблицаСоединенийДокументов.Найти(Тип_ORDERS,"ТипДокумента");
					ЗапросНакладные.Текст = СтрЗаменить(ЗапросНакладные.Текст,"_ЗаказПокупателя_псевдоним",СтрокаДокументаORDERS.ПсевдонимТаблицы);
					
					ЗапросНакладные.Текст = СтрЗаменить(ЗапросНакладные.Текст,"&УсловиеСвязи_DESADV_ORDERS",СтрокаДокументаORDERS.СоединениеСоСледующейТаблицей);
					
					СтрокаДокументаDESADV = ТаблицаСоединенийДокументов.Найти(Тип_DESADV,"ТипДокумента");
					ЗапросНакладные.Текст = СтрЗаменить(ЗапросНакладные.Текст,"_РеализацияТоваровУслуг_псевдоним",СтрокаДокументаDESADV.ПсевдонимТаблицы);
					//типовой вариант: "РеализацияТоваровУслуг.Сделка = ЗаказПокупателя.Ссылка"
					//не сработает, если: 
					//1) ORDRSP отправляется НЕ из того же документа, что ORDERS
					//2) Псевдонимы полей другие
					
					РезультатНакладные = ЗапросНакладные.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если РезультатНакладные.Следующий() Тогда
						Если РезультатНакладные.Приоритет>0 И РезультатНакладные.КоличествоДокументов = 1 Тогда
							НайденнаяНакладнаяПоORDERS = РезультатНакладные.ДокументНакладная;	
						КонецЕсли;									
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	//ищем накладную по номеру и дате DESADV *********************************************************************
	
	//находим документ-накладную по номеру и дате DESADV и устанавливаем приоритет поиска:
	//5 - накладная найдена дате и номеру 
	//4 - накладная найдена дате и частичному совпадению номера
	//3 - накладная найдена номеру среди документов за последние 2 месяца
	//2 - накладная найдена частичному совпадению номера среди документов за последние 2 месяца
	ЗапросНакладные = Новый Запрос;
	ЗапросНакладные.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1)
	|				И РеализацияТоваровУслуг.Номер = &НомерНакладной
	|				И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаНакладной, ДЕНЬ)
	|			ТОГДА 5
	|		КОГДА НЕ &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1)
	|				И РеализацияТоваровУслуг.Номер ПОДОБНО ""%"" + &НомерНакладной
	|				И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаНакладной, ДЕНЬ)
	|			ТОГДА 4
	|		КОГДА &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1)
	|				И РеализацияТоваровУслуг.Номер = &НомерНакладной
	|			ТОГДА 3
	|		КОГДА &ДатаНакладной = ДАТАВРЕМЯ(1, 1, 1)
	|				И РеализацияТоваровУслуг.Номер ПОДОБНО ""%"" + &НомерНакладной
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет,
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументНакладная,
	|	РеализацияТоваровУслуг.Ссылка КАК КоличествоДокументов
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.Контрагент В(&МассивКонтрагентов)
	|	И РеализацияТоваровУслуг.Дата > НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2), ДЕНЬ)
	|	И НЕ &НомерНакладной = """"
	|	И (РеализацияТоваровУслуг.Номер = &НомерНакладной
	|			ИЛИ РеализацияТоваровУслуг.Номер ПОДОБНО ""%"" + &НомерНакладной)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.Приоритет КАК Приоритет,
	|	ВТДокументы.ДокументНакладная КАК ДокументНакладная,
	|	ВТДокументы.КоличествоДокументов КАК КоличествоДокументов
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(ДокументНакладная),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоДокументов)
	|ПО
	|	Приоритет";
	
	ЗапросНакладные.УстановитьПараметр("ТекущаяДата", 		ТекущаяДата());
	ЗапросНакладные.УстановитьПараметр("НомерНакладной", 	Сообщение.НакладнаяEDI.Номер);
	ЗапросНакладные.УстановитьПараметр("ДатаНакладной", 	Сообщение.НакладнаяEDI.Дата);
	ЗапросНакладные.УстановитьПараметр("МассивКонтрагентов",МассивКонтрагентов);
	
	ЗапросНакладные.Текст = СтрЗаменить(ЗапросНакладные.Текст,"Документ.РеализацияТоваровУслуг","Документ."+Тип_DESADV);
	//так будет чуть легче, но надо полностью положить в конструктор
					
	РезультатНакладные = ЗапросНакладные.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если РезультатНакладные.Следующий() Тогда
		Если РезультатНакладные.Приоритет>0 И РезультатНакладные.КоличествоДокументов = 1 Тогда
			НайденнаяНакладнаяПоDESADV = РезультатНакладные.ДокументНакладная;	
		КонецЕсли;									
	КонецЕсли;
	
	//нашли какую-то накладную по ORDERS и/или какую-то по DESADV
	//если нашлись обе, и они совпадают, то это именно нужная накладная
	//если нашлась только одна, то ее и вернем
	Если ЗначениеЗаполнено(НайденнаяНакладнаяПоORDERS) и ЗначениеЗаполнено(НайденнаяНакладнаяПоDESADV) Тогда
		
		Если НайденнаяНакладнаяПоORDERS = НайденнаяНакладнаяПоDESADV Тогда
			НайденныйДокумент = НайденнаяНакладнаяПоORDERS;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(НайденнаяНакладнаяПоORDERS) Тогда
		
		НайденныйДокумент = НайденнаяНакладнаяПоORDERS;	
		
	ИначеЕсли ЗначениеЗаполнено(НайденнаяНакладнаяПоDESADV) Тогда
		
		НайденныйДокумент = НайденнаяНакладнаяПоDESADV;
		
	КонецЕсли;
	
	Возврат НайденныйДокумент;
	
КонецФункции

// служебные процедуры и функции
Функция ПринятьОбратныйЗаказПоставщика_УФ(Сообщение,ПервоначальнаяЗагрузкаСообщения = Истина)
	
	Если Сообщение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИД = СокрЛП(Сообщение.ID);
			
	флУчитыватьНДС		= Истина;
	флСуммаВключаетНДС	= Истина;
	
	ДоговорКонтрагента = Сообщение.Договор;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		УстановитьЗначениеСвойстваОбъекта(Сообщение.Покупатель1С, "GUIDДоговораПоУмолчанию", СокрЛП(ДоговорКонтрагента.УникальныйИдентификатор()));
	КонецЕсли;
		
	Если ПервоначальнаяЗагрузкаСообщения Тогда
		Если Не ИмяКонфигурации1С = "УФ_БП" Тогда
			НовыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
		
	//НовыйДокумент.УчитыватьНДС		= флУчитыватьНДС;
	НовыйДокумент.ЦенаВключаетНДС		= флСуммаВключаетНДС;
	
	НовыйДокумент.Дата = ТекущаяДата();
	
	НовыйДокумент.Организация			= Сообщение.Покупатель1С;
	НовыйДокумент.Контрагент			= Сообщение.Продавец1С;
	НовыйДокумент.Партнер				= НовыйДокумент.Контрагент.Партнер;
	НовыйДокумент.Договор 				= ДоговорКонтрагента;
	
	//Попытка
	//	НовыйДокумент.БанковскийСчет = Сообщение.Покупатель1С.ОсновнойБанковскийСчет;
	//Исключение
	//КонецПопытки;

	НовыйДокумент.ЖелаемаяДатаПоступления 	= Сообщение.ДатаПоставки;
	НовыйДокумент.ДатаПервогоПоступления 	= Сообщение.ДатаПоставки;
	НовыйДокумент.ДатаПоступления 			= Сообщение.ДатаПоставки;
	НовыйДокумент.ПоступлениеОднойДатой 	= истина;
	
	НовыйДокумент.НомерПоДаннымПоставщика 	= Сообщение.ДокументEDI.Номер;
	НовыйДокумент.ДатаПоДаннымПоставщика 	= Сообщение.ДокументEDI.Дата;
	
	НовыйДокумент.Валюта					= Сообщение.Валюта1С;
	
	НовыйДокумент.ЗаполнитьУсловияЗакупокПоУмолчанию();
	
	НовыйДокумент.Склад 				= Сообщение.Грузополучатель1С;
	флСуммаВключаетНДС 					= НовыйДокумент.ЦенаВключаетНДС;

	Кол = 0;
	НовыйДокумент.Товары.Очистить();
	
	//выясним, по всем ли позициям пришла цена
	//критерием будет являться отсутствие и ЦенаБезНДС и ЦенаСНДС
	ЦеныПроставлены = Истина;
	СписокНоменклатурыБезЦен = Новый СписокЗначений;
	
	Для Каждого Стр Из Сообщение.Товары Цикл
		Если Стр.ЦенаСНДС=0 и стр.ЦенаБезНДС=0 тогда
			ЦеныПроставлены=Ложь;
			СписокНоменклатурыБезЦен.Добавить(Стр.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	ТабличкаЦен=Неопределено;
	
	Для Каждого Стр Из Сообщение.Товары Цикл
		
		Если Стр.НеЗагружать = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НовыйДокумент.Товары.Добавить();
		
		НоваяСтрока.Номенклатура		= Стр.Номенклатура;
		НоваяСтрока.Упаковка		= Стр.ЕдиницаИзмерения;
		
		НоваяСтрока.Характеристика	= Стр.ХарактеристикаНоменклатуры;
	
		НоваяСтрока.КоличествоУпаковок	= Стр.Количество;
		Если Не ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда 
			НоваяСтрока.Количество			= Стр.Количество;//базовая единица
		иначе
			НоваяСтрока.Количество			= Стр.Количество*НоваяСтрока.Упаковка.Коэффициент;//в упаковках
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.СтавкаНДС1С) Тогда
			Если  Стр.СтавкаНДС1С=Перечисления.СтавкиНДС.НДС0 и Стр.ЦенаБезНДС=0 и Стр.ЦенаСНДС=0 Тогда 
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
					НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
					Стр.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
				КонецЕсли;
			Иначе
				НоваяСтрока.СтавкаНДС			= Стр.СтавкаНДС1С;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
				НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
				Стр.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		
		//Посчитаем цену без НДС / с НДС по суммам без / с НДС, если сеть не прислала эти данные в сообщении
		ЗаполнитьНедостающиеПоляСтрокиТоваров(Стр);
		
		Если флСуммаВключаетНДС Тогда
			НоваяСтрока.Цена = Стр.ЦенаСНДС;
			НоваяСтрока.Сумма = Стр.СуммаСНДС;
		Иначе        
			НоваяСтрока.Цена = Стр.ЦенаБезНДС;
			НоваяСтрока.Сумма = Стр.СуммаБезНДС;
		КонецЕсли;	
		
		НоваяСтрока.СуммаНДС = Стр.СуммаНДС;

	КонецЦикла;
	
	СтруктураДействий = ПодготовитьСтруктуруДействий_УФ_ЗаказПокупателя(НовыйДокумент);
	Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(НовыйДокумент.Товары,СтруктураДействий,неопределено);");
	
	
	Комментарий="";//В некоторых сообщениях может не быть комментария
	Сообщение.Свойство("Комментарий",Комментарий);
	НовыйДокумент.Комментарий = "Загружен из EDI"+?(СокрЛП(Комментарий)<>"",": "+Комментарий,"");
	
	ОбработкаСобытияПодключаемогоМодуля("ПриЗагрузкеВходящегоСообщения",,Новый Структура("Сообщение,ДокументСсылка",Сообщение,НовыйДокумент));
	
	НовыйДокумент.Записать();
	Если ПолучитьКонстантуEDI("ПроводитьЗагруженныеОбратныеЗаказы") = Истина Тогда
		ПроводитьЗаказ = Истина;
	Иначе
		ПроводитьЗаказ = НовыйДокумент.Проведен;
	КонецЕсли;
	Если ПроводитьЗаказ Тогда
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Контур-EDI: Не удалось провести документ "+СокрЛП(НовыйДокумент.Ссылка));
		КонецПопытки;
	КонецЕсли;
	СсылкаНаДокумент = НовыйДокумент.Ссылка;
		
				
	Возврат СсылкаНаДокумент;
	
КонецФункции

Функция ПолучитьДокументыПоКоторымНужноОтправитьALCRPT()

	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);

	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеРеквизиты.Объект КАК Документ
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство
	|	И КонтурEDI_ДополнительныеРеквизиты.Значение = ИСТИНА";
	
	Запрос.УстановитьПараметр("Свойство","НужноОтправитьALCRPT");
	
	// + Внешнее хранилище. kns 2014.09.10
	Если ВнешнееХранилище Тогда
		
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура("Документ", Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке")));
		
		Возврат ПолучитьТаблицуИзВнешнейБазы(Запрос.Выполнить().Выгрузить(),СтруктураКолонокПреобразуемыхВСсылки);
	Иначе
		// - Внешнее хранилище. kns 2014.09.10
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьСтатусноеСообщение(Сообщение)
	
	Этап			= ВРег(Сообщение.Этап);
	Статус			= ВРег(Сообщение.Статус);
	ТипСообщения	= ВРег(Сообщение.ТипДокумента);
	
	ТипДокумента	= Неопределено;
	
	СообщениеСсылка = Неопределено;
	
	СтатусноеНаОтменуЗаказа = Ложь;
	СтатусноеНаОтменуВозврата = Ложь;
	
	МожноУдалятьСообщение = Ложь;
	
	//поищем исходное сообщение и документ, связанный с сообщением
	Если ТипСообщения="ALCRPT" Тогда
		НайденныйДокумент = НайтиОбъектПоЗначениюСвойства(ТипСообщения+"_ID",Сообщение.ID);
	Иначе	
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		
		Запрос.Текст = "ВЫБРАТЬ 
		|	КонтурEDI_Сообщения.Документ,
		|	КонтурEDI_Сообщения.ТипСообщения,
		|	КонтурEDI_Сообщения.Ссылка
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	КонтурEDI_Сообщения.ID = &ID";
		
		Запрос.УстановитьПараметр("ID", Сообщение.ID);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();             
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ТипСообщения = ТипСообщения Тогда 		
					Если ВнешнееХранилище Тогда
						НайденныйДокумент = ЗначениеИзСтрокиВнутр(Выборка.Документ);
						СообщениеСсылка = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(Выборка.Ссылка);
					Иначе
						НайденныйДокумент = Выборка.Документ;
						СообщениеСсылка = Выборка.Ссылка;
					КонецЕсли;		
				ИначеЕсли (Выборка.ТипСообщения = "ORDERS" И ТипСообщения = "ORDRSP") Тогда  // статусное на отмену заказа, когда мы не создали док в 1С
					СтатусноеНаОтменуЗаказа = Истина;
				ИначеЕсли (Выборка.ТипСообщения = "RETDES" И ТипСообщения = "RETREC") Тогда  // статусное на отмену заказа, когда мы не создали док в 1С
					СтатусноеНаОтменуВозврата = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;	
	
	//если не нашли исходное сообщение, то попробуем найти исходный документ по его номеру и дате
	Если НайденныйДокумент = Неопределено Тогда
		
		Если ТипСообщения = "PORDERS" Тогда
			
			ТипДокумента = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя");
			
		ИначеЕсли ТипСообщения = "ORDERS" Тогда
			
			ТипДокумента = ПолучитьТипЗначенияОбъекта("ИсходящийЗаказПоставщику");
			
		ИначеЕсли ТипСообщения = "ORDRSP" Тогда
			
			ТипДокумента = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя");
			
		ИначеЕсли ТипСообщения = "DESADV" Тогда	
			
			ТипДокумента = ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке");
			
		ИначеЕсли ТипСообщения = "RECADV" Тогда	
			
			ТипДокумента = ПолучитьТипЗначенияОбъекта("ВходящееУведомлениеОПриемке");
			
		ИначеЕсли ТипСообщения = "INVOIC" Тогда	
			
			ТипДокумента = ПолучитьТипЗначенияОбъекта("ИсходящийСчетФактура");
			
		КонецЕсли;	
		
		Если НЕ ТипДокумента = Неопределено Тогда
			
			ИмяТипа = СтрЗаменить(ТипДокумента,"ДокументСсылка.","");
			
			Если СокрЛП(Сообщение.НомерДокумента) = "" Тогда
				НайденныйДокумент = Неопределено;
			ИначеЕсли Сообщение.ДатаДокумента = Дата(1,1,1) Тогда
				НайденныйДокумент = Документы[ИмяТипа].НайтиПоНомеру(Сообщение.НомерДокумента, ТекущаяДата());
			Иначе
				НайденныйДокумент = Документы[ИмяТипа].НайтиПоНомеру(Сообщение.НомерДокумента, Сообщение.ДатаДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	//Если ничего не смогли найти, то выйдем отсюда сразу
	Если Не ЗначениеЗаполнено(НайденныйДокумент) Тогда
		//вернем еще признак того, можно ли удалять сообщение с FTP/каталога
		
		Если Сообщение.ID="" ИЛИ СтатусноеНаОтменуЗаказа ИЛИ СтатусноеНаОтменуВозврата Тогда
			//сообщения без привязки к документу (нет ID) были отправлены в ответ на действия из веба и можно их удалить, т.к в системе не найти связанных
			//а сообщение ORDERS_canceled не сохраняется в базе, поэтому тоже не имеет ID
			
			МожноУдалятьСообщение = Истина;
			
		Иначе
			// удалить сообщения с датой создания 3 недели назад, если они так и не были обработаны - т.к. их актуальность потеряна
			
			ВремФайл=Новый Файл(Сообщение.ПутьКФайлу);
			Если ВремФайл.Существует() Тогда 
				ВремяСозданияФайла=ВремФайл.ПолучитьВремяИзменения(); //время изменения файла было установлено на время создания на фтп
				Если ВремяСозданияФайла<ТекущаяДата()-60*60*24*21 Тогда
					МожноУдалятьСообщение = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		//сообщение PriceList пока не привязывается к документу, обработаем здесь его статусное
		Если ТипСообщения = "PRICELIST" ИЛИ (ТипСообщения = "ORDRSP" И СтатусноеНаОтменуЗаказа) ИЛИ (ТипСообщения = "RETREC" И СтатусноеНаОтменуВозврата) Тогда
			Если ЗначениеЗаполнено(СообщениеСсылка) Тогда
				Если Статус = "FAIL" Тогда
					УстановитьСтатусСообщения(СообщениеСсылка,	, ТипСообщения, "ИсходящийОжидаетИсправленияОшибок");
				    СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
					СообщениеОбъект.ОписаниеОшибки = Сообщение.ОписаниеОшибки;
					СохранитьОбъектСообщения(СообщениеОбъект);
				ИначеЕсли Статус = "OK" Тогда
					УстановитьСтатусСообщения(СообщениеСсылка, , ТипСообщения, "ИсходящийДоставлен");
				КонецЕсли;
				МожноУдалятьСообщение = Истина;
			КонецЕсли;			
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура("МожноУдалятьСообщение",МожноУдалятьСообщение);
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
		//документ найден, значит, мы можем обработать статусное и удалить его с FTP
		
		ЭтоСтатусДоставкиINVOICпослеДД = (Этап = "DELIVERY" И ТипСообщения = "INVOIC" И ЗначениеЗаполнено(Сообщение.messageId));// поле messageId всегда есть
			
		Если ТипСообщения="ALCRPT" Тогда
			//ALCRPT живут своей жизнью
			Если Статус = "FAIL" Тогда
				
				УстановитьСтатусСообщения(,  НайденныйДокумент, "DESADV", "ИсходящийALCRPTОжидаетИсправленияОшибок");
				
				DESADV = ПрочитатьСообщение(,НайденныйДокумент,"DESADV","Исходящее");
				Если DESADV<>Неопределено Тогда
					СообщениеОбъект = ПолучитьОбъектСообщения(DESADV.СообщениеСсылка);
					СообщениеОбъект.ОписаниеОшибки = Сообщение.ОписаниеОшибки;
					СохранитьОбъектСообщения(СообщениеОбъект);
				КонецЕсли;
				
			Иначе
				Если ПолучитьСтатусСообщения(, НайденныйДокумент, "DESADV") = "ALCRPT ожидает исправления ошибок" Тогда						
					УстановитьСтатусСообщения(,  НайденныйДокумент, "DESADV", "ИсходящийДоставлен");
				КонецЕсли;	
				УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "БылОтправленALCRPT",	Истина);
			КонецЕсли;		
			
		ИначеЕсли Этап = "CONVERTINGTODIADOC" Тогда
			
			
			////проверим, получали ли мы статусное сообщение SIGNINGBYSENDER (torg12Id приходит только в нем) 			
			////torg12Id = СокрЛП(ПолучитьЗначениеСвойстваОбъектаEDI(НайденныйДокумент, "torg12Id"));
			////Если Не ЗначениеЗаполнено(torg12Id) Тогда
				
			// не учитывалась переотправка INVOIC, будем проверять что INVOIC находится в статусе "Отправлен"
			//еще учтем схему MetroOkNotOk, когда сначала приходит статус Checking, а только потом ConvertingToDiadoc 
			Если ПолучитьСтатусСообщения(, НайденныйДокумент, ТипСообщения) = "Отправлен" 
				Или ПолучитьСтатусСообщения(, НайденныйДокумент, ТипСообщения) = "Доставлен" Тогда
				
				Если Статус = "OK" Тогда
					
					УстановитьСтатусСообщения(,  НайденныйДокумент, ТипСообщения, "ИсходящийСозданВДиадок");
				
					УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "boxId",		СокрЛП(Сообщение.boxId));
					УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "messageId",	СокрЛП(Сообщение.messageId));
					//свойства torg12Id или invoiceId могут отсутствовать, в зависимости от настроек Диадока
					Если Сообщение.Свойство("torg12Id") И ЗначениеЗаполнено(СокрЛП(Сообщение.torg12Id)) Тогда
						УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "torg12Id",	СокрЛП(Сообщение.torg12Id));
					КонецЕсли;
					Если Сообщение.Свойство("invoiceId") И ЗначениеЗаполнено(СокрЛП(Сообщение.invoiceId)) Тогда
						УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "invoiceId",	СокрЛП(Сообщение.invoiceId));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли Этап = "SIGNINGBYSENDER" Тогда
			
			Если Статус = "OK" Тогда
				
				УстановитьСтатусСообщения(,  НайденныйДокумент, ТипСообщения, "ИсходящийПодписанВДиадок");
			
				УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "boxId",		СокрЛП(Сообщение.boxId));
				УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "messageId",	СокрЛП(Сообщение.messageId));
				//свойства torg12Id или invoiceId могут отсутствовать, в зависимости от настроек Диадока
				Если Сообщение.Свойство("torg12Id") И ЗначениеЗаполнено(СокрЛП(Сообщение.torg12Id)) Тогда
					УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "torg12Id",	СокрЛП(Сообщение.torg12Id));
				КонецЕсли;
				Если Сообщение.Свойство("invoiceId") И ЗначениеЗаполнено(СокрЛП(Сообщение.invoiceId)) Тогда
					УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "invoiceId",	СокрЛП(Сообщение.invoiceId));
				КонецЕсли;
				
				GLNСети = Сообщение.Получатель;
				НайденныйПартнер = НайтиОбъектПоЗначениюСвойства("GLN_Партнера",GLNСети); 
					
				Если ЗначениеЗаполнено(НайденныйПартнер) Тогда
						
					ОтправлятьALCRPT = ПолучитьЗначениеСвойстваОбъектаEDI(НайденныйПартнер, "ОтправлятьALCRPTсINVOIC");
					
					Если ОтправлятьALCRPT = Истина Тогда
						Накладная = ПолучитьНакладнуюСчетаФактуры(НайденныйДокумент);
						УстановитьЗначениеСвойстваОбъекта(Накладная, "НужноОтправитьALCRPT",	Истина);
					КонецЕсли;
					
				КонецЕсли;
				
				//код ниже перенесен в ПМ
				//Если ЗначениеЗаполнено(НайденныйДокумент) 
				//	И НайденныйДокумент.Метаданные().Реквизиты.Найти("КодСпособаВыставления")<>Неопределено
				//	
				//	И НайденныйДокумент.КодСпособаВыставления <> 2
				//	//И НайденныйДокумент.ДатаВыставления <> ДатаXML_в_Дата1С(Сообщение.ДатаОтправки)
				//	//И Не НайденныйДокумент.Выставлен
				//	
				//	Тогда
				//	//установим нужные реквизиты в счет-фактуре
				//	
				//	СФОбъект = НайденныйДокумент.ПолучитьОбъект();
				//	СФОбъект.КодСпособаВыставления = 2; //Электронно
				//	СФОбъект.Выставлен = Истина;
				//	СФОбъект.ДатаВыставления = ДатаXML_в_Дата1С(Сообщение.ДатаОтправки);
				//	Если Не ЗначениеЗаполнено(СФОбъект.ДатаВыставления) Тогда
				//		СФОбъект.ДатаВыставления = Сообщение.ДатаДокумента;
				//	КонецЕсли;	
				//	СФОбъект.Записать();
				//	
				//КонецЕсли;	
					
			ИначеЕсли Статус = "FAIL" Тогда
				
				УстановитьСтатусСообщения(,  НайденныйДокумент, ТипСообщения, "ИсходящийОжидаетИсправленияОшибок");
				Если НЕ СообщениеСсылка = Неопределено Тогда
					СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
					СообщениеОбъект.ОписаниеОшибки = "Был удален черновик документов в Диадоке";
					СохранитьОбъектСообщения(СообщениеОбъект);
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли НЕ ЭтоСтатусДоставкиINVOICпослеДД Тогда
			
			Если Статус = "OK" Тогда
				
				//статусные обрабатываются сервером асинхронно и возможно получение DraftOfDocumentPackagePostedIntoDiadoc 
				//до MessageCheckingOk  EDISUP-398
				Если Не ПолучитьСтатусСообщения(, НайденныйДокумент, ТипСообщения) = "ИсходящийСозданВДиадок" Тогда
					УстановитьСтатусСообщения(,  НайденныйДокумент, ТипСообщения, "ИсходящийДоставлен");
				КонецЕсли;
				
				GLNСети = Сообщение.Получатель;
				Если ТипСообщения = "DESADV" Тогда
					
					НайденныйПартнер = Неопределено;
					НайденныйПартнер = НайтиОбъектПоЗначениюСвойства("GLN_Партнера",GLNСети); 
					
					Если ЗначениеЗаполнено(НайденныйПартнер) Тогда
						
						ОтправлятьALCRPT 		= ПолучитьЗначениеСвойстваОбъектаEDI(НайденныйПартнер, "ОтправлятьALCRPT");
						ОтправлятьINVOICсDESADV = ПолучитьЗначениеСвойстваОбъектаEDI(НайденныйПартнер, "ОтправлятьINVOICсDESADV");
						
						Если ОтправлятьALCRPT = Истина и не Сообщение.Этап = "Checking" Тогда     //Checking- для нас не является побуждением к отправке ALCRPT
							УстановитьЗначениеСвойстваОбъекта(НайденныйДокумент, "НужноОтправитьALCRPT",	Истина);
						КонецЕсли;
						Если ОтправлятьINVOICсDESADV = Истина Тогда
							
							СчетФактура = ПолучитьСчетФактуруНакладной(НайденныйДокумент);
							Если ЗначениеЗаполнено(СчетФактура) Тогда
								ОтправитьСообщение("INVOIC",СчетФактура);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если Сообщение.Этап = "Checking" Тогда
					Если ЗначениеЗаполнено(Сообщение.ОписаниеОшибки) Тогда
						Если ТипСообщения = "ORDRSP" ИЛИ ТипСообщения = "DESADV" Тогда
							
							//был статус "ИсходящийДоставленСУточнением", заменен, потому что новый интерфейс устанавливает треб. действие "Переотправить"
							УстановитьСтатусСообщения(,  НайденныйДокумент, ТипСообщения, "ИсходящийДоставлен");   
							
							Если СообщениеСсылка <> Неопределено Тогда
								СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
								СообщениеОбъект.ОписаниеОшибки = Сообщение.ОписаниеОшибки;
								СохранитьОбъектСообщения(СообщениеОбъект);
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Статус = "FAIL" Тогда
				
				Если ТипСообщения = "ALCRPT" Тогда
					УстановитьСтатусСообщения(,  НайденныйДокумент, ТипСообщения, "ИсходящийALCRPTОжидаетИсправленияОшибок");
				Иначе
					УстановитьСтатусСообщения(,  НайденныйДокумент, ТипСообщения, "ИсходящийОжидаетИсправленияОшибок");
				КонецЕсли;				
				
				Если НЕ СообщениеСсылка = Неопределено Тогда
					СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
					СообщениеОбъект.ОписаниеОшибки = Сообщение.ОписаниеОшибки;
					СохранитьОбъектСообщения(СообщениеОбъект);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		МожноУдалятьСообщение = Истина;

	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("МожноУдалятьСообщение",МожноУдалятьСообщение);
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОбработатьСтатусноеСообщение_API(СтрокаСообщения)
	
	//виды событий из ленты:
	
	ОбрабатываемыеТипыСобытий = 
	//Unknown, - не нужно
	//NewOutboxMessage, - наше исходящее сообщение, не нужно
	//NewInboxMessage, - входящее сообщение, обрабатываем в другом месте
	"MessageDelivered
	|MessageUndelivered
	//|MessageReadByPartner, - пока нет такого статуса
	|MessageCheckingOk
	|MessageCheckingFail
	|DraftOfDocumentPackagePostedIntoDiadoc
	|DraftOfDocumentPackageSignedByMe
	|DraftOfDocumentPackageDeletedFromDiadoc
	//|DraftOfDocumentPackageSignedBySender, - пока нет такого статуса
	|ReceivedDiadocRoamingError";

	
	Если Найти(ОбрабатываемыеТипыСобытий,СтрокаСообщения.EventType)=0 Тогда
		Возврат;//не будем обрабатывать то, чего не знаем
	КонецЕсли;
	
	IDСообщения = СтрЗаменить(СтрокаСообщения.EventContent.OutboxMessageMeta.MessageId,"-","");
	
	ИсходящееСообщениеНайдено = Ложь;
	НайденныйДокументALCRPT = Неопределено;
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Ссылка КАК Ссылка,
	|	КонтурEDI_Сообщения.ТипСообщения КАК ТипСообщения,
	|	КонтурEDI_Сообщения.Партнер КАК Партнер,
	|	КонтурEDI_Сообщения.Статус КАК Статус,
	|	КонтурEDI_Сообщения.Документ КАК Документ
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ID = &ID
	|	И КонтурEDI_Сообщения.Направление = ""Исходящее""";
	//будем искать все такие сообщения?
	
	Запрос.УстановитьПараметр("ID",IDСообщения);
	
	ТабНайденныхСообщений = Запрос.Выполнить().Выгрузить();
	Если ВнешнееХранилище Тогда
		ТабНайденныхСообщений = ПолучитьТаблицуИзВнешнейБазы(ТабНайденныхСообщений,Новый Структура("Документ",Документы.ТипВсеСсылки()));
	КонецЕсли;
	
	ИсходящееСообщениеНайдено = (ТабНайденныхСообщений.Количество()>0);
	
	//ALCRPT живут отдельно, поэтому обрабатываем их тоже отдельно
	Если Не ИсходящееСообщениеНайдено
		И (
			СтрокаСообщения.EventType = "MessageDelivered"
			Или СтрокаСообщения.EventType = "MessageUndelivered"
			Или СтрокаСообщения.EventType = "MessageCheckingFail"
		)
		Тогда
		//попробуем поискать ALCRPT - предполагаем, что они могут приехать только в этих 3 событиях, т.к. все остальное - Диадок
		НайденныйДокументALCRPT = НайтиОбъектПоЗначениюСвойства("ALCRPT_ID",IDСообщения);
		Если НайденныйДокументALCRPT<>Неопределено Тогда
			//нашли ALCRPT
			
			Если СтрокаСообщения.EventType = "MessageUndelivered"
				Или СтрокаСообщения.EventType = "MessageCheckingFail" Тогда
				
				УстановитьСтатусСообщения(,  НайденныйДокументALCRPT, "DESADV", "ИсходящийALCRPTОжидаетИсправленияОшибок");
				
				//и запишем сам текст ошибки в сообщение DESADV
				DESADV = ПрочитатьСообщение(,НайденныйДокументALCRPT,"DESADV","Исходящее");
				Если DESADV<>Неопределено Тогда
					СообщениеОбъект = ПолучитьОбъектСообщения(DESADV.СообщениеСсылка);
					
					Если СтрокаСообщения.EventType = "MessageUndelivered" Тогда
						СообщениеОбъект.ОписаниеОшибки = ПолучитьТекстовоеСодержаниеXDTO(СтрокаСообщения.EventContent.MessageUndeliveryReasons.string);
					Иначе
						СообщениеОбъект.ОписаниеОшибки = ПолучитьТекстовоеСодержаниеXDTO(СтрокаСообщения.EventContent.Errors.string);
					КонецЕсли;
						
					СообщениеОбъект.Записать();
				КонецЕсли;
				
				
			ИначеЕсли СтрокаСообщения.EventType = "MessageDelivered" Тогда
				
				Если ПолучитьСтатусСообщения(, НайденныйДокументALCRPT, "DESADV") = "ALCRPT ожидает исправления ошибок" Тогда						
					УстановитьСтатусСообщения(,  НайденныйДокументALCRPT, "DESADV", "ИсходящийДоставлен");
				КонецЕсли;	
				
				УстановитьЗначениеСвойстваОбъекта(НайденныйДокументALCRPT, "БылОтправленALCRPT",	Истина);
			
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИсходящееСообщениеНайдено Тогда
		//мы такое сообщение не отправляли
		Возврат;
	КонецЕсли;
	
	
	Для Каждого СтрокаСообщенияВБазе Из ТабНайденныхСообщений Цикл
		//цикл - исключительно ради нескольких ORDRSP на один ORDERS
		
		СообщениеСсылка		= СтрокаСообщенияВБазе.Ссылка;
		ТипСообщения		= СтрокаСообщенияВБазе.ТипСообщения;//предположим, что у нас не будет разных сообщений с одинаковым ID, за исключением виртуальных ORDRSP
		Документ			= СтрокаСообщенияВБазе.Документ;
		EventContent		= СтрокаСообщения.EventContent;
		
		Если СтрокаСообщения.EventType = "MessageDelivered" Тогда
			
			Если СтрокаСообщенияВБазе.ТипСообщения = "INVOIC" 
				И СтрокаСообщенияВБазе.Статус = "Подписан и отправлен" Тогда
				Продолжить;//после подписания INVOIC в Диадоке приходит снова статус Delivered, он уже не нужен
			КонецЕсли;
			
			УстановитьСтатусСообщения(СообщениеСсылка, , ТипСообщения, "ИсходящийДоставлен");
			
			//если мы получили статусное на DESADV, то нам стоит еще поставить пометку о необходимости отправки ALCRPT
			Если ТипСообщения = "DESADV" Тогда
				
				ОтправлятьALCRPT 		= ПолучитьЗначениеСвойстваОбъектаEDI(СтрокаСообщенияВБазе.Партнер, "ОтправлятьALCRPT");
				ОтправлятьINVOICсDESADV = ПолучитьЗначениеСвойстваОбъектаEDI(СтрокаСообщенияВБазе.Партнер, "ОтправлятьINVOICсDESADV");
				
				Если ОтправлятьALCRPT = Истина Тогда
					УстановитьЗначениеСвойстваОбъекта(Документ, "НужноОтправитьALCRPT",	Истина);
				КонецЕсли;
				
				Если ОтправлятьINVOICсDESADV = Истина Тогда
					
					СчетФактура = ПолучитьСчетФактуруНакладной(Документ);
					Если ЗначениеЗаполнено(СчетФактура) Тогда
						ОтправитьСообщение("INVOIC",СчетФактура);
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЕсли;
		
		КонецЕсли;
		
		Если СтрокаСообщения.EventType = "MessageUndelivered" Тогда
			
			УстановитьСтатусСообщения(СообщениеСсылка,  , ТипСообщения, "ИсходящийОжидаетИсправленияОшибок");
			
			Если НЕ СообщениеСсылка = Неопределено Тогда
				СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
				СообщениеОбъект.ОписаниеОшибки = ПолучитьТекстовоеСодержаниеXDTO(EventContent.MessageUndeliveryReasons.string);
				СохранитьОбъектСообщения(СообщениеОбъект);
			КонецЕсли;
				
		КонецЕсли;
		
		Если СтрокаСообщения.EventType = "MessageCheckingFail" Тогда
			
			Если ТипСообщения = "PORDERS" ИЛИ ТипСообщения = "ORDRSP" ИЛИ ТипСообщения = "DESADV" ИЛИ ТипСообщения = "INVOIC" Тогда//а что мешает так же получать Checking на прочие сообщения?
				
				УстановитьСтатусСообщения(СообщениеСсылка,  , ТипСообщения, "ИсходящийДоставленСУточнением");
				
				Если СообщениеСсылка <> Неопределено Тогда
					СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
					СообщениеОбъект.ОписаниеОшибки = ПолучитьТекстовоеСодержаниеXDTO(EventContent.Errors.string);
					СохранитьОбъектСообщения(СообщениеОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаСообщения.EventType = "MessageCheckingOk" Тогда
			
			Если ТипСообщения = "PORDERS" ИЛИ ТипСообщения = "ORDRSP" ИЛИ ТипСообщения = "DESADV" ИЛИ ТипСообщения = "INVOIC" Тогда
				
				//был статус "ИсходящийДоставленСУточнением", заменен, потому что новый интерфейс устанавливает треб. действие "Переотправить"
				ТекущийСтатусСообщения = ПолучитьСтатусСообщения(СообщениеСсылка, , ТипСообщения);
				
				Если НЕ ТекущийСтатусСообщения = "ИсходящийСозданВДиадок" Тогда   //статусные обрабатываются сервером асинхронно и возможно получение DraftOfDocumentPackagePostedIntoDiadoc до MessageCheckingOk  EDISUP-398
					УстановитьСтатусСообщения(СообщениеСсылка,  , ТипСообщения, "ИсходящийДоставлен");
				КонецЕсли;
				
				Если СообщениеСсылка <> Неопределено И Не EventContent.Свойства().Получить("Warnings") = Неопределено Тогда
					СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
					СообщениеОбъект.ОписаниеОшибки = ПолучитьТекстовоеСодержаниеXDTO(EventContent.Warnings.string);
					СохранитьОбъектСообщения(СообщениеОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаСообщения.EventType = "DraftOfDocumentPackagePostedIntoDiadoc" Тогда
			
			УстановитьСтатусСообщения(СообщениеСсылка, , ТипСообщения, "ИсходящийСозданВДиадок");
		
			УстановитьЗначениеСвойстваОбъекта(Документ, "boxId",		СокрЛП(EventContent.DiadocBoxId));
			УстановитьЗначениеСвойстваОбъекта(Документ, "messageId",	СокрЛП(EventContent.MessageId));
			//свойства torg12Id или invoiceId могут отсутствовать, в зависимости от настроек Диадока
			Если Не EventContent.Свойства().Получить("torg12Id") = Неопределено Тогда
				УстановитьЗначениеСвойстваОбъекта(Документ, "torg12Id",	СокрЛП(EventContent.torg12Id));
			КонецЕсли;
			Если Не EventContent.Свойства().Получить("invoiceId") = Неопределено Тогда
				УстановитьЗначениеСвойстваОбъекта(Документ, "invoiceId",	СокрЛП(EventContent.InvoiceId));
			КонецЕсли;
				
			//здесь был вызов ПМ на установку реквизитов документа СФ
				
		КонецЕсли;
		
		Если СтрокаСообщения.EventType = "DraftOfDocumentPackageSignedByMe" Тогда
			
			ТекущийСтатусСообщения = ПолучитьСтатусСообщения(СообщениеСсылка, , ТипСообщения);
			Если НЕ ТекущийСтатусСообщения = "ИсходящийДоставленСУточнением" Тогда   //статусные обрабатываются сервером асинхронно и возможно получение MessageCheckingFail до DraftOfDocumentPackageSignedByMe  EDISUP-398
				УстановитьСтатусСообщения(СообщениеСсылка,  , ТипСообщения, "ИсходящийПодписанВДиадок");
			КонецЕсли;
		
			УстановитьЗначениеСвойстваОбъекта(Документ, "boxId",		СокрЛП(EventContent.DiadocBoxId));
			УстановитьЗначениеСвойстваОбъекта(Документ, "messageId",	СокрЛП(EventContent.MessageId));
			//свойства torg12Id или invoiceId могут отсутствовать, в зависимости от настроек Диадока
			Если Не EventContent.Свойства().Получить("torg12Id") = Неопределено Тогда
				УстановитьЗначениеСвойстваОбъекта(Документ, "torg12Id",	СокрЛП(EventContent.torg12Id));
			КонецЕсли;
			Если Не EventContent.Свойства().Получить("invoiceId") = Неопределено Тогда
				УстановитьЗначениеСвойстваОбъекта(Документ, "invoiceId",	СокрЛП(EventContent.InvoiceId));
			КонецЕсли;
			
			ОтправлятьALCRPT = ПолучитьЗначениеСвойстваОбъектаEDI(СтрокаСообщенияВБазе.Партнер, "ОтправлятьALCRPTсINVOIC");
			
			Если ОтправлятьALCRPT = Истина Тогда
				Накладная = ПолучитьНакладнуюСчетаФактуры(Документ);
				УстановитьЗначениеСвойстваОбъекта(Накладная, "НужноОтправитьALCRPT",	Истина);
			КонецЕсли;
				
		КонецЕсли;
		
		Если СтрокаСообщения.EventType = "DraftOfDocumentPackageDeletedFromDiadoc" Тогда
			
			УстановитьСтатусСообщения(СообщениеСсылка,  , ТипСообщения, "ИсходящийОжидаетИсправленияОшибок");
			Если СообщениеСсылка <> Неопределено Тогда
				СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
				СообщениеОбъект.ОписаниеОшибки = "Был удален черновик документов в Диадоке";
				СохранитьОбъектСообщения(СообщениеОбъект);
			КонецЕсли;
				
		КонецЕсли;
		
		Если СтрокаСообщения.EventType = "ReceivedDiadocRoamingError" Тогда
			//а это мы вообще пока не обрабатывали
			
			УстановитьСтатусСообщения(СообщениеСсылка,  , ТипСообщения, "ИсходящийОжидаетИсправленияОшибок");
			Если СообщениеСсылка <> Неопределено Тогда
				СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
				СообщениеОбъект.ОписаниеОшибки = "Не удалось доставить счет-фактуру по причине:"+Символы.ПС+EventContent.Reason;
				СохранитьОбъектСообщения(СообщениеОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстовоеСодержаниеXDTO(ИсходныйТег)
	//соберем воедино строку/строки из MessageUndeliveryReasons и т.д.
	СтрокаРезультат = "";
	
	Если ТипЗнч(ИсходныйТег)=Тип("Строка") Тогда//этого не бывает
		
		СтрокаРезультат = ИсходныйТег;
		
	ИначеЕсли ТипЗнч(ИсходныйТег)=Тип("СписокXDTO") Тогда
		
		Для Каждого Эл Из ИсходныйТег Цикл
			СтрокаРезультат = СтрокаРезультат+?(СтрокаРезультат="","",Символы.ПС)+Эл;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсходныйТег)=Тип("ОбъектXDTO") Тогда
		
		СтрокаРезультат = ИсходныйТег;
		
	КонецЕсли;
	
	Возврат СтрокаРезультат;
	
КонецФункции

Функция РазложитьСтроку(Знач Строка,Разделитель=",") Экспорт
	
	СЗ=Новый СписокЗначений();
	
	Строка=СтрЗаменить(Строка,Разделитель,Символы.ПС);
	
	ЧислоСтрок = СтрЧислоСтрок(Строка);
	
	Для н=1 По ЧислоСтрок Цикл
		СЗ.Добавить(СтрПолучитьСтроку(Строка,н));
	КонецЦикла;
	
	Возврат СЗ;
	
КонецФункции

Функция ПодготовитьСтруктуруДействий_УФ_ЗаказПокупателя(Объект)
    СтруктураПересчетаСуммы = Новый Структура;
	Выполнить("СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
    Возврат СтруктураДействий;
КонецФункции 

//Добавляет Колонки в Таблица.
//В Колонки допускается массив, Строка с разделителями "," или Символы.ПС
Процедура ДобавитьКолонкиВТаблицуЗначений(Таблица,Колонки,ОписаниеТипов = Неопределено) Экспорт
	Если ТипЗнч(Колонки) = Тип("Массив") Тогда
		МассивИменКолонок = Колонки;
	Иначе
		МассивИменКолонок = EDI_РазложитьСтрокуВМассивСлов(Колонки,",");
	КонецЕсли;
	
	Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
		Если Таблица.Колонки.Найти(ИмяКолонки)=Неопределено Тогда
			Таблица.Колонки.Добавить(ИмяКолонки,ОписаниеТипов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ********************************************************************
//	СТАТУСЫ

//суффикс БМИ - функция располагалась в базовом модуле интеграции
//с основной функцией большая разница в параметрах, поэтому объединять сложно
Процедура УстановитьСтатусСообщения_БМИ(Знач СообщениеСсылка = Неопределено, ДокументСсылка =  Неопределено, ТипСообщения, Статус)
	
	СообщениеОбъект = Неопределено;
	
	Если СообщениеСсылка <> Неопределено Тогда
		
		СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);
		
	Иначе
		
		НайденноеСообщение = НайтиСообщениеДокумента(ДокументСсылка,ТипСообщения);
		Если НайденноеСообщение = Неопределено Тогда
			Сообщить_КонтурEDI("Не найдено сообщение "+ТипСообщения+" для документа "+ДокументСсылка);
			Возврат;
		КонецЕсли;
		СообщениеОбъект = ПолучитьОбъектСообщения(НайденноеСообщение);
		
	КонецЕсли;
	
	Если СообщениеОбъект <> Неопределено Тогда
		
		СообщениеОбъект.Статус = Статус;
		СохранитьОбъектСообщения(СообщениеОбъект);
		
		//логика для обработки виртуальных ORDRSP
		Если СообщениеОбъект.ТипСообщения = "ORDRSP" Тогда
			
			ТаблицаВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(ДокументСсылка);
			Для Каждого Стр Из ТаблицаВиртуальныхСообщений Цикл
				Если СообщениеОбъект.Ссылка <> Стр.ORDRSP//текущий документ мы уже обработали
					И ЗначениеЗаполнено(Стр.ORDRSP) Тогда
					
					ВиртуальныйORDRSP = ПолучитьОбъектСообщения(Стр.ORDRSP);
					ВиртуальныйORDRSP.Статус = Статус;
					СохранитьОбъектСообщения(ВиртуальныйORDRSP);
					
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//суффикс БМИ - функция располагалась в базовом модуле интеграции
//с основной функцией большая разница в параметрах, поэтому объединять сложно
Процедура УстановитьСтатусДокумента_БМИ(ДокументСсылка,Статус,ИмяСтатуса = Неопределено)
	
	Если ВнешнееХранилище Тогда
		Запись = СоединениеСХранилищем.РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
	Иначе
		Запись = РегистрыСведений.КонтурEDI_СтатусыДокументов.СоздатьМенеджерЗаписи();
	КонецЕсли;
	
	Запись.Документ	= ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка);
	Запись.Статус	= Статус;
	
	Если НЕ ИмяСтатуса = Неопределено Тогда
		Запись.ИмяСтатуса = СокрЛП(ИмяСтатуса);
	КонецЕсли;
	
	Попытка
		Запись.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПрочитатьСообщение_БМИ(ЗНАЧ СообщениеСсылка =  Неопределено, ДокументСсылка =  Неопределено, ТипСообщения = Неопределено,Направление = Неопределено,Статусное = Неопределено,Параметры = Неопределено) Экспорт
	//Оставлено для совместимости с ПМ
	
	Если Не ЗначениеЗаполнено(СообщениеСсылка) Тогда
		СообщениеСсылка = НайтиСообщениеДокумента(ДокументСсылка,ТипСообщения,Направление);
	КонецЕсли;
	
	Если СообщениеСсылка<>Неопределено Тогда
		
		ТекСообщениеСсылка = ПреобразоватьЗначениеДляВнешнегоХранилища(СообщениеСсылка);
		Если ВнешнееХранилище Тогда

			СохраненноеСообщение = ЗначениеИзСтрокиВнутр(ТекСообщениеСсылка.Хранилище.Получить());
			Если ЗначениеЗаполнено(ТекСообщениеСсылка.Документ) Тогда
				СохраненноеСообщение.Вставить("ДокументСсылка",ЗначениеИзСтрокиВнутр(ТекСообщениеСсылка.Документ));
			Иначе
				СохраненноеСообщение.Вставить("ДокументСсылка",Неопределено);
			КонецЕсли;
		Иначе	

			СохраненноеСообщение = СообщениеСсылка.Хранилище.Получить();
			СохраненноеСообщение.Вставить("ДокументСсылка",ТекСообщениеСсылка.Документ);
		КонецЕсли;
		
		СохраненноеСообщение.Вставить("СтатусСсылки",		ТекСообщениеСсылка.Статус);
		СохраненноеСообщение.Вставить("Архив",				ТекСообщениеСсылка.Архив);
		СохраненноеСообщение.Вставить("СообщениеСсылка",	СообщениеСсылка);
		СохраненноеСообщение.Вставить("Документ1С",			СохраненноеСообщение.ДокументСсылка);
		
		Возврат СохраненноеСообщение;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//***
// ОБРАБОТЧИКИ

Функция ПолучитьДанныеРасхожденияЗаказаПокупателя(Заказ, Параметры = Неопределено) Экспорт
	
	ПараметрыВывода = Новый Структура();
	ПараметрыВывода.Вставить("Успешно", Ложь);
	
	ВходящийЗаказ = ПрочитатьСообщение(,Заказ,"ORDERS","Входящее");
	
	Сообщение = ПодготовитьИсходящееСообщение("ORDRSP",Заказ, Параметры);
		
	СтруктураТаблицы1 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы1.Вид			= "Сообщение";
	СтруктураТаблицы1.ТипСообщения	= "ORDERS";
	СтруктураТаблицы1.Товары		= ВходящийЗаказ.Товары;
	
	СтруктураТаблицы2 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы2.Вид			= "Сообщение";
	СтруктураТаблицы2.ТипСообщения	= "ORDRSP";
	СтруктураТаблицы2.Товары		= Сообщение.Товары;
	
	СравниваемыеПоля = Новый СписокЗначений;
	СравниваемыеПоля.Добавить("Количество");
	СравниваемыеПоля.Добавить("ЦенаБезНДС");
	СравниваемыеПоля.Добавить("ЦенаСНДС");
	СравниваемыеПоля.Добавить("СтавкаНДС1С");
	
	СравниваемыеПоляШапки = Новый СписокЗначений;
	СравниваемыеПоляШапки.Добавить("ДатаПоставки", "Дата поставки");
	
	РезультатСравнения 		= СравнитьТаблицыТоваров(СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля);
	РезультатСравненияШапки = СравнитьЗначенияСтруктур(ВходящийЗаказ,Сообщение,СравниваемыеПоляШапки);
	
	Если РезультатСравнения.Успешно и РезультатСравненияШапки.Успешно Тогда
		
		ПараметрыВывода.Вставить("Успешно", 				Истина);
		ПараметрыВывода.Вставить("Заголовок",				"Сравнение исходного заказа покупателя с нашим ответом на него.");
		ПараметрыВывода.Вставить("ВыводитьСтатус", 			Истина);
		ПараметрыВывода.Вставить("СтатусЗаголовок",	 		"Статус");
		ПараметрыВывода.Вставить("ИмяКолонки1",				"Заказано");
		ПараметрыВывода.Вставить("ИмяКолонки2",				"Подтвердили");
		ПараметрыВывода.Вставить("ТаблицаСравнения",		РезультатСравнения.ТаблицаСравнения);
		ПараметрыВывода.Вставить("СравниваемыеПоля",		СравниваемыеПоля);
		ПараметрыВывода.Вставить("ТаблицаСравненияШапки",	РезультатСравненияШапки.ТаблицаСравнения);
		ПараметрыВывода.Вставить("СравниваемыеПоляШапки",	СравниваемыеПоляШапки);

		Если Сообщение.Статус = "Подтвержден" Тогда
			Статус = "Подтвержден";
			ЦветСтатуса = Новый Цвет(215,255,215);
		ИначеЕсли Сообщение.Статус = "Уточнен" Тогда
			Статус = "Уточнен";
			ЦветСтатуса = WebЦвета.СветлоЗолотистый;
		ИначеЕсли Сообщение.Статус = "Отклонен" Тогда
			Статус = "Отклонен";
			ЦветСтатуса = WebЦвета.СветлоРозовый;
		КонецЕсли;		
		
		ПараметрыВывода.Вставить("Статус",		Статус);
		ПараметрыВывода.Вставить("ЦветСтатуса", ЦветСтатуса);
		
		//Покажем номера и даты заказов: по данным EDI и по данным 1С
		ДополнительнаяИнформация = Новый ТаблицаЗначений;
		ДополнительнаяИнформация.Колонки.Добавить("Наименование");
		ДополнительнаяИнформация.Колонки.Добавить("Значение");
		
		Если Не Заказ = Неопределено Тогда
			НоваяСтрока = ДополнительнаяИнформация.Добавить();
			НоваяСтрока.Наименование = "Заказ в 1С:";
			НоваяСтрока.Значение = Заказ.Номер + " от " + Формат(Заказ.Дата, "ДЛФ=Д");
		КонецЕсли;
		
		Если Не ВходящийЗаказ = Неопределено Тогда
			НоваяСтрока = ДополнительнаяИнформация.Добавить();
			НоваяСтрока.Наименование = "Заказ в EDI:";
			НоваяСтрока.Значение = ВходящийЗаказ.ДокументEDI.Номер + " от " + Формат(ВходящийЗаказ.ДокументEDI.Дата, "ДЛФ=Д");
		КонецЕсли;

		ПараметрыВывода.Вставить("ДополнительнаяИнформация", ДополнительнаяИнформация);
		
	Иначе

		ПараметрыВывода.Вставить("ОписаниеОшибки", РезультатСравнения.ОписаниеОшибки);
		
	КонецЕсли;
	
	Возврат ПараметрыВывода;

КонецФункции

Функция ПолучитьДанныеРасхожденияПриемки(Накладная, Параметры = Неопределено) Экспорт
			
	ПараметрыВывода = Новый Структура();
	ПараметрыВывода.Вставить("Успешно", Ложь);
	
	Если НЕ Накладная = Неопределено Тогда
		
		Отгрузка = ПрочитатьСообщение(,Накладная,"DESADV","Исходящее");
		Приемка	 = ПрочитатьСообщение(,Накладная,"RECADV","Входящее");
		
		ДополнительнаяИнформация = Новый ТаблицаЗначений;
		ДополнительнаяИнформация.Колонки.Добавить("Наименование");
		ДополнительнаяИнформация.Колонки.Добавить("Значение");
		Если Не Отгрузка = Неопределено Тогда
			НоваяСтрока = ДополнительнаяИнформация.Добавить();
			НоваяСтрока.Наименование = "Сообщение DESADV:";
			НоваяСтрока.Значение = ?( ЗначениеЗаполнено(СокрЛП(Отгрузка.ДокументEDI.Номер)), "№" + СокрЛП(Отгрузка.ДокументEDI.Номер), "" ) + ?( ЗначениеЗаполнено(СокрЛП(Отгрузка.ДокументEDI.Номер)), ?( ЗначениеЗаполнено(Отгрузка.ДокументEDI.Дата), " от " + Формат(Отгрузка.ДокументEDI.Дата, "ДЛФ=Д"), "" ), ?( ЗначениеЗаполнено(Отгрузка.ДокументEDI.Дата), "Дата: " + Формат(Отгрузка.ДокументEDI.Дата, "ДЛФ=Д"), "" ) );
		КонецЕсли;
		Если Не Приемка = Неопределено Тогда
			НоваяСтрока = ДополнительнаяИнформация.Добавить();
			НоваяСтрока.Наименование = "Сообщение RECADV:";
			НоваяСтрока.Значение = ?( ЗначениеЗаполнено(СокрЛП(Приемка.ДокументEDI.Номер)), "№" + СокрЛП(Приемка.ДокументEDI.Номер), "" ) + ?( ЗначениеЗаполнено(СокрЛП(Приемка.ДокументEDI.Номер)), ?( ЗначениеЗаполнено(Приемка.ДокументEDI.Дата), " от " + Формат(Приемка.ДокументEDI.Дата, "ДЛФ=Д"), "" ), ?( ЗначениеЗаполнено(Приемка.ДокументEDI.Дата), "Дата: " + Формат(Приемка.ДокументEDI.Дата, "ДЛФ=Д"), "" ) );
		КонецЕсли;	
		НоваяСтрока = ДополнительнаяИнформация.Добавить();
		НоваяСтрока.Наименование = "Документ отгрузки:";
		НоваяСтрока.Значение = Строка(Накладная);
		
		ТоварыДокумента = ПолучитьТоварыДокументаДляСообщения(Накладная,Истина,"ПодготовитьУведомлениеОбОтгрузке",,Неопределено);
		
		СтруктураТаблицы1 = ПолучитьСтруктуруТаблицыТоваров();
		СтруктураТаблицы1.Вид			= "Документ";
		СтруктураТаблицы1.Товары		= ТоварыДокумента;
		
		СтруктураТаблицы2 = ПолучитьСтруктуруТаблицыТоваров();
		СтруктураТаблицы2.Вид			= "Сообщение";
		СтруктураТаблицы2.ТипСообщения	= "RECADV";
		СтруктураТаблицы2.Товары		= Приемка.Товары;
		
		Если ЗначениеЗаполнено(Параметры) И
			 ТипЗнч(Параметры) = Тип("Структура") И
			 Параметры.Свойство("СравниваемыеПоля") Тогда
			СравниваемыеПоля = Параметры.СравниваемыеПоля;
		Иначе
			СравниваемыеПоля = Новый СписокЗначений;
			СравниваемыеПоля.Добавить("Количество");
		КонецЕсли;
		
		РезультатСравнения = СравнитьТаблицыТоваров(СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля,Ложь);
		
		Если РезультатСравнения.Успешно Тогда
			
			ПараметрыВывода.Вставить("Успешно", 					Истина);
			ПараметрыВывода.Вставить("Заголовок",					"Расхождения приемки");
			ПараметрыВывода.Вставить("ВыводитьСтатус", 				Ложь);
			ПараметрыВывода.Вставить("ИмяКолонки1",					"Отгружено");
			ПараметрыВывода.Вставить("ИмяКолонки2",					"Принято");
			ПараметрыВывода.Вставить("ТаблицаСравнения",			РезультатСравнения.ТаблицаСравнения);
			ПараметрыВывода.Вставить("СравниваемыеПоля",			СравниваемыеПоля);
			ПараметрыВывода.Вставить("ДополнительнаяИнформация", 	ДополнительнаяИнформация);
						
		Иначе
			
			ПараметрыВывода.Вставить("ОписаниеОшибки", РезультатСравнения.ОписаниеОшибки);
						
		КонецЕсли;
		
	Иначе
		
		ПараметрыВывода.Вставить("ОписаниеОшибки", "Не передана накладная для анализа расхождений.");	
		
	КонецЕсли;
	
	Возврат ПараметрыВывода;
	
КонецФункции

Функция ПолучитьДанныеРасхожденияВерсийЗаказа(СообщениеORDERS, Параметры = Неопределено) Экспорт
	//будем сравнивать переданную версию с последней версией заказа
	
	ПараметрыВывода = Новый Структура();
	ПараметрыВывода.Вставить("Успешно", Ложь);
	
	ВходящийЗаказ = ПрочитатьСообщение(СообщениеORDERS,,"ORDERS","Входящее");
	
	СообщениеORDERS2=Неопределено;
	Дубли=ПолучитьДублирующиеСообщения(СообщениеORDERS);
	Если Дубли<>Неопределено 
		И Дубли.Количество()>1 
		Тогда
		//сравнить с самым свежим
		Для Каждого СтрокаДубль Из Дубли Цикл
			Если СтрокаДубль.Ссылка<>СообщениеORDERS Тогда 
				СообщениеORDERS2=СтрокаДубль.Ссылка;
			Конецесли;
		КонецЦикла;
		
		Если СообщениеORDERS2=Неопределено ТОгда
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		//дубля тупо нет
		Возврат Неопределено;
	КонецЕсли;
	
	ВходящийЗаказ2 = ПрочитатьСообщение(СообщениеORDERS2,,"ORDERS","Входящее");
		
	СтруктураТаблицы1 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы1.Вид			= "Сообщение";
	СтруктураТаблицы1.ТипСообщения	= "ORDERS";
	СтруктураТаблицы1.Товары		= ВходящийЗаказ.Товары;
	
	СтруктураТаблицы2 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы2.Вид			= "Сообщение";
	СтруктураТаблицы2.ТипСообщения	= "ORDERS";
	СтруктураТаблицы2.Товары		= ВходящийЗаказ2.Товары;
	
	СравниваемыеПоля = Новый СписокЗначений;
	СравниваемыеПоля.Добавить("Количество");
	СравниваемыеПоля.Добавить("ЦенаБезНДС");
	СравниваемыеПоля.Добавить("ЦенаСНДС");
	СравниваемыеПоля.Добавить("СтавкаНДС1С");
	
	СравниваемыеПоляШапки = Новый СписокЗначений;
	СравниваемыеПоляШапки.Добавить("ДатаПоставки", "Дата поставки");
	
	РезультатСравнения 		= СравнитьТаблицыТоваров(СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля);
	РезультатСравненияШапки = СравнитьЗначенияСтруктур(ВходящийЗаказ,ВходящийЗаказ2,СравниваемыеПоляШапки);
	
	Если РезультатСравнения.Успешно и РезультатСравненияШапки.Успешно Тогда
		
		ПараметрыВывода.Вставить("Успешно", 				Истина);
		ПараметрыВывода.Вставить("Заголовок",				"Сравнение версий заказа покупателя.");
		ПараметрыВывода.Вставить("ВыводитьСтатус", 			Ложь);
		ПараметрыВывода.Вставить("СтатусЗаголовок",	 		"Статус");
		ПараметрыВывода.Вставить("ИмяКолонки1",				"Выб. версия");
		ПараметрыВывода.Вставить("ИмяКолонки2",				"Заказ 2");
		ПараметрыВывода.Вставить("ТаблицаСравнения",		РезультатСравнения.ТаблицаСравнения);
		ПараметрыВывода.Вставить("СравниваемыеПоля",		СравниваемыеПоля);
		ПараметрыВывода.Вставить("ТаблицаСравненияШапки",	РезультатСравненияШапки.ТаблицаСравнения);
		ПараметрыВывода.Вставить("СравниваемыеПоляШапки",	СравниваемыеПоляШапки);

		//Если Сообщение.Статус = "Подтвержден" Тогда
		//	Статус = "Подтвержден";
		//	ЦветСтатуса = Новый Цвет(215,255,215);
		//ИначеЕсли Сообщение.Статус = "Уточнен" Тогда
		//	Статус = "Уточнен";
		//	ЦветСтатуса = WebЦвета.СветлоЗолотистый;
		//ИначеЕсли Сообщение.Статус = "Отклонен" Тогда
		//	Статус = "Отклонен";
		//	ЦветСтатуса = WebЦвета.СветлоРозовый;
		//КонецЕсли;		
		
		//ПараметрыВывода.Вставить("Статус",		Статус);
		//ПараметрыВывода.Вставить("ЦветСтатуса", ЦветСтатуса);
		
		//Покажем номера и даты заказов: по данным EDI и по данным 1С
		ДополнительнаяИнформация = Новый ТаблицаЗначений;
		ДополнительнаяИнформация.Колонки.Добавить("Наименование");
		ДополнительнаяИнформация.Колонки.Добавить("Значение");
		
		Если Не ВходящийЗаказ = Неопределено Тогда
			НоваяСтрока = ДополнительнаяИнформация.Добавить();
			НоваяСтрока.Наименование = "Выб. версия";
			НоваяСтрока.Значение = ВходящийЗаказ.ДокументEDI.Номер + " от " + Формат(ВходящийЗаказ.ДокументEDI.Дата, "ДЛФ=Д");
		КонецЕсли;
		
		Если Не ВходящийЗаказ2 = Неопределено Тогда
			НоваяСтрока = ДополнительнаяИнформация.Добавить();
			НоваяСтрока.Наименование = "Заказ 2";
			НоваяСтрока.Значение = ВходящийЗаказ2.ДокументEDI.Номер + " от " + Формат(ВходящийЗаказ2.ДокументEDI.Дата, "ДЛФ=Д");
		КонецЕсли;

		ПараметрыВывода.Вставить("ДополнительнаяИнформация", ДополнительнаяИнформация);
		
	Иначе

		ПараметрыВывода.Вставить("ОписаниеОшибки", РезультатСравнения.ОписаниеОшибки);
		
	КонецЕсли;
	
	Возврат ПараметрыВывода;

КонецФункции

Процедура ВывестиРасхождения(Таб, Макет, ПараметрыВывода) Экспорт
	
	ОбластьШапка		= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтатус		= Макет.ПолучитьОбласть("Статус");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал		= Макет.ПолучитьОбласть("Подвал");
	
	ДополнительнаяИнформацияКоличество = 0;
	ДополнительнаяИнформацияСдвиг = 0;
	Если ПараметрыВывода.Свойство("ДополнительнаяИнформация") Тогда 
		ДополнительнаяИнформацияКоличество = ПараметрыВывода.ДополнительнаяИнформация.Количество();
		ДополнительнаяИнформацияСдвиг	   = ?(Не ДополнительнаяИнформацияКоличество = 0, ДополнительнаяИнформацияКоличество + 1, 0);
		Если Не ДополнительнаяИнформацияКоличество = 0 Тогда 
			ОбластьДопИнфо		= Макет.ПолучитьОбласть("ДопИнформация");
			ОбластьРазделитель  = Макет.ПолучитьОбласть("Разделитель");
		КонецЕсли;
	КонецЕсли;
	
	ШапкаСообщенияКоличество = 0;
	ШапкаСообщенияСдвиг = 0;
	Если ПараметрыВывода.Свойство("ТаблицаСравненияШапки") Тогда
		ШапкаСообщенияКоличество = ПараметрыВывода.ТаблицаСравненияШапки.Количество();
		ШапкаСообщенияСдвиг = ?(Не ШапкаСообщенияКоличество = 0, ШапкаСообщенияКоличество + 2, 0);
		Если Не ШапкаСообщенияКоличество = 0 Тогда
			ОбластьШапкаТаблицы_ШапкаСообщения	= Макет.ПолучитьОбласть("ШапкаТаблицы_ШапкаСообщения");
			ОбластьСтрока_ШапкаСообщения		= Макет.ПолучитьОбласть("Строка_ШапкаСообщения");
		КонецЕсли;
	КонецЕсли;
	
	ОбластьШапка.Параметры.Заголовок = ПараметрыВывода.Заголовок;
	
	Таб.Вывести(ОбластьШапка);
	
	НомерТекущейСтроки = 6 + ДополнительнаяИнформацияСдвиг + ШапкаСообщенияСдвиг;
	
	Если ПараметрыВывода.Свойство("ДополнительнаяИнформация") Тогда
		Для Каждого Строка Из ПараметрыВывода.ДополнительнаяИнформация Цикл
			ОбластьДопИнфо.Параметры.Заполнить(Строка);
			Таб.Вывести(ОбластьДопИнфо);
		КонецЦикла;
		Если Не ПараметрыВывода.ДополнительнаяИнформация.Количество() = 0 Тогда 
			Таб.Вывести(ОбластьРазделитель);	
		КонецЕсли;
	КонецЕсли;	
	
	Если ПараметрыВывода.ВыводитьСтатус Тогда
		
		НомерТекущейСтроки = 8 + ДополнительнаяИнформацияСдвиг + ШапкаСообщенияСдвиг;
		
		ОбластьСтатус.Параметры.СтатусЗаголовок = ПараметрыВывода.СтатусЗаголовок;
		ОбластьСтатус.Параметры.Статус = ПараметрыВывода.Статус;
		
		Таб.Вывести(ОбластьСтатус);
		
		ОбластьСтатуса = Таб.Область("R" + Строка(4+ДополнительнаяИнформацияСдвиг) + "C3");
		
		Если НЕ ПараметрыВывода.ЦветСтатуса = Неопределено Тогда
			Попытка
				ОбластьСтатуса.ЦветФона = ПараметрыВывода.ЦветСтатуса;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ЦветОтклонения = WebЦвета.СветлоРозовый;
	ЦветУточнения  = WebЦвета.СветлоЗолотистый;
	
	Если ШапкаСообщенияКоличество > 0 Тогда
		
		НомерТекущейСтрокиШапкаСообщения = ?(ПараметрыВывода.ВыводитьСтатус, 7 + ДополнительнаяИнформацияСдвиг, 5 + ДополнительнаяИнформацияСдвиг);
		
		ОбластьШапкаТаблицы_ШапкаСообщения.Параметры.ИмяКолонки1 = ПараметрыВывода.ИмяКолонки1;
		ОбластьШапкаТаблицы_ШапкаСообщения.Параметры.ИмяКолонки2 = ПараметрыВывода.ИмяКолонки2;
		Таб.Вывести(ОбластьШапкаТаблицы_ШапкаСообщения);
		
		Для Каждого Стр Из ПараметрыВывода.ТаблицаСравненияШапки Цикл
			
			Формат1 = "";
			Формат2 = "";
			Если ТипЗнч(Стр.Значение1) = Тип("Дата") Тогда
				Формат1 					= "ДФ=""дд.ММ.гггг ЧЧ:мм""; ДП='нет'";
				ГоризонтальноеПоложение1	= ГоризонтальноеПоложение.Центр;   
			КонецЕсли;
			Если ТипЗнч(Стр.Значение2) = Тип("Дата") Тогда                                 
				Формат2 					= "ДФ=""дд.ММ.гггг ЧЧ:мм""; ДП='нет'";		
				ГоризонтальноеПоложение2	= ГоризонтальноеПоложение.Центр;
			КонецЕсли;
			
			ОбластьСтрока_ШапкаСообщения.Параметры.ПолеСообщения	= Стр.Ключ;
			ОбластьСтрока_ШапкаСообщения.Параметры.Значение1 		= Формат(Стр.Значение1, Формат1);
			ОбластьСтрока_ШапкаСообщения.Параметры.Значение2 		= Формат(Стр.Значение2, Формат2);
			Таб.Вывести(ОбластьСтрока_ШапкаСообщения);
			
			ОбластьЗначение1 = Таб.Область("R"+СокрЛП(НомерТекущейСтрокиШапкаСообщения)+"C3");
			ОбластьЗначение2 = Таб.Область("R"+СокрЛП(НомерТекущейСтрокиШапкаСообщения)+"C4");
			
			ОбластьЗначение1.ГоризонтальноеПоложение = ГоризонтальноеПоложение1;
			ОбластьЗначение2.ГоризонтальноеПоложение = ГоризонтальноеПоложение2;
			
			Если Стр.ЕстьРасхождения Тогда
				ОбластьЗначение2.ЦветФона = ЦветУточнения;
			КонецЕсли;
			
			НомерТекущейСтрокиШапкаСообщения = НомерТекущейСтрокиШапкаСообщения + 1;
			
		КонецЦикла;
		
		Таб.Вывести(Макет.ПолучитьОбласть("Разделитель"));
		
	КонецЕсли;
		
	ОбластьШапкаТаблицы.Параметры.ИмяКолонки1 = ПараметрыВывода.ИмяКолонки1;
	ОбластьШапкаТаблицы.Параметры.ИмяКолонки2 = ПараметрыВывода.ИмяКолонки2;
	
	Таб.Вывести(ОбластьШапкаТаблицы);
	
	РассчитывалсяНДС = Истина;
	
	Если ПараметрыВывода.ТаблицаСравнения.Колонки.Найти("БазоваяЦена1") = Неопределено Тогда
		РассчитывалсяНДС = Ложь;
	КонецЕсли;
	
	ЕстьСтавкиНДС = Истина;
	Если ПараметрыВывода.ТаблицаСравнения.Колонки.Найти("СтавкаНДС1") = Неопределено Тогда
		ЕстьСтавкиНДС = Ложь;
	КонецЕсли;
	Если ПараметрыВывода.ТаблицаСравнения.Колонки.Найти("СтавкаНДС2") = Неопределено Тогда
		ЕстьСтавкиНДС = Ложь;
	КонецЕсли;
	
	Для каждого Стр Из ПараметрыВывода.ТаблицаСравнения Цикл
		
		Если ЕстьСтавкиНДС Тогда
			Если СокрЛП(Стр.СтавкаНДС1) = "NOT_APPLICABLE" Тогда
				Стр.СтавкаНДС1 = "Без НДС";
			КонецЕсли;
			Если СокрЛП(Стр.СтавкаНДС2) = "NOT_APPLICABLE" Тогда
				Стр.СтавкаНДС2 = "Без НДС";
			КонецЕсли;
		КонецЕсли;
		
		ОбластьСтрока.Параметры.Заполнить(Стр);
		
		Попытка
			Если НЕ ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				ОбластьСтрока.Параметры.Номенклатура = Стр.Наименование;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Таб.Вывести(ОбластьСтрока);
		
        ЦветКоличества = Неопределено;
		
		ЕстьКоличество = Истина;
		
		Если НЕ ЗначениеЗаполнено(Стр.Количество2) Тогда
			ЦветКоличества = ЦветОтклонения;
			ЕстьКоличество = Ложь;
		ИначеЕсли НЕ Стр.Количество2 = Стр.Количество1 Тогда
			ЦветКоличества = ЦветУточнения;
		КонецЕсли;
		
		Если Не ЦветКоличества = Неопределено Тогда
			
			ОбластьКоличества = Таб.Область("R"+СокрЛП(НомерТекущейСтроки)+"C6");
			ОбластьКоличества.ЦветФона = ЦветКоличества;
			
		КонецЕсли;
		
		Если ЕстьКоличество Тогда
			Если НЕ ПараметрыВывода.СравниваемыеПоля.НайтиПоЗначению("ЦенаБезНДС") = Неопределено Тогда
				Если ЗначениеЗаполнено(Стр.ЦенаБезНДС2) И НЕ Стр.ЦенаБезНДС2 = Стр.ЦенаБезНДС1 Тогда
					ОбластьЦена = Таб.Область("R"+СокрЛП(НомерТекущейСтроки)+"C8");
					ОбластьЦена.ЦветФона = ЦветУточнения;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПараметрыВывода.СравниваемыеПоля.НайтиПоЗначению("ЦенаСНДС") = Неопределено Тогда
				Если ЗначениеЗаполнено(Стр.ЦенаСНДС2) И НЕ Стр.ЦенаСНДС2 = Стр.ЦенаСНДС1 Тогда
					ОбластьЦена = Таб.Область("R"+СокрЛП(НомерТекущейСтроки)+"C10");
					ОбластьЦена.ЦветФона = ЦветУточнения;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПараметрыВывода.СравниваемыеПоля.НайтиПоЗначению("СтавкаНДС1С") = Неопределено Тогда
				Если ЗначениеЗаполнено(Стр.СтавкаНДС1) И НЕ Стр.СтавкаНДС1 = Стр.СтавкаНДС2 Тогда
					ОбластьЦена = Таб.Область("R"+СокрЛП(НомерТекущейСтроки)+"C12");
					ОбластьЦена.ЦветФона = ЦветУточнения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если РассчитывалсяНДС Тогда
			
			Если Стр.БазоваяЦена1 = "БезНДС" Тогда
				ОбластьЦена = Таб.Область("R"+СокрЛП(НомерТекущейСтроки)+"C9");
				ОбластьЦена.ЦветТекста = WebЦвета.КоролевскиГолубой;
				ОбластьЦена.Шрифт = Новый Шрифт(ОбластьЦена.Шрифт,,,,Истина);
			КонецЕсли;
			Если Стр.БазоваяЦена1 = "СНДС" Тогда
				ОбластьЦена = Таб.Область("R"+СокрЛП(НомерТекущейСтроки)+"C7");
				ОбластьЦена.ЦветТекста = WebЦвета.КоролевскиГолубой;
				ОбластьЦена.Шрифт = Новый Шрифт(ОбластьЦена.Шрифт,,,,Истина);
			КонецЕсли;
			Если Стр.БазоваяЦена2 = "БезНДС" Тогда
				ОбластьЦена = Таб.Область("R"+СокрЛП(НомерТекущейСтроки)+"C10");
				ОбластьЦена.ЦветТекста = WebЦвета.КоролевскиГолубой;
				ОбластьЦена.Шрифт = Новый Шрифт(ОбластьЦена.Шрифт,,,,Истина);
			КонецЕсли;
			Если Стр.БазоваяЦена2 = "СНДС" Тогда
				ОбластьЦена = Таб.Область("R"+СокрЛП(НомерТекущейСтроки)+"C8");
				ОбластьЦена.ЦветТекста = WebЦвета.КоролевскиГолубой;
				ОбластьЦена.Шрифт = Новый Шрифт(ОбластьЦена.Шрифт,,,,Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки+1;
		
	КонецЦикла;
	
	Таб.Вывести(ОбластьПодвал);	
	
КонецПроцедуры

Функция ПолучитьСообщенияПоКоторымНеОтправленыУведомления()
	
	//на рефакторинг: разбить на 2(4???) функции по read и cheking или поставщик и сеть
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	//отбор заказов, по которым нужно отправить статусное сообщение
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтурEDI_Сообщения.Ссылка КАК СообщениеСсылка,
	|	КонтурEDI_Сообщения.Документ КАК Документ,
	|	""ORDERS"" КАК ТипСообщения,
	|	""Read"" КАК СостояниеОбработки
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	НЕ КонтурEDI_Сообщения.ОтправленоУведомлениеОПрочтении
	|	И НЕ КонтурEDI_Сообщения.ПометкаУдаления
	|	И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
	|	И КонтурEDI_Сообщения.Направление = ""Входящее""
	|	И НЕ КонтурEDI_Сообщения.Документ = &ПустойДокумент";

	Если ВнешнееХранилище Тогда
		Запрос.УстановитьПараметр("ПустойДокумент","");
	Иначе
		Запрос.УстановитьПараметр("ПустойДокумент",Неопределено);
	КонецЕсли;
				
	//отбор подтверждений заказов и уведомлений об отгрузке, по которым нужно отправить статусное сообщение
	ВалидироватьВходящиеСообщения = (ПолучитьКонстантуEDI("ВалидироватьВходящиеСообщения")=Истина);
	Если ВалидироватьВходящиеСообщения Тогда
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	КонтурEDI_Сообщения.Ссылка КАК СообщениеСсылка,
		|	КонтурEDI_Сообщения.Документ,
		|	КонтурEDI_Сообщения.ТипСообщения,
		|	""Checking"" КАК СостояниеОбработки
		|ИЗ
		|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
		|ГДЕ
		|	НЕ КонтурEDI_Сообщения.ОтправленоУведомлениеОПрочтении
		|	И НЕ КонтурEDI_Сообщения.ПометкаУдаления
		|	И (КонтурEDI_Сообщения.ТипСообщения = ""ORDRSP""
		|			ИЛИ КонтурEDI_Сообщения.ТипСообщения = ""DESADV""
		|			ИЛИ КонтурEDI_Сообщения.ТипСообщения = ""ALCRPT"")
		|	И КонтурEDI_Сообщения.Направление = ""Входящее""";

	КонецЕсли;
		
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ВнешнееХранилище Тогда
		ТЗ = ПолучитьТаблицуИзВнешнейБазы(ТЗ, Новый Структура("Документ",Документы.ТипВсеСсылки()));    
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Процедура ПослеОтправкиУведомленияОПрочтении(СообщениеСсылка)
	
	СообщениеОбъект = ПолучитьОбъектСообщения(СообщениеСсылка);

	СообщениеОбъект.ОтправленоУведомлениеОПрочтении = Истина;
	СохранитьОбъектСообщения(СообщениеОбъект);
	
КонецПроцедуры

Функция ПолучитьСообщенияОжидающиеОтправки()
		
	СтандартнаяОбработкаEDI = Истина;
	ТаблицаДокументов = ОбработкаСобытияПодключаемогоМодуля("ПолучитьСообщенияОжидающиеОтправкиПоТипу",СтандартнаяОбработкаEDI);
	//судьба данного вызова ПМ туманна. Тем более что Тип мы в него не передаем.
	
	Если Не СтандартнаяОбработкаEDI И ЗначениеЗаполнено(ТаблицаДокументов) Тогда
		Возврат	ТаблицаДокументов;
	КонецЕсли;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаДокументов,"ТипСообщения,Документ,Параметры,СообщениеСсылка");
	
	//найдем все нужные сообщения
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Ссылка КАК СообщениеСсылка,
	|	КонтурEDI_Сообщения.ТипСообщения КАК ТипСообщения,
	|	КонтурEDI_Сообщения.Документ КАК Документ
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ТипСообщения В(&ТипСообщения)
	|	И КонтурEDI_Сообщения.Статус = ""Ожидает отправки""
	|	И КонтурEDI_Сообщения.Направление = ""Исходящее""
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтурEDI_Сообщения.Организация,
	|	КонтурEDI_Сообщения.ДатаЗагрузки";

    //Организации пока может и не быть - предусмотреть.
	Если Не ЕстьМетаданныеХраненияОрганизации Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КонтурEDI_Сообщения.Организация,","");//уберем для старых модулей.
	КонецЕсли;
	
	МассивТиповСообщений = EDI_РазложитьСтрокуВМассивСлов("PORDERS,ORDERS,ORDRSP,DESADV,RECADV,INVOIC,COINVOIC,PRICELIST,RETREC",",");
	
	Если ВнешнееХранилище Тогда
		Запрос.УстановитьПараметр("ТипСообщения", СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивТиповСообщений)));
	Иначе
		Запрос.УстановитьПараметр("ТипСообщения", МассивТиповСообщений);
	КонецЕсли;
	
	//PRICAT добавить по готовности.
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Если ВнешнееХранилище Тогда
		ТаблицаДокументов = ПолучитьТаблицуИзВнешнейБазы(ТаблицаДокументов,Новый Структура("Документ",Документы.ТипВсеСсылки()));
	КонецЕсли;
	
	Возврат ТаблицаДокументов;
	
КонецФункции


//********************************************************
//  ПРИЕМКА СООБЩЕНИЙ

Функция ПроверитьРасхожденияМеждуОбратнымЗаказомИЗаказом(ДокументЗаказ,СообщениеЗаказ)
	
	// сравним входящий заказ с документом в 1С через проверенный временем алгоритм подготовки подтверждения заказа
	
	Параметры = Новый Структура();
	Параметры.Вставить("ВходящийЗаказ",СообщениеЗаказ);
	
	//Ответ = ПодготовитьИсходящееСообщение("ORDRSP",ДокументЗаказ,Параметры);
	Ответ = ПодготовитьИсходящееСообщение("PORDERS",ДокументЗаказ,Параметры);
	
	СтруктураТаблицы1 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы1.Вид			= "Сообщение";
	СтруктураТаблицы1.ТипСообщения	= "PORDERS";
	СтруктураТаблицы1.Товары		= СообщениеЗаказ.Товары;
	
	СтруктураТаблицы2 = ПолучитьСтруктуруТаблицыТоваров();
	СтруктураТаблицы2.Вид			= "Сообщение";
	СтруктураТаблицы2.ТипСообщения	= "ORDERS";
	СтруктураТаблицы2.Товары		= Ответ.Товары;
	
	СравниваемыеПоля = Новый СписокЗначений;
	СравниваемыеПоля.Добавить("Количество");
	СравниваемыеПоля.Добавить("ЦенаБезНДС"); 
	СравниваемыеПоля.Добавить("ЦенаСНДС"); 
	
	РезультатСравнения = СравнитьТаблицыТоваров(СтруктураТаблицы1,СтруктураТаблицы2,СравниваемыеПоля);
	
	Возврат РезультатСравнения;
	
КонецФункции

//ORDERS входящий
Функция ПринятьЗаказПокупателя(Сообщение,ПервоначальнаяЗагрузкаСообщения = Истина)
	
	Если Сообщение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИД = СокрЛП(Сообщение.ID);
	
	Если Сообщение.Свойство("ОбратныйЗаказEDI") И ЗначениеЗаполнено(Сообщение.ОбратныйЗаказEDI.Номер) Тогда
		
		ИзначальныйЗаказ1С = Сообщение.ОбратныйЗаказ1С;
			
		Если ЗначениеЗаполнено(Сообщение.ОбратныйЗаказ1С) Тогда
			
			// Сравниваем табличные части по кодам товаров
			
			ПересчитатьТоварыСообщения(Сообщение.Товары,Сообщение.Отправитель1С,"ВEDI");//пересчитаем обратно
			
			РезультатПроверки = ПроверитьРасхожденияМеждуОбратнымЗаказомИЗаказом(ИзначальныйЗаказ1С,Сообщение);
			
			// Если есть расхождения, присваиваем статус "ЕстьРасхождения".
			// Иначе присваиваем статус "НетРасхождений"
			Если РезультатПроверки.Успешно = Истина И НЕ РезультатПроверки.ЕстьРасхождения Тогда
				УстановитьСтатусДокумента(ИзначальныйЗаказ1С,"НетРасхождений","ОбратныйЗаказ");
			Иначе
				УстановитьСтатусДокумента(ИзначальныйЗаказ1С,"ЕстьРасхождения","ОбратныйЗаказ");
			КонецЕсли;
			
			// вызов подключаемого модуля оставим
			ОбработкаСобытияПодключаемогоМодуля("ПриЗагрузкеВходящегоСообщения",,Новый Структура("Сообщение,ДокументСсылка",Сообщение,ИзначальныйЗаказ1С));
			
			Возврат ИзначальныйЗаказ1С.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сообщение.Договор) Тогда
		//перенес сюда из ПослеКонвертацииСообщенияEDIВ1С
		Сообщение.Договор = ПолучитьДоговорКонтрагентаДляСообщения(Сообщение,ОпределитьКемМыЯвляемся(Сообщение));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение.Договор) Тогда
		// запомним договор по умолчанию
		УстановитьЗначениеСвойстваОбъекта(Сообщение.Покупатель1С, "GUIDДоговораПоУмолчанию", СокрЛП(Сообщение.Договор.УникальныйИдентификатор()));
	КонецЕсли;
	
	ТипДокументаORDERS = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина);
	
	НовыйДокумент = ?(ПервоначальнаяЗагрузкаСообщения,Документы[ТипДокументаORDERS].СоздатьДокумент(),Сообщение.ДокументСсылка.ПолучитьОбъект());
	
	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьВходящийДокументПоСообщению_ORDERS",СтандартнаяОбработкаEDI,Новый Структура("Сообщение,Документ",Сообщение,НовыйДокумент));
	//Здесь можно полностью переопределить заполнение документа
	
	Если СтандартнаяОбработкаEDI = Истина Тогда
		Если Лев(ИмяКонфигурации1С,3)="УФ_" Тогда
			ЗаполнитьВходящийДокументПоСообщению_ORDERS_УФ(НовыйДокумент,Сообщение);
		Иначе
			ЗаполнитьВходящийДокументПоСообщению_ORDERS_ОФ(НовыйДокумент,Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаСобытияПодключаемогоМодуля("ПриЗагрузкеВходящегоСообщения",,Новый Структура("Сообщение,ДокументСсылка",Сообщение,НовыйДокумент));
	
	НовыйДокумент.Записать();
	
	// когда загружают новую версию заказа в проведенный документ
	Если НовыйДокумент.Проведен Тогда
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить_КонтурEDI("Не удалось перепровести документ: "+СокрЛП(НовыйДокумент.Ссылка));
		КонецПопытки;
	КонецЕсли;
	
	СсылкаНаДокумент = НовыйДокумент.Ссылка;
		
	Возврат СсылкаНаДокумент;
	
КонецФункции

//Заполнение стандартных и не очень реквизитов: счета учета, виды операций и т.д.
//По сути это помойка алгоритмов, рассчитанная на типовую конфигурацию из списка поддерживаемых.
//Выполнение процедуры на любой нетиповой конфигурации будет валиться с вероятностью около 1, 
//	поэтому в новых конфигурациях ее лучше отключать и писать свою в ПМ на событие "ЗаполнитьВходящийДокументПоСообщению_ORDERS"
Процедура ДозаполнитьПоляДокументаИзВходящегоORDERS(Документ,Сообщение)

	ИмяТабЧастиТовары = "Товары";
	ИмяСоздаваемогоДокумента = Документ.Метаданные().Имя;
	
	Если ИмяКонфигурации1С = "БП" Тогда
		
		Если ИмяСоздаваемогоДокумента = "схРеализацияСельхозПродукции" Тогда
		    Выполнить("Документ.ВидОпераций = ""СельхозПродукция""");
		ИначеЕсли ИмяСоздаваемогоДокумента = "СчетНаОплатуПокупателю" Тогда
			//ничего
		Иначе
			Выполнить("Документ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия");
			// заполнение руководителя и гл. бухгалтера
			
			ДанныеУполномоченногоЛица = Неопределено;
			ОтветственныеЛица = Неопределено;
			
			Попытка
				Выполнить("ДанныеУполномоченногоЛица = ОбщегоНазначения.ПолучитьДанныеУполномоченногоЛица(Документ.Организация, Документ.Ответственный)");
				Выполнить("ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Документ.Организация, Документ.Дата)");
			Исключение
			КонецПопытки;
				
			Если ДанныеУполномоченногоЛица = Неопределено Тогда 
				Если НЕ ОтветственныеЛица = Неопределено Тогда
					Документ.Руководитель = ОтветственныеЛица.Руководитель;
					Документ.ГлавныйБухгалтер = ОтветственныеЛица.ГлавныйБухгалтер;
					Попытка
						Документ.ЗаРуководителяПоПриказу = "";
						Документ.ЗаГлавногоБухгалтераПоПриказу = "";
					Исключение
					КонецПопытки;
				КонецЕсли;
			Иначе
				Документ.Руководитель = ?(ДанныеУполномоченногоЛица.Руководитель=Неопределено,ОтветственныеЛица.Руководитель,ДанныеУполномоченногоЛица.Руководитель);
				Документ.ГлавныйБухгалтер = ?(ДанныеУполномоченногоЛица.ГлавныйБухгалтер=Неопределено,ОтветственныеЛица.ГлавныйБухгалтер,ДанныеУполномоченногоЛица.ГлавныйБухгалтер);
				Попытка
					Документ.ЗаРуководителяПоПриказу = ?(ДанныеУполномоченногоЛица.Руководитель=Неопределено,"",ДанныеУполномоченногоЛица.ПриказРуководитель);
					Документ.ЗаГлавногоБухгалтераПоПриказу = ?(ДанныеУполномоченногоЛица.ГлавныйБухгалтер=Неопределено,"",ДанныеУполномоченногоЛица.ПриказГлавныйБухгалтер);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
		
		Выполнить("Документ.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.СоСклада;");
		
	Иначе
		
		Если ИмяСоздаваемогоДокумента = "РеализацияТоваровУслуг" Тогда
			Выполнить("Документ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия");
			Выполнить("Документ.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада");
		Иначе
			// для КА
			Попытка
				Выполнить("Документ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	// дозаполним счета учета по умолчанию
	Если ИмяКонфигурации1С = "БП" Тогда
		
		Попытка
			Выполнить("Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;");
		Исключение
		КонецПопытки;
		Попытка
			Выполнить("Документ.ЗаполнитьСчетаУчетаРасчетов();");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из Документ[ИмяТабЧастиТовары] Цикл
		
		//Заполнение ГТД и Страны происхождения в Бухгалтерии предприятия
		
		Если ИмяКонфигурации1С = "БП" Тогда
			
			Попытка
				Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТоваров, Ложь, Документ.Организация, Документ.Дата);");
			Исключение
			КонецПопытки;
			
			Если ИмяСоздаваемогоДокумента = "схРеализацияСельхозПродукции" Тогда
				Выполнить("СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Документ.Организация, СтрокаТоваров.Номенклатура, Документ.Склад);");
				Выполнить("СтрокаТоваров.СчетДоходов 			 = СчетаУчета.СчетДоходов;");
				Выполнить("СтрокаТоваров.СчетРасходов 			 = СчетаУчета.СчетРасходов;");
				Выполнить("СтрокаТоваров.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;");
				Выполнить("СтрокаТоваров.Субконто 				 = НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;");
				Выполнить("СтрокаТоваров.СчетУчета				 = СчетаУчета.СчетУчета;");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ИмяКонфигурации1С = "БП" И НЕ ИмяКонфигурации1С = "ДалионУМ" Тогда
			
			Если ИмяСоздаваемогоДокумента = "РеализацияТоваровУслуг" Тогда
				СтрокаТоваров.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			КонецЕсли;
			
			Если НЕ ИмяКонфигурации1С = "УТ_10_2" И НЕ ИмяКонфигурации1С = "RIT" и НЕ ИмяКонфигурации1С = "ТКПТ" Тогда
				Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура.ЕдиницаИзмеренияМест) Тогда
					Выполнить("ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТоваров,Документ,Ложь);");
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ИмяСоздаваемогоДокумента = "РеализацияТоваровУслуг" Тогда
		
		Если ИмяКонфигурации1С = "УТ_10_2" Тогда
			
			Попытка
				Выполнить("Документ.ОтражатьВУправленческомУчете	= НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, ""НеОтражатьДокументыВУправленческомУчете"");");
				Выполнить("Документ.ОтражатьВБухгалтерскомУчете	= НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, ""НеОтражатьДокументыВБухгалтерскомУчете"");");
				Выполнить("Документ.ОтражатьВНалоговомУчете		= НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, ""НеОтражатьДокументыВНалоговомУчете"");");
			Исключение
			КонецПопытки;
			
		ИначеЕсли ИмяКонфигурации1С = "БП" Тогда
			
			Попытка // для БП 1.6
				Выполнить("Документ.ОтражатьВНалоговомУчете		= НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""НеОтражатьДокументыВНалоговомУчете"");");
			Исключение
			КонецПопытки;
			
			ЗаполнилиСчета = Истина;
			Попытка
				//заполнение счетов учета таб части
				Для каждого СтрокаТоваров из Документ[ИмяТабЧастиТовары] Цикл
					Документ.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТоваров, ИмяТабЧастиТовары, истина, Документ.ОтражатьВНалоговомУчете);
				КонецЦикла;
			Исключение
				ЗаполнилиСчета = Ложь;
			КонецПопытки;
			
			Если НЕ ЗаполнилиСчета Тогда
				Для каждого СтрокаТоваров из Документ[ИмяТабЧастиТовары] Цикл
					Документ.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТоваров, ИмяТабЧастиТовары, истина);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Попытка
				
				Выполнить("Документ.ОтражатьВУправленческомУчете	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОтражатьДокументыВУправленческомУчете"");");
				Выполнить("Документ.ОтражатьВБухгалтерскомУчете	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОтражатьДокументыВБухгалтерскомУчете"");");
				Выполнить("Документ.ОтражатьВНалоговомУчете		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОтражатьДокументыВНалоговомУчете"");");
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСоздаваемогоДокумента = "схРеализацияСельхозПродукции" Тогда
		ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата, ДоговорПоМолоку");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Документ);
		Выполнить("ЗаполнитьЗначенияСвойств(Документ, схОбщийСервер.ПриИзмененииЗначенияДоговора(ДанныеОбменаССервером))");
				
	КонецЕсли;
	
КонецПроцедуры

//сети часто присылают сообщения, в которых не хватает полей: цена с/без НДС, сумма НДС, сумма с/без НДС
//постараемся рассчитать их здесь
//алгоритм ранее реализован в 7.7
Процедура ЗаполнитьНедостающиеПоляСтрокиТоваров(Стр) Экспорт
	
	Если Стр.Количество > 0 Тогда
		
		Попытка
			Выполнить("КоэффНДС = УчетНДС.ПолучитьСтавкуНДС(Стр.СтавкаНДС1С);");
		Исключение
			Выполнить("КоэффНДС = МодульТиповой_ПолучитьСтавкуНДС(Стр.СтавкаНДС1С);");
		КонецПопытки;
		
		КоэффНДС=КоэффНДС/100;
		
		Если Стр.ЦенаБезНДС=0 Тогда
			Если Стр.СуммаБезНДС<>0 Тогда
				Стр.ЦенаБезНДС=Окр(Стр.СуммаБезНДС/Стр.Количество,2);
			ИначеЕсли Стр.СуммаСНДС<>0 Тогда
				Стр.ЦенаБезНДС=Окр(Стр.СуммаСНДС/(1+КоэффНДС)/Стр.Количество,2);
			ИначеЕсли Стр.ЦенаСНДС<>0 Тогда
				Стр.ЦенаБезНДС=Окр(Стр.ЦенаСНДС/(1+КоэффНДС),2);
			ИначеЕсли (Стр.СуммаНДС<>0) И (КоэффНДС<>0) Тогда
				Стр.ЦенаБезНДС=Окр(Стр.СуммаНДС/(КоэффНДС*Стр.Количество),2);
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.ЦенаСНДС=0 Тогда
			Если Стр.СуммаСНДС<>0 Тогда
				Стр.ЦенаСНДС=Окр(Стр.СуммаСНДС/Стр.Количество,2);
			ИначеЕсли Стр.СуммаБезНДС<>0 Тогда
				Стр.ЦенаСНДС=Окр(Стр.СуммаБезНДС*(1+КоэффНДС)/Стр.Количество,2);
			ИначеЕсли Стр.ЦенаБезНДС<>0 Тогда
				Стр.ЦенаСНДС=Окр(Стр.ЦенаБезНДС*(1+КоэффНДС),2);
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.СуммаНДС=0 Тогда
			Если Стр.СуммаБезНДС<>0 Тогда
				Стр.СуммаНДС=Окр(Стр.СуммаБезНДС*КоэффНДС,2);
			ИначеЕсли Стр.СуммаСНДС<>0 Тогда
				Стр.СуммаНДС=Окр(Стр.СуммаСНДС*КоэффНДС/(1+КоэффНДС),2);
			ИначеЕсли Стр.ЦенаСНДС<>0 Тогда
				Стр.СуммаНДС=Окр(Окр(Стр.ЦенаСНДС*Стр.Количество,2)*КоэффНДС/(1+КоэффНДС),2);
			ИначеЕсли Стр.ЦенаБезНДС<>0 Тогда
				Стр.СуммаНДС=Окр(Окр(Стр.ЦенаБезНДС*Стр.Количество,2)*КоэффНДС,2);
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.СуммаБезНДС=0 Тогда
			Если Стр.ЦенаБезНДС<>0 Тогда
				Стр.СуммаБезНДС=Окр(Стр.ЦенаБезНДС*Стр.Количество,2);
			ИначеЕсли Стр.ЦенаСНДС<>0 Тогда
				Стр.СуммаБезНДС=Окр(Окр(Стр.ЦенаСНДС*Стр.Количество,2)/(1+КоэффНДС),2);
			ИначеЕсли Стр.СуммаСНДС<>0 Тогда
				Стр.СуммаБезНДС=Окр(Стр.СуммаСНДС*КоэффНДС/(1+КоэффНДС),2);
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.СуммаСНДС=0 Тогда
			Если Стр.ЦенаСНДС<>0 Тогда
				Стр.СуммаСНДС=Окр(Стр.ЦенаСНДС*Стр.Количество,2);
			ИначеЕсли Стр.СуммаБезНДС<>0 Тогда
				Стр.СуммаСНДС=Окр(Стр.СуммаБезНДС*(1+КоэффНДС),2);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры	

//функция оставлена для совместимости со старыми ПМ
Процедура УстановитьСобственныеЦеныВЗаказе(Сообщение,НовыйДокумент) Экспорт
	ЗаполнятьЦены=Ложь;
	
	УстанавливатьСобственныеЦеныВЗаказах = (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Отправитель1С,"УстанавливатьСобственныеЦеныВЗаказах")=Истина);
	
	Если УстанавливатьСобственныеЦеныВЗаказах Тогда
		
		ЦеныУстановлены = ПерезаполнитьЦеныСкидкиВДокументе(НовыйДокумент);
		
		Если Не ЦеныУстановлены Тогда
			ВызватьИсключение "В документе не указан тип цен: невозможно установить собственные цены"; //свалимся намертво, чтоб не пропустить некорректные цены
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

//рассчитаем цены с использованием типовых механизмов
//по сути здесь вызывается нажатие кнопки "Цены и валюта" с флагом "Перезаполнить цены по типу цен"
//если есть скидки, они тоже применятся
Функция ПерезаполнитьЦеныСкидкиВДокументе(НовыйДокумент) Экспорт
	
 	СтандартнаяОбработкаEDI = Истина;
    ОбработкаСобытияПодключаемогоМодуля("ПерезаполнитьЦеныСкидкиВДокументе",СтандартнаяОбработкаEDI,Новый Структура("ДокументСсылка,Документ",НовыйДокумент,НовыйДокумент));
	// Немного legacy: параметр НовыйДокумент дублируется под разными именами для совместимости с уже существующими ПМ.
    Если Не СтандартнаяОбработкаEDI Тогда
        Возврат Истина;
	КонецЕсли;
	
	ИмяРеквизитаТипЦен = ?(ИмяКонфигурации1С = "ДалионУМ", "КатегорияЦен", "ТипЦен");
	ТипЦен = НовыйДокумент[ИмяРеквизитаТипЦен];

	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		//не удастся установить
		Сообщить_КонтурEDI("В документе не указан тип цен: невозможно установить собственные цены");
		Возврат Ложь;
		//ВызватьИсключение "В документе не указан тип цен: невозможно установить собственные цены"; //свалимся намертво, чтоб не пропустить некорректные цены
		//Возврат;
	КонецЕсли;
	
	//ЦеныУстановлены=Ложь;
	//Если ИмяКонфигурации1С = "УТ" Тогда
	//	ЦеныУстановлены=УстановитьСобственныеценыВЗаказ_УТ(Док);
	//ИначеЕсли ИмяКонфигурации1С = "БП" Тогда 
	//	ЦеныУстановлены=УстановитьСобственныеценыВЗаказ_БП(Док);
	//КонецЕсли;
	
	Если ИмяКонфигурации1С = "УТ_10_3"
		Или ИмяКонфигурации1С = "УТ_10_2" 
		Или ИмяКонфигурации1С = "БП" 
		Или ИмяКонфигурации1С = "КА" 
		Или ИмяКонфигурации1С = "УПП" 
		Или ИмяКонфигурации1С = "RIT" 
		Тогда 
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		
		ТекущиеЗначенияРеквизитов=Новый Структура;//заглушка для "Выполнить"
		Если ИмяКонфигурации1С = "УТ_10_2" Тогда
			Выполнить("ТекущиеЗначенияРеквизитов = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(НовыйДокумент)");
		Иначе
			Выполнить("ТекущиеЗначенияРеквизитов = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(НовыйДокумент)");
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(ТекущиеЗначенияРеквизитов,НовыйДокумент);
		
		//в УПП эти реквизиты переименованы
		Если ИмяКонфигурации1С <> "БП" Тогда	
			ТекущиеЗначенияРеквизитов.Вставить("КурсДокумента",ТекущиеЗначенияРеквизитов.КурсВзаиморасчетов);
			ТекущиеЗначенияРеквизитов.Вставить("КратностьДокумента",ТекущиеЗначенияРеквизитов.КратностьВзаиморасчетов);
		КонецЕсли;	
		
		Для Каждого Эл Из ТекущиеЗначенияРеквизитов Цикл
			ТекущиеЗначенияРеквизитов.Вставить("Текущий"+Эл.Ключ,Эл.Значение);//вставляем объекты вида "НовыйТипЦен"
			ТекущиеЗначенияРеквизитов.Вставить("Новый"+Эл.Ключ,Эл.Значение);//вставляем объекты вида "НовыйТипЦен"
		КонецЦикла;	
		
		ТекущиеЗначенияРеквизитов.Вставить("ПерезаполнитьЦеныПоТипу"       , Истина);
		ТекущиеЗначенияРеквизитов.Вставить("ПересчитатьЦеныПоВалюте"       , Ложь);
		
		Если ИмяКонфигурации1С = "УТ_10_2" Тогда
			Выполнить("ИзменитьЦеныВалюту(НовыйДокумент, СпособЗаполненияЦен, ТекущиеЗначенияРеквизитов, , ""Товары"",
			|НовыйДокумент.мВалютаРегламентированногоУчета, , ТекущиеЗначенияРеквизитов)");
		Иначе
			Выполнить("ЗаполнениеДокументов.ИзменитьЦеныВалюту(НовыйДокумент, СпособЗаполненияЦен, ТекущиеЗначенияРеквизитов, , ""Товары"",
			|НовыйДокумент.мВалютаРегламентированногоУчета, , ТекущиеЗначенияРеквизитов)");
		КонецЕсли;													
		
		Если ИмяКонфигурации1С = "УТ_10_3" Тогда
			
			НовыйДокумент.ПересчитатьАвтоматическиеСкидки();
			
		ИначеЕсли ИмяКонфигурации1С = "КА" Тогда
			
			РассчитыватьСкидки = Истина;
			Если ТипЗнч(НовыйДокумент) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
				Выполнить("НовыйДокумент.мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа()");
				Выполнить("РассчитыватьСкидки = НовыйДокумент.РассчитыватьАвтоматическиеСкидки()");
				_УчетнаяПолитикаУпр = НовыйДокумент.мУчетнаяПолитика;
				мМинимальныеЦены = НовыйДокумент.мМинимальныеЦены;
				мСписокФильтров = НовыйДокумент.мСписокФильтров;
			Иначе//Реализация
				мМинимальныеЦены = Новый ТаблицаЗначений;
				мМинимальныеЦены.Колонки.Добавить("Номенклатура");
				мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
				мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
				мМинимальныеЦены.Колонки.Добавить("Цена");
				
				Выполнить("_УчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(НовыйДокумент.Дата)");
				Выполнить("мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа()");
				
			КонецЕсли;	
			
			Выполнить("
			
			|мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(НовыйДокумент.Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(НовыйДокумент.Услуги);
			|
			|Если РассчитыватьСкидки Тогда
			|	СтруктураПараметров = Новый Структура;
			|	СтруктураПараметров.Вставить(""ВидРеализации""                      , Перечисления.ВидыСкидок.Оптовая);
			|	СтруктураПараметров.Вставить(""СуммаДокумента""                     , мСуммаДокументаБезСкидок);
			|	СтруктураПараметров.Вставить(""Карта""                              , НовыйДокумент.ДисконтнаяКарта);
			|	СтруктураПараметров.Вставить(""УчитыватьНДС""                       , НовыйДокумент.УчитыватьНДС);
			|	СтруктураПараметров.Вставить(""СуммаВключаетНДС""                   , НовыйДокумент.СуммаВключаетНДС);
			|	СтруктураПараметров.Вставить(""ВалютаРегламентированногоУчета""     , НовыйДокумент.мВалютаРегламентированногоУчета);
			|	СтруктураПараметров.Вставить(""УчетнаяПолитика""					, _УчетнаяПолитикаУпр);
			|	
			|	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(НовыйДокумент, НовыйДокумент.Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			|	ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(НовыйДокумент, НовыйДокумент.Услуги, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			|	
			|КонецЕсли;
			|");
			
		ИначеЕсли ИмяКонфигурации1С = "УТ_10_2" Тогда
			
			Выполнить("
			|ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(НовыйДокумент.Дата);
			|Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
			|	Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
			|	Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
			|	Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте Тогда
			|	мРассчитыватьАвтоматическиеСкидки = Истина;
			|Иначе
			|	мРассчитыватьАвтоматическиеСкидки = Ложь;
			|КонецЕсли;
			|мМинимальныеЦены = Новый ТаблицаЗначений;
			|мМинимальныеЦены.Колонки.Добавить(""Номенклатура"");
			|мМинимальныеЦены.Колонки.Добавить(""ХарактеристикаНоменклатуры"");
			|мМинимальныеЦены.Колонки.Добавить(""ЕдиницаИзмерения"");
			|мМинимальныеЦены.Колонки.Добавить(""Цена"");
			|
			|мСписокФильтров = ПолучитьЗначениеПраваПользователя(
			|ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
			|	Неопределено);
			|Если мРассчитыватьАвтоматическиеСкидки Тогда 
			|	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(НовыйДокумент.Товары);
			|	СтруктураПараметров = Новый Структура;                             
			|	СтруктураПараметров.Вставить(""ВидРеализации"",                        Перечисления.ВидыСкидок.Оптовая);
			|	СтруктураПараметров.Вставить(""СуммаДокумента"",                       мСуммаДокументаБезСкидок);
			|	СтруктураПараметров.Вставить(""Карта"",                                НовыйДокумент.ДисконтнаяКарта);
			|	СтруктураПараметров.Вставить(""УчитыватьНДС"",                         НовыйДокумент.УчитыватьНДС);
			|	СтруктураПараметров.Вставить(""СуммаВключаетНДС"",                     НовыйДокумент.СуммаВключаетНДС);
			|	СтруктураПараметров.Вставить(""ВалютаРегламентированногоУчета"",       НовыйДокумент.мВалютаРегламентированногоУчета);
			|	РассчитатьСкидкиПриПродаже(НовыйДокумент, НовыйДокумент.Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			|КонецЕсли;
			|");
			
		ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
			
			Выполнить("
			|Для каждого ТекСтрока Из НовыйДокумент.Товары Цикл 		
			|	ТипЦен=Неопределено;
			|	Попытка 
			|		ТипЦен=НовыйДокумент.ТипЦен; 
			|	Исключение 
			|		Попытка ТипЦен=НовыйДокумент.СкладКомпании.ТипЦенРозничнойТорговли; Исключение КонецПопытки;
			|	КонецПопытки;
			|	Попытка
			|		МоментЦены = ?(НЕ ЗначениеЗаполнено(НовыйДокумент.Дата),КонецДня(ТекущаяДата()),НовыйДокумент.Дата);
			|	Исключение
			|		МоментЦены = Неопределено;
			|	КонецПопытки;
			|	Попытка
			|		ТекСтрока.Цена=обПолучитьЦену(ТипЦен,ТекСтрока.Номенклатура,МоментЦены,,НовыйДокумент.ВалютаДокумента,НовыйДокумент.КурсДокумента);
			|		НовыйДокумент.ОбработкаРеквизита(""Товары.Количество"",ТекСтрока);
			|	Исключение КонецПопытки;
			|КонецЦикла;  
			|");
			
		ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
		
			СтруктураРеквизитовДокумента = Новый Структура;
			Выполнить("СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(НовыйДокумент);");
			
			СтруктураЗначений = Новый Структура;
			Для Каждого Элемент Из СтруктураРеквизитовДокумента Цикл
				СтруктураЗначений.Вставить("Текущий" + Элемент.Ключ, НовыйДокумент[Элемент.Ключ]);
				СтруктураЗначений.Вставить("Новый"   + Элемент.Ключ, НовыйДокумент[Элемент.Ключ]);
			КонецЦикла;
			СтруктураЗначений.Вставить("ТекущийКратностьДокумента", 1);
			СтруктураЗначений.Вставить("НовыйКратностьДокумента", 1);
			СтруктураЗначений.Вставить("ТекущийКурсДокумента", 1);
			СтруктураЗначений.Вставить("НовыйКурсДокумента", 1);
			СтруктураЗначений.Вставить("ПересчитатьЦеныПоВалюте",		Истина);
			СтруктураЗначений.Вставить("ПерезаполнитьЦеныПоКатегории",	Истина);
			СтруктураЗначений.Вставить("ТекущийВалютаВзаиморасчетов",	НовыйДокумент.ВалютаДокумента);
			СтруктураЗначений.Вставить("НеПересчитыватьЦены",			Ложь);
		    		
			Выполнить("ОбработатьИзмененияПоКнопкеЦеныВалюта(НовыйДокумент, СтруктураРеквизитовДокумента, ""Товары"", Константы.ВалютаРегламентированногоУчета.Получить(), СтруктураЗначений, Истина);");	
		
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСобственныеценыВЗаказ_УТ(Док) Экспорт
	
	Если ТипЗнч(Док) = Тип("ДокументОбъект.ЗаказКлиента") Тогда 
		//заполнение цен документа заказ клиента
		СтруктураПересчетаСуммы=Неопределено;
		ОбщийМодуль=Неопределено;
		Выполнить("ОбщийМодуль= ОбработкаТабличнойЧастиКлиентСервер;");
		СтруктураПересчетаСуммы = ОбщийМодуль.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
		
		Если ЗначениеЗаполнено(Док.Соглашение) Тогда 
			//по соглашению
			//Функция ЗаполнитьЦеныПоСоглашениюСервер() формы документа
		Выполнить("ОбщийМодуль= ПродажиСервер;");
			ЦеныРассчитаны = ОбщийМодуль.ЗаполнитьЦены(
			Док.Товары,
			, // Массив строк или структура отбора
			Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Док.Дата,
			Док.Валюта,
			Док.Соглашение,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
			),
			СтруктураДействий);
			
			
		Иначе
			////по виду  //пока в аналитике
			////Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)  формы документа
			//
			//ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
			//Объект.Товары,
			//, // Массив строк или структура отбора
			//Новый Структура( // Параметры заполнения
			//"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			//Объект.Дата,
			//Объект.Валюта,
			//ВидЦен,
			//"Цена, ВидЦены"
			//),
			//СтруктураДействий);
			
		КонецЕсли;
		
		//ОбработкаТабличнойЧастиСервер.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Док.Товары, Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС, СуммаАвтоматическойСкидки, СуммаРучнойСкидки"));
		
	ИначеЕсли  ТипЗнч(Док) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда 
		//заполнение цен документа РТУ
		Если ЗначениеЗаполнено(Док.Соглашение) Тогда 
			
		Выполнить("ОбщийМодуль= ОбработкаТабличнойЧастиКлиентСервер;");
		СтруктураПересчетаСуммы = ОбщийМодуль.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Док);
		Выполнить("ОбщийМодуль= ПродажиСервер;");
			ЦеныРассчитаны = ОбщийМодуль.ЗаполнитьЦены(
			Док.Товары, // Табличная часть
			, // Массив строк или структура отбора
			Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Док.Дата,
			Док.Валюта,
			Док.Соглашение,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
			),
			Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ОчиститьСуммуВзаиморасчетов",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Неопределено
			)
			);
			
		Иначе
			////по виду  //пока в аналитике
			////Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)  формы документа
			//
			
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Док.СуммаДокумента = Док.Товары.Итог("Сумма");
	Возврат истина;
	
КонецФункции

Функция УстановитьСобственныеценыВЗаказ_БП(Док) Экспорт
	
	ДокОбъект=Док;
	ОбщийМодуль=Неопределено;
	ОбщийМодуль2=Неопределено;

		ЗначениеПустогоКоличества=0;
	
		Если  ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") 
		  ИЛИ ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда 
			//заполнение цен документа РТУ или счета
			
			Если ЗначениеЗаполнено(ДокОбъект.ТипЦен) Тогда 
				
				СписокНоменклатуры = Неопределено;
				Выполнить("СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(ДокОбъект.Товары, ""Номенклатура"", Истина)");
				Выполнить("ОбщийМодуль= Ценообразование;");
				ТаблицаЦенНоменклатуры	= ОбщийМодуль.ПолучитьТаблицуЦенНоменклатуры(
				СписокНоменклатуры,
				ДокОбъект.ТипЦен,
				ДокОбъект.Дата);
				
				//обход тч
				Для Каждого Строка Из ДокОбъект.Товары Цикл
					
					НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
					Если НайденнаяСтрока <> Неопределено Тогда
						Выполнить("
						|Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						|НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, ДокОбъект.ВалютаДокумента, НайденнаяСтрока.Курс,
						|ДокОбъект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, ДокОбъект.КратностьВзаиморасчетов)");
					иначе
						Цена=0;
					КонецЕсли;
					
					// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
					ЦенаВключаетНДС = ?(ЗначениеЗаполнено(ДокОбъект.ТипЦен), ДокОбъект.ТипЦен.ЦенаВключаетНДС, Ложь);
					Выполнить("ОбщийМодуль= УчетНДСКлиентСервер;");
					Выполнить("ОбщийМодуль2= УчетНДСВызовСервераПовтИсп;");
					Строка.Цена = ОбщийМодуль.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					Цена, ЦенаВключаетНДС, ДокОбъект.СуммаВключаетНДС, ОбщийМодуль2.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
					
					Строка.Сумма = Строка.Цена * ?(Строка.Количество = 0, ЗначениеПустогоКоличества, Строка.Количество);
					Строка.СуммаНДС = ОбщийМодуль.РассчитатьСуммуНДС(Строка.Сумма, ДокОбъект.СуммаВключаетНДС, ОбщийМодуль2.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
					
				КонецЦикла;
				
				//счета учета для РТУ
				Если  ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
					Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОбъект, "Товары");
				КонецЕсли;
				
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
		ДокОбъект.Записать();
		Возврат истина;
КонецФункции

Функция УстановитьСобственныеценыВЗаказ_УНФ16(Док) Экспорт
	
	ОбщийМодуль=Неопределено;
	ОбщийМодуль2=Неопределено;
	Выполнить("ОбщийМодуль = УправлениеНебольшойФирмойСервер;");
	Выполнить("ОбщийМодуль2 = РаботаСНоменклатуройКлиентСервер;");
	
	ДокОбъект=Док;
	ТабличнаяЧастьДокумента = Новый Массив;
	ПересчитатьСкидки=Истина;
	
	СтруктураДанных = новый Структура;
	СтруктураДанных.Вставить("Дата",				ДокОбъект.Дата);
	СтруктураДанных.Вставить("Организация",			ДокОбъект.Организация);
	СтруктураДанных.Вставить("ВидЦен",				ДокОбъект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		ДокОбъект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	ДокОбъект.СуммаВключаетНДС);
	
	Если ПересчитатьСкидки Тогда
		СтруктураДанных.Вставить("ВидСкидкиНаценки", ДокОбъект.ВидСкидкиНаценки);
		СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
		Если ОбщийМодуль.ЕстьРеквизитДокументаПоСсылке("ПроцентСкидкиПоДисконтнойКарте", ДокОбъект.Ссылка) Тогда
			СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", ДокОбъект.ПроцентСкидкиПоДисконтнойКарте);		
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ДокОбъект.Запасы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;	
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ОбщийМодуль.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		
		РезультатПоиска = ДокОбъект.Запасы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			ОбщийМодуль2.РассчитатьСуммуВСтрокеТабличнойЧасти(ДокОбъект, СтрокаРезультат, "Запасы");
			
			//пересчитать скидки   
			//к сожалению у них тут: "РаботаСНоменклатуройКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти" баг и оно не взлетит. оставлю, вдруг починят
			
			//Если ПересчитатьСкидки Тогда 
			//	Для каждого СтрокаТабличнойЧасти Из ДокОбъект.Запасы Цикл
			//		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
			//		ОбщийМодуль2.РассчитатьСуммуВСтрокеТабличнойЧасти(ДокОбъект, СтрокаТабличнойЧасти, "Запасы")
			//	КонецЦикла;
			//КонецЕсли;
			
			//пересчитаем так как было бы, если бы бага не было
			СтрокаРезультат.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
			Если СтрокаРезультат.ПроцентСкидкиНаценки <> 0 И СтрокаРезультат.Количество <> 0 Тогда
				СтрокаРезультат.Сумма = СтрокаРезультат.Сумма * (1 - СтрокаРезультат.ПроцентСкидкиНаценки / 100);
				ОбщийМодуль2.РассчитатьСуммуНДС(ДокОбъект, СтрокаРезультат);
				Если ОбщийМодуль2.ЕстьРеквизитОбъекта_Контур("Всего", СтрокаРезультат) Тогда
					СтрокаРезультат.Всего = СтрокаРезультат.Сумма + ?(ДокОбъект.СуммаВключаетНДС, 0, СтрокаРезультат.СуммаНДС);
				КонецЕсли;
				
			КонецЕсли;		
			
		КонецЦикла;
		
	КонецЦикла;
	
	 
		ДокОбъект.Записать();
		Возврат истина;
КонецФункции

Функция ЭтоУТАП() Экспорт
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	Если Найти(СинонимКонфигурации,"1С: Управление торговлей алкогольной продукцией 8")>0 Тогда
		
		Возврат истина;		
	Иначе
		
		Возврат ложь; 
	КонецЕсли;
КонецФункции

Функция ЭтоERP() Экспорт
	
	СинонимКонфигурации = Метаданные.Синоним;
	
	Если Найти(СинонимКонфигурации,"ERP Управление предприятием")>0 Тогда
		
		Возврат истина;		
	Иначе
		
		Возврат ложь; 
	КонецЕсли;
КонецФункции

Функция УТ11_1_Константа_ИспользоватьПартнеровИКонтрагентов() Экспорт
	ВедетсяУчетПоПартнерам=ложь;
	
	Если ОпределитьКонфигурацию()="УФ_УТ" Тогда 
		Если Метаданные.Константы.Найти("ИспользоватьПартнеровИКонтрагентов")<>Неопределено Тогда 
			Выполнить("ВедетсяУчетПоПартнерам=Константы.ИспользоватьПартнеровИКонтрагентов.Получить();");
		иначе                                                   
			ВедетсяУчетПоПартнерам=Истина
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ВедетсяУчетПоПартнерам;
			
КонецФункции

//********************************************************
//  ПОДГОТОВКА ИСХОДЯЩИХ ДАННЫХ

Функция ПолучитьТекстЗапросаТоваровКорректировкиРеализации(ТипСообщения="COINVOIC",ДокументСсылка)
	
	Если ИмяКонфигурации1С="УФ_УТ" Тогда 
		Возврат УФ_УТ_ПолучитьТекстЗапросаТоваровКорректировкиРеализации(ТипСообщения,ДокументСсылка);
	ИначеЕсли ИмяКонфигурации1С="УФ_БП" Тогда 
		Возврат УФ_БП_ПолучитьТекстЗапросаТоваровКорректировкиРеализации(ТипСообщения,ДокументСсылка);
	ИначеЕсли ИмяКонфигурации1С="БП" Тогда 
		Возврат БП_ПолучитьТекстЗапросаТоваровКорректировкиРеализации(ТипСообщения,ДокументСсылка);
	КонецЕсли;
	
	// исправительная СФ
	Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И ТипЗнч(ДокументСсылка.ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорректировкаРеализацииТовары.НомерСтроки,
		               |	КорректировкаРеализацииТовары.Номенклатура,
		               |	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
		               |	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	КорректировкаРеализацииТовары.Номенклатура.Наименование КАК Наименование,
		               |	КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	КорректировкаРеализацииТовары.Цена,
		               |	КорректировкаРеализацииТовары.СтавкаНДС,
		               |	КорректировкаРеализацииТовары.СерияНоменклатуры,
		               |	ВЫБОР
		               |		КОГДА (КорректировкаРеализацииТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		               |				ИЛИ КорректировкаРеализацииТовары.СерияНоменклатуры.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка))
		               |				И КорректировкаРеализацииТовары.Номенклатура.ВестиУчетПоСериям
		               |			ТОГДА КорректировкаРеализацииТовары.Номенклатура.СтранаПроисхождения
		               |		ИНАЧЕ КорректировкаРеализацииТовары.СерияНоменклатуры.СтранаПроисхождения
		               |	КОНЕЦ КАК Страна,
		               |	ВЫБОР
		               |		КОГДА КорректировкаРеализацииТовары.Номенклатура.ВестиУчетПоСериям
		               |			ТОГДА ЕСТЬNULL(КорректировкаРеализацииТовары.СерияНоменклатуры.НомерГТД.Код, ЕСТЬNULL(КорректировкаРеализацииТовары.Номенклатура.НомерГТД.Код, """"))
		               |		ИНАЧЕ """"
		               |	КОНЕЦ КАК НомерГТД,
		               |	КорректировкаРеализацииТовары.Количество КАК Количество,
		               |	КорректировкаРеализацииТовары.Сумма КАК Сумма,
		               |	КорректировкаРеализацииТовары.СуммаНДС,
		               |	NULL КАК ТипЕдиницы
		               |ИЗ
		               |	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		               |ГДЕ
		               |	КорректировкаРеализацииТовары.Ссылка В(&Ссылка)" ;

		
	// корректировочная СФ	
	Иначе
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорректировкаРеализацииТовары.НомерСтроки,
		               |	КорректировкаРеализацииТовары.Номенклатура,
		               |	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры,
		               |	КорректировкаРеализацииТовары.ЕдиницаИзмерения,
		               |	КорректировкаРеализацииТовары.Номенклатура.Наименование КАК Наименование,
		               |	КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	КорректировкаРеализацииТовары.Цена,
		               |	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
		               |	КорректировкаРеализацииТовары.СтавкаНДС,
		               |	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДСДоКорректировки,
		               |	КорректировкаРеализацииТовары.СерияНоменклатуры,
		               |	ВЫБОР
		               |		КОГДА (КорректировкаРеализацииТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		               |				ИЛИ КорректировкаРеализацииТовары.СерияНоменклатуры.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка))
		               |				И КорректировкаРеализацииТовары.Номенклатура.ВестиУчетПоСериям
		               |			ТОГДА КорректировкаРеализацииТовары.Номенклатура.СтранаПроисхождения
		               |		ИНАЧЕ КорректировкаРеализацииТовары.СерияНоменклатуры.СтранаПроисхождения
		               |	КОНЕЦ КАК Страна,
		               |	ВЫБОР
		               |		КОГДА КорректировкаРеализацииТовары.Номенклатура.ВестиУчетПоСериям
		               |			ТОГДА ЕСТЬNULL(КорректировкаРеализацииТовары.СерияНоменклатуры.НомерГТД.Код, ЕСТЬNULL(КорректировкаРеализацииТовары.Номенклатура.НомерГТД.Код, """"))
		               |		ИНАЧЕ """"
		               |	КОНЕЦ КАК НомерГТД,
		               |	КорректировкаРеализацииТовары.Количество,
		               |	КорректировкаРеализацииТовары.КоличествоДоКорректировки,
		               |	КорректировкаРеализацииТовары.Сумма,
		               |	КорректировкаРеализацииТовары.СуммаДоКорректировки,
		               |	КорректировкаРеализацииТовары.СуммаНДС,
		               |	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		               |ИЗ
		               |	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		               |ГДЕ
		               |	КорректировкаРеализацииТовары.Ссылка В(&Ссылка)" ;
	
	КонецЕсли;
				   
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТоварыДокументаДляСообщения(ДокументСсылка, Преобразовать = Ложь, Источник = Неопределено,МассивВозвратов = Неопределено,Сообщение=Неопределено)
	//теперь здесь есть сообщение т.к. получение товаров может зависеть от содержимого сообщения (например партнера итд) - уже использовано при определении ОтправлятьВозвратнуюТару по партнеру
	
	Если ТипЗнч(ДокументСсылка) = Тип("Массив") Тогда
		_ОсновнойДокумент = ДокументСсылка[0];
	Иначе	
		_ОсновнойДокумент = ДокументСсылка;
	КонецЕсли;
	
	флСуммаВключаетНДС = ПолучитьРеквизитДокументаДляСообщения(_ОсновнойДокумент,"СуммаВключаетНДС");	
	
	//на рефакторинг: похоже, при подготовке DESADV преобразование товаров вызывается дважды: один раз здесь и еще раз при конвертации в EDI
	
	//соберем товары из всех связанных с реализацией возвратов, если их список передан в параметр МассивВозвратов
	
	//мостик между старым и новым вариантом
	Если Источник = "ПодготовитьУведомлениеОбОтгрузке" Тогда
		ТипСообщения = "DESADV";
	ИначеЕсли Источник = "ОбработкаРасхожденийПриемки" Тогда
		ТипСообщения = "DESADV";
	ИначеЕсли Источник = "ОбработкаРасхожденийОбратногоЗаказа" Тогда
		ТипСообщения = "PORDERS";
	ИначеЕсли Источник = "ПодготовкаОбратногоЗаказа" Тогда
		ТипСообщения = "PORDERS";
	ИначеЕсли Источник = "ПодготовкаОтветаНаЗаказ" Тогда
		ТипСообщения = "ORDRSP";
	ИначеЕсли Источник = "ПодготовкаСчетФактурыКОтправке" Тогда
//		ТипСообщения = "INVOIC";
		ТипСообщения = "DESADV";//предположим, что в документе вида "Счет-фактура выданный" нет собственной табличной части для товаров.
	ИначеЕсли Источник = "ПодготовкаЗаказаПоставщику" Тогда
		ТипСообщения = "ORDERS";
	ИначеЕсли Источник = "ПодготовкаУведомленияОПриемке" Тогда
		ТипСообщения = "RECADV";
	ИначеЕсли Источник = "ПодготовкаКорректировочногоСчетаФактурыКОтправке" Тогда
		ТипСообщения = "COINVOIC";
	ИначеЕсли Источник = "ПодготовкаИсправительногоСчетаФактурыКОтправке" Тогда
		ТипСообщения = "INVOIC";
	ИначеЕсли Источник = "ПодготовитьУведомлениеОПриемкеВозврата" Тогда
		ТипСообщения = "RETREC";
	КонецЕсли;
	
	Партнер=Неопределено;
	Если Сообщение=Неопределено Тогда
		Если ТипЗнч(ДокументСсылка)=Тип("Массив") и ДокументСсылка.Количество()>0 тогда
			Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",ДокументСсылка[0].Контрагент));
		Иначе
			Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",ДокументСсылка.Контрагент));
		КонецЕсли;
	Иначе
		Партнер=Сообщение.Партнер;
	КонецЕсли;
	ОтправлятьВозвратнуюТару = (ПолучитьЗначениеСвойстваОбъектаEDI(Партнер,"ОтправлятьВозвратнуюТаруВDESADV")=Истина);
	
	
	Если МассивВозвратов=Неопределено Тогда
		МассивВозвратов=Новый Массив;//так удобнее и нагляднее, чем исправлять запрос
	КонецЕсли;
	
	СтандартнаяОбработкаEDI = Истина;
	// событие для получения табличной части из внешних источников
	Товары = ОбработкаСобытияПодключаемогоМодуля("ПолучитьТоварыДокумента",СтандартнаяОбработкаEDI,Новый Структура("Документ,ТипСообщения,Источник",_ОсновнойДокумент,ТипСообщения,Источник));
	Если СтандартнаяОбработкаEDI Тогда
		
		Запрос = Новый Запрос();
		Если ЕстьКоррИспрСФ И ТипЗнч(_ОсновнойДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Запрос.Текст = ПолучитьТекстЗапросаТоваровКорректировкиРеализации(ТипСообщения,_ОсновнойДокумент);
		Иначе
			Запрос.Текст = ПолучитьТекстЗапросаПоТоварамДокумента(ТипСообщения,_ОсновнойДокумент.Проведен,флСуммаВключаетНДС);
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
		Запрос.УстановитьПараметр("Возвраты", МассивВозвратов);	//если параметр сюда не передавали, то будет пустой
		Запрос.УстановитьПараметр("ОтправлятьВозвратнуюТару", ОтправлятьВозвратнуюТару); //используется при подготовке DESADV
		
		//было в ПолучитьТоварыЗаказаПокупателя - надо что-то придумать. Возможно, оттолкнуться от ТаблицаТипов
		//ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросПолученияТоваровЗаказаПокупателя",,Новый Структура("ДокументСсылка,МассивСвязанныхДокументов,Источник,Запрос",ДокументСсылка,,Источник,Запрос));	
		
		Товары = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;

	//УФ УТ11, УФ УНФ: Нет жесткого типа единицы измерения. Сейчас здесь может быть: (ЕдиницыИзмерения, Упаковки, NUll)/(КлассификаторЕдиницИзмерения,ЕдиницыИзмерения) В дальнейшем мы не сможем выбрать колонку ЕИ напрямую в ВТ
	//Будет подставлен костыль для УТ11, который разобъет колонку на 2 типизированных перед выбором в ВТ
	//Будет подставлен костыль для УНФ, который разобъет колонку на 2 типизированных перед выбором в ВТ
	
	Если Лев(ИмяКонфигурации1С,3)="УФ_" Тогда
		ОбработатьВозвратнуюТару_УФ(Товары,ОтправлятьВозвратнуюТару,ТипСообщения);  //уничтожим тару если её не должно быть в этом сообщении
	КонецЕсли;
	
	Если ТипСообщения = "COINVOIC" Тогда
		
		Если ИмяКонфигурации1С="УФ_УТ" Тогда  //иной механизм хранения корректировок товаров
			//ТоварыДо
			ЗапросТоварыДо = Новый Запрос();
			ЗапросТоварыДо.Текст = ПолучитьТекстЗапросаПоТоварамДокумента("DESADV",_ОсновнойДокумент.ДокументОснование.Проведен,флСуммаВключаетНДС);
			ЗапросТоварыДо.УстановитьПараметр("Ссылка",_ОсновнойДокумент.ДокументОснование);
			ЗапросТоварыДо.УстановитьПараметр("Возвраты", Новый Массив);	//только сам документ - без возвратов
			ЗапросТоварыДо.УстановитьПараметр("ОтправлятьВозвратнуюТару", ОтправлятьВозвратнуюТару); 
			ТоварыДо = ЗапросТоварыДо.Выполнить().Выгрузить();

			//по док. корректировке идем по ветке не проведен т.к. отсутствует подходящая ТЧ виды товаров
			//ТоварыПосле
			ЗапросТоварыПосле = Новый Запрос();
			ЗапросТоварыПосле.Текст = ПолучитьТекстЗапросаПоТоварамДокумента("DESADV",ложь,флСуммаВключаетНДС);
			ЗапросТоварыПосле.Текст=СтрЗаменить(ЗапросТоварыПосле.Текст,".Сумма КАК Сумма",".СуммаСНДС КАК Сумма");
			ЗапросТоварыПосле.Текст=СтрЗаменить(ЗапросТоварыПосле.Текст,"Документ.РеализацияТоваровУслуг.Товары","Документ.КорректировкаРеализации.Товары");
			//ЗапросТоварыПосле.Текст=СтрЗаменить(ЗапросТоварыПосле.Текст,"Документ.РеализацияТоваровУслуг.ВидыЗапасов","Документ.КорректировкаРеализации.Товары");
			ЗапросТоварыПосле.Текст=СтрЗаменить(ЗапросТоварыПосле.Текст,"РеализацияТоваровУслугТовары.НомерГТД.СтранаПроисхождения КАК Страна,","Значение(Справочник.СтраныМира.ПустаяСсылка) КАК Страна,");
			ЗапросТоварыПосле.Текст=СтрЗаменить(ЗапросТоварыПосле.Текст,"РеализацияТоваровУслугТовары.НомерГТД.Код КАК НомерГТД,",""""" КАК НомерГТД,");
			ЗапросТоварыПосле.УстановитьПараметр("Ссылка",_ОсновнойДокумент);
			ЗапросТоварыПосле.УстановитьПараметр("Возвраты", Новый Массив);	//только сам документ - без возвратов
			ЗапросТоварыПосле.УстановитьПараметр("ОтправлятьВозвратнуюТару", ОтправлятьВозвратнуюТару); 
			ТоварыПосле = ЗапросТоварыПосле.Выполнить().Выгрузить();
			
			//из корректировки товары удастся достать только без номера ГТД и страны
			//обойдем товары и заполним их из Товаров До
			Для Каждого СтрокаТовара Из ТоварыПосле Цикл
				НайденнаяСтрокаДо = ТоварыДо.Найти(СтрокаТовара.Номенклатура,"Номенклатура");
				Если НайденнаяСтрокаДо<>Неопределено Тогда 
					СтрокаТовара.Страна = НайденнаяСтрокаДо.Страна;
					СтрокаТовара.НомерГТД = НайденнаяСтрокаДо.НомерГТД;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ТоварыДо = Товары.Скопировать(,"НомерСтроки,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Наименование,НаименованиеПолное,ЦенаДоКорректировки,СтавкаНДС,СерияНоменклатуры,Страна,НомерГТД,КоличествоДоКорректировки,СуммаДоКорректировки,СуммаНДСДоКорректировки");
			ТоварыПосле = Товары.Скопировать(,"НомерСтроки,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Наименование,НаименованиеПолное,Цена,СтавкаНДС,СерияНоменклатуры,Страна,НомерГТД,Количество,Сумма,СуммаНДС");
			ТоварыДо.Колонки.ЦенаДоКорректировки.Имя		= "Цена";
			ТоварыДо.Колонки.КоличествоДоКорректировки.Имя	= "Количество";
			ТоварыДо.Колонки.СуммаДоКорректировки.Имя		= "Сумма";
			ТоварыДо.Колонки.СуммаНДСДоКорректировки.Имя	= "СуммаНДС";
			
		КонецЕсли;
		
		ДозаполнитьСуммыВТаблицеТоваров(ТоварыДо,	флСуммаВключаетНДС,"");
		ДозаполнитьСуммыВТаблицеТоваров(ТоварыПосле,флСуммаВключаетНДС,"");
		//заполним цену в случае, если товар не принят полностью. Причина: https://normativ.kontur.ru/document?moduleId=1&documentId=243600&cwi=14311#h538
		Для Сч=0 По ТоварыПосле.Количество()-1 Цикл
			Если ТоварыПосле[Сч].Количество = 0 Тогда
				ЗаполнитьЗначенияСвойств(ТоварыПосле[Сч],ТоварыДо[Сч],"ЦенаБезНДС,ЦенаСНДС");
			КонецЕсли;
		КонецЦикла;
		
		Если Преобразовать Тогда
			ПреобразоватьТоварыДокументаВEDI(ТоварыДо,_ОсновнойДокумент,Источник,"COINVOIC");
			ПреобразоватьТоварыДокументаВEDI(ТоварыПосле,_ОсновнойДокумент,Источник,"COINVOIC");
		КонецЕсли;
		
		Если Лев(ИмяКонфигурации1С,3)="УФ_" Тогда
			Товары = ТоварыДо;
			СравнитьТоварыДляCOINVOIC_УФ_УТ(ТоварыДо,ТоварыПосле,Товары) // описание почему так - внутри
		Иначе
			
			Товары = ТоварыПосле;
			ДобавитьКолонкиВТаблицуЗначений(Товары,	"ЦенаДоКорректировки
			|КоличествоДоКорректировки
			|СуммаДоКорректировки
			|СуммаНДСДоКорректировки
			|ЦенаСНДСДоКорректировки
			|ЦенаБезНДСДоКорректировки
			|СуммаСНДСДоКорректировки
			|СуммаБезНДСДоКорректировки");		
			
			Для Каждого Стр Из Товары Цикл
				
				// [метка] разобрать это добро
				
				НайденныеСтроки = ТоварыДо.НайтиСтроки(Новый Структура("GTIN,КодТовараПокупателя",Стр.GTIN,Стр.КодТовараПокупателя));
				Если НайденныеСтроки.Количество()>0 Тогда
					Если НайденныеСтроки.Количество()>1 Тогда
						НайденныеСтрокиПоСериям = ТоварыДо.НайтиСтроки(Новый Структура("GTIN,КодТовараПокупателя,СерияНоменклатуры",Стр.GTIN,Стр.КодТовараПокупателя,Стр.СерияНоменклатуры));
						Если НайденныеСтрокиПоСериям.Количество()>0 Тогда
							НайденнаяСтрока = НайденныеСтрокиПоСериям[0];
						Иначе
							НайденнаяСтрока = НайденныеСтроки[0];
						КонецЕсли;
					Иначе						
						НайденнаяСтрока = НайденныеСтроки[0];
					КонецЕсли;
					
					Стр.ЦенаДоКорректировки			= НайденнаяСтрока.Цена;
					Стр.КоличествоДоКорректировки	= НайденнаяСтрока.Количество;
					Стр.СуммаДоКорректировки		= НайденнаяСтрока.Сумма;
					Стр.СуммаНДСДоКорректировки		= НайденнаяСтрока.СуммаНДС;
					Стр.ЦенаСНДСДоКорректировки		= НайденнаяСтрока.ЦенаСНДС;
					Стр.ЦенаБезНДСДоКорректировки	= НайденнаяСтрока.ЦенаБезНДС;
					Стр.СуммаСНДСДоКорректировки	= НайденнаяСтрока.СуммаСНДС;
					Стр.СуммаБезНДСДоКорректировки	= НайденнаяСтрока.СуммаБезНДС;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе	
		
		НулевыеПозиции = Товары.НайтиСтроки(Новый Структура("Количество",0));
		Для Каждого НулеваяСтрока из НулевыеПозиции Цикл
			Товары.Удалить(НулеваяСтрока);
		КонецЦикла;	
		
		ДозаполнитьСуммыВТаблицеТоваров(Товары,флСуммаВключаетНДС,"");
		
		Если Преобразовать Тогда
			ПреобразоватьТоварыДокументаВEDI(Товары,_ОсновнойДокумент,Источник,ТипСообщения);
		КонецЕсли;
		
		НулевыеПозиции = Товары.НайтиСтроки(Новый Структура("Количество",0));
		Для Каждого НулеваяСтрока из НулевыеПозиции Цикл
			Товары.Удалить(НулеваяСтрока);
		КонецЦикла;	
		
	КонецЕсли;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеПолученияТоваровДокумента1С",,Новый Структура("ДокументСсылка,ТаблицаТоваров,Источник,МассивВозвратов",ДокументСсылка,Товары,Источник,МассивВозвратов));
	
	Если НЕ РезультатПМ = Неопределено Тогда
		Товары = РезультатПМ;
	КонецЕсли;
	
	Возврат Товары;
	
КонецФункции

Процедура СравнитьТоварыДляCOINVOIC_УФ_УТ(ТоварыДо,ТоварыПосле,Товары)
	
	//по сути то же самое но только обходимо товары до и по ним ищем овары после
	//УТ11 - в ТЧ КорректировкиТУ "Товары" допускается отсутствие строки которая была в РТУ поэтому будем обходить ТЧ Товары исходной РТУ
	//Не факт что на такой механизм следует переделать все конфигурации, поэтому вынес в отдельную процедуру
	
	//по идее так мы потеряем добавленные в корректировке товары, но будем исходить что сеть не станет принимать незаказанный товар и добавления быть не может
	
	//Товары = ТоварыДо;
	ДобавитьКолонкиВТаблицуЗначений(Товары,	"ЦенаДоКорректировки
	|КоличествоДоКорректировки
	|СуммаДоКорректировки
	|СуммаНДСДоКорректировки
	|ЦенаСНДСДоКорректировки
	|ЦенаБезНДСДоКорректировки
	|СуммаСНДСДоКорректировки
	|СуммаБезНДСДоКорректировки");
	
	Для Каждого Стр Из Товары Цикл
		
		Стр.ЦенаДоКорректировки			= Стр.Цена;
		Стр.КоличествоДоКорректировки	= Стр.Количество;
		Стр.СуммаДоКорректировки		= Стр.Сумма;
		Стр.СуммаНДСДоКорректировки		= Стр.СуммаНДС;
		Стр.ЦенаСНДСДоКорректировки		= Стр.ЦенаСНДС;
		Стр.ЦенаБезНДСДоКорректировки	= Стр.ЦенаБезНДС;
		Стр.СуммаСНДСДоКорректировки	= Стр.СуммаСНДС;
		Стр.СуммаБезНДСДоКорректировки	= Стр.СуммаБезНДС;
		//Скопировали товары в "До"
		
		НайденныеСтроки = ТоварыПосле.НайтиСтроки(Новый Структура("GTIN,КодТовараПокупателя",Стр.GTIN,Стр.КодТовараПокупателя));
		Если НайденныеСтроки.Количество()>0 Тогда
			Если НайденныеСтроки.Количество()>1 Тогда
				НайденныеСтрокиПоСериям = ТоварыПосле.НайтиСтроки(Новый Структура("GTIN,КодТовараПокупателя,СерияНоменклатуры",Стр.GTIN,Стр.КодТовараПокупателя,Стр.СерияНоменклатуры));
				Если НайденныеСтрокиПоСериям.Количество()>0 Тогда
					НайденнаяСтрока = НайденныеСтрокиПоСериям[0];
				Иначе
					НайденнаяСтрока = НайденныеСтроки[0];
				КонецЕсли;
			Иначе						
				НайденнаяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
			Стр.Цена			= НайденнаяСтрока.Цена;
			Стр.Количество		= НайденнаяСтрока.Количество;
			Стр.Сумма			= НайденнаяСтрока.Сумма;
			Стр.СуммаНДС		= НайденнаяСтрока.СуммаНДС;
			Стр.ЦенаСНДС		= НайденнаяСтрока.ЦенаСНДС;
			Стр.ЦенаБезНДС		= НайденнаяСтрока.ЦенаБезНДС;
			Стр.СуммаСНДС		= НайденнаяСтрока.СуммаСНДС;
			Стр.СуммаБезНДС		= НайденнаяСтрока.СуммаБезНДС;
		Иначе        //не нашлась строка в товарах после корректировки - полный недогруз позиции
			
			//Стр.Цена			= НайденнаяСтрока.Цена;    //старая цена
			Стр.Количество		= 0;
			Стр.Сумма			= 0;
			Стр.СуммаНДС		= 0;
			//Стр.ЦенаСНДС		= НайденнаяСтрока.ЦенаСНДС;
			//Стр.ЦенаБезНДС		= НайденнаяСтрока.ЦенаБезНДС;
			Стр.СуммаСНДС		= 0;
			Стр.СуммаБезНДС		= 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


//тексты запросов получения товаров документа для исходящих сообщений лежат в ветках макета СКД.
Функция ПолучитьТекстЗапросаПоТоварамДокумента(ТипСообщения, ДокументПроведен, флСуммаВключаетНДС)
	
	ТекстЗапроса = "";
	
	//вариант работы для поставщика и покупателя отдельно
	
	//теперь надо понять имя запроса
	//для этого надо:
	//1. Тип сообщения, для которого готовим
	//2. Тип документа - по идее можем и из типа сообщения достать
	//3. Проведен/не проведен. Может, это в сам запрос кинуть?
	//4. Сворачивать/нет - возможно, пригодится.
	
	//Направление - исходящее
	
	СтрокаТаблицыТипов = ТаблицаТипов.НайтиСтроки(Новый Структура("ТипСообщения,Направление",ТипСообщения,"Исходящее"))[0];
	ТипДокумента = СтрЗаменить(СтрокаТаблицыТипов.ИмяТипа,"ДокументСсылка.","");//для INVOIC не сработает
	
	ВеткаДереваЗапросовПоТоварам = КэшШаблоновЗапросов().Элементы[СтрокаТаблицыТипов.Сторона].Элементы.ЗапросПоТоварам;
	//теперь найдем вариант запроса. Вложенный вида "DESADV" или "PORDERS_ORDRSP_ORDERS", а в нем - соответствующий виду документа, м.б. еще с суффиксом "_Проведен" или "НеПроведен"
	ВариантыВеткиПоТипамСообщений = ВеткаДереваЗапросовПоТоварам.Элементы;
	Для Каждого Эл Из ВариантыВеткиПоТипамСообщений Цикл
		Если Найти(Эл.Имя,"_"+ТипСообщения+"_")>0 Тогда
			ВеткаПоТипамДокументов = Эл.Элементы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Теперь найдем подходящий запрос по виду документа и признаку, проведен или нет. Например, для типового ЗаказаПокупателя данные вытаскиваем из регистра ЗаказыПокупателей, чтобы учесть корректировки.
	Если ДокументПроведен Тогда
		ВариантыНазванийЗапроса = РазложитьСтроку(ТипДокумента+"_Проведен,"+ТипДокумента);
	Иначе
		ВариантыНазванийЗапроса = РазложитьСтроку(ТипДокумента+"_НеПроведен,"+ТипДокумента);
	КонецЕсли;
	
	Для Каждого ВариантНазвания Из ВариантыНазванийЗапроса Цикл
		Для Каждого Эл Из ВеткаПоТипамДокументов Цикл
			Если Эл.Имя = ВариантНазвания.Значение Тогда
				ТекстЗапроса = Эл.Запрос;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОпределитьРелизКонфигурации() = "11.2" Тогда //рефакторинг
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"УпаковкиНоменклатуры","УпаковкиЕдиницыИзмерения");	
	КонецЕсли;
	
	Если ИмяКонфигурации1С = "УФ_УТ"
		И (ТипСообщения="DESADV" ИЛИ ТипСообщения="INVOIC") И ДокументПроведен 
		Тогда
		флСуммаВключаетНДС=Истина;//В этом случае у нас будет сумма с НДС
		Если ЕстьНеобходимыеМетаданные("Справочники.КлючиАналитикиУчетаНоменклатуры") 
			И ЕстьНеобходимыеМетаданные("Документы.РеализацияТоваровУслуг.ТабличныеЧасти.ВидыЗапасов.Реквизиты.АналитикаУчетаНоменклатуры")
			Тогда //появилось внутри релиза 11.1 (в 11.1.9 уже есть)
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РеализацияТоваровУслугТовары.Номенклатура",	"РеализацияТоваровУслугТовары.АналитикаУчетаНоменклатуры.Номенклатура");	
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РеализацияТоваровУслугТовары.Характеристика",	"РеализацияТоваровУслугТовары.АналитикаУчетаНоменклатуры.Характеристика");	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТоварыРеализацииАлкогольнойПродукции(ДокументСсылка, Преобразовать = Ложь) Экспорт
	
	ТипРеализации	= ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке",Истина);
	ТипВозврата 	= ПолучитьТипЗначенияОбъекта("ВходящийВозврат"				,Истина);

	флСуммаВключаетНДС = ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"СуммаВключаетНДС");
	
	Запрос = Новый Запрос();
	
	Если ИмяКонфигурации1С = "БП" или ИмяКонфигурации1С = "УФ_БП" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.НомерСтроки,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК Страна,
		|	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	ЛОЖЬ КАК Пометка,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
		УсловиеНоменклатуры = "";
		
		
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.НомерСтроки,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика КАК ХарактеристикаНоменклатуры,
       |	ВЫБОР
       |		КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
       |			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
       |		ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка
       |	КОНЕЦ КАК ЕдиницаИзмерения,
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	"""" КАК СерияНоменклатуры,
		|	"""" КАК Страна,
		|	"""" КАК НомерГТД,
		|	РеализацияТоваровУслугТовары.КоличествоУпаковок - ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.КоличествоУпаковок, 0) КАК Количество,
		|	ЛОЖЬ КАК Пометка,
		|	РеализацияТоваровУслугТовары.Сумма - ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Сумма, 0) КАК Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтПокупателяТовары
		|		ПО РеализацияТоваровУслугТовары.Номенклатура = ВозвратТоваровОтПокупателяТовары.Номенклатура
		|			И РеализацияТоваровУслугТовары.Характеристика = ВозвратТоваровОтПокупателяТовары.Характеристика
		|			И РеализацияТоваровУслугТовары.Ссылка = ВозвратТоваровОтПокупателяТовары.ДокументРеализации
		|			И (ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен)
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка"+УсловиеНоменклатуры;
		
		Если ОпределитьРелизКонфигурации() = "11.2" Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)","ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		КонецЕсли;
		
	Иначе
		УсловиеНоменклатуры = "";
		
		//Если ЗначениеЗаполнено(Контур_КЭШ) Тогда
		//	Если ЗначениеЗаполнено(Контур_КЭШ.ФильтрАлкоНоменклатуры) Тогда
		//		Запрос.УстановитьПараметр("Номенклатура",Контур_КЭШ.ФильтрАлкоНоменклатуры);
		//		УсловиеНоменклатуры = " И РеализацияТоваровУслугТовары.Номенклатура В ИЕРАРХИИ (&Номенклатура)";
		//	КонецЕсли;
		//КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.НомерСтроки,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СерияНоменклатуры,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения, ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.СтранаПроисхождения, """")) КАК Страна,
		|	ЕСТЬNULL(РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД.Код, ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.НомерГТД.Код, """")) КАК НомерГТД,
		|	РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Коэффициент - ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Количество, 0) * ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Коэффициент, 0) КАК Количество,
		|	ЛОЖЬ КАК Пометка,
		|	РеализацияТоваровУслугТовары.Сумма - ЕСТЬNULL(ВозвратТоваровОтПокупателяТовары.Сумма, 0) КАК Сумма
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
		|		ПО РеализацияТоваровУслугТовары.Номенклатура = ВозвратТоваровОтПокупателяТовары.Номенклатура
		|			И РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры
		|			И РеализацияТоваровУслугТовары.СерияНоменклатуры = ВозвратТоваровОтПокупателяТовары.СерияНоменклатуры
		|			И (ВозвратТоваровОтПокупателяТовары.ДокументПартии = &Ссылка)
		|			И (ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен)
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка"+УсловиеНоменклатуры;
		
	КонецЕсли;			   
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Если ИмяКонфигурации1С= "УФ_УНФ" Тогда  //конструкор 2 этап должен помочь с именем ТЧ товаров
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Документ.РеализацияТоваровУслуг.Товары","Документ.РеализацияТоваровУслуг.Запасы");
		ВызватьИсключение ("Нет встроенного в модуль алгоритма получения алкореквизитов для УНФ."+Символы.ПС+"Для отправки ALCRPT используйте подключаемый модуль.");
	КонецЕсли;
	
	//конструктор
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Документ.РеализацияТоваровУслуг",ТипРеализации);
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"Документ.ВозвратТоваровОтПокупателя",ТипВозврата);

	Товары = Запрос.Выполнить().Выгрузить();
	
	ДозаполнитьСуммыВТаблицеТоваров(Товары,флСуммаВключаетНДС,"ПолучитьТоварыРеализацииАлкогольнойПродукции");
	
	Если Преобразовать Тогда
		
		КонвертироватьТовары1СвEDI(Товары, Истина, ДокументСсылка.Контрагент,,ДокументСсылка,"ALCRPT");
		
	КонецЕсли;
	
	Возврат Товары;
	
КонецФункции


//На входе - ТаблицаЗначений с колонками "Цена","Сумма","СтавкаНДС","СуммаНДС", флаг "флСуммаВключаетНДС" и "Алгоритм" - откуда вызвана данная процедура
//На выходе - та же таблица с добавленными и рассчитанными колонками "ЦенаБезНДС,ЦенаСНДС,СуммаБезНДС,СуммаСНДС"
Процедура ДозаполнитьСуммыВТаблицеТоваров(Товары,флСуммаВключаетНДС,Алгоритм) Экспорт
	
	//Будем рассчитывать суммы так же, как это сделано в печатных формах счетов-фактур и ТОРГ12
	//У нас различаются алгоритмы в разных местах! Это печально. Чтобы не порушить старое, временно введена переменная "Алгоритм".
	//В будущем проанализировать возможность применения единого алгоритма.
	//Самым правильным кажется вариант "ПолучитьТоварыРеализацииТоваров", его пока и оставим.
	
	СчитатьОтСтавкиНДС = Ложь;
	Если (Товары.Колонки.Найти("СуммаНДС")=Неопределено)
		Или (Товары.Колонки.СуммаНДС.ТипЗначения = Новый ОписаниеТипов("Неопределено")) Тогда
		СчитатьОтСтавкиНДС = Истина;
	КонецЕсли;//в некоторых случаях мы не можем в явном виде получить сумму НДС
	
	ДобавитьКолонкиВТаблицуЗначений(Товары,"ЦенаСНДС,ЦенаБезНДС,СуммаСНДС,СуммаБезНДС,СуммаНДС");
	
	Для Каждого Стр Из Товары Цикл
		
		Если СчитатьОтСтавкиНДС Тогда
			
			СтавкаНДС = МодульТиповой_ПолучитьСтавкуНДС(Стр.СтавкаНДС);
			
			Если флСуммаВключаетНДС Тогда
				Стр.ЦенаБезНДС	= Окр((Стр.Цена * 100) / (100 + СтавкаНДС),2,1);
				Стр.ЦенаСНДС	= Стр.Цена;
			Иначе
				Стр.ЦенаСНДС	= Окр((Стр.Цена * (100 + СтавкаНДС)) / 100,2,1);
				Стр.ЦенаБезНДС	= Стр.Цена;
			КонецЕсли;
			
			Стр.СуммаБезНДС	= Окр((Стр.Сумма * 100) / (100 + СтавкаНДС),2,1);
			Стр.СуммаСНДС   = Стр.Сумма;
			Стр.СуммаНДС = Стр.СуммаСНДС - Стр.СуммаБезНДС;
			
		Иначе
			
			Если НЕ Стр.Количество = 0 Тогда
				Стр.ЦенаБезНДС	= Окр((Стр.Сумма-?(флСуммаВключаетНДС,Стр.СуммаНДС,0)) / Стр.Количество,2,1);
				Стр.ЦенаСНДС	= Окр((Стр.Сумма+?(флСуммаВключаетНДС,0,Стр.СуммаНДС)) / Стр.Количество,2,1);
			Иначе
				Стр.ЦенаБезНДС = 0;
				Стр.ЦенаСНДС = 0;
			КонецЕсли;
			Стр.СуммаБезНДС	= Стр.Сумма-?(флСуммаВключаетНДС,Стр.СуммаНДС,0);
			Стр.СуммаСНДС	= Стр.Сумма+?(флСуммаВключаетНДС,0,Стр.СуммаНДС);
			Стр.СуммаНДС = Стр.СуммаСНДС - Стр.СуммаБезНДС; 
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПартнераПоДокументу(ДокументСсылка,ВидДокумента) Экспорт
	
	//Вохожее есть в КонвертироватьСообщениеEDIВ1С или в ОбработатьВходящееСообщение
	//Возможно, вообще нет смысла ходить по связкам документов, достаточно получить партнера напрямую из контрагента.
	
	//1. Поищем Партнера по входящему ORDERS
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Партнер
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.Документ = &Документ
	|	И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""";
		
	
	//а - это если Заказ
	Если ВидДокумента = "Заказ" Тогда
		
		Запрос.УстановитьПараметр("Документ",ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка));
		
	//б - если это реализация	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип(ПолучитьТипЗначенияОбъекта("ВходящийВозврат",,))  Тогда
		
		Запрос.УстановитьПараметр("Документ",Неопределено);
		
	ИначеЕсли ВидДокумента = "Реализация" Тогда                         
		
		Если ЕстьКоррИспрСФ И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Если ИмяКонфигурации1С="УФ_УТ" тогда
				Если ТипЗнч(ДокументСсылка.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					ДокументРеализации = ДокументСсылка.ДокументОснование.ДокументОснование;
				Иначе
					ДокументРеализации = ДокументСсылка.ДокументОснование;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ДокументСсылка.ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					ДокументРеализации = ДокументСсылка.ДокументРеализации.ДокументРеализации;
				Иначе
					ДокументРеализации = ДокументСсылка.ДокументРеализации;
				КонецЕсли;
			КонецЕсли;
			Заказ = НайтиСвязанныйДокументПоТипуСообщения(ДокументРеализации,"ORDERS");
        Иначе
			Заказ = НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"ORDERS");
		КонецЕсли;	
		Запрос.УстановитьПараметр("Документ",ПреобразоватьЗначениеДляВнешнегоХранилища(Заказ));
		
	КонецЕсли;
	
	ВладелецСпискаНоменклатуры=Неопределено;
	Если ЗначениеЗаполнено(Запрос.Параметры.Документ) Тогда //у нас могло не получиться найти документ т.к. это могло быть сообщение разорванной цепочки (recadv без orders), тогда нам не следует искать партнера т.к. ошибемся
		ВладелецСпискаНоменклатуры = ПолучитьРезультатЗапроса(Запрос,"Партнер");
	КонецЕсли;

    ПартнерНайден = ?(ВнешнееХранилище,СоединениеСХранилищем.ЗначениеЗаполнено(ВладелецСпискаНоменклатуры),ЗначениеЗаполнено(ВладелецСпискаНоменклатуры));
	Если ПартнерНайден Тогда
		Если ВнешнееХранилище Тогда
			ВладелецСпискаНоменклатуры = СоединениеСХранилищем.ЗначениеВСтрокуВнутр(ВладелецСпискаНоменклатуры);
		КонецЕсли;
	Иначе
		//не нашли партнера по сообщению, поищем другим способом
		ВладелецСпискаНоменклатуры = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",ДокументСсылка.Контрагент));
	КонецЕсли;
	
	Возврат ВладелецСпискаНоменклатуры;
	
КонецФункции

Процедура ПреобразоватьТоварыДокументаВEDI(ТаблицаТоваров,ДокументСсылка,Источник,ТипСообщения) Экспорт
	
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаТоваров,"Пометка",Новый ОписаниеТипов("Булево"));//Колонка "Пометка" понадобится где-то дальше
	
	ВладелецСпискаНоменклатуры = ПолучитьПартнераПоДокументу(ДокументСсылка,"Реализация");//партнер есть в Сообщении, можно его сюда протянуть
	НеОтправлятьКодПоставщика = (ПолучитьЗначениеСвойстваОбъектаEDI(ВладелецСпискаНоменклатуры,"НеОтправлятьКодПоставщика")=Истина);
	
	Если ТипЗнч(ДокументСсылка) = Тип("Массив") Тогда
		ОсновнойДокумент = ДокументСсылка[0];//свалимся в случае, если будет передан пустой массив. И хорошо.
	Иначе
		ОсновнойДокумент = ДокументСсылка;
	КонецЕсли;
	
	ТипДокумента = ДокументСсылка.Метаданные().Имя;
	СтрокаТаблицыТипов = ТаблицаТипов.Найти("ДокументСсылка."+ТипДокумента,"ИмяТипа");
	Сторона = СтрокаТаблицыТипов.Сторона;
	ИскатьСоответствияТоваровПоШтрихкоду = (Сторона = "Покупатель");
	
	КонвертироватьТовары1СвEDI(ТаблицаТоваров, Истина, ВладелецСпискаНоменклатуры,,ИскатьСоответствияТоваровПоШтрихкоду,ДокументСсылка,ТипСообщения);
	
	ПересчитатьТоварыСообщения(ТаблицаТоваров,ВладелецСпискаНоменклатуры,"ВEDI");
	
	СвернутьТаблицуТоваровДляСообщения(ТаблицаТоваров,Источник,НеОтправлятьКодПоставщика,ТипСообщения);//при возникновении проблем с пересчетами - выключить этот блок
	
КонецПроцедуры

//продолжаем декомпозицию метода "ПреобразоватьТоварыДокументаВEDI()
Процедура СвернутьТаблицуТоваровДляСообщения(ТаблицаТоваров,Источник,НеОтправлятьКодПоставщика = Ложь,ТипСообщения)
	
	//Для обработки RECADV/уточнения PORDERS и для счет-фактуры мы не сворачиваем таблицу товаров.
	//В остальных случаях - сворачиваем.
	Сворачивать = Ложь;
	Если Источник = "ОбработкаРасхожденийПриемки" 
		или Источник = "ОбработкаРасхожденийОбратногоЗаказа" Тогда
		//это все похоже на типы сообщений: RECADV,INVOIC,ORDERS
		Возврат;
	КонецЕсли;
	
	Если ЭтоОбратнаяОтгрузка(ТипСообщения) Тогда
		ИмяСвоегоКода	= "КодТовараПокупателя";
		ИмяКодаПартнера	= "КодТовараПоставщика";
	Иначе
		ИмяСвоегоКода	= "КодТовараПоставщика";
		ИмяКодаПартнера	= "КодТовараПокупателя";
	КонецЕсли;

	ВремТовары = ТаблицаТоваров.Скопировать();
	ВремТовары.Колонки.Добавить("Сч");
	ВремТовары.ЗаполнитьЗначения(1,"Сч");
//	ВремТовары.Свернуть("GTIN,КодТовараПокупателя","Сч");//соберем все возможные GTIN+BuyerCode, и по ним свернем. Это только на стороне поставщика должно быть!		
	ВремТовары.Свернуть("GTIN,"+ИмяКодаПартнера+",КодЕдиницыИзмеренияEDI","Сч");//соберем все возможные GTIN+BuyerCode, и по ним свернем. Это только на стороне поставщика должно быть!		
	
	Для каждого Стр Из ВремТовары Цикл
		Если Стр.сч>1 Тогда
			Если ЗначениеЗаполнено(Стр.GTIN) ИЛИ ЗначениеЗаполнено(Стр[ИмяКодаПартнера]) Тогда
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("GTIN",Стр.GTIN);
				СтруктураПоиска.Вставить(ИмяКодаПартнера,Стр[ИмяКодаПартнера]);
				СтруктураПоиска.Вставить("КодЕдиницыИзмеренияEDI",Стр.КодЕдиницыИзмеренияEDI);
				
				НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
				
				ЕдИзмеренияОбщая = Неопределено;
				НоменклатураОбщая = Неопределено;
				
				Если НайденныеСтроки.Количество()>0 Тогда
					ЕдИзмеренияОбщая = НайденныеСтроки[0].ЕдиницаИзмерения;
				КонецЕсли;//это исключительно для заполнения ЕдиницаИзмеренияEDI, возможно, уже не требуется. Кроме того, код единицы измерения можно вытаскивать прямо в запросе.
				
				Если НайденныеСтроки.Количество()>0 Тогда
					ЕдинственнаяНоменклатура=Истина;
					ПерваяНоменклатура= НайденныеСтроки[0].Номенклатура;
					Для Каждого СтрокаНайденныхСтрок Из НайденныеСтроки Цикл
						Если СтрокаНайденныхСтрок.Номенклатура<>ПерваяНоменклатура Тогда
							ЕдинственнаяНоменклатура= Ложь;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕдинственнаяНоменклатура Тогда
						НоменклатураОбщая = НайденныеСтроки[0].Номенклатура;
					КонецЕсли;
					
				КонецЕсли;//это исключительно для заполнения Номенклатуры в случае если сворачиваются строки с одинаковой номенклатурой
				
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					НайденнаяСтрока.Номенклатура = НоменклатураОбщая;
					НайденнаяСтрока.ХарактеристикаНоменклатуры = "";
					НайденнаяСтрока.ЕдиницаИзмерения = ЕдИзмеренияОбщая;
					НайденнаяСтрока[ИмяСвоегоКода] = "";
					
					Если Источник = "ПодготовкаОтветаНаЗаказ" Тогда
						
						ЗаполнитьЗначенияСвойств(НайденнаяСтрока,Новый Структура("Страна,НомерГТД,ЕдиницаИзмерения,СерияНоменклатуры"));
						//Очистим в ORDRSP страну происхождения и т.д., если они вдруг оказались в результате запроса.
						
					КонецЕсли;						
				
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВремТовары = Неопределено;
	
	//Свернем таблицу по тем полям, которые в ней есть. А количества/суммы сгруппируем.
	//Сворачивать надо по тем полям, которые присутствуют в XML
	//Только для ALCRPT надо еще подумать.
	СуммируемыеПоля = "Количество,Сумма,СуммаБезНДС,СуммаНДС,СуммаСНДС";
	ГруппируемыеПоля = "GTIN,КодТовараПокупателя,КодТовараПоставщика,КодЕдиницыИзмеренияEDI,Номенклатура,Наименование,ХарактеристикаНоменклатуры,СерияНоменклатуры,ЕдиницаИзмерения,Пометка,СтавкаНДС,Цена,ЦенаБезНДС,ЦенаСНДС,НомерГТД,Страна,ТипЕдиницы";
	
	Если НеОтправлятьКодПоставщика = Истина Тогда
		ГруппируемыеПоля = СтрЗаменить(ГруппируемыеПоля,ИмяСвоегоКода+",","");
	КонецЕсли;
	ПоляГруппировкиМассив = РазложитьСтроку(ГруппируемыеПоля);
	
	ПоляГруппировки = "";
	Для Каждого ИмяПоля Из ПоляГруппировкиМассив Цикл
		Если ТаблицаТоваров.Колонки.Найти(ИмяПоля)<>Неопределено Тогда
			ПоляГруппировки = ПоляГруппировки+","+ИмяПоля;
		КонецЕсли;
	КонецЦикла;
	
	ПоляГруппировки = Сред(ПоляГруппировки,2);//обрежем первую запятую
	
	ТаблицаТоваров.Свернуть(ПоляГруппировки,СуммируемыеПоля);
	
КонецПроцедуры

//В зависимости от настроек: СвойСправочникТочекДоставки и ГрузополучательИзЮрФизЛицаТД
//извлекаем из документа 1С сущность Грузополучатель (в терминах 1С)
Функция ПолучитьГрузополучателя1СДокумента1С(ДокументСсылка)
	
	СвойСправочникТД = ПолучитьКонстантуEDI("СвойСправочникТочекДоставки"); 
	ИспользуетсяСвойСправочникТД = ЗначениеЗаполнено(СвойСправочникТД);
	ЮрФизлицуТочкиДоставкиСоответствуетГрузополучатель = НЕ (ПараметрыПользователяEDI.ГрузополучательИзЮрФизЛицаТД = ложь);
	ЮрФизлицуТочкиДоставкиСоответствуетКонтрагент = Не ЮрФизлицуТочкиДоставкиСоответствуетГрузополучатель;
	
	Если ИспользуетсяСвойСправочникТД Тогда
		//узнать имя реквизита документа
		
		РеквизитыШапки = ДокументСсылка.ПолучитьОбъект().Метаданные().Реквизиты;
		
		Для Каждого Реквизит Из РеквизитыШапки Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Если ТипыРеквизита.Количество()=1 Тогда
				Если Реквизит.Тип.СодержитТип(Тип("СправочникСсылка."+СвойСправочникТД))  Тогда
					//забрать значение, оно нужного нам типа
					Возврат ДокументСсылка[Реквизит.Имя];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли  ЮрФизлицуТочкиДоставкиСоответствуетКонтрагент Тогда 
		Возврат ДокументСсылка.Контрагент;
	Иначе //ЮрФизлицуТочкиДоставкиСоответствуетГрузополучатель
		Если ИмяКонфигурации1С= "УФ_БП" Тогда 
			Если Не ЗначениеЗаполнено(ДокументСсылка.Грузополучатель) Тогда 
				Возврат ДокументСсылка.Контрагент;  //Выбран переключатель "тот же" что и контрагент
			Иначе
				Возврат ДокументСсылка.Грузополучатель;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С= "УФ_УНФ" Тогда 
			Возврат	Неопределено;
			СП=Новый СообщениеПользователю();
			СП.Текст = "Для Конфигурации УНФ нет типового реквизита Грузополучатель. Уточните грузополучетеля с событии подключаемого модуля: ""ПослеПодготовкиИсходящегоСообщения"".";
			СП.Сообщить();
			
		Иначе
			Возврат ДокументСсылка.Грузополучатель;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Неопределено;//ничего не нашли
	
КонецФункции

//PORDERS
Функция ПодготовитьОбратныйЗаказ(ДокументСсылка,Сообщение)
	
	Если ИспользоватьМаппингМетаданных Тогда
		Маппинг_ПодготовитьОбратныйЗаказ(ДокументСсылка,Сообщение);
	    Возврат Неопределено;
	КонецЕсли;
	
	ИмяРеквизитаОрганизация = ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
	
	Сообщение.Документ1С 			= ДокументСсылка;
	Сообщение.Отправитель1С 		= ДокументСсылка[ИмяРеквизитаОрганизация];
	Сообщение.Продавец1С 			= ДокументСсылка[ИмяРеквизитаОрганизация];
	Сообщение.Покупатель1С 			= ДокументСсылка.Контрагент;
	Сообщение.Грузополучатель1С		= ПолучитьГрузополучателя1СДокумента1С(ДокументСсылка);
	
	Сообщение.Комментарий 			= ДокументСсылка.Комментарий;
	
	Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",ДокументСсылка.Контрагент));
	Если ЗначениеЗаполнено(Партнер) Тогда
		Сообщение.Получатель1С = Партнер;
	КонецЕсли;
	
	Сообщение.Договор		= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Договор");
	Сообщение.Валюта1С		= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");

	Сообщение.ДатаПоставки	= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"ДатаОтгрузки");
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовкаОбратногоЗаказа",,Сообщение);
	
	Для Каждого Стр Из Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
		НоваяСтрока.СтавкаНДС1С = Стр.СтавкаНДС;
		
	КонецЦикла;
	
	ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(Сообщение.Товары);
	
КонецФункции

//ORDERS
Функция ПодготовитьЗаказ(ДокументСсылка,Сообщение,Параметры)
	
	Если ИспользоватьМаппингМетаданных Тогда
		Маппинг_ПодготовитьЗаказ(ДокументСсылка,Сообщение,Параметры);
		Возврат Неопределено;
	КонецЕсли;	
	
	ИмяРеквизитаОрганизация 	= ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
		
	Сообщение.Документ1С 			= ДокументСсылка;
	//Сообщение.Отправитель1С 		= ДокументСсылка.Организация;//+
	
	Сообщение.Заказ1С 				= ДокументСсылка;
	
	Сообщение.ДатаПоставки	= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"ДатаОтгрузки");
	
	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		Сообщение.Грузополучатель1С		= ДокументСсылка.ПодразделениеКомпании;
	ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
		Сообщение.Грузополучатель1С		= ДокументСсылка.СтруктурнаяЕдиница;
	Иначе
		Сообщение.Грузополучатель1С		= ДокументСсылка.Склад;
	КонецЕсли;

	ОбратныйЗаказ1С = НайтиОбратныйЗаказ(ДокументСсылка);
	Если ЗначениеЗаполнено(ОбратныйЗаказ1С) Тогда
		Сообщение.ОбратныйЗаказ1С = ОбратныйЗаказ1С;
	КонецЕсли;
	
	Сообщение.Продавец1С 			= ДокументСсылка.Контрагент;
	
	Если ИмяКонфигурации1С = "Розница" Тогда
		Сообщение.Покупатель1С		= ДокументСсылка.Склад[ИмяРеквизитаОрганизация];
	Иначе
		Сообщение.Покупатель1С 		= ДокументСсылка[ИмяРеквизитаОрганизация];
	КонецЕсли;
		
	Сообщение.Комментарий 			= ДокументСсылка.Комментарий;
	
	Сообщение.Договор				= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Договор");
	Сообщение.Валюта1С				= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовкаЗаказаПоставщику",,Сообщение);
	
	Для Каждого Стр Из Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
		НоваяСтрока.СтавкаНДС1С = Стр.СтавкаНДС;
		
	КонецЦикла;
	
	ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(Сообщение.Товары);
	
	Если ТипЗнч(Параметры)=Тип("Структура")
		И Параметры.Свойство("Статус")
		И Параметры.Статус = "Отменить" Тогда
			
			Сообщение.Статус = "Отменен";
			
	КонецЕсли;
	
КонецФункции

//ORDRSP
Функция ПодготовитьОтветНаЗаказ(ДокументСсылка,Сообщение,Параметры)
	

	Если ИспользоватьМаппингМетаданных Тогда
		Сообщение = Маппинг_ПодготовитьОтветНаЗаказ(ДокументСсылка,Сообщение,Параметры);
		Возврат Сообщение;
	КонецЕсли;
	
	Если Параметры=Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;	
	
	Если Параметры.Свойство("ЭтоОтклонениеНезагруженногоЗаказа") Тогда
		
		//обнаружена проблема: надо бы еще помечать на удаление документ заказа. Или сообщение переводить в статус "Отклонен", чтобы не продолжать цепочку.
		
		
		//В этом случае мы просто берем входящий ORDERS, меняем тип сообщения на ORDRSP, меняем местами отправителей/получателей, обнуляем количества в строках и т.д.
		//В Параметры.ВходящийЗаказ должна быть именно Ссылка! (раньше была Структура - избыточно).
		
		Сообщение = ПрочитатьСообщение(Параметры.ВходящийЗаказ);
		
		УчетнаяЗапись				= Сообщение.ОтправительEDI;
		Сообщение.ОтправительEDI	= Сообщение.ПолучательEDI;
		Сообщение.ПолучательEDI		= УчетнаяЗапись;

		Сообщение.ТипСообщения		= "ORDRSP";
		Сообщение.Направление		= "Исходящее";
		Сообщение.ЗаказEDI			= Сообщение.ДокументEDI;
		
		Если НЕ ЗначениеЗаполнено(Сообщение.ВалютаEDI) Тогда
			Сообщение.ВалютаEDI = "RUB";
		КонецЕсли;
		
		Сообщение.Статус = "Отклонен";
		Для каждого _Стр Из Сообщение.Товары Цикл
			_Стр.Статус = "Отклонен";
			Если Не Сообщение.Товары.Колонки.Найти("КоличествоЗаказанное") = Неопределено Тогда
				_Стр.КоличествоЗаказанное = _Стр.Количество;		
			КонецЕсли;
			_Стр.Количество = 0;
		КонецЦикла;
		
		Эталон = ПолучитьСтруктуруСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
		ДополнитьСтруктуруСообщенияИзЭталона(Сообщение,Эталон);
		Сообщение.Вставить("ИсходныйORDERS",Сообщение.СообщениеСсылка);//понадобится в процедуре СохранитьСообщение
		Сообщение.СообщениеСсылка = Неопределено;//это будет новое сообщение
		
		Возврат Сообщение;
		
	КонецЕсли;
	
	МассивСвязанныхДокументов = Новый Массив;
	
	ТаблицаВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(ДокументСсылка);
	Для Каждого _Стр Из ТаблицаВиртуальныхСообщений Цикл
		МассивСвязанныхДокументов.Добавить(_Стр.Документ);
	КонецЦикла;	
	
	Если Параметры.Свойство("ВходящийЗаказ") Тогда
		//указали ORDERS в явном виде	
		ВходящийЗаказ = Параметры.ВходящийЗаказ;
	Иначе
		//не указали, сами прочитаем
		
		Если Не Параметры.Свойство("Действие") Тогда
			Параметры.Вставить("Действие","ПодготовитьОтветНаЗаказ");
		КонецЕсли;	
		
		ВходящийЗаказ = ПрочитатьСообщение(,ДокументСсылка,"ORDERS","Входящее",,Параметры);
	КонецЕсли;
	
	//21.10.2016 возможно есть необходимость распределять товары по ultimateCustomerGLN по исходному заказу и подготовить ответ на заказ в разрезе конечных грузополучателей
	Если Сообщение.Товары.Колонки.Найти("КонечныйГрузополучательGLN")<>Неопределено
		И ВходящийЗаказ.Товары.Колонки.Найти("КонечныйГрузополучательGLN")<>Неопределено
		И КонечныйГрузополучательЗаполнен(ВходящийЗаказ.Товары) 
		Тогда 
		ТребуетсяРаспределениеПоКонечныйГрузополучательGLN=Истина;
	Иначе
		ТребуетсяРаспределениеПоКонечныйГрузополучательGLN=Ложь;
	КонецЕсли;
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаИзменений,
			"Статус
			|Номенклатура
			|ХарактеристикаНоменклатуры
			|GTIN
			|КодТовараПокупателя
			|КодТовараПоставщика
			|ЦенаБезНДС
			|ЦенаСНДС
			|КоличествоЗаказанное
			|Количество
			|ЕдиницаИзмерения
			|Наименование
			|СуммаНДС
			|СуммаБезНДС
			|СуммаСНДС
			|СтавкаНДС"
		);
	
	флСуммаВключаетНДС = ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"СуммаВключаетНДС");
	
	ТоварыЗаказа = ПолучитьТоварыДокументаДляСообщения(МассивСвязанныхДокументов,Истина,"ПодготовкаОтветаНаЗаказ",,Сообщение);
	
	ТоварыВходящегоЗаказа = ВходящийЗаказ.Товары;
	
	Если ТребуетсяРаспределениеПоКонечныйГрузополучательGLN Тогда
		РаспределитьТоварыЗаказаПоКонечныйГрузополучательGLN(ТаблицаИзменений,ТоварыЗаказа,ВходящийЗаказ,ТоварыВходящегоЗаказа,Параметры);
	КонецЕсли;
	
	ЕстьОтклонения 		= Ложь;
	ЕстьИзменения 		= Ложь;
	ЕстьПодтверждения 	= Ложь;
	
	СинхрТолькоПоШК = (ПолучитьЗначениеСвойстваОбъектаEDI(ВходящийЗаказ.Партнер,"СинхронизироватьТоварыТолькоПоGTIN")=Истина);
	СинхрТолькоПоКодуПартнера = (ПолучитьЗначениеСвойстваОбъектаEDI(ВходящийЗаказ.Партнер,"СинхронизироватьТоварыТолькоПоКодуПартнера")=Истина);
	                      
	Для Каждого СтрокаВходящегоЗаказа Из ТоварыВходящегоЗаказа Цикл
		
		НоваяСтрока = ТаблицаИзменений.Добавить();
		
		НоваяСтрока.GTIN 				= СтрокаВходящегоЗаказа.GTIN;
		НоваяСтрока.КодТовараПокупателя = СтрокаВходящегоЗаказа.КодТовараПокупателя;
		НоваяСтрока.КодТовараПоставщика = СтрокаВходящегоЗаказа.КодТовараПоставщика;
		НоваяСтрока.ЦенаБезНДС			= 0;
		НоваяСтрока.ЦенаСНДС			= 0;
		НоваяСтрока.Количество			= 0;
		НоваяСтрока.Наименование		= СтрокаВходящегоЗаказа.Наименование;
		НоваяСтрока.СтавкаНДС			= Неопределено;
		
		НоваяСтрока.ЕдиницаИзмерения	= ПолучитьПустуюСсылкуОбъекта("ЕдиницаИзмерения");
		Если ОпределитьРелизКонфигурации() = "11.2" Тогда
			НоваяСтрока.ЕдиницаИзмерения	= Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		ИначеЕсли ИмяКонфигурации1С="УФ_УТ" ИЛИ ИмяКонфигурации1С="УФ_УНФ" Тогда 
			НоваяСтрока.ЕдиницаИзмерения	= Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаПодтверждения = Неопределено;
		
		Если Не СинхрТолькоПоШК И СтрокаПодтверждения = Неопределено И ЗначениеЗаполнено(СтрокаВходящегоЗаказа.КодТовараПокупателя) Тогда
			//при включенном флаге "СинхронизироватьТоварыТолькоПоGTIN" не ищем товар по коду партнера
			СтрокаПодтверждения = ТоварыЗаказа.Найти(СтрокаВходящегоЗаказа.КодТовараПокупателя,"КодТовараПокупателя");
		КонецЕсли;
		
		Если Не СинхрТолькоПоКодуПартнера и СтрокаПодтверждения = Неопределено И ЗначениеЗаполнено(СтрокаВходящегоЗаказа.GTIN) Тогда
			//при включенном флаге "СинхронизироватьТоварыТолькоПоКодуПартнера" не ищем товар по GTIN
			СтрокаПодтверждения = ТоварыЗаказа.Найти(СтрокаВходящегоЗаказа.GTIN,"GTIN");
		КонецЕсли;
		
		Если ТребуетсяРаспределениеПоКонечныйГрузополучательGLN Тогда
			НайтиСтрокуПодтвержденияСУчетомКонечныйГрузополучательGLN(ВходящийЗаказ,СтрокаПодтверждения,СтрокаВходящегоЗаказа,ТоварыЗаказа,НоваяСтрока);
		КонецЕсли;
		
		Если СтрокаПодтверждения = Неопределено Тогда
			
			НоваяСтрока.Статус			= "Отклонен";
			ЕстьОтклонения				= Истина;
			
		Иначе
			
			КодСтавкиНДС = КонвертироватьЗначение1СвEDI(СтрокаПодтверждения.СтавкаНДС,"СтавкаНДС","СтавкаНДС");
			
			Если СтрокаВходящегоЗаказа.ЦенаБезНДС > 0 И ((СтрокаВходящегоЗаказа.ЦенаБезНДС - СтрокаПодтверждения.ЦенаБезНДС >= 0.01) ИЛИ (СтрокаПодтверждения.ЦенаБезНДС - СтрокаВходящегоЗаказа.ЦенаБезНДС >= 0.01)) Тогда
				
				НоваяСтрока.Статус		= "Уточнен";
				НоваяСтрока.ЦенаБезНДС	= СтрокаПодтверждения.ЦенаБезНДС;
				НоваяСтрока.Количество	= СтрокаПодтверждения.Количество;
				
				ЕстьИзменения = Истина;
				
			ИначеЕсли СтрокаВходящегоЗаказа.ЦенаСНДС > 0 И ((СтрокаВходящегоЗаказа.ЦенаСНДС - СтрокаПодтверждения.ЦенаСНДС >= 0.01) ИЛИ (СтрокаПодтверждения.ЦенаСНДС - СтрокаВходящегоЗаказа.ЦенаСНДС >= 0.01)) Тогда
				
				НоваяСтрока.Статус		= "Уточнен";
				НоваяСтрока.ЦенаСНДС	= СтрокаПодтверждения.ЦенаСНДС;
				НоваяСтрока.Количество	= СтрокаПодтверждения.Количество;
				
				ЕстьИзменения = Истина;
				
			ИначеЕсли НЕ СтрокаПодтверждения.Количество = Число(СтрокаВходящегоЗаказа.Количество) Тогда
				
				НоваяСтрока.Статус		= "Уточнен";
				НоваяСтрока.Количество	= СтрокаПодтверждения.Количество;
				
				ЕстьИзменения			= Истина;
				
			ИначеЕсли НЕ КодСтавкиНДС = СтрокаВходящегоЗаказа.СтавкаНДСEDI Тогда
				
				НоваяСтрока.Статус		= "Уточнен";
				НоваяСтрока.СтавкаНДС	= КодСтавкиНДС;
				НоваяСтрока.Количество  = СтрокаПодтверждения.Количество;
				
				ЕстьИзменения			= Истина;
				
			Иначе
				
				НоваяСтрока.Статус = "Подтвержден";
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПодтверждения,"Количество,ЦенаБезНДС,ЦенаСНДС,СуммаНДС,СуммаБезНДС,СуммаСНДС");
				НоваяСтрока.СтавкаНДС	= КонвертироватьЗначение1СвEDI(СтрокаПодтверждения.СтавкаНДС,"СтавкаНДС","СтавкаНДС");
				
				ЕстьПодтверждения		= Истина;
				
			КонецЕсли;
			
			НоваяСтрока.ЕдиницаИзмерения	= СтрокаПодтверждения.ЕдиницаИзмерения;
			НоваяСтрока.Номенклатура		= СтрокаПодтверждения.Номенклатура;
			
			Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаПодтверждения.ХарактеристикаНоменклатуры;
			КонецЕсли;	
			
			СтрокаПодтверждения.Пометка = Истина;
			
			Если НоваяСтрока.Статус = "Уточнен" Тогда
				
				МассивЗаполняемыхПолей = EDI_РазложитьСтрокуВМассивСлов("ЦенаБезНДС,ЦенаСНДС,СуммаБезНДС,СуммаСНДС,СуммаНДС",",");
				
				Для Каждого ИмяПоля Из МассивЗаполняемыхПолей Цикл
					Если НЕ ЗначениеЗаполнено(НоваяСтрока[ИмяПоля]) И ЗначениеЗаполнено(СтрокаПодтверждения[ИмяПоля]) Тогда
						НоваяСтрока[ИмяПоля] = СтрокаПодтверждения[ИмяПоля];
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаНДС) Тогда
					Если ЗначениеЗаполнено(НоваяСтрока.СуммаБезНДС) И ЗначениеЗаполнено(НоваяСтрока.СуммаСНДС) Тогда
						НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаСНДС - НоваяСтрока.СуммаБезНДС;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И ЗначениеЗаполнено(СтрокаПодтверждения.СтавкаНДС) Тогда
					НоваяСтрока.СтавкаНДС = КонвертироватьЗначение1СвEDI(СтрокаПодтверждения.СтавкаНДС,"СтавкаНДС","СтавкаНДС");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.КоличествоЗаказанное = СтрокаВходящегоЗаказа.Количество;

		НоваяСтрока.Наименование = СтрокаВходящегоЗаказа.Наименование;
		
	КонецЦикла;
	
	//теперь обработаем строки ORDRSP, которые не "закрылись" строками из ORDERS
	Для Каждого Стр Из ТоварыЗаказа Цикл
		
		Если НЕ Стр.Пометка = Истина Тогда
			
			НоваяСтрока =  ТаблицаИзменений.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр,"GTIN,КодТовараПокупателя");
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр,"Номенклатура,ЕдиницаИзмерения");
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр,"Количество,ЦенаБезНДС,ЦенаСНДС,СуммаБезНДС,СуммаСНДС,СуммаНДС");
			
			НоваяСтрока.СтавкаНДС    = КонвертироватьЗначение1СвEDI(Стр.СтавкаНДС,"СтавкаНДС","СтавкаНДС");
			НоваяСтрока.Статус				= "Уточнен";
			НоваяСтрока.КоличествоЗаказанное = 0;
			
			Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
				НоваяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
			КонецЕсли;	
			
			ЕстьИзменения					= Истина;
								
		КонецЕсли;
		
	КонецЦикла;
	
	ДатаПоставки = Дата(1,1,1);
	Если ЗначениеЗаполнено(Параметры) И 
		ТипЗнч(Параметры) = Тип("Структура") И 
		Параметры.Свойство("ИзмененныеРеквизиты") = Истина И
		ТипЗнч(Параметры.ИзмененныеРеквизиты) = Тип("Структура") И
		Параметры.ИзмененныеРеквизиты.Свойство("ДатаПоставки") = Истина И
		ЗначениеЗаполнено(Параметры.ИзмененныеРеквизиты.ДатаПоставки) Тогда
		
		ДатаПоставки = Параметры.ИзмененныеРеквизиты.ДатаПоставки;		
		
	КонецЕсли;
	
	ИмяРеквизитаОрганизация	= ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");		
	
	Сообщение.Документ1С 	= ДокументСсылка;
	Сообщение.Отправитель1С	= ДокументСсылка[ИмяРеквизитаОрганизация];//+
	Сообщение.Продавец1С 	= ДокументСсылка[ИмяРеквизитаОрганизация];
	Сообщение.Покупатель1С 	= ДокументСсылка.Контрагент;
//	Сообщение.Получатель1С 	= ВходящийЗаказ.Отправитель1С;
	
	Если ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"Грузоотправитель") И ЗначениеЗаполнено(ДокументСсылка.Грузоотправитель) Тогда
		Сообщение.Грузоотправитель1С	= ДокументСсылка.Грузоотправитель;
	ИначеЕсли ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"Организация") Тогда
		Сообщение.Грузоотправитель1С	= ДокументСсылка.Организация;
	ИначеЕсли ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"Фирма") Тогда
		Сообщение.Грузоотправитель1С	= ДокументСсылка.Фирма;
	КонецЕсли;
	
	Если ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"Грузополучатель") И ЗначениеЗаполнено(ДокументСсылка.Грузополучатель) Тогда
		Сообщение.Грузополучатель1С	= ДокументСсылка.Грузополучатель;
	ИначеЕсли ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"Контрагент") Тогда
		Сообщение.Грузополучатель1С	= ДокументСсылка.Контрагент;
	КонецЕсли;
	
	Если ВходящийЗаказ.Свойство("КонечныйГрузополучатель1С") И Сообщение.Свойство("КонечныйГрузополучатель1С") Тогда
		Сообщение.КонечныйГрузополучатель1С  = ВходящийЗаказ.КонечныйГрузополучатель1С;		
	КонецЕсли;
	
	Если ВходящийЗаказ.Свойство("Контракт") И Сообщение.Свойство("Контракт") Тогда
		Сообщение.Контракт  = ВходящийЗаказ.Контракт;		
	КонецЕсли;
	
	Если ВходящийЗаказ.Свойство("ПромежуточныйГрузополучатель1С") И Сообщение.Свойство("ПромежуточныйГрузополучатель1С") Тогда
		Сообщение.ПромежуточныйГрузополучатель1С  = ВходящийЗаказ.ПромежуточныйГрузополучатель1С;		
	КонецЕсли;
	
	Сообщение.Договор = ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Договор");
	
	Если Не ЗначениеЗаполнено(ДатаПоставки) Тогда
		ДатаПоставки = ОпределитьДатуПоставки(Сообщение,ВходящийЗаказ);
	КонецЕсли;
	Сообщение.ДатаПоставки = ДатаПоставки;
	
	Если ВходящийЗаказ.Свойство("ДатаВывозаОтПоставщика") И ЗначениеЗаполнено(ВходящийЗаказ.ДатаВывозаОтПоставщика) Тогда
		Сообщение.ДатаВывозаОтПоставщика = ВходящийЗаказ.ДатаВывозаОтПоставщика;
	КонецЕсли;	
	
	Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Покупатель1С));
	_СтатусChangedДляИзмененнойДатыПоставкиORDRSP = ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СтатусChangedДляИзмененнойДатыПоставкиORDRSP");
	Если _СтатусChangedДляИзмененнойДатыПоставкиORDRSP = Истина Тогда
		Если ЗначениеЗаполнено(ВходящийЗаказ.ДатаПоставки) и ВходящийЗаказ.ДатаПоставки <> Сообщение.ДатаПоставки Тогда
	    	ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьИзменения ИЛИ (ЕстьПодтверждения И ЕстьОтклонения) Тогда
		Статус = "Уточнен";
	ИначеЕсли ЕстьПодтверждения Тогда
		Статус = "Подтвержден";
	Иначе
		Статус = "Отклонен";
	КонецЕсли;
	
	Сообщение.Заказ1С				= ДокументСсылка;
	
	Сообщение.Валюта1С = ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");
	
	Сообщение.Статус				= Статус;
	
	сч = 0;
	
	//теперь закинем всю ТаблицуИзменений в ORDRSP
	Для Каждого Стр Из ТаблицаИзменений Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		сч = сч + 1;
		
		НоваяСтрока.НомерСтроки = сч;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
		НоваяСтрока.СтавкаНДС1С =   КонвертироватьЗначениеEDIв1С(Стр.СтавкаНДС,"СтавкаНДС","СтавкаНДС", Неопределено);
		НоваяСтрока.СтавкаНДСEDI =  Стр.СтавкаНДС;
		
	КонецЦикла;
	
	ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(Сообщение.Товары);
	
	попытка
		Сообщение.Транспортировка.ДатаВремяПрибытия=ВходящийЗаказ.Транспортировка.ДатаВремяПрибытия;
	исключение
	конецпопытки;
//	
КонецФункции

//DESADV
Функция ПодготовитьУведомлениеОбОтгрузке(ДокументСсылка,Сообщение,Параметры)
	
	Если ИспользоватьМаппингМетаданных Тогда
		Маппинг_ПодготовитьУведомлениеОбОтгрузке(ДокументСсылка,Сообщение,Параметры);
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяРеквизитаОрганизация			= ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
	
	Сообщение.Документ1С 			= ДокументСсылка;
	Сообщение.Отправитель1С 		= ДокументСсылка[ИмяРеквизитаОрганизация];//+на рефакторинг: сюда вылезаем из ЗагрузитьУведомлениеОПриемке. На самом деле нам надо только получить таблицу товаров.
	Сообщение.Продавец1С 			= ДокументСсылка[ИмяРеквизитаОрганизация];
	Сообщение.Покупатель1С 			= ДокументСсылка.Контрагент;
	
	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		
		Сообщение.Грузоотправитель1С		= ДокументСсылка[ИмяРеквизитаОрганизация];  		
		Сообщение.Грузополучатель1С			= ДокументСсылка.Контрагент; 		
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" и ЗначениеЗаполнено(ПолучитьКонстантуEDI("СвойСправочникТочекДоставки")) Тогда
		
		Сообщение.Грузоотправитель1С	= ДокументСсылка[ИмяРеквизитаОрганизация];
		Сообщение.Грузополучатель1С		= ДокументСсылка.Партнер;
		
	Иначе
		Если ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"Грузоотправитель") И ЗначениеЗаполнено(ДокументСсылка.Грузоотправитель) Тогда
			Сообщение.Грузоотправитель1С	= ДокументСсылка.Грузоотправитель;
		Иначе
			Сообщение.Грузоотправитель1С	= ДокументСсылка[ИмяРеквизитаОрганизация];
		КонецЕсли;
		Сообщение.Грузополучатель1С		= ДокументСсылка.Грузополучатель;
	КонецЕсли;
	
	Сообщение.Договор				= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Договор");
	Сообщение.ДатаОтгрузки			= ДокументСсылка.Дата;
	
	Сообщение.Заказ1С				= НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"ORDERS");
	
	Если ТипЗнч(Параметры) = Тип("Структура") И
		 Параметры.Свойство("Действие") И (Параметры.Действие = "Переотправка") И
		 Параметры.Свойство("ИсходноеСообщение") И 
		 Параметры.ИсходноеСообщение.Свойство("ТранспортныеУпаковки") И Сообщение.Свойство("ТранспортныеУпаковки") И
		 Не Параметры.ИсходноеСообщение.ТранспортныеУпаковки.Строки.Количество() = 0 Тогда
		Сообщение.ТранспортныеУпаковки = Параметры.ИсходноеСообщение.ТранспортныеУпаковки;
	КонецЕсли;
	
	// заполним Сф
	СФ = ПолучитьСчетФактуруНакладной(ДокументСсылка);
	Если НЕ СФ =  Неопределено Тогда
		Сообщение.СчетФактура1С = СФ;	
	КонецЕсли;
	
	Сообщение.Валюта1С = ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");
	
	Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Покупатель1С));
	Сообщение.Партнер = Партнер;
	
	Сообщение.ДатаПоставки	= ОпределитьДатуПоставки(Сообщение); //опирается на знание партнера сообщения
	
	
	//при сохранении сообщения с SSCC может быть Changed в первом сообщении
	_СтатусChangedДляПовторныхDESADV = ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СтатусChangedДляПовторныхDESADV");
	
	Если _СтатусChangedДляПовторныхDESADV = Истина Тогда
		ИсходноеСообщениеDESADV = НайтиСообщениеДокумента(ДокументСсылка,"DESADV");
		Если ИсходноеСообщениеDESADV<>Неопределено Тогда
			Сообщение.Статус = "Уточнен";
		КонецЕсли;
	КонецЕсли;
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовитьУведомлениеОбОтгрузке",,Сообщение);
	
	Для Каждого Стр Из Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		НоваяСтрока.СтавкаНДС1С = Стр.СтавкаНДС;
		НоваяСтрока.НомерГТД1С = Стр.НомерГТД;
		НоваяСтрока.Страна1С = Стр.Страна;
	КонецЦикла;
	
	ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(Сообщение.Товары);
	
	ДополнитьСообщениеСохраненнымиДанными(Сообщение, Параметры);
	
КонецФункции

//ALCRPT
Функция ПодготовитьОтчетОПродажеАлкоголя(ДокументСсылка,Сообщение)
	
	Если ИспользоватьМаппингМетаданных Тогда
		Маппинг_ПодготовитьОтчетОПродажеАлкоголя(ДокументСсылка,Сообщение);
		Возврат Неопределено;
	КонецЕсли;	
	
	Сообщение.Документ1С 			= ДокументСсылка;
	Сообщение.Отправитель1С 		= ДокументСсылка.Организация;//+
	
	Сообщение.Продавец1С 			= ДокументСсылка.Организация;
	Сообщение.Покупатель1С 			= ДокументСсылка.Контрагент;
	
	Сообщение.Грузоотправитель1С	= ДокументСсылка.Организация;
	
	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		Сообщение.Грузополучатель1С	= ДокументСсылка.Контрагент;
	Иначе
		Если ЗначениеЗаполнено(ДокументСсылка.Грузополучатель) Тогда
			Сообщение.Грузополучатель1С	= ДокументСсылка.Грузополучатель;
		Иначе
			Сообщение.Грузополучатель1С	= ДокументСсылка.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Сообщение.Договор		= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Договор");
	
	Сообщение.Заказ1С		= НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"ORDERS");
	
	Сообщение.Накладная1С	= ДокументСсылка;
	
	Сообщение.Валюта1С		= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");
	
	Товары = ПолучитьТоварыРеализацииАлкогольнойПродукции(ДокументСсылка);
	//Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,,"ПолучитьТоварыРеализацииАлкогольнойПродукции",,Сообщение);	//TODO набросать запросы в СКД и тогда включить
	
	Для Каждого Стр Из Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		НоваяСтрока.СтавкаНДС1С = Стр.СтавкаНДС;
		
	КонецЦикла;
	
	БылОтправленALCRPT = ПолучитьЗначениеСвойстваОбъектаEDI(ДокументСсылка,"БылОтправленALCRPT");
	Сообщение.Вставить("БылОтправленALCRPT",(БылОтправленALCRPT=Истина));
	
КонецФункции

//RECADV
Функция ПодготовитьУведомлениеОПриемке(ДокументСсылка, Сообщение)
	
	Если ИспользоватьМаппингМетаданных Тогда
		Маппинг_ПодготовитьУведомлениеОПриемке(ДокументСсылка, Сообщение);
		Возврат Неопределено;
	КонецЕсли;	
	
	ИмяРеквизитаОрганизация			= ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
	
	Сообщение.Документ1С 			= ДокументСсылка;
	//Сообщение.Отправитель1С 		= ДокументСсылка[ИмяРеквизитаОрганизация];//+
	Сообщение.Продавец1С 			= ДокументСсылка.Контрагент;
	Сообщение.Валюта1С				= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");
	Сообщение.Договор				= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Договор");
	Сообщение.Заказ1С				= НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"ORDERS");
	Сообщение.Накладная1С			= ДокументСсылка;
	Сообщение.Приемка1С				= ДокументСсылка;
	
	Если ИмяКонфигурации1С = "Розница" Тогда
		Сообщение.Покупатель1С = ДокументСсылка.Склад[ИмяРеквизитаОрганизация];	
	Иначе
		Сообщение.Покупатель1С = ДокументСсылка[ИмяРеквизитаОрганизация];
	КонецЕсли;
	
	Если ИмяКонфигурации1С = "Розница" 
		или ИмяКонфигурации1С = "ДалионУМ" 
		или ИмяКонфигурации1С = "УФ_УТ" 
		или ИмяКонфигурации1С = "УФ_БП" Тогда
		Сообщение.Грузополучатель1С		= ДокументСсылка.Склад;
    ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
		Сообщение.Грузополучатель1С		= ДокументСсылка.ПодразделениеКомпании;
	ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда	
		Сообщение.Грузополучатель1С		= ДокументСсылка.СтруктурнаяЕдиница;
    Иначе
		Сообщение.Грузополучатель1С		= ДокументСсылка.СкладОрдер;
	КонецЕсли;
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовкаУведомленияОПриемке",,Сообщение);
	
	Для Каждого Стр Из Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
		Попытка
			НоваяСтрока.СтавкаНДС1С = Стр.СтавкаНДС;
		Исключение	
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(Сообщение.Товары);
	
КонецФункции

//INVOIC
Функция ПодготовитьСчетФактуру(ДокументСсылка,Сообщение)
	
	Если ЕстьКоррИспрСФ Тогда
		
		КорректировкаРеализации = Неопределено;
		Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Для Каждого Стр ИЗ ДокументСсылка.ДокументыОснования Цикл
				Если ТипЗнч(Стр.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					КорректировкаРеализации = Стр.ДокументОснование;
				КонецЕсли;
			КонецЦикла;
		Иначеесли НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				КорректировкаРеализации = ДокументСсылка.ДокументОснование;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем исправительный СФ в отдельной процедуре
		Если ЗначениеЗаполнено(КорректировкаРеализации) Тогда
			ЗаполнитьИсправительныйКорректировочныйСчетФактуру(ДокументСсылка,Сообщение);
			Возврат Сообщение;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьМаппингМетаданных Тогда
		Маппинг_ПодготовитьСчетФактуру(ДокументСсылка,Сообщение);
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВозвратов=Новый Массив;
	
	Сообщение.Заказ1С			= НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"ORDERS");
	Сообщение.Накладная1С		= НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"DESADV");
	Сообщение.Приемка1С			= НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"RECADV");
	Сообщение.СчетФактура1С		= ДокументСсылка;
	Накладная					= Сообщение.Накладная1С;
	
	//Попробуем собрать связанные возвраты товаров, чтобы они сминусовали товары из DESADV
	//Предполагаем, что они всегда лежат в табличной части "ДокументыОснования"
	Если ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ДокументыОснования")<>Неопределено Тогда
		
		ТипРеализации	= ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке");
		ТипВозврата		= ПолучитьТипЗначенияОбъекта("ВходящийВозврат");
		
		Для Каждого СтрокаОснования Из ДокументСсылка.ДокументыОснования Цикл
			Если ТипЗнч(СтрокаОснования.ДокументОснование)=Тип(ТипВозврата) Тогда
                МассивВозвратов.Добавить(СтрокаОснования.ДокументОснование);
			КонецЕсли;	
		КонецЦикла;
		
	ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
		
		ТипДокументаВозврата = ПолучитьТипЗначенияОбъекта("ВходящийВозврат",Истина,);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка
		|ИЗ
		|	"+ТипДокументаВозврата+" КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.ДокументОснование В (&ДокументОснование)";
		Запрос.УстановитьПараметр("ДокументОснование", Накладная);
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Не Результат.Количество() = 0 Тогда
			МассивВозвратов = Результат.ВыгрузитьКолонку("Ссылка");			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРеквизитаОрганизация		= ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
	
	Сообщение.Документ1С 		= ДокументСсылка;
	Сообщение.Отправитель1С 	= ДокументСсылка[ИмяРеквизитаОрганизация];//+
	Сообщение.Продавец1С 		= ДокументСсылка[ИмяРеквизитаОрганизация];
	Сообщение.Покупатель1С 		= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Контрагент");
	Сообщение.Валюта1С			= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");
	Сообщение.Договор			= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Договор");
	Сообщение.Контракт1С		= Сообщение.Договор;//это поле будет записано в contractIdentificator
	
	Если ЗначениеЗаполнено(Сообщение.Покупатель1С)
		И ЕстьРеквизитОбъекта_Контур(Сообщение.Покупатель1С,"ГоловнойКонтрагент") Тогда
		Если ЗначениеЗаполнено(Сообщение.Покупатель1С.ГоловнойКонтрагент) Тогда
			Сообщение.Покупатель1С = Сообщение.Покупатель1С.ГоловнойКонтрагент;				
		КонецЕсли;
	КонецЕсли;

	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		Сообщение.Грузоотправитель1С	= ДокументСсылка[ИмяРеквизитаОрганизация]; 
		Сообщение.Грузополучатель1С		= ДокументСсылка.Контрагент;
		
	Иначе
		Если ЕстьРеквизитОбъекта_Контур(Накладная,"Грузоотправитель") И ЗначениеЗаполнено(Накладная.Грузоотправитель) Тогда
			Сообщение.Грузоотправитель1С	= Накладная.Грузоотправитель;
		Иначе
			Сообщение.Грузоотправитель1С	= Накладная[ИмяРеквизитаОрганизация];
		КонецЕсли;
	
		Если ЗначениеЗаполнено(Накладная.Грузополучатель) И НЕ (ТипЗнч(Накладная.Грузополучатель) = Тип("Строка")) Тогда
			Сообщение.Грузополучатель1С	= Накладная.Грузополучатель;
		Иначе
			Сообщение.Грузополучатель1С	= Накладная.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	Сообщение.СуммаТоваровНДС = 0;
	Сообщение.СуммаТоваровВсего = 0;
	Сообщение.СуммаТоваровВсегоБезНДС = 0;
	
	Товары = ПолучитьТоварыДокументаДляСообщения(Накладная,Истина,"ПодготовкаСчетФактурыКОтправке",МассивВозвратов,Сообщение);
	Для Каждого Стр Из Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
		НоваяСтрока.СтавкаНДС1С = Стр.СтавкаНДС;
		НоваяСтрока.НомерГТД1С = Стр.НомерГТД;
		НоваяСтрока.Страна1С = Стр.Страна;
		
		Если Стр.ТипЕдиницы<>"RC" Тогда//по возвратной таре сумму не считаем
			Сообщение.СуммаТоваровНДС			= Сообщение.СуммаТоваровНДС+Стр.СуммаНДС;
			Сообщение.СуммаТоваровВсего			= Сообщение.СуммаТоваровВсего+Стр.СуммаСНДС;
			Сообщение.СуммаТоваровВсегоБезНДС	= Сообщение.СуммаТоваровВсегоБезНДС+Стр.СуммаБезНДС;
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(Сообщение.Товары);
	
КонецФункции

//COINVOIC
Функция ПодготовитьКорректировочныйСчетФактуру(ДокументСсылка,Сообщение)
	
	ЗаполнитьИсправительныйКорректировочныйСчетФактуру(ДокументСсылка,Сообщение);

КонецФункции

//RETREC
Функция ПодготовитьУведомлениеОПриемкеВозврата(ДокументСсылка,Сообщение,Параметры)
	
	
	Если Параметры=Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;	
	
	Если Параметры.Свойство("ЭтоОтклонениеНезагруженногоВозврата") Тогда
		
		Сообщение = ПрочитатьСообщение(Параметры.ВходящийВозврат);
		
		УчетнаяЗапись				= Сообщение.ОтправительEDI;
		Сообщение.ОтправительEDI	= Сообщение.ПолучательEDI;
		Сообщение.ПолучательEDI		= УчетнаяЗапись;

		Сообщение.ТипСообщения		= "RETREC";
		Сообщение.Направление		= "Исходящее";
		Сообщение.НакладнаяEDI		= Сообщение.ДокументEDI;
		
		Если НЕ ЗначениеЗаполнено(Сообщение.ВалютаEDI) Тогда
			Сообщение.ВалютаEDI = "RUB";
		КонецЕсли;
		
		Для каждого Стр Из Сообщение.Товары Цикл
			Стр.Количество = 0;
			Стр.СуммаБезНДС = 0;
			Стр.СуммаНДС = 0;
			Стр.СуммаСНДС = 0;
		КонецЦикла;
		
		Эталон = ПолучитьСтруктуруСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
		ДополнитьСтруктуруСообщенияИзЭталона(Сообщение,Эталон);
		Сообщение.Вставить("ИсходныйRETDES",Сообщение.СообщениеСсылка);//понадобится в процедуре СохранитьСообщение
		Сообщение.СообщениеСсылка = Неопределено;//это будет новое сообщение
		
		Возврат Сообщение;
		
	КонецЕсли;
	
	Сообщение.Документ1С 			= ДокументСсылка;
	Сообщение.Отправитель1С 		= ДокументСсылка.Организация;
	Сообщение.Продавец1С 			= ДокументСсылка.Контрагент;
	Сообщение.Покупатель1С 			= ДокументСсылка.Организация;
	
	Сообщение.Валюта1С = ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");
	
	Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Продавец1С));
	Сообщение.Партнер = Партнер;
	
	Сообщение.ДатаПоставки	= ОпределитьДатуПоставки(Сообщение);
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовитьУведомлениеОПриемкеВозврата",,Сообщение);
	
	Для Каждого Стр Из Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		НоваяСтрока.СтавкаНДС1С = Стр.СтавкаНДС;
		НоваяСтрока.НомерГТД1С = Стр.НомерГТД;
		НоваяСтрока.Страна1С = Стр.Страна;
	КонецЦикла;
	
	ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(Сообщение.Товары);
	
КонецФункции

Функция ПолучитьИсходныйДокументОтгрузкиКорректировкиРеализации(КорректировкаРеализации)
	
	ДокументОтгрузки = Неопределено;
	
	//ищем первоначальный документ отгрузки.
	Если ИмяКонфигурации1С = "УФ_УТ" И ТипЗнч(КорректировкаРеализации.ДокументОснование) = Тип(ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке")) Тогда
		ДокументОтгрузки = КорректировкаРеализации.ДокументОснование;
	ИначеЕсли ТипЗнч(КорректировкаРеализации.ДокументРеализации) = Тип(ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке")) Тогда	
		ДокументОтгрузки = КорректировкаРеализации.ДокументРеализации;
	Иначе//корректировка корректировки. Их может быть много.
		ДокументОтгрузки = КорректировкаРеализации.ДокументРеализации.ДокументРеализации;
	КонецЕсли;
	
	Возврат ДокументОтгрузки;
	
КонецФункции

Процедура ЗаполнитьИсправительныйКорректировочныйСчетФактуру(ДокументСсылка,Сообщение)
	
	Если ИспользоватьМаппингМетаданных Тогда
		Маппинг_ЗаполнитьИсправительныйКорректировочныйСчетФактуру(ДокументСсылка,Сообщение);
		Возврат;
	КонецЕсли;
	
	Если ДокументСсылка.Исправление Тогда
		Сообщение.Исправление = Истина;
		Сообщение.НомерИсправления = ДокументСсылка.НомерИсправления;
		Сообщение.ДатаИсправления = ДокументСсылка.Дата;
	КонецЕсли;
	
	Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
		Для Каждого Стр ИЗ ДокументСсылка.ДокументыОснования Цикл
			Если ТипЗнч(Стр.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				КорректировкаРеализации = Стр.ДокументОснование;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КорректировкаРеализации = ДокументСсылка.ДокументОснование;
	КонецЕсли;
	
	ДокументОтгрузки = ПолучитьИсходныйДокументОтгрузкиКорректировкиРеализации(КорректировкаРеализации);
	
	Сообщение.Заказ1С			= НайтиСвязанныйДокументПоТипуСообщения(ДокументОтгрузки,"ORDERS");
	Сообщение.Накладная1С		= НайтиСвязанныйДокументПоТипуСообщения(ДокументОтгрузки,"DESADV");
	Сообщение.Приемка1С			= НайтиСвязанныйДокументПоТипуСообщения(ДокументОтгрузки,"RECADV");
	Сообщение.СчетФактура1С		= НайтиСвязанныйДокументПоТипуСообщения(ДокументОтгрузки,"INVOIC");
	
	ИмяРеквизитаОрганизация		= ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
	
	Сообщение.Документ1С 		= ДокументСсылка;
	Сообщение.Отправитель1С 	= ДокументСсылка[ИмяРеквизитаОрганизация];//+
	Сообщение.Продавец1С 		= ДокументСсылка[ИмяРеквизитаОрганизация];
	Сообщение.Покупатель1С 		= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Контрагент");
	Сообщение.Валюта1С			= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Валюта");
	Сообщение.Договор			= ПолучитьРеквизитДокументаДляСообщения(ДокументСсылка,"Договор");
	Сообщение.Контракт1С		= Сообщение.Договор;//это поле будет записано в contractIdentificator
	
	Если ЗначениеЗаполнено(Сообщение.Покупатель1С)
		И ЕстьРеквизитОбъекта_Контур(Сообщение.Покупатель1С,"ГоловнойКонтрагент") Тогда
		Если ЗначениеЗаполнено(Сообщение.Покупатель1С.ГоловнойКонтрагент) Тогда
			Сообщение.Покупатель1С = Сообщение.Покупатель1С.ГоловнойКонтрагент;				
		КонецЕсли;
	КонецЕсли;

	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		Сообщение.Грузоотправитель1С	= ДокументСсылка[ИмяРеквизитаОрганизация]; 
		Сообщение.Грузополучатель1С		= ДокументСсылка.Контрагент;
	Иначе
		Если ЕстьРеквизитОбъекта_Контур(КорректировкаРеализации,"Грузоотправитель") И ЗначениеЗаполнено(КорректировкаРеализации.Грузоотправитель) Тогда
			Сообщение.Грузоотправитель1С	= КорректировкаРеализации.Грузоотправитель;
		Иначе
			Сообщение.Грузоотправитель1С	= КорректировкаРеализации[ИмяРеквизитаОрганизация];
		КонецЕсли;
	
		Если ЗначениеЗаполнено(КорректировкаРеализации.Грузополучатель) И НЕ (ТипЗнч(КорректировкаРеализации.Грузополучатель) = Тип("Строка")) Тогда
			Сообщение.Грузополучатель1С	= КорректировкаРеализации.Грузополучатель;
		Иначе
			Сообщение.Грузополучатель1С	= КорректировкаРеализации.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "COINVOIC" Тогда
		Если ИмяКонфигурации1С="УФ_УТ" Тогда
			СуммаУвеличение=0; СуммаНДСУвеличение=0;
			СуммаУменьшение=0; СуммаНДСУменьшение=0;
			Для Каждого СтрокаДанныхДокумента Из КорректировкаРеализации.Расхождения Цикл
				СуммаУвеличение=СуммаУвеличение+?(СтрокаДанныхДокумента.СуммаСНДС>0,СтрокаДанныхДокумента.СуммаСНДС,0);
				СуммаУменьшение=СуммаУменьшение+?(СтрокаДанныхДокумента.СуммаСНДС<0,-СтрокаДанныхДокумента.СуммаСНДС,0);
				СуммаНДСУвеличение=СуммаНДСУвеличение+?(СтрокаДанныхДокумента.СуммаНДС>0,СтрокаДанныхДокумента.СуммаНДС,0);
				СуммаНДСУменьшение=СуммаНДСУменьшение+?(СтрокаДанныхДокумента.СуммаНДС<0,-СтрокаДанныхДокумента.СуммаНДС,0);
			КонецЦикла;
			Сообщение.СуммаВсегоУвеличение			= СуммаУвеличение;
			Сообщение.СуммаВсегоУменьшение			= СуммаУменьшение;
			Сообщение.СуммаВсегоБезНДСУвеличение	= СуммаУвеличение-СуммаНДСУвеличение;
			Сообщение.СуммаВсегоБезНДСУменьшение	= СуммаУменьшение-СуммаНДСУменьшение;
			Сообщение.СуммаВсегоНДСУвеличение		= СуммаНДСУвеличение;
			Сообщение.СуммаВсегоНДСУменьшение		= СуммаНДСУменьшение;
		Иначе //ОФ или УФ_БП - все есть в явном виде
			Сообщение.СуммаВсегоУвеличение			= ДокументСсылка.СуммаУвеличение;
			Сообщение.СуммаВсегоУменьшение			= ДокументСсылка.СуммаУменьшение;
			Сообщение.СуммаВсегоБезНДСУвеличение	= ДокументСсылка.СуммаУвеличение-ДокументСсылка.СуммаНДСУвеличение;
			Сообщение.СуммаВсегоБезНДСУменьшение	= ДокументСсылка.СуммаУменьшение-ДокументСсылка.СуммаНДСУменьшение;
			Сообщение.СуммаВсегоНДСУвеличение		= ДокументСсылка.СуммаНДСУвеличение;
			Сообщение.СуммаВсегоНДСУменьшение		= ДокументСсылка.СуммаНДСУменьшение;
		КонецЕсли;
	Иначе
		Сообщение.СуммаТоваровНДС = 0;
		Сообщение.СуммаТоваровВсего = 0;
		Сообщение.СуммаТоваровВсегоБезНДС = 0;
	КонецЕсли;	
	Товары = ПолучитьТоварыДокументаДляСообщения(КорректировкаРеализации,Истина,?(Сообщение.ТипСообщения = "INVOIC","ПодготовкаИсправительногоСчетаФактурыКОтправке","ПодготовкаКорректировочногоСчетаФактурыКОтправке"),,Сообщение);
	Для Каждого Стр Из Товары Цикл
		
		Если Сообщение.ТипСообщения = "COINVOIC" Тогда
			Если (Стр.КоличествоДоКорректировки = Стр.Количество) И
				 (Стр.СуммаНДСДоКорректировки = Стр.СуммаНДС) И
				 (Стр.ЦенаБезНДСДоКорректировки = Стр.ЦенаБезНДС) И
				 (Стр.ЦенаСНДСДоКорректировки = Стр.ЦенаСНДС) И
				 (Стр.СуммаСНДСДоКорректировки = Стр.СуммаСНДС) Тогда
				 
				 Продолжить;
				 
			 КонецЕсли;
		КонецЕсли;
			
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		
		Если Сообщение.ТипСообщения = "COINVOIC" Тогда
			
			ЗаполнитьКорректировочноеПолеСФ(НоваяСтрока,"Количество",Стр);
			ЗаполнитьКорректировочноеПолеСФ(НоваяСтрока,"ЦенаБезНДС",Стр);
			ЗаполнитьКорректировочноеПолеСФ(НоваяСтрока,"ЦенаСНДС",Стр);
			ЗаполнитьКорректировочноеПолеСФ(НоваяСтрока,"СуммаБезНДС",Стр);
			ЗаполнитьКорректировочноеПолеСФ(НоваяСтрока,"СуммаНДС",Стр);
			ЗаполнитьКорректировочноеПолеСФ(НоваяСтрока,"СуммаСНДС",Стр);
			
			НоваяСтрока.СтавкаНДСДо1С	= Стр.СтавкаНДС;
			НоваяСтрока.СтавкаНДСПосле1С= Стр.СтавкаНДС;
			
		Иначе
			
			НоваяСтрока.СтавкаНДС1С	= Стр.СтавкаНДС;
			
			// возвратной тары не видно в корректрировке реализации, ее не проверяем
			Сообщение.СуммаТоваровНДС			= Сообщение.СуммаТоваровНДС			+ Стр.СуммаНДС;
			Сообщение.СуммаТоваровВсего			= Сообщение.СуммаТоваровВсего		+ Стр.СуммаСНДС;
			Сообщение.СуммаТоваровВсегоБезНДС	= Сообщение.СуммаТоваровВсегоБезНДС	+ Стр.СуммаБезНДС;
			
		КонецЕсли;
			
  		НоваяСтрока.НомерГТД1С		= Стр.НомерГТД;
		НоваяСтрока.Страна1С		= Стр.Страна;

	КонецЦикла;
	
	ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(Сообщение.Товары);

КонецПроцедуры

Процедура ЗаполнитьКорректировочноеПолеСФ(СтрокаСообщения,ИмяПоля,СтрокаДанных)
	
	ЗначениеДо = СтрокаДанных[ИмяПоля+"ДоКорректировки"];
	ЗначениеПосле = СтрокаДанных[ИмяПоля];
	
	СтрокаСообщения[ИмяПоля+"До"] = ЗначениеДо;
	СтрокаСообщения[ИмяПоля+"После"] = ЗначениеПосле;
	СтрокаСообщения[ИмяПоля+"Увеличение"] = 0;
	СтрокаСообщения[ИмяПоля+"Уменьшение"] = 0;
	
	Если ЗначениеДо<ЗначениеПосле Тогда
		СтрокаСообщения[ИмяПоля+"Увеличение"] = ЗначениеПосле-ЗначениеДо;
	ИначеЕсли ЗначениеДо>ЗначениеПосле Тогда
		СтрокаСообщения[ИмяПоля+"Уменьшение"] = ЗначениеДо-ЗначениеПосле;
	КонецЕсли;
	
КонецПроцедуры

//ускорим заполнение поля КодЕдиницыИзмерения1С
Процедура ЗаполнитьПредставлениеЕдиницыИзмеренияВТаблицеТоваров(ТаблицаТоваров) Экспорт //т.к. возможен вызов из ПМ
	
	//TODO продумать перенос в основной запрос по товарам. UPD: будет решаться в рамках 3-й части конструктора.
	Запрос = Новый Запрос;
	
	Если ИмяКонфигурации1С = "БП" или ИмяКонфигурации1С = "УФ_БП"	Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка,
		|	ЕдиницыИзмерения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Ссылка В(&МассивЕдиниц)";
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" и ОпределитьРелизКонфигурации() = "11.2" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка,
		|	ЕдиницыИзмерения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Ссылка В(&МассивЕдиниц)";
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" или ИмяКонфигурации1С = "УФ_УНФ"	Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка,
		|	ЕдиницыИзмерения.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Ссылка В(&МассивЕдиниц)";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка,
		|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Ссылка В(&МассивЕдиниц)";
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("МассивЕдиниц",ТаблицаТоваров.ВыгрузитьКолонку("ЕдиницаИзмерения"));
	ВыбЕдиниц = Запрос.Выполнить().Выбрать();
	Пока ВыбЕдиниц.Следующий() Цикл
		Строки = ТаблицаТоваров.НайтиСтроки(Новый Структура("ЕдиницаИзмерения",ВыбЕдиниц.Ссылка));
		Для Каждого Строка Из Строки Цикл
			Строка.КодЕдиницыИзмерения1С = нрег(ВыбЕдиниц.Наименование);
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура РаспределитьТоварыЗаказаПоКонечныйГрузополучательGLN(ТаблицаИзменений,ТоварыЗаказа,ВходящийЗаказ,ТоварыВходящегоЗаказа,Параметры)
	//Распределим ТоварыЗаказа по товарам входящего заказа
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаИзменений,
	"КонечныйГрузополучательGLN");
	
	РаспределеннаяТЧ = ТоварыЗаказа.Скопировать();
	РаспределеннаяТЧ.Очистить();
	РаспределеннаяТЧ.Колонки.Добавить("КонечныйГрузополучательGLN");
	Для Каждого ТоварПодготовленногоОтвета Из ТоварыЗаказа Цикл
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		ОтборНоменклатуры = Новый Структура();
		
		СинхрТолькоПоШК = (ПолучитьЗначениеСвойстваОбъектаEDI(ВходящийЗаказ.Партнер,"СинхронизироватьТоварыТолькоПоGTIN")=Истина);
		СинхрТолькоПоКодуПартнера = (ПолучитьЗначениеСвойстваОбъектаEDI(ВходящийЗаказ.Партнер,"СинхронизироватьТоварыТолькоПоКодуПартнера")=Истина);
		
		Если Не СинхрТолькоПоШК И ЗначениеЗаполнено(ТоварПодготовленногоОтвета.КодТовараПокупателя) Тогда
			//при включенном флаге "СинхронизироватьТоварыТолькоПоGTIN" не ищем товар по коду партнера
			ОтборНоменклатуры.Вставить("КодТовараПокупателя",ТоварПодготовленногоОтвета.КодТовараПокупателя);   
		КонецЕсли;
		
		Если Не СинхрТолькоПоКодуПартнера И ЗначениеЗаполнено(ТоварПодготовленногоОтвета.GTIN) Тогда
			//при включенном флаге "СинхронизироватьТоварыТолькоПоКодуПартнера" не ищем товар по GTIN
			ОтборНоменклатуры.Вставить("GTIN",ТоварПодготовленногоОтвета.GTIN); 
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		НайденныеСтрокиВИсходномЗаказе = ТоварыВходящегоЗаказа.НайтиСтроки(ОтборНоменклатуры);
		Если НайденныеСтрокиВИсходномЗаказе.Количество()=0 Тогда 
			//добавленный товар - просто добавим его
			НоваяСтрока=РаспределеннаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТоварПодготовленногоОтвета);
		Иначе
			ОсталосьРаспределить= ТоварПодготовленногоОтвета.Количество;
			Для Каждого НайденнаяСтрокаИсходногоЗаказа Из НайденныеСтрокиВИсходномЗаказе Цикл
				НоваяСтрока=РаспределеннаяТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТоварПодготовленногоОтвета,);
				Попытка //завернуто в попытку чтобы избежать ошибки среды если случайно добавили в метаданные эту колонку по сети где данные не придут 
					ЗаполнитьЗначенияСвойств(НоваяСтрока,НайденнаяСтрокаИсходногоЗаказа,"КонечныйГрузополучательGLN");
				Исключение
				КонецПопытки;
				Если ОсталосьРаспределить<=НайденнаяСтрокаИсходногоЗаказа.Количество Тогда
					НоваяСтрока.Количество=ОсталосьРаспределить;
					ОсталосьРаспределить=0;
				ИначеЕсли ОсталосьРаспределить>НайденнаяСтрокаИсходногоЗаказа.Количество Тогда
					НоваяСтрока.Количество=НайденнаяСтрокаИсходногоЗаказа.Количество;
					ОсталосьРаспределить=ОсталосьРаспределить-НайденнаяСтрокаИсходногоЗаказа.Количество;
				КонецЕсли;
				НоваяСтрока.СуммаСНДС=НоваяСтрока.Количество*НоваяСтрока.ЦенаСНДС;
				НоваяСтрока.СуммаБезНДС=НоваяСтрока.Количество*НоваяСтрока.ЦенаБезНДС;
			КонецЦикла;
			Если ОсталосьРаспределить>0 Тогда
				НоваяСтрока.Количество=НоваяСтрока.Количество+ОсталосьРаспределить;
				НоваяСтрока.СуммаСНДС=НоваяСтрока.Количество*НоваяСтрока.ЦенаСНДС;
				НоваяСтрока.СуммаБезНДС=НоваяСтрока.Количество*НоваяСтрока.ЦенаБезНДС;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	//теперь после распределения заменим тч
	ТоварыЗаказа=РаспределеннаяТЧ;
	
	//Возможно, это повторный вызов сравнения после ручного распределения пользователем
	//такой вызов используется для перерасчета статусов по строкам
	Если Параметры.Свойство("ИзмененноеПользователемРаспределение") и Параметры.ИзмененноеПользователемРаспределение<>Неопределено Тогда
		//требуется для повторного сравнения распределенных товаров после редактирования распределения пользователем
		ТоварыЗаказа = Параметры.ИзмененноеПользователемРаспределение;
	КонецЕсли;
КонецПроцедуры

Процедура НайтиСтрокуПодтвержденияСУчетомКонечныйГрузополучательGLN(ВходящийЗаказ,СтрокаПодтверждения,СтрокаВходящегоЗаказа,ТоварыЗаказа,НоваяСтрока)
			ОтборНоменклатуры = Новый Структура();
			СинхрТолькоПоШК = (ПолучитьЗначениеСвойстваОбъектаEDI(ВходящийЗаказ.Партнер,"СинхронизироватьТоварыТолькоПоGTIN")=Истина);
			СинхрТолькоПоКодуПартнера = (ПолучитьЗначениеСвойстваОбъектаEDI(ВходящийЗаказ.Партнер,"СинхронизироватьТоварыТолькоПоКодуПартнера")=Истина);
			Если Не СинхрТолькоПоШК И ЗначениеЗаполнено(СтрокаВходящегоЗаказа.КодТовараПокупателя) Тогда
				//при включенном флаге "СинхронизироватьТоварыТолькоПоGTIN" не ищем товар по коду партнера
				ОтборНоменклатуры.Вставить("КодТовараПокупателя",СтрокаВходящегоЗаказа.КодТовараПокупателя);   //булочки в ассортименте???    искать по номенклатуре????
			КонецЕсли;
			Если Не СинхрТолькоПоКодуПартнера И ЗначениеЗаполнено(СтрокаВходящегоЗаказа.GTIN) Тогда
				//при включенном флаге "СинхронизироватьТоварыТолькоПоКодуПартнера" не ищем товар по GTIN
				ОтборНоменклатуры.Вставить("GTIN",СтрокаВходящегоЗаказа.GTIN);   //булочки в ассортименте???    искать по номенклатуре????
			КонецЕсли;
			ОтборНоменклатуры.Вставить("КонечныйГрузополучательGLN",СтрокаВходящегоЗаказа.КонечныйГрузополучательGLN);   
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			СтрокиПодтверждения = ТоварыЗаказа.НайтиСтроки(ОтборНоменклатуры);
			Если СтрокиПодтверждения.Количество()=1 Тогда 
				СтрокаПодтверждения=СтрокиПодтверждения[0];
			Иначе
				СтрокаПодтверждения=неопределено;  //если по ключу нашлось несколько исходных - выведем строку в неопределившуюся
			КонецЕсли;
			НоваяСтрока.КонечныйГрузополучательGLN=СтрокаВходящегоЗаказа.КонечныйГрузополучательGLN;
КонецПроцедуры

Функция КонечныйГрузополучательЗаполнен(Товары) Экспорт
	Если Товары.Колонки.Найти("КонечныйГрузополучательGLN")=Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
		
	Заполнен=ложь;
	Для Каждого СТрокаТоваров Из Товары Цикл
		Если ЗначениеЗаполнено(СТрокаТоваров.КонечныйГрузополучательGLN) Тогда 
			Заполнен=Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Заполнен;
КонецФункции


//******************************************************************
//	ВСПОМОГАТЕЛЬНЫЕ СПРАВОЧНИКИ EDI

//******************************************************************

Функция НайтиОбратныйЗаказ(Документ)
	
	ОбратныйЗаказ1С = Неопределено;
		
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Документ КАК Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.Документ = &Документ
	|	И КонтурEDI_Сообщения.ТипСообщения = ""PORDERS""";
	
	Запрос.УстановитьПараметр("Документ", ПреобразоватьЗначениеДляВнешнегоХранилища(Документ));
	ОбратныйЗаказ1С = ПолучитьРезультатЗапроса(Запрос);
	
	Возврат ОбратныйЗаказ1С;			
	
КонецФункции

Функция ПолучитьСообщенияДокумента(ДокументСсылка)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	Запрос.УстановитьПараметр("Документ",			ПреобразоватьЗначениеДляВнешнегоХранилища(ДокументСсылка));
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Ссылка как СообщениеСсылка,
	|	КонтурEDI_Сообщения.Направление как Направление,
	|	КонтурEDI_Сообщения.ТипСообщения как ТипСообщения,
	|	КонтурEDI_Сообщения.Статус как Статус
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.Документ = &Документ
	|	И НЕ КонтурEDI_Сообщения.ПометкаУдаления";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ВнешнееХранилище Тогда
		ТЗ = ПолучитьТаблицуИзВнешнейБазы(ТЗ);
	КонецЕсли;	
	
	Возврат ТЗ;
	
КонецФункции

//создает в ветке СтрокаДерева вложенные строки, соответствующие Сообщениям
Процедура ВывестиСтрокуДокумента(СтрокаДерева)
	
	СтатусДокумента = ПолучитьСтатусДокумента(СтрокаДерева.Ссылка);
	
	СтрокаДерева.Вид				= "Документ";
	СтрокаДерева.Статус				= СтатусДокумента;
	СтрокаДерева.Представление		= СокрЛП(СтрокаДерева.Ссылка);
	СтрокаДерева.Проведен			= СтрокаДерева.Ссылка.Проведен;
	СтрокаДерева.ПометкаУдаления	= СтрокаДерева.Ссылка.ПометкаУдаления;
	
	ТаблицаСообщений = ПолучитьСообщенияДокумента(СтрокаДерева.Ссылка);
	
	Если ТаблицаСообщений.Количество()>0 Тогда
		
		НоваяСтрокаСообщений = СтрокаДерева;
		
		Для каждого Стр Из ТаблицаСообщений Цикл
			НоваяСтрокаСообщения = НоваяСтрокаСообщений.Строки.Добавить();
			НоваяСтрокаСообщения.Вид = "Сообщение";
			НоваяСтрокаСообщения.Представление	= Стр.ТипСообщения + " ("+ НРег(Стр.Статус)+")";
			НоваяСтрокаСообщения.ТипСообщения = Стр.ТипСообщения;
			НоваяСтрокаСообщения.Направление = Стр.Направление;
			НоваяСтрокаСообщения.Ссылка = Стр.СообщениеСсылка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаПоСвязаннымДокументам(ДокументСсылка, РежимРаботыМодуля,ИменаГруппировок) Экспорт
	//ИменаГруппировок - возвращаемое значение.
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	ТаблицаСоединенийДокументов = ПолучитьТаблицуДляСборкиЗапросов(РежимРаботыМодуля);
	
	ТекущаяСтрокаСоединений = ТаблицаСоединенийДокументов.Найти(ИмяДокумента,"ТипДокумента");
	Если ТекущаяСтрокаСоединений=Неопределено Тогда
		//для документов вне цепочки, т.е. "одиночных": RETANN,PRICELIST и т.д.
		ТипДокументаСтрокой = ДокументСсылка.Метаданные().Имя;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК РеализацияТоваровУслуг
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&Ссылка)"
		;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РеализацияТоваровУслуг",ТипДокументаСтрокой);
		ИменаГруппировок = ТипДокументаСтрокой;
		
		Возврат ТекстЗапроса;
	КонецЕсли;	
	
	ТекстЗапроса = ПолучитьТекстЗапросаДляТаблицы(ТекущаяСтрокаСоединений.ПсевдонимТаблицы,ТаблицаСоединенийДокументов,"СвязанныеСообщения");
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Условия","Истина");//сюда будем подставлять нужные условия
	
	//теперь еще вытянуть группировки
	ИменаГруппировок = "";
	Для Каждого СтрокаСвязанныхДокументов Из ТаблицаСоединенийДокументов Цикл
		ИменаГруппировок = ИменаГруппировок+?(ИменаГруппировок="","",",")+"Док_"+СтрокаСвязанныхДокументов.ТипДокумента;
	КонецЦикла;	
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТекстУсловия","таб"+ИмяДокумента+".Ссылка в (&Ссылка)");
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Процедура ВывестиСтрокиЗапросаСвязанныхСообщенийРекурсивно(ДеревоЗапроса,ДеревоДокументов,Группировки,ТекущийУровень,ТаблицаРеализаций)
	
	ИменаГруппировок = СтрЗаменить(Группировки,",",Символы.ПС);
	
	Если ТекущийУровень>СтрЧислоСтрок(ИменаГруппировок) Тогда
		//дошли до конца дерева. Проверять надо, т.к. после группировое еще идет уровень детальных записей
		//но еще можно передавать Выборку из РезультатаЗапроса, и проверять по ней
		Возврат;
	КонецЕсли;	
	
	ИмяТекущейГруппировки = СтрПолучитьСтроку(ИменаГруппировок,ТекущийУровень);
	
	Для Каждого СтрокаДереваЗапроса ИЗ ДеревоЗапроса.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДереваЗапроса[ИмяТекущейГруппировки]) Тогда
			
			НоваяСтрока = ДеревоДокументов.Строки.Добавить();
			НоваяСтрока.Ссылка	= СтрокаДереваЗапроса[ИмяТекущейГруппировки];
			ВывестиСтрокуДокумента(НоваяСтрока);
			ВывестиСтрокиЗапросаСвязанныхСообщенийРекурсивно(СтрокаДереваЗапроса,НоваяСтрока,Группировки,ТекущийУровень+1,ТаблицаРеализаций);//а если нет строки?
			
			Если ЕстьКоррИспрСФ Тогда
				Если ТипЗнч(НоваяСтрока.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					НоваяСтрокаРеализаций = ТаблицаРеализаций.Добавить();
					НоваяСтрокаРеализаций.Реализация = НоваяСтрока.Ссылка;
					НоваяСтрокаРеализаций.СтрокаДерева = НоваяСтрока;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

//для документа ДокументСсылка возвращает таблицу с колонками
//Документ_PORDERS,
//Документ_ORDERS,
//Документ_ORDRSP,
//Документ_DESADV,
//Документ_RECADV,
//Документ_INVOIC
Функция ПолучитьТаблицуСвязанныхДокументовПоТипамСообщений(ДокументСсылка) Экспорт
	
	КэшРезультата = ЭДО_Кэш_Прочитать("КэшТаблицыСвязанныхДокументовПоТипамСообщений");
	Если ТипЗнч(КэшРезультата) = Тип("Структура") 
		И КэшРезультата.Свойство("ДокументСсылка") 
		И КэшРезультата.Свойство("ТаблицаСвязанных") 
		И ЗначениеЗаполнено(КэшРезультата.ДокументСсылка) 
		И КэшРезультата.ДокументСсылка=ДокументСсылка Тогда //В Кэше наш документ 
		Возврат КэшРезультата.ТаблицаСвязанных;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДокументСсылка);
	Запрос = Новый Запрос;
	
	ТипДокумента = "ДокументСсылка."+ДокументСсылка.Метаданные().Имя;
	СтрокаТаблицыТипов = ТаблицаТипов.Найти(ТипДокумента,"ИмяТипа");
	//здесь нам достаточно одной строки, т.к. предполагаем, что один и тот же документ никогда не будет работать и в режиме поставщика, и в режиме покупателя
	РежимРаботы = СтрокаТаблицыТипов.Сторона;
	
	ТекстВложенногоЗапроса = ПолучитьТекстЗапросаПоСвязаннымДокументам(ДокументСсылка,РежимРаботы,"");
	
	Если РежимРаботы="Поставщик" Тогда

		//привяжем сюда же все множественные документы, созданные из одного общего ORDERS
		
		ТабВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(ДокументСсылка);
		
		Для Каждого Стр Из ТабВиртуальныхСообщений Цикл
			Если ЗначениеЗаполнено(Стр.Документ) Тогда
				МассивДокументов.Добавить(Стр.Документ);
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;	
	
	ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса," РАЗРЕШЕННЫЕ","");//"РАЗРЕШЕННЫЕ" будет в верхнем запросе, во вложенном не надо
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ";
	
	Для Каждого Стр Из ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы)) Цикл
		Если Найти("\RETANN\RETDES\RETREC\COINVOIC\","\"+Стр.ТипСообщения+"\")=0 Тогда
			//RETANN не входит в цепочку
			Запрос.Текст = Запрос.Текст+Символы.ПС+"	ВложенныйЗапрос."
			
			+"Док_"+СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","")
				
			+" как Документ_"+Стр.ТипСообщения+",";
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос.Текст = Лев(Запрос.Текст,СтрДлина(Запрос.Текст)-1);//обрежем последнюю запятую
	Запрос.Текст = Запрос.Текст
				+Символы.ПС+" ИЗ ("+ТекстВложенногоЗапроса+") как ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Ссылка",МассивДокументов);
	
	Результат =  Запрос.Выполнить().Выгрузить();
	
	//закэшировать
	ЭДО_Кэш_Поместить("КэшТаблицыСвязанныхДокументовПоТипамСообщений",Новый Структура("ДокументСсылка,ТаблицаСвязанных",ДокументСсылка,Результат));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция ЗаполнитьАлкогольныеРеквизиты(Сообщение)
	
	Если НЕ Метаданные.РегистрыСведений.Найти("СведенияОбАлкогольнойПродукции") = Неопределено Тогда
		
		ПустаяСтруктураЛицензии = Новый Структура();
		ПустаяСтруктураЛицензии.Вставить("Серия",			"");
		ПустаяСтруктураЛицензии.Вставить("ДатаНачала",		"");
		ПустаяСтруктураЛицензии.Вставить("ДатаОкончания",	"");
		ПустаяСтруктураЛицензии.Вставить("КемВыдана",		"");
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	СведенияОбАлкогольнойПродукции.ВидПродукции.КодВидаПродукции КАК КодВидаПродукции
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
		|		ПО РеализацияТоваровУслугТовары.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Сообщение.ДокументСсылка);
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		ТЗ.Индексы.Добавить("Номенклатура");
		
		ТабЧасть = Сообщение.Товары;
		Для каждого Стр Из ТабЧасть Цикл
			
			Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				
				НайденнаяСтрока = ТЗ.Найти(Стр.Номенклатура,"Номенклатура");
				
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.КодВидаПродукции) Тогда
						Стр.АлкоКодПродукции = СокрЛП(НайденнаяСтрока.КодВидаПродукции);
					КонецЕсли;
				КонецЕсли;
				
				Импортер = Стр.Номенклатура.Импортер;
				
				Если ЗначениеЗаполнено(Импортер) Тогда
					
					Стр.АлкоПроизводитель1С = Импортер;
					
				Иначе
					
					Производитель = Стр.Номенклатура.Производитель;
					
					Если ЗначениеЗаполнено(Производитель) Тогда
						Стр.АлкоПроизводитель1С = Производитель;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Объем
			
			Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
				Попытка
					Стр.АлкоОбъем = Стр.ЕдиницаИзмерения.Объем; // не во всех типовых конфигурациях есть Объем у ед. изм
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			// Лицензия поставщика
			
			Стр.АлкоЛицензияПоставщика = ПустаяСтруктураЛицензии;
			
		КонецЦикла;
		
		// данные об адресе доставки будут заполнены из входящего заказа (если он был)
		
		// Номер и дата ТТН
		
		Попытка
			Сообщение.ТранспортнаяНакладнаяEDI.Номер = ПолучитьНомерНаПечать_КонтурEDI(Сообщение.ДокументСсылка);
			Выполнить("Сообщение.ТранспортнаяНакладнаяEDI.Дата  = Сообщение.ДокументEDI.Дата;");
			//Выполнить("Сообщение.ТранспортнаяНакладнаяEDI.Номер = ОбщегоНазначения.ПолучитьНомерНаПечать(Сообщение.ДокументСсылка);");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Функция УФ_СформироватьТекстЗапросаДляОтправкиКоррИспрINVOIC()

	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	СчетФактураВыданныйДокумент.Ссылка КАК Документ,
	        |	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
	        |	ВЫБОР
	        |		КОГДА СчетФактураВыданныйДокумент.Исправление = ИСТИНА
	        |				И КорректировкаРеализации.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	        |			ТОГДА ""Отправить счет-фактуру""
	        |		ИНАЧЕ ""Отправить корректировочный счет-фактуру""
	        |	КОНЕЦ КАК ТребуемоеДействие,
	        |	ВЫБОР
	        |		КОГДА СчетФактураВыданныйДокумент.Исправление = ИСТИНА
	        |				И КорректировкаРеализации.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	        |			ТОГДА ""INVOIC""
	        |		ИНАЧЕ ""COINVOIC""
	        |	КОНЕЦ КАК ТипСообщения,
	        |	СчетФактура_ИсходнойСФ.Ссылка КАК СчетФактураИсходнойСФ_Ссылка
	        |ПОМЕСТИТЬ ВТ_Документы_КоррИспрСФ
	        |ИЗ
	        |	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
	        |		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = КорректировкаРеализации.Контрагент)
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданныйДокумент
	        |		ПО (СчетФактураВыданныйДокумент.ДокументОснование = КорректировкаРеализации.Ссылка)
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактура_ИсходнойСФ
	        |		ПО (СчетФактура_ИсходнойСФ.ДокументОснование = КорректировкаРеализации.ДокументОснование)
	        |ГДЕ
	        |	КорректировкаРеализации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	        |	И КорректировкаРеализации.Проведен
	        |	И КорректировкаРеализации.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	        |	И ВЫБОР
	        |			КОГДА СчетФактураВыданныйДокумент.Исправление
	        |				ТОГДА ТаблицаКэшПартнеровКонтрагентов.INVOIC
	        |						И НЕ ТаблицаКэшПартнеровКонтрагентов.НеОтправлять_I_INVOIC
	        |			ИНАЧЕ ТаблицаКэшПартнеровКонтрагентов.COINVOIC
	        |		КОНЕЦ
	        |	И НЕ СчетФактураВыданныйДокумент.ПометкаУдаления
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Партнер,
	        |	Документ,
	        |	ТипСообщения";

КонецФункции // УФ_СформироватьТекстЗапросаДляОтправкиКоррИспрINVOIC()

Функция УФ_БП_ПолучитьТекстЗапросаТоваровКорректировкиРеализации(ТипСообщения="COINVOIC",ДокументСсылка)

	// исправительная СФ
	Если ТипСообщения="INVOIC" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорректировкаРеализацииТовары.НомерСтроки,
		               |	КорректировкаРеализацииТовары.Номенклатура,
		               |	Неопределено КАК ХарактеристикаНоменклатуры,
		               |	КорректировкаРеализацииТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	КорректировкаРеализацииТовары.Номенклатура.Наименование КАК Наименование,
		               |	КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	КорректировкаРеализацииТовары.Цена,
		               |	КорректировкаРеализацииТовары.СтавкаНДС,
		               |	"""" КАК СерияНоменклатуры,
		               |	СтранаПроисхождения КАК Страна,
		               |	НомерГТД КАК НомерГТД,
		               |	КорректировкаРеализацииТовары.Количество КАК Количество,
		               |	КорректировкаРеализацииТовары.Сумма КАК Сумма,
		               |	КорректировкаРеализацииТовары.СуммаНДС,
		               |	NULL КАК ТипЕдиницы
		               |ИЗ
		               |	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		               |ГДЕ
		               |	КорректировкаРеализацииТовары.Ссылка В(&Ссылка)" ;

		
	// корректировочная СФ	
	Иначе 
	//ТипСообщения="COINVOIC"
	//из-за особенностей варанта хранения данных о корректировке - часть пеолей невозможно вытащить простым запросом. Не будем городить сложный запрос, лучше сделаем детальный обход после извлечения данных
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорректировкаРеализацииТовары.НомерСтроки,
		               |	КорректировкаРеализацииТовары.Номенклатура,
		               |	Неопределено КАК ХарактеристикаНоменклатуры,
		               |	КорректировкаРеализацииТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	КорректировкаРеализацииТовары.Номенклатура.Наименование КАК Наименование,
		               |	КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	КорректировкаРеализацииТовары.Цена,
		               |	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
		               |	КорректировкаРеализацииТовары.СтавкаНДС,
		               |	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДСДоКорректировки,
		               |	"""" КАК СерияНоменклатуры,
		               |	СтранаПроисхождения КАК Страна,
		               |	НомерГТД КАК НомерГТД,
		               |	КорректировкаРеализацииТовары.Количество,
		               |	КорректировкаРеализацииТовары.КоличествоДоКорректировки,
		               |	КорректировкаРеализацииТовары.Сумма,
		               |	КорректировкаРеализацииТовары.СуммаДоКорректировки,
		               |	КорректировкаРеализацииТовары.СуммаНДС,
		               |	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		               |ИЗ
		               |	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		               |ГДЕ
		               |	КорректировкаРеализацииТовары.Ссылка В(&Ссылка)" ;
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции // УФ_УТ_ПолучитьТекстЗапросаТоваровКорректировкиРеализации()

Функция БП_ПолучитьТекстЗапросаТоваровКорректировкиРеализации(ТипСообщения="COINVOIC",ДокументСсылка)
	
	Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки 
		И ТипЗнч(ДокументСсылка.ДокументРеализации) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорректировкаРеализацииТовары.НомерСтроки,
		               |	КорректировкаРеализацииТовары.Номенклатура,
		               |	Неопределено КАК ХарактеристикаНоменклатуры,
		               |	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	КорректировкаРеализацииТовары.Номенклатура.Наименование КАК Наименование,
		               |	КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	КорректировкаРеализацииТовары.Цена,
		               |	КорректировкаРеализацииТовары.СтавкаНДС,
		               |	"""" КАК СерияНоменклатуры,
		               |	КорректировкаРеализацииТовары.СтранаПроисхождения КАК Страна,
		               |	ЕСТЬNULL(КорректировкаРеализацииТовары.НомерГТД.Код, ЕСТЬNULL(КорректировкаРеализацииТовары.Номенклатура.НомерГТД.Код, """")) КАК НомерГТД,
		               |	КорректировкаРеализацииТовары.Количество КАК Количество,
		               |	КорректировкаРеализацииТовары.Сумма КАК Сумма,
		               |	КорректировкаРеализацииТовары.СуммаНДС,
		               |	NULL КАК ТипЕдиницы
		               |ИЗ
		               |	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		               |ГДЕ
		               |	КорректировкаРеализацииТовары.Ссылка В(&Ссылка)" ;

		
	// корректировочная СФ	
	Иначе
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорректировкаРеализацииТовары.НомерСтроки,
		               |	КорректировкаРеализацииТовары.Номенклатура,
		               |	Неопределено КАК ХарактеристикаНоменклатуры,
		               |	КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	КорректировкаРеализацииТовары.Номенклатура.Наименование КАК Наименование,
		               |	КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	КорректировкаРеализацииТовары.Цена,
		               |	КорректировкаРеализацииТовары.ЦенаДоКорректировки,
		               |	КорректировкаРеализацииТовары.СтавкаНДС,
		               |	"""" КАК СерияНоменклатуры,
		               |	КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДСДоКорректировки,
		               |	КорректировкаРеализацииТовары.СтранаПроисхождения КАК Страна,
		               |	ЕСТЬNULL(КорректировкаРеализацииТовары.НомерГТД.Код, ЕСТЬNULL(КорректировкаРеализацииТовары.Номенклатура.НомерГТД.Код, """")) КАК НомерГТД,
		               |	КорректировкаРеализацииТовары.Количество,
		               |	КорректировкаРеализацииТовары.КоличествоДоКорректировки,
		               |	КорректировкаРеализацииТовары.Сумма,
		               |	КорректировкаРеализацииТовары.СуммаДоКорректировки,
		               |	КорректировкаРеализацииТовары.СуммаНДС,
		               |	КорректировкаРеализацииТовары.СуммаНДСДоКорректировки
		               |ИЗ
		               |	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		               |ГДЕ
		               |	КорректировкаРеализацииТовары.Ссылка В(&Ссылка)" ;
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // УФ_УТ_ПолучитьТекстЗапросаТоваровКорректировкиРеализации()

Функция УФ_УТ_ПолучитьТекстЗапросаТоваровКорректировкиРеализации(ТипСообщения="COINVOIC",ДокументСсылка)

	// исправительная СФ
	Если ТипСообщения="INVOIC" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорректировкаРеализацииТовары.НомерСтроки,
		               |	КорректировкаРеализацииТовары.Номенклатура,
		               |	КорректировкаРеализацииТовары.Характеристика КАК ХарактеристикаНоменклатуры,
		               |	ВЫБОР
					   |		КОГДА КорректировкаРеализацииТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					   |			ТОГДА КорректировкаРеализацииТовары.Номенклатура.ЕдиницаИзмерения
					   |		ИНАЧЕ КорректировкаРеализацииТовары.Упаковка
					   |	КОНЕЦ КАК ЕдиницаИзмерения,
		               |	КорректировкаРеализацииТовары.Номенклатура.Наименование КАК Наименование,
		               |	КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	КорректировкаРеализацииТовары.Цена,
		               |	КорректировкаРеализацииТовары.СтавкаНДС,
		               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНоменклатуры,
		               |	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК Страна,
		               |	"""" КАК НомерГТД,
		               |	КорректировкаРеализацииТовары.КоличествоУпаковок КАК Количество,
		               |	КорректировкаРеализацииТовары.Сумма КАК Сумма,
		               |	КорректировкаРеализацииТовары.СуммаНДС,
		               |	NULL КАК ТипЕдиницы
		               |ИЗ
		               |	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		               |ГДЕ
		               |	КорректировкаРеализацииТовары.Ссылка В(&Ссылка)" ;

		
	// корректировочная СФ	
	Иначе 
	//ТипСообщения="COINVOIC"
	//из-за особенностей варанта хранения данных о корректировке - часть пеолей невозможно вытащить простым запросом. Не будем городить сложный запрос, лучше сделаем детальный обход после извлечения данных
		ТекстЗапроса = "ВЫБРАТЬ
		               |	КорректировкаРеализацииТовары.НомерСтроки,
		               |	КорректировкаРеализацииТовары.Номенклатура,
		               |	КорректировкаРеализацииТовары.Характеристика КАК ХарактеристикаНоменклатуры,
		               |	ВЫБОР
					   |		КОГДА КорректировкаРеализацииТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
					   |			ТОГДА КорректировкаРеализацииТовары.Номенклатура.ЕдиницаИзмерения
					   |		ИНАЧЕ КорректировкаРеализацииТовары.Упаковка
					   |	КОНЕЦ КАК ЕдиницаИзмерения,
		               |	КорректировкаРеализацииТовары.Номенклатура.Наименование КАК Наименование,
		               |	КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		               |	КорректировкаРеализацииТовары.СтавкаНДС,
		               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНоменклатуры,
		               |	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК Страна,
		               |	"""" КАК НомерГТД,
		               |	КорректировкаРеализацииТовары.КоличествоУпаковок КАК Количество,
		               |	КорректировкаРеализацииТовары.СуммаСНДС КАК Сумма,
		               |	КорректировкаРеализацииТовары.СуммаНДС,
					   |	0 КАК Цена,
					   |	0 КАК ЦенаДоКорректировки,
					   |	0 КАК СтавкаНДСДоКорректировки,
					   |	0 КАК КоличествоДоКорректировки,
					   |	0 КАК СуммаДоКорректировки,
					   |	0 КАК СуммаНДСДоКорректировки
		               |ИЗ
		               |	Документ.КорректировкаРеализации.Расхождения КАК КорректировкаРеализацииТовары
		               |ГДЕ
		               |	КорректировкаРеализацииТовары.Ссылка В(&Ссылка)" ;
	
	КонецЕсли;
	
	Если ОпределитьРелизКонфигурации() = "11.2" Тогда //рефакторинг
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"УпаковкиНоменклатуры","УпаковкиЕдиницыИзмерения");	
	КонецЕсли;
			   
	Возврат ТекстЗапроса;

КонецФункции // УФ_УТ_ПолучитьТекстЗапросаТоваровКорректировкиРеализации()

//Блок Автообновление модуля
//Вынесен из Обычной формы ФормаСервис_Обновление

//получает из наших "констант" строку, которую пытается преобразовать в ссылку на справочник "Внешние обработки"
Функция ПолучитьСсылкуВнешнейОбработкиДляАвтоматическогоОбновления()Экспорт
	
	//TODO переделать на ИмяКонфигурации1С
	Если Не ЗначениеЗаполнено(ИмяКонфигурации1С) Тогда
		ОпределитьКонфигурацию();
	КонецЕсли;
	
	Если ИмяКонфигурации1С="ТКПТ"
		ИЛИ ИмяКонфигурации1С="УТ_10_2" Тогда
		//в них нет внешних обработок
		Возврат Неопределено;
		
	ИначеЕсли ИмяКонфигурации1С="УФ_УТ"
		ИЛИ ИмяКонфигурации1С="УФ_БП" 
		ИЛИ ИмяКонфигурации1С="УФ_УНФ" Тогда
		
		УИДСтрокой=ПолучитьКонстантуEDI("СсылкаНаМодуль");
		Если не ЗначениеЗаполнено(УИДСтрокой) Тогда Возврат Неопределено КонецЕсли;
		Попытка
			УИД=Новый УникальныйИдентификатор(УИДСтрокой);
			Ссылка=Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(УИД);
			Если Ссылка.Пустая() Тогда
				Возврат Неопределено;
			Иначе
				Возврат Ссылка;
			КонецЕсли;	
		Исключение
			//наш УИД пустой, или ссылается на удаленный элемент справочника
			Возврат Неопределено;
		КонецПопытки;	
		
	Иначе	//УТ, КА, УПП, .... надо проверить все конфиги!!!
		
		УИДСтрокой=ПолучитьКонстантуEDI("СсылкаНаМодуль");
		Если не ЗначениеЗаполнено(УИДСтрокой) Тогда Возврат Неопределено КонецЕсли;
		Попытка
			УИД=Новый УникальныйИдентификатор(УИДСтрокой);
			Ссылка=Справочники.ВнешниеОбработки.ПолучитьСсылку(УИД);
			Если Ссылка.Пустая() Тогда
				Возврат Неопределено;
			Иначе
				Возврат Ссылка;
			КонецЕсли;	
		Исключение
			//наш УИД пустой, или ссылается на удаленный элемент справочника
			Возврат Неопределено;
		КонецПопытки;	
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

//забирает с сервера файлик version.xml и кидает его в локальный каталог по адресу мИмяФайлаСписокРелизов
Функция ЗагрузитьФайлВерсийВЛокальныйКаталог(мИмяФайлаСписокРелизов=Неопределено)Экспорт
	
	//на время отладки грузим с локального каталога
	Если мИмяФайлаСписокРелизов=Неопределено Тогда
		мИмяФайлаСписокРелизов=ПолучитьИмяВременногоФайла("xml");
		Если Не	ПолучитьФайлHTTP(
			ПолучитьСоединениеHTTP(Адрес_edi_kontur_ru),
			КаталогОбновленийНаСервере+"verlist.xml", 
			мИмяФайлаСписокРелизов)
			Тогда
			#Если Клиент Тогда
				Предупреждение("Невозможно получить список версий с сервера. Проверьте Ваше подключение к Интернет.");
			#Иначе
				Сообщить("Невозможно получить список версий с сервера. Проверьте Ваше подключение к Интернет.");
			#КонецЕсли
			мИмяФайлаСписокРелизов=Неопределено;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//парсит файл version.xml и пишет его содержимое в СписокРелизов
Процедура РазобратьФайлВерсий(мИмяФайлаСписокРелизов,СписокВерсий)Экспорт
	Чтение=Новый ЧтениеXML;
	Чтение.ОткрытьФайл(мИмяФайлаСписокРелизов);
	
	СписокВерсий.Очистить();
	НомерАктуальногоРелиза="";
	ДатаАктуальногоРелиза="";
	
	ДОМ=Новый ПостроительDOM;
	Док=Дом.Прочитать(Чтение);
	
	Для Каждого СтрокаВерсии из Док.ДочерниеУзлы[0].ДочерниеУзлы Цикл
		Нов=СписокВерсий.Добавить();
		Для Каждого Атрибут Из СтрокаВерсии.Атрибуты Цикл
			ИмяУзла=НРег(Атрибут.ИмяУзла);
			Если ИмяУзла="version" Тогда
				Нов.НомерРелиза=Атрибут.ЗначениеУзла;
			ИначеЕсли ИмяУзла="md5" Тогда
				Нов.КонтрольнаяСумма=Атрибут.ЗначениеУзла;
			ИначеЕсли ИмяУзла="filename" Тогда
				Нов.ИмяФайла=Атрибут.ЗначениеУзла;
			ИначеЕсли ИмяУзла="date" Тогда
				Нов.ДатаВыхода=_ДатаВремя1С(Атрибут.ЗначениеУзла);
			ИначеЕсли ИмяУзла="descriprion" Тогда
				Нов.Описание=Атрибут.ЗначениеУзла;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Чтение.Закрыть();
	
КонецПроцедуры	

//убирает из полного пути каталог, оставляет только конечное имя файла
Функция ПолучитьИмяФайлаБезКаталога(знач ПолноеИмяФайла) Экспорт
	//получим имя файла обработки без каталога
	КраткоеИмяФайла=ПолноеИмяФайла;
	ПозСлэша=0;
	Пока истина Цикл
		ПозСлэша=Найти(КраткоеИмяФайла,"\");
		Если ПозСлэша=0 Тогда Прервать; КонецЕсли;
		КраткоеИмяФайла=Сред(КраткоеИмяФайла,ПозСлэша+1);
	КонецЦикла;
	Возврат КраткоеИмяФайла;
	//в конце концов получили имя файла без каталога
КонецФункции	

//получает контрольную сумму файла MD5
//будет ли работать под Linux в вайне - не известно, надо проверить
Функция ПолучитьКонтрольнуюСуммуФайла(Знач ПолноеИмяФайлаДляПроверки) Экспорт
	Каталог=КаталогВременныхФайлов();
	ИмяФайлаУтилиты=Каталог+"KonturEDI_md5sum.exe";
	ИмяФайлаКС=Каталог+"KonturEDI_MD5.txt";
	ИмяБатФайла="KonturEDI_getmd5.bat";

	КраткоеИмяФайла=ПолучитьИмяФайлаБезКаталога(ПолноеИмяФайлаДляПроверки);
	//теперь получим сам каталог без имени файла
	КаталогОбработки=Лев(ПолноеИмяФайлаДляПроверки,СтрДлина(ПолноеИмяФайлаДляПроверки)-СтрДлина(КраткоеИмяФайла));
	
	КоманднаяСтрока = """"+ИмяФайлаУтилиты+""" "
			+""""+ КраткоеИмяФайла+""""
			+">"""+ ИмяФайлаКС+""""
			;
			
	ПолучитьМакет("md5sum").Записать(ИмяФайлаУтилиты);
	
	МД5="";
	
	#Если Клиент Тогда
		Попытка
			Бат=Новый ТекстовыйДокумент;
			Бат.УстановитьТекст(КоманднаяСтрока);
			Бат.Записать(Каталог+ИмяБатФайла,КодировкаТекста.OEM);
			
			КомандаСистемы(Каталог+ИмяБатФайла,КаталогОбработки);
			//в этот момент окно системы сворачивается, альтернативные варианты:
			//1 - Использование DLL - но их надо подключать через regsvr32
			//2 - собственный алгоритм расчета MD5, что очень долго
			
			ТД=Новый ТекстовыйДокумент;
			ТД.Прочитать(ИмяФайлаКС);
			МД5=Лев(ТД.ПолучитьТекст(),32);
		Исключение	
		КонецПопытки;
	#Иначе
		Попытка
			Бат=Новый ТекстовыйДокумент;
			Бат.УстановитьТекст(КоманднаяСтрока);
			Бат.Записать(Каталог+ИмяБатФайла,КодировкаТекста.OEM);
			
			ЗапуститьПриложение(Каталог+ИмяБатФайла,КаталогОбработки,Истина,);
			//в этот момент окно системы сворачивается, альтернативные варианты:
			//1 - Использование DLL - но их надо подключать через regsvr32
			//2 - собственный алгоритм расчета MD5, что очень долго
			
			ТД=Новый ТекстовыйДокумент;
			ТД.Прочитать(ИмяФайлаКС);
			МД5=Лев(ТД.ПолучитьТекст(),32);
		Исключение	
		КонецПопытки;
	#КонецЕсли
	
	Если МД5="" Тогда
		Сообщить_КонтурEDI("Расчет контрольной суммы невозможен")
	КонецЕсли;	

	УдалитьФайлы(ИмяФайлаУтилиты);
	УдалитьФайлы(ИмяБатФайла);
	УдалитьФайлы(ИмяФайлаКС);
	
	Возврат МД5;
КонецФункции	

//ищет в ТаблицаРелизов релиз с заданным номером и возвращает его контрольную сумму
//на момент вызова функции с сервера должен уже быть загружен файл version.xml и разобран в таблицу СписокРелизов
Функция ПолучитьКонтрольнуюСуммуРелизаССервера(НомерУстановленногоРелиза,СписокВерсий) Экспорт
	СтрокаТекущейВерсии=СписокВерсий.Найти(НомерУстановленногоРелиза,"НомерРелиза");
	Если СтрокаТекущейВерсии=Неопределено Тогда
		Возврат "";
	Иначе	
		Возврат СтрокаТекущейВерсии.КонтрольнаяСумма;
	КонецЕсли;	
КонецФункции	
//КонецБолк Автообновление модуля

// Сравнение строк на "похожесть"

// Примечание: Спасибо автору этого алгоритма:
//		http://infostart.ru/public/146559/

//Корреляция строк квадратичная массивы
Функция ПолучитьКоэффициентПохожестиСтрок(Строка1_,Строка2_)
	
	ДлинаСтроки1 = СтрДлина(Строка1_);
	ДлинаСтроки2 = СтрДлина(Строка2_);

	Если ДлинаСтроки1 = 0
		ИЛИ ДлинаСтроки2 = 0 Тогда
		Возврат 0;//пустую строку не будем считать похожей на любую другую
	КонецЕсли;
	
	//Запишем строки в массивы
	Если ДлинаСтроки1 >= ДлинаСтроки2 Тогда
		Массив1 = Новый Массив(ДлинаСтроки1);
		Массив2 = Новый Массив(ДлинаСтроки2);
		Для ш = 0 По ДлинаСтроки1 - 1 Цикл
			Массив1[ш] = Сред(Строка1_,ш+1,1);	
		КонецЦикла;
		Для ш = 0 По ДлинаСтроки2 - 1 Цикл
			Массив2[ш] = Сред(Строка2_,ш+1,1);
		КонецЦикла;
	Иначе	
		Массив1 = Новый Массив(ДлинаСтроки2);
		Массив2 = Новый Массив(ДлинаСтроки1);
		Для ш = 0 По ДлинаСтроки2 - 1 Цикл
			Массив1[ш] = Сред(Строка2_,ш+1,1);	
		КонецЦикла;
		Для ш = 0 По ДлинаСтроки1 - 1 Цикл
			Массив2[ш] = Сред(Строка1_,ш+1,1);
		КонецЦикла;
	КонецЕсли; 
	
	//Сначала вычислим автокорреляцию
	КоэфАвтокор1 = СравнениеСтрок_ВернутьКорреляциюМассивовКвадр(Массив1,Массив1);
	КоэфАвтокор2 = СравнениеСтрок_ВернутьКорреляциюМассивовКвадр(Массив2,Массив2);
	
	//Нормировать будем бОльшим коэффициентом автокорреляции
	КоэфАвтокор = ?(КоэфАвтокор1 >= КоэфАвтокор2,КоэфАвтокор1,КоэфАвтокор2); 
	
	//Теперь вычислим взаимную корреляцию массивов
	КоэфКор = СравнениеСтрок_ВернутьКорреляциюМассивовКвадр(Массив1,Массив2);
	
	Возврат КоэфКор / КоэфАвтокор;	
	
КонецФункции

Функция СравнениеСтрок_ВернутьКорреляциюМассивовКвадр(Б,А)
	
	//Размер массива А больше или равен размеру Б
	
	РзмА = А.Количество()-1; //Короткий
	РзмБ = Б.Количество()-1; //Длинный
	
	СуммаКор = 0;
	Для ш = 0 По РзмА Цикл
		СуммаКорСдвига = 0;
		Для у = 0 По ш Цикл
			Если А[РзмА - ш + у] = Б[у] Тогда
				СуммаКорСдвига = СуммаКорСдвига + 1;	
			КонецЕсли; 	
		КонецЦикла;
		СуммаКор = СуммаКор + СуммаКорСдвига*СуммаКорСдвига;
	КонецЦикла;
	
	Для ш = 1 По РзмБ - РзмА Цикл
		СуммаКорСдвига = 0;
		Для у = 0 По РзмА Цикл
			Если А[у] = Б[у + ш] Тогда
				СуммаКорСдвига = СуммаКорСдвига + 1;	
			КонецЕсли;			
		КонецЦикла;
		СуммаКор = СуммаКор + СуммаКорСдвига*СуммаКорСдвига;
	КонецЦикла;	
	
	Для ш = 0 По РзмА-1 Цикл
		СуммаКорСдвига = 0;
		Для у = 0 По ш Цикл
			Если А[у] = Б[РзмБ-ш+у] Тогда
				СуммаКорСдвига = СуммаКорСдвига + 1;	
			КонецЕсли; 			
		КонецЦикла;
		СуммаКор = СуммаКор + СуммаКорСдвига*СуммаКорСдвига;
	КонецЦикла;		
	
	Возврат СуммаКор;
	
КонецФункции

//}#КонецОбласти //Модуль_Интеграция_УТ_УПП_КА


//{#Область 10_Модуль_ПроверкаДанных

Функция ЗагрузитьКлассификаторИзМакета(Тип) Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("Классификатор_"+Тип);
	
	Если Результат=Неопределено Тогда
		
		Результат = Новый СписокЗначений;
		
		Макет = ПолучитьМакет("Классификатор_"+Тип);
		Таб = Макет.ПолучитьОбласть("Данные");
		
		Для Сч=1 По Таб.ВысотаТаблицы Цикл
			
			НомерСтроки = Формат(сч,"ЧГ=");
			
			ТекстЗначения = Таб.Область("R"+НомерСтроки+"C1").Текст;
			ТекстПредставления = Таб.Область("R"+НомерСтроки+"C2").Текст;
			
			Результат.Добавить(ТекстЗначения,ТекстПредставления);
			
		КонецЦикла;
		
		ЭДО_Кэш_Поместить("Классификатор_"+Тип,Результат);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокДопустимыхЗначений(Тип)
	
	Список = ЭДО_Кэш_Прочитать("СписокДопустимыхЗначений_"+Тип);
	
	Если Список=Неопределено Тогда
	
		Список = Новый СписокЗначений;
		
		Если Тип = "ТипСообщения" Тогда
			
			Список.Добавить("PORDERS");
			Список.Добавить("ORDERS");
			Список.Добавить("ORDRSP");
			Список.Добавить("DESADV");
			Список.Добавить("RECADV");
			Список.Добавить("INVOIC");
			Список.Добавить("ALCRPT");
			Список.Добавить("RETANN");
			Список.Добавить("COINVOIC");
			Список.Добавить("RETDES");
			Список.Добавить("RETREC");
			
		ИначеЕсли Тип = "Направление" Тогда
			
			Список.Добавить("ВХОДЯЩЕЕ");
			Список.Добавить("ИСХОДЯЩЕЕ");
			
		ИначеЕсли Тип = "СтавкаНДС" Тогда
			
			Список.Добавить("NOT_APPLICABLE");
			Список.Добавить("0");
			Список.Добавить("10");
			Список.Добавить("18");
			
		ИначеЕсли Тип = "Статус" Тогда
			
			Список.Добавить("УТОЧНЕН");
			Список.Добавить("ОТКЛОНЕН");
			Список.Добавить("ПОДТВЕРЖДЕН");
			
			Список.Добавить("ОТМЕНЕН");
			
		ИначеЕсли Тип = "ТипСФ" Тогда
			
			Список.Добавить("ORIGINAL");
			
		ИначеЕсли Тип = "ВидЮрФизЛица" Тогда
			
			Список.Добавить("ЮРЛИЦО");
			Список.Добавить("ФИЗЛИЦО");
			Список.Добавить("ТОЛЬКОGLN");
			Список.Добавить("НЕРЕЗИДЕНТ");
			
		ИначеЕсли Тип = "ВидАдреса" Тогда
			
			Список.Добавить("РОССИЙСКИЙ");
			Список.Добавить("ИНОСТРАННЫЙ");
			
		ИначеЕсли Тип = "Валюта" ИЛИ Тип = "КодРегиона" ИЛИ Тип = "КодСтраны" ИЛИ Тип = "КодЕдиницы" Тогда
			
			Список = ЗагрузитьКлассификаторИзМакета(Тип);
			
		КонецЕсли;
		
		ЭДО_Кэш_Поместить("СписокДопустимыхЗначений_"+Тип,Список);
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция СписокДопустимыхСодержитЗначение(Значение,Тип)
	
	Список = ПолучитьСписокДопустимыхЗначений(Тип);
	
	Если Список.НайтиПоЗначению(ВРег(Значение)) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьМакетТекстаОшибки(ТаблицаМакетов,Код,Текст)
	
	НоваяСтрока = ТаблицаМакетов.Добавить();
	НоваяСтрока.Код		= Код;
	НоваяСтрока.Текст	= Текст;
	
КонецФункции

Функция ПолучитьМакетыТекстовОшибок()
	
	ТаблицаМакетов = Новый ТаблицаЗначений;	
    ТаблицаМакетов.Колонки.Добавить("Код");
	ТаблицаМакетов.Колонки.Добавить("Текст");
	
	ДобавитьМакетТекстаОшибки(ТаблицаМакетов,"Стандарт",		"Значение ""*ЗНАЧЕНИЕ*"" не соответствует стандарту *ФОРМАТ*.");
	ДобавитьМакетТекстаОшибки(ТаблицаМакетов,"ЕдИзм",			"Значение ""*ЗНАЧЕНИЕ*"" не входит в перечень используемых в EDI единиц измерений.");
	ДобавитьМакетТекстаОшибки(ТаблицаМакетов,"НеВСписке",		"Значение ""*ЗНАЧЕНИЕ*"" является недопустимым. Допустимые значения: *ФОРМАТ*.");
	ДобавитьМакетТекстаОшибки(ТаблицаМакетов,"РовноЦифр",		"Значение ""*ЗНАЧЕНИЕ*"" должно содержать *ФОРМАТ* цифр.");
	ДобавитьМакетТекстаОшибки(ТаблицаМакетов,"НеБольшеЦифр",	"Значение ""*ЗНАЧЕНИЕ*"" должно состоять не более чем из *ФОРМАТ* цифр.");
	ДобавитьМакетТекстаОшибки(ТаблицаМакетов,"НеБольшеСимволов","Значение ""*ЗНАЧЕНИЕ*"" должно состоять не более чем из *ФОРМАТ* символов.");
	ДобавитьМакетТекстаОшибки(ТаблицаМакетов,"ИНН",				"Значение ""*ЗНАЧЕНИЕ*"" не может начинаться с ""00"".");
	ДобавитьМакетТекстаОшибки(ТаблицаМакетов,"GTIN",			"Значение ""*ЗНАЧЕНИЕ*"" должно содержать 8 или 13 цифр (за исключением лидирующих нулей).");
	
	Возврат ТаблицаМакетов;
	
КонецФункции

Функция ПолучитьТекстОшибки(Значение,КодОшибки,ФорматЗначения)
	
	ТаблицаМакетов = ПолучитьМакетыТекстовОшибок();
	
	НайденнаяСтрока = ТаблицаМакетов.Найти(КодОшибки,"Код");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		
		ТекстОшибки = НайденнаяСтрока.Текст;
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"*ЗНАЧЕНИЕ*",СокрЛП(Значение));
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"*ФОРМАТ*",ФорматЗначения);
		
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьДопустимыеЗначенияСтрокой(Тип)
	
	Список = ПолучитьСписокДопустимыхЗначений(Тип);
	
	Текст = "*-*";
	
	Для каждого Элемент Из Список Цикл
		
		Текст = Текст + ", " + Элемент.Значение;
		
	КонецЦикла;
	
	Если Текст = "*-*" Тогда
		Текст = "";
	Иначе 
		Текст = СтрЗаменить(Текст,"*-*, ","");
	КонецЕсли;
	
	Возврат Текст;
		
КонецФункции

// сама проверка

Процедура ПроверитьЗначениеПоШаблону(Значение,КодШаблона,ФорматЗначения,Результат)
	
	ЕстьОшибки = Ложь;
	
	Если КодШаблона = "РовноЦифр" Тогда
		
		Если НЕ ТолькоЦифрыВСтроке_КонтурEDI(Значение) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если НЕ СтрДлина(Значение) = ФорматЗначения Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	ИначеЕсли КодШаблона = "GTIN" Тогда
		
		ЗначениеПроверки = СокрЛП(Значение);
		
		// убираем лидирующие нули
		Пока Лев(ЗначениеПроверки,1) = "0" Цикл
			
			Если СтрДлина(ЗначениеПроверки)>1 Тогда
			
				ЗначениеПроверки = Сред(ЗначениеПроверки,2);
				
			Иначе
				
				ЗначениеПроверки = "";
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДлинаКода = СтрДлина(ЗначениеПроверки);
		
		Если НЕ ТолькоЦифрыВСтроке_КонтурEDI(Значение) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ДлинаКода = 8 И НЕ ДлинаКода = 13 Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	ИначеЕсли КодШаблона = "ИНН" Тогда
		
		Если Лев(Значение,2) = "00" Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	ИначеЕсли КодШаблона = "НеБольшеЦифр" Тогда
		
		Если НЕ ТолькоЦифрыВСтроке_КонтурEDI(Значение) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если НЕ СтрДлина(Значение) <= ФорматЗначения Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	ИначеЕсли КодШаблона = "НеБольшеСимволов" Тогда
		
		Если НЕ СтрДлина(Значение) <= ФорматЗначения Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЕстьОшибки Тогда
		
		Результат.Успешно = Ложь;
		Если НЕ Результат.Свойство("ТаблицаОшибок") Тогда
			Результат.Вставить("ТаблицаОшибок",Новый Массив);
		КонецЕсли;
		Результат.ТаблицаОшибок.Добавить(ПолучитьТекстОшибки(Значение,КодШаблона,ФорматЗначения));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗначениеEDI(Значение, Тип)
	
	Результат = Новый Структура("Успешно",Истина);//тоже можно кэшировать, наверное
	//таблицу ошибок будем добавлять только тогда, когда будут сами ошибки
	
	// т.к. в этой функции мы проверяем само значение, а не его наличие, то возвращаем "Успешно" в случае переданного пустого значения
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	//врата ORDRSP
	если ТипЗначения = Тип("СписокЗначений") тогда 
		Возврат Результат;
	конецесли;
//	
	Если НЕ ТипЗначения = Тип("Строка") И НЕ ТипЗначения = Тип("Число") И НЕ ТипЗначения = Тип("Булево") И НЕ ТипЗначения = Тип("Дата") Тогда
		
		Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
		Результат.ТаблицаОшибок.Добавить("Значение должно иметь один из примитивных типов: ""Строка"", ""Число"", ""Булево"", ""Дата"" вместо """+ТипЗначения+""".");
		Результат.Успешно = Ложь;
		Возврат Результат;
		
	КонецЕсли;
	
	// Классификаторы и свои справочники
	
	Если	Тип = "Валюта" 
		ИЛИ Тип = "КодРегиона" 
		ИЛИ Тип = "КодСтраны" 
		ИЛИ Тип = "КодЕдиницы"
		ИЛИ Тип = "Статус"
		ИЛИ Тип = "СтавкаНДС"
		ИЛИ Тип = "ТипСообщения"
		ИЛИ Тип = "Направление"
		ИЛИ Тип = "ТипСФ"
		ИЛИ Тип = "ВидЮрФизЛица"
		ИЛИ Тип = "ВидАдреса" Тогда
		
		Если СписокДопустимыхСодержитЗначение(Значение,Тип) Тогда
			
			Возврат Результат;
			
		Иначе
			
			Если Тип = "Валюта" Тогда
				КодОшибки = "Стандарт";
				ФорматЗначения = "ISO-4217 (3-alpha)";
			ИначеЕсли Тип = "КодРегиона" Тогда	
				КодОшибки = "Стандарт";
				ФорматЗначения = "ISO 3166-2";
			ИначеЕсли Тип = "КодСтраны" Тогда
				КодОшибки = "Стандарт";
				ФорматЗначения = "ISO 3166";
			ИначеЕсли Тип = "КодЕдиницы" Тогда
				КодОшибки = "ЕдИзм";
			Иначе
				КодОшибки = "НеВСписке";
				ФорматЗначения = ПолучитьДопустимыеЗначенияСтрокой(Тип);
			КонецЕсли;
				
			Результат.Успешно = Ложь;
			Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
			Результат.ТаблицаОшибок.Добавить(ПолучитьТекстОшибки(Значение,КодОшибки,ФорматЗначения));
			
		КонецЕсли;
		
	ИначеЕсли Тип = "GLN" Тогда
		
		ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 13, Результат);
		
	ИначеЕсли Тип = "GTIN" Тогда	
		
		
		
	ИначеЕсли Тип = "ИНН_ЮЛ" Тогда	
		
		ПроверитьЗначениеПоШаблону(Значение, "ИНН", 		"",	 Результат);
		ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 10, Результат);
		
	ИначеЕсли Тип = "ИНН_ФЛ" Тогда	
		
		ПроверитьЗначениеПоШаблону(Значение, "ИНН", 		"",	 Результат);
		ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 12, Результат);
		
	ИначеЕсли Тип = "КПП" Тогда
		
		ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 9, Результат);
		
	ИначеЕсли Тип = "БИК" Тогда
		
		ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 9, Результат);
		
	ИначеЕсли Тип = "НомерСчета" Тогда
		
		ПроверитьЗначениеПоШаблону(Значение, "НеБольшеЦифр", 20, Результат);
		
	ИначеЕсли Тип = "НомерДокумента" Тогда
		
		ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", 70, Результат);
		
	ИначеЕсли Тип = "Артикул" Тогда
		
		ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", 35, Результат);
		
	ИначеЕсли Тип = "НомерГТД" Тогда
		
		Стр = СтрЗаменить(Значение," ","");
		Стр = СтрЗаменить(Стр,"\","");
		Стр = СтрЗаменить(Стр,"/","");
		
		Если СтрДлина(Стр)>70 Тогда
			Результат.Успешно = Ложь;
			Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
			Результат.ТаблицаОшибок.Добавить("Номер ГТД не может быть длиннее 70 символов");
		КонецЕсли;
		
	ИначеЕсли Тип = "Индекс" Тогда
		
		ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 6, Результат);
		
	ИначеЕсли Лев(Тип,6) = "Строка" Тогда
		
		Если НЕ Тип = "Строка" Тогда
			
			ЧислоСимволов = Число(СтрЗаменить(Тип,"Строка",""));
			ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", ЧислоСимволов, Результат);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, ИмяПоля, ИмяПоляУсловия = Неопределено, ВидСравнения =  Неопределено, ЗначениеПоляУсловия = Неопределено, ПравилоПроверки = Неопределено)
	
	НоваяСтрока = ТаблицаОбязательныхПолей.Добавить();
	
	НоваяСтрока.ИмяПоля				= ИмяПоля;
	НоваяСтрока.ИмяПоляУсловия		= ИмяПоляУсловия;
	НоваяСтрока.ВидСравнения		= ВидСравнения;
	НоваяСтрока.ЗначениеПоляУсловия	= ЗначениеПоляУсловия;
	НоваяСтрока.ПравилоПроверки		= ПравилоПроверки;
	
КонецПроцедуры

Процедура ДобавитьОбязательныеПоляЮрФизЛица(ТаблицаОбязательныхПолей,ИмяЮрФизЛица)
	
	// юр. лицо
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, ИмяЮрФизЛица+".ИНН", "Вид", "равно", "ЮрЛицо", "ИНН_ЮЛ");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, ИмяЮрФизЛица+".КПП", "Вид", "равно", "ЮрЛицо");
	
	// физ. лицо
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, ИмяЮрФизЛица+".ИНН", "Вид", "равно", "ФизЛицо", "ИНН_ФЛ");
	
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, ИмяЮрФизЛица+".Адрес.ВидАдреса");
	
	// российский адрес
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, ИмяЮрФизЛица+".Адрес.Регион", "ВидАдреса", "равно", "Российский");
	
	// иностранный адрес
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, ИмяЮрФизЛица+".Адрес.КодСтраны", "ВидАдреса", "равно", "Иностранный");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, ИмяЮрФизЛица+".Адрес.Адрес",		"ВидАдреса", "равно", "Иностранный");
	
КонецПроцедуры

Функция ПолучитьОбязательныеПоля(Сообщение) Экспорт
	
	ТаблицаОбязательныхПолей = Новый ТаблицаЗначений;
	ТаблицаОбязательныхПолей.Колонки.Добавить("ИмяПоля");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ИмяПоляУсловия");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ВидСравнения");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ЗначениеПоляУсловия");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ПравилоПроверки");
	
	ТаблицаОбязательныхПолей.Индексы.Добавить("ИмяПоля");
	
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ОтправительEDI.GLN");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ПолучательEDI.GLN");
	
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ДокументEDI.Номер");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ДокументEDI.Дата");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ВалютаEDI");
	
	// юр. лица
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ПродавецEDI.GLN");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ПокупательEDI.GLN");
	
	Если НЕ Сообщение.ТипСообщения = "DESADV" Тогда
	
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ГрузополучательEDI.GLN");
	
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "INVOIC" Тогда
		
		//ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ГрузоотправительEDI.GLN");
		
		ДобавитьОбязательныеПоляЮрФизЛица(ТаблицаОбязательныхПолей, "ПродавецEDI");
		ДобавитьОбязательныеПоляЮрФизЛица(ТаблицаОбязательныхПолей, "ПокупательEDI");
		ДобавитьОбязательныеПоляЮрФизЛица(ТаблицаОбязательныхПолей, "ГрузоотправительEDI");
		ДобавитьОбязательныеПоляЮрФизЛица(ТаблицаОбязательныхПолей, "ГрузополучательEDI");
		
	КонецЕсли;
	
	// документы
	Если НЕ Сообщение.ТипСообщения = "ORDERS" И НЕ Сообщение.ТипСообщения = "PORDERS" Тогда
		
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ЗаказEDI.Номер");
		Если НЕ Сообщение.ТипСообщения = "RETREC" Тогда
			ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ЗаказEDI.Дата");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "RECADV" Тогда
		
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "НакладнаяEDI.Номер");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "НакладнаяEDI.Дата");
		
	КонецЕсли;
	
	// Товары
	
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары"); // табличная часть должна быть заполнена всегда
	
	Если ЗначениеЗаполнено(Сообщение) 
		И Сообщение.Свойство("Партнер") 
		И ЗначениеЗаполнено(Сообщение.Партнер)
		И (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"РазрешитьПустыеКодыGTINВИсходящихСообщениях")=Истина) Тогда 
		// только в этом случае разрешена отправка пустого GTIN в этом сообщении
	Иначе
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.GTIN");
	КонецЕсли;	
		
	Если НЕ Сообщение.ТипСообщения = "ORDRSP" Тогда
		
		Если НЕ Сообщение.ТипСообщения = "RETREC" Тогда
			ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.Количество");
		КонецЕсли;	
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.КодЕдиницыИзмерения");
	
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "ORDRSP" Тогда
		
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.Статус");
		
	КонецЕсли;
	
	// Суммы
	
	Если Сообщение.ТипСообщения = "INVOIC" Тогда
		
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.Наименование");
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "INVOIC" ИЛИ Сообщение.ТипСообщения = "DESADV" Тогда
	
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ЦенаБезНДС");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СуммаБезНДС");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СуммаСНДС");
		
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "СуммаВсего");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "СуммаВсегоБезНДС");
		
	КонецЕсли;
	
	ИзмененнаяТаблица = ОбработкаСобытияПодключаемогоМодуля("ИзменитьТаблицуОбязательныхПолей",,
			Новый Структура("Сообщение, ТаблицаОбязательныхПолей",
			Сообщение, ТаблицаОбязательныхПолей));
			
	Если ИзмененнаяТаблица<>Неопределено Тогда
		ТаблицаОбязательныхПолей = ИзмененнаяТаблица;
	КонецЕсли;
	
	ТаблицаОбязательныхПолей.Индексы.Добавить("ИмяПоля");

	Возврат ТаблицаОбязательныхПолей;
	
КонецФункции

функция ИнициализироватьТаблицуОшибок() Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	
	ТаблицаОшибок.Колонки.Добавить("ИмяПоля");
	ТаблицаОшибок.Колонки.Добавить("ИмяТабличнойЧасти");
	ТаблицаОшибок.Колонки.Добавить("НомерСтроки");
	ТаблицаОшибок.Колонки.Добавить("СведенияОбОшибках"); // или текст строкой, или таблица с ошибками подчиненных полей
	ТаблицаОшибок.Колонки.Добавить("СодержитОписаниеПоля");
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ЗафиксироватьОшибку(ТаблицаОшибок,ИмяПоля,ИмяТабличнойЧасти,НомерСтроки,СведенияОбОшибках,СодержитОписаниеПоля = Ложь) Экспорт
	
	НоваяСтрока = ТаблицаОшибок.Добавить();
	
	НоваяСтрока.ИмяПоля					= ИмяПоля;
	НоваяСтрока.ИмяТабличнойЧасти		= ИмяТабличнойЧасти;
	НоваяСтрока.НомерСтроки				= НомерСтроки;
	НоваяСтрока.СведенияОбОшибках		= СведенияОбОшибках;
	НоваяСтрока.СодержитОписаниеПоля	= СодержитОписаниеПоля;
	
КонецФункции

Функция ДополнитьСообщениеОбОшибке(ТекПутьКПолю,ПутьКПолю)
	
	Если Найти(ТекПутьКПолю, "ГрузоотправительEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Фактическом адресе";
	ИначеЕсли Найти(ТекПутьКПолю, "ПродавецEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Юридическом адресе";
	ИначеЕсли Найти(ТекПутьКПолю, "ПокупательEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Юридическом адресе";	
	Иначе
		СообщениеОбОшибке = "Не заполнено обязательное поле "+ПутьКПолю+"!";
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;	

КонецФункции

Процедура ПроверитьПоляСообщенияEDI(Сообщение, МетаданныеСообщения, ТаблицаОшибок, ТекПутьКПолю, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, ОбязательныеПоля) Экспорт
	
	Если МетаданныеСообщения.Колонки.Найти("Принадлежность") = Неопределено Тогда
		ЕстьПринадлежность = Ложь;
	Иначе
		ЕстьПринадлежность = Истина;
	КонецЕсли;
	
	Для Каждого Стр Из МетаданныеСообщения Цикл
		
		// алкогольные реквизиты не валидируем!
		Если Лев(Стр.ИмяПоля,4) = "Алко" Тогда
			Продолжить;
		КонецЕсли;
		Если Лев(Стр.ИмяПоля,5) = "Фарма" Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.ИмяПоля = "КоличествоВОдномМесте" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьПринадлежность Тогда
			
			Если Стр.Принадлежность = "=" Тогда
				ПутьКПолю = Стр.ИмяПоля;
			ИначеЕсли Стр.Принадлежность = "EDI" Тогда
				ПутьКПолю = Стр.ИмяПоля;
			ИначеЕсли Стр.Принадлежность = Неопределено Тогда
				ПутьКПолю = Стр.ИмяПоля + "EDI";
			Иначе 
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ПутьКПолю = Стр.ИмяПоля;
			
		КонецЕсли;
		
		ПолныйПутьКПолю = ПутьКПолю;
		Если НЕ ТекПутьКПолю = "" Тогда
			
			ПолныйПутьКПолю = ТекПутьКПолю+"."+ПутьКПолю;
			
		КонецЕсли;
		
		ЗначениеПоля = Неопределено;
		
		Если ТипЗнч(Сообщение) = Тип("Структура") Тогда
			
			Если (НЕ ЗначениеЗаполнено(Стр.ИмяТаблицы) И НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти)) ИЛИ Стр.ТипEDI = "ТабличнаяЧасть" Тогда
				Если НЕ Сообщение.Свойство(ПутьКПолю,ЗначениеПоля) Тогда
					
					ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Отстутствует поле "+ПолныйПутьКПолю+"!",Истина);
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Попытка
				ЗначениеПоля = Сообщение[ПутьКПолю];
			Исключение
				ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Отстутствует поле "+ПолныйПутьКПолю+"!",Истина);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
		Если Стр.ТипEDI = "ТабличнаяЧасть" Тогда
			
			// копируем метаданные сообщения по этой таблице
			ОтборПолейТаблицы = Новый Структура("ИмяТаблицы",Стр.ИмяТаблицы);
			
			МетаданныеТабличнойЧасти = МетаданныеСообщения.Скопировать(ОтборПолейТаблицы);
			
			НайденнаяСтрока = МетаданныеТабличнойЧасти.Найти(Стр.ИмяТаблицы,"ИмяПоля");
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				МетаданныеТабличнойЧасти.Удалить(НайденнаяСтрока);
			КонецЕсли;
			
			НайденнаяСтрока = ОбязательныеПоля.Найти(ПолныйПутьКПолю,"ИмяПоля");
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Если Сообщение[Стр.ИмяТаблицы].Количество() = 0 Тогда
					ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,Стр.ИмяТаблицы,0,"Табличная часть """+Стр.ИмяТаблицы+""" должна быть заполнена!");
				КонецЕсли;
			КонецЕсли;
			
			НомерСтрокиТаблицы = 0;
			
			Для каждого СтрокаТаблицы ИЗ Сообщение[Стр.ИмяТаблицы] Цикл
				
				НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
				
				ПроверитьПоляСообщенияEDI(СтрокаТаблицы, МетаданныеТабличнойЧасти, ТаблицаОшибок, ПолныйПутьКПолю, Стр.ИмяТаблицы, НомерСтрокиТаблицы, ОбязательныеПоля);
				
				Если Стр.ИмяТаблицы = "Товары" Тогда
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТДEDI) Тогда
						
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтранаEDI) Тогда
							
							ЗафиксироватьОшибку(ТаблицаОшибок,"СтранаEDI","Товары",НомерСтрокиТаблицы,"Необходимо указать страну, если заполнен номер ГТД!",Истина);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) И ЗначениеЗаполнено(Стр.ИмяТаблицы) Тогда
			
			Продолжить;
			
		ИначеЕсли Стр.ТипEDI = "Структура" Тогда
			
			Если ТипЗнч(ЗначениеПоля) = Тип("Структура") Тогда
				
				//
				Если ПараметрыПользователяEDI.НеБратьСвоиАдресаИз1С = Истина Тогда
					
					Если ПолныйПутьКПолю = "ПродавецEDI.Адрес" ИЛИ ПолныйПутьКПолю = "ГрузоотправительEDI.Адрес" Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				Если ПараметрыПользователяEDI.НеБратьАдресаПартнераИз1С = Истина Тогда
					
					Если ПолныйПутьКПолю = "ПокупательEDI.Адрес" ИЛИ ПолныйПутьКПолю = "ПлательщикEDI.Адрес" ИЛИ ПолныйПутьКПолю = "ГрузополучательEDI.Адрес" Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ТаблицаОшибокПоля	= ИнициализироватьТаблицуОшибок();
				СтруктураСообщения	= ПолучитьМетаданныеПоляСообщения(Стр.ВидСтруктурыEDI);
				
				// рекурсивно проверим вложенные структуры
				ПроверитьПоляСообщенияEDI(ЗначениеПоля, СтруктураСообщения, ТаблицаОшибокПоля, ПолныйПутьКПолю,ИмяТабличнойЧасти,НомерСтроки, ОбязательныеПоля);
				
				Если ТаблицаОшибокПоля.Количество()>0 Тогда
					
					ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,ТаблицаОшибокПоля);
					
				КонецЕсли;
				
			Иначе
				
				ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Поле "+ПолныйПутьКПолю+" должно иметь тип ""Структура""!",Истина);
				
			КонецЕсли;
			
		Иначе
			
			// проверяем заполнение обязательного поля
			
			ТипEDI = Стр.ТипEDI;
			ПроверятьЗаполнениеПоля = Ложь;
			
			НайденныеСтроки = ОбязательныеПоля.НайтиСтроки(Новый Структура("ИмяПоля",ПолныйПутьКПолю));
			
			Для Каждого ПроверкаОбязательности Из НайденныеСтроки Цикл
				
				ПроверятьЗаполнениеПоля = Истина;
				
				УсловиеОбязательности = ПроверкаОбязательности.ИмяПоляУсловия;
				
				Если НЕ УсловиеОбязательности = Неопределено Тогда
					
					ПроверятьЗаполнениеПоля = Ложь;
					
					Если ПроверкаОбязательности.ВидСравнения = "равно" Тогда
						Если Сообщение[ПроверкаОбязательности.ИмяПоляУсловия] = ПроверкаОбязательности.ЗначениеПоляУсловия Тогда
							
							Если НЕ ПроверкаОбязательности.ПравилоПроверки = Неопределено Тогда
								
								ТипEDI = ПроверкаОбязательности.ПравилоПроверки;
								
							КонецЕсли;
							
							ПроверятьЗаполнениеПоля = Истина;
							
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПроверятьЗаполнениеПоля Тогда
				Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
					
					СообщениеОбОшибке = ДополнитьСообщениеОбОшибке(ТекПутьКПолю,ПутьКПолю);
					ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,СообщениеОбОшибке,Истина);
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			// проверяем значение
			
			РезультатПроверки = ПроверитьЗначениеEDI(ЗначениеПоля, ТипEDI);
			
			Если НЕ РезультатПроверки.Успешно Тогда
				Для Каждого СтрокаОшибки Из РезультатПроверки.ТаблицаОшибок Цикл
					
					ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,СтрокаОшибки);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьСообщениеEDI(Сообщение,Параметры = Неопределено) Экспорт
	
	ТаблицаОшибок = ИнициализироватьТаблицуОшибок();
	
	ОбязательныеПоля = ПолучитьОбязательныеПоля(Сообщение);
		
	Если Сообщение.Направление="Исходящее" Тогда
		
		//если у нас нет ORDERS в цепочке для данного партнера, то нам не нужны поля: "ЗаказEDI.Номер", "ЗаказEDI.Дата"
		МассивНеПроверяемыхПолей = Новый Массив;
		
		Если (Сообщение.ТипСообщения = "DESADV" или Сообщение.ТипСообщения = "INVOIC") Тогда
			
			НетORDERS = (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"ORDERS")<>Истина);
			Если НетORDERS Тогда
				//уберем эти 2 поля
				МассивНеПроверяемыхПолей.Добавить("ЗаказEDI.Номер");
				МассивНеПроверяемыхПолей.Добавить("ЗаказEDI.Дата");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Сообщение.ТипСообщения = "COINVOIC" Тогда //отправить COINVOIC можно только по ДиадокИД         Сообщение.СчетФактураEDI.ДиадокID
			ДобавитьОбязательноеПоле(ОбязательныеПоля, "СчетФактураEDI.ДиадокID");
		КонецЕсли;
		
		//если у нас нет DESADV в цепочке для данного партнера, то нам не нужны поля: "НакладнаяEDI.Номер", "НакладнаяEDI.Дата"
		
		Если (Сообщение.ТипСообщения = "RECADV") Тогда
						
			НетDESADV = (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Получатель1С,"DESADV")<>Истина);
			Если НетDESADV Тогда
				//уберем эти 2 поля
				МассивНеПроверяемыхПолей.Добавить("НакладнаяEDI.Номер");
				МассивНеПроверяемыхПолей.Добавить("НакладнаяEDI.Дата");
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ИмяПоля Из МассивНеПроверяемыхПолей Цикл
			УдаляемаяСтрока = ОбязательныеПоля.Найти(ИмяПоля,"ИмяПоля");
			Если НЕ УдаляемаяСтрока=Неопределено Тогда
				ОбязательныеПоля.Удалить(УдаляемаяСтрока);
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Если НЕ Параметры = Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Структура") Тогда
			Если Параметры.Свойство("ОбязательныйКодТовараПокупателя") Тогда
				Если Параметры.ОбязательныйКодТовараПокупателя = Истина Тогда
					ДобавитьОбязательноеПоле(ОбязательныеПоля, "Товары.КодТовараПокупателя");
				КонецЕсли;
			КонецЕсли;
			Если Параметры.Свойство("ОбязательныйСФвDESADV") Тогда
				Если Параметры.ОбязательныйСФвDESADV = Истина Тогда
					ДобавитьОбязательноеПоле(ОбязательныеПоля, "СчетФактураEDI.Номер");
					ДобавитьОбязательноеПоле(ОбязательныеПоля, "СчетФактураEDI.Дата");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеСообщения = ПолучитьМетаданныеСообщения(Сообщение.ТипСообщения, Сообщение.Направление);
	
	ПроверитьПоляСообщенияEDI(Сообщение, МетаданныеСообщения, ТаблицаОшибок, "", , , ОбязательныеПоля);
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеПроверкиСообщенияEDI",,Новый Структура("Сообщение,ТаблицаОшибок",Сообщение,ТаблицаОшибок));
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Процедура ПроверитьСвязанныеСправочникиТочкиДоставкиНаПовтор(Партнер,ЗНАЧ ТекущаяТочкаДоставки,ТаблицаОшибок,ЗНАЧ СвязанныйСправочник1,ЗНАЧ СвязанныйСправочник2) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПолучитьКонстантуEDI("СвойСправочникТочекДоставки")) Тогда //нам необходимо отделять одну тд от другой по юр лицу (связ спр 1)
		
		Если ЗначениеЗаполнено(СвязанныйСправочник1) Тогда 
		
			//найдем любую другую ТД по этой ссылке	
			НайденнаяТД = НайтиОбъектПоЗначениюСвойства("ЮрФизЛицо_ТочкиДоставки",СвязанныйСправочник1);
			
			Если ЗначениеЗаполнено(НайденнаяТД) И НайденнаяТД<>ТекущаяТочкаДоставки Тогда
				НайденнаяТДСтруктура = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",НайденнаяТД);
				ТекстОшибки="Указанное юр./физ. лицо уже поставлено в соответствие точке доставки: "+НайденнаяТДСтруктура.Наименование+Символы.ПС+"Партнер: "+ПреобразоватьЗначениеДляВнешнегоХранилища(НайденнаяТДСтруктура.Партнер).Наименование;
				ЗафиксироватьОшибку(ТаблицаОшибок,"ЮрФизЛицо","",0,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		//здесь надо проверять в пределах партнера т.к. возможна ситуация когда у 2х ТД разных ТС одинаковое значение СвязанныйСправочник2 
		//проверим  СвязанныйСправочник2
		Если ЗначениеЗаполнено(СвязанныйСправочник2) Тогда 
			Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
			Запрос.Текст = "ВЫБРАТЬ
			               |	КонтурEDI_ТочкиДоставки.Ссылка,
			               |	КонтурEDI_ТочкиДоставки.Партнер
			               |ИЗ
			               |	Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
			               |ГДЕ
			               |	НЕ КонтурEDI_ТочкиДоставки.ПометкаУдаления
			               |	И КонтурEDI_ТочкиДоставки.СвязанныйСправочник2 = &СвязанныйСправочник2
			               |	И КонтурEDI_ТочкиДоставки.Партнер = &Партнер";
			
			Запрос.УстановитьПараметр("СвязанныйСправочник2", ПреобразоватьЗначениеДляВнешнегоХранилища(СвязанныйСправочник2));
			Запрос.УстановитьПараметр("Партнер", Партнер);
			Если ПолучитьКонстантуEDI("СвойСправочникТочекДоставки") = "ВидыКонтактнойИнформации" Тогда
				Запрос.Текст = Запрос.Текст + Символы.ПС + "	И КонтурEDI_ТочкиДоставки.СвязанныйСправочник1 = &СвязанныйСправочник1";
				Запрос.УстановитьПараметр("СвязанныйСправочник1", СвязанныйСправочник1);
			КонецЕсли;
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			ЕстьОшибкаСвязанногоСправочника2 = Ложь;
			Пока Выборка.Следующий()Цикл 
				Если Выборка.Ссылка<>ТекущаяТочкаДоставки Тогда
					ТекстОшибки="Указанное значения ""своей"" точки доставки уже поставлено в соответствие точке доставки: "+Выборка.Ссылка+Символы.ПС+"Партнер: "+Партнер;
					ЗафиксироватьОшибку(ТаблицаОшибок,"ЮрФизЛицо","",0,ТекстОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//**********************************************
//
//	Форма вывода ошибок

#Если Клиент Тогда
Функция ОткрытьФормуВыводаОшибок(ТекстЗаголовка,ТаблицаОшибок,ФормаEDI) Экспорт
	
	ФормаВыводаОшибок = ПолучитьФорму("ФормаСервис_ВыводОшибок",ФормаEDI);

	Если Не ФормаВыводаОшибок.Открыта() Тогда
		
		ФормаВыводаОшибок.ПоложениеОкна = ВариантПоложенияОкна.НеПерекрыватьВладельца;
		
		//ФормаВыводаОшибок.РазрешитьСоединятьОкно = Истина;
		//ФормаВыводаОшибок.СоединяемоеОкно = Истина;
		
		ФормаВыводаОшибок.РазрешитьСостояниеПрячущееся = Ложь;
		//ФормаВыводаОшибок.РазрешитьСостояниеСвободное  = Ложь;
		
		//ФормаВыводаОшибок.РазрешитьСостояниеПрикрепленное = Истина;
		//ФормаВыводаОшибок.СостояниеОкна = ВариантСостоянияОкна.Прикрепленное;
		
		//ФормаВыводаОшибок.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Право;
		
		Для каждого  Стр Из ТаблицаОшибок Цикл
			НоваяСтрока = ФормаВыводаОшибок.ТаблицаОшибок.Добавить();
			НоваяСтрока.ТекстОшибки = Стр.СведенияОбОшибках;
			//ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);	
		КонецЦикла;	
		
		ФормаВыводаОшибок.ТекстЗаголовка = ТекстЗаголовка;
		
		ФормаВыводаОшибок.Открыть();
		
	Иначе
		
		ФормаВыводаОшибок.ТекстЗаголовка = ТекстЗаголовка;
		
		ФормаВыводаОшибок.ТаблицаОшибок.Очистить();
		
		Для каждого  Стр Из ТаблицаОшибок Цикл
			НоваяСтрока = ФормаВыводаОшибок.ТаблицаОшибок.Добавить();
			НоваяСтрока.ТекстОшибки = Стр.СведенияОбОшибках;
		КонецЦикла;	
		
		
	КонецЕсли;
	
КонецФункции
#КонецЕсли

Процедура ПроверитьПолеФормы(ТаблицаОшибок, ЗначениеПоля, ТипЗначения = Неопределено, Обязательность = Ложь, ИмяПоля, ИмяТабличнойЧасти =  Неопределено, НомерСтроки = Неопределено, ПредставлениеПоля = Неопределено, ПредставлениеТабличнойЧасти = Неопределено) Экспорт
	
	НаименованиеПоля = ИмяПоля;
	НаименованиеТабличнойЧасти = ИмяТабличнойЧасти;
	
	Если ЗначениеЗаполнено(ПредставлениеПоля) Тогда
		НаименованиеПоля = ПредставлениеПоля;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПредставлениеТабличнойЧасти) Тогда
		НаименованиеТабличнойЧасти = ПредставлениеТабличнойЧасти;
	КонецЕсли;
	
	Если Обязательность Тогда
		Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
				
				Если НомерСтроки = Неопределено Тогда
					
					ТекстОшибки = "В табличной части """+НаименованиеТабличнойЧасти+""" не заполнено обязательное поле """+НаименованиеПоля+""".";
					
				Иначе
					
					ТекстОшибки = "В табличной части """+НаименованиеТабличнойЧасти+""" в строке "+НомерСтроки+" не заполнено обязательное поле """+НаименованиеПоля+""".";
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = "Не заполнено обязательное поле: """+НаименованиеПоля+""".";
				
			КонецЕсли;
			
			ЗафиксироватьОшибку(ТаблицаОшибок, ИмяПоля, ИмяТабличнойЧасти, НомерСтроки, ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		
		РезультатПроверки = ПроверитьЗначениеEDI(ЗначениеПоля, ТипЗначения);
		
		Если НЕ РезультатПроверки.Успешно Тогда
			Для Каждого СтрокаОшибки Из РезультатПроверки.ТаблицаОшибок Цикл
				
				Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
					
					Если НомерСтроки = Неопределено Тогда
						
						ОписаниеПоля = "В табличной части """+НаименованиеТабличнойЧасти+""" в поле """+НаименованиеПоля+""": ";
						
					Иначе
						
						ОписаниеПоля = "В табличной части """+НаименованиеТабличнойЧасти+""" в строке "+НомерСтроки+" в поле """+НаименованиеПоля+""": ";
						
					КонецЕсли;
					
				Иначе
					
					ОписаниеПоля = "В поле """+НаименованиеПоля+""": ";
					
				КонецЕсли;
				
				ТекстОшибки = ОписаниеПоля + СтрокаОшибки.ТекстОшибки;
				
				ЗафиксироватьОшибку(ТаблицаОшибок,ИмяПоля,ИмяТабличнойЧасти,НомерСтроки,ТекстОшибки);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиДублиВТаблице(ТаблицаОшибок,ТаблицаПроверки,Поле,ИмяТаблицы,ИмяПоля) Экспорт
	
	Таблица = ТаблицаПроверки.Скопировать();
	
	Таблица.Колонки.Добавить("Признак");
	Таблица.ЗаполнитьЗначения(1,"Признак");
	
	Таблица.Свернуть(Поле,"Признак");
	
	Для Каждого Стр Из Таблица Цикл
		
		Если Стр.Признак>1 Тогда
			
			Если ЗначениеЗаполнено(Стр[Поле]) Тогда
				
				ТекстОшибки = "В таблице " + ИмяТаблицы + ", "+ИмяПоля+": """+СокрЛП(Стр[Поле])+""" встречается несколько раз ("+Строка(Стр.Признак)+")!";
				ЗафиксироватьОшибку(ТаблицаОшибок,ИмяПоля,ИмяТаблицы,,ТекстОшибки);
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

//}#КонецОбласти  //Модуль_ПроверкаДанных


//{#Область 11_ПостроениеСпискаЗадач
	
//для заполнения таблицы требуемых действий и их картинок
Процедура ДобавитьСтрокуОформленияТребуемогоДействия(Таблица,Раздел,Действие,ИмяКартинки,Гиперссылка,КодДействия,Иконка=0)
	//проверим, вдруг уже добавили
	Если Таблица.Найти(Действие,"Значение")<>Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Нов = Таблица.Добавить();
	Нов.Раздел			= Раздел;
	Нов.Значение		= Действие;
	Нов.ИмяКартинки		= "Картинка"+ИмяКартинки;
	Нов.Гиперссылка		= Гиперссылка;
	Нов.Иконка			= Иконка;
	Нов.КодДействия		= КодДействия;
КонецПроцедуры	

//инициализирует внутреннюю таблицу с требуемыми действиями: значения, оформление, иконки
Функция ПолучитьТаблицуТребуемыхДействий(РежимРаботы,ПоказыватьЗавершенные) Экспорт
	
	НастройкаОформленияТребуемогоДействия = Новый ТаблицаЗначений;
	НастройкаОформленияТребуемогоДействия.Колонки.Добавить("Значение",Новый ОписаниеТипов("Строка"));
	НастройкаОформленияТребуемогоДействия.Колонки.Добавить("Раздел",Новый ОписаниеТипов("Строка"));
	НастройкаОформленияТребуемогоДействия.Колонки.Добавить("ИмяКартинки",Новый ОписаниеТипов("Строка"));
	НастройкаОформленияТребуемогоДействия.Колонки.Добавить("Гиперссылка",Новый ОписаниеТипов("Булево"));//можно испьзовать как признак, выполняется ли это действие, или оно просто информативное
	
	НастройкаОформленияТребуемогоДействия.Колонки.Добавить("КодДействия",Новый ОписаниеТипов("Строка"));//для "динамических" действий: отправить ORDRSP, провести реализацию. 
	//варианты: "ПровестиДокумент", "СоздатьДокумент", "ОтправитьСообщение", "ПолучитьСообщение"
	
	НастройкаОформленияТребуемогоДействия.Колонки.Добавить("Иконка",Новый ОписаниеТипов("Число"));//для УФ исправлено название
	
	НастройкаОформленияТребуемогоДействия.Индексы.Добавить("Значение");
	
//	"#Сообщения
	Если РежимРаботы <> "Неизвестно" Тогда
	//для "Показать завершенные" можно включать/выключать верхние 4
	    Если ПоказыватьЗавершенные Тогда
			ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Работа завершена","СтатусПодтвержден",Ложь,"РаботаЗавершена",1);
			
			ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Сообщение отменено","ИсправитьОшибки",Ложь,"СообщениеОтменено",6);
			ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Сообщение отменено отправителем","ИсправитьОшибки",Ложь,"СообщениеОтмененоОтправителем",6);
			ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Сообщение отклонено получателем","ИсправитьОшибки",Ложь,"СообщениеОтклоненоПолучателем",6);
			
			Если РежимРаботы = "Покупатель" Тогда
				ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Не прошло валидацию","ИсправитьОшибки",Ложь,"НеПрошлоВалидацию",6);
			КонецЕсли;
		
			
		КонецЕсли;	
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Обработать входящее сообщение","ПринятьСообщение",Истина,"ПринятьСообщение",2);
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Выполнить обмен","ВыполнитьОбмен_Новая",Ложь,"ВыполнитьОбмен",3);
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Обрабатывается сервером","Загрузка",Ложь,"ДождатьсяДоставки",4); 
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Переотправить сообщение","ОтправитьСообщения",Истина,"ИсправитьОшибки",5);
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Обработать новую версию","ОбработатьРасхождения",Истина,"ОбработатьНовуюВерсию",7);
		
	КонецЕсли;	
	
	Если РежимРаботы = "Поставщик" Тогда
		
		//еще 2 строки по Сообщениям
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Обработать уточнение обратного заказа","ОбработатьРасхождения",Истина,"ОбработатьРасхождения_ORDERS",7);
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Обработать результат приемки","ОбработатьРасхождения",Истина,"ОбработатьРасхождения_RECADV",7);
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Подписать в Диадоке","Диадок",Истина,"ПодписатьВДиадок",13);
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Обработать сохраненное сообщение","ОтправитьСообщения",Истина,"Отправить_",8);
		
		ТипДокументаPORDERS = ПолучитьТипЗначенияОбъекта("ИсходящийОбратныйЗаказ",,Истина);
		ПредставлениеPORDERS = Метаданные.Документы[ТипДокументаPORDERS].Синоним;
		
		ТипДокументаORDRSP = ПолучитьТипЗначенияОбъекта("ИсходящийОтветНаЗаказ",,Истина);
		ПредставлениеORDRSP = Метаданные.Документы[ТипДокументаORDRSP].Синоним;
		
		ТипДокументаDESADV = ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке",,Истина);
		ПредставлениеDESADV = Метаданные.Документы[ТипДокументаDESADV].Синоним;
		
		ТипДокументаRECADV = ПолучитьТипЗначенияОбъекта("ВходящееУведомлениеОПриемке",,Истина);
		ПредставлениеRECADV = Метаданные.Документы[ТипДокументаRECADV].Синоним;
		
		ТипДокументаINVOIC = ПолучитьТипЗначенияОбъекта("ИсходящийСчетФактура",,Истина);
		ПредставлениеINVOIC = Метаданные.Документы[ТипДокументаINVOIC].Синоним;
		
		ПредставлениеRETDES = "Возврат товаров от покупателя";
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеPORDERS,"Отправить "+ПеревестиТипСообщения("PORDERS"),"ОтправитьСообщения",Истина,"Отправить_PORDERS",8);//PORDERS - будем ли говорить о проведении?
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеPORDERS,"Ожидайте "+ПеревестиТипСообщения("ORDERS"),"ВтораяСторона",Ложь,"Получить_ORDERS",12);//ждем ORDRSP на PORDERS
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеORDRSP,"Отправить "+ПеревестиТипСообщения("ORDRSP"),"ОтправитьСообщения",Истина,"Отправить_ORDRSP",8);//ORDRSP
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеDESADV,"Отправить "+ПеревестиТипСообщения("DESADV"),"ОтправитьСообщения",Истина,"Отправить_DESADV",8);//DESADV
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеDESADV,"Ожидайте "+ПеревестиТипСообщения("RECADV"),"ВтораяСторона",Ложь,"Получить_RECADV",12);//RECADV
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеINVOIC,"Отправить "+ПеревестиТипСообщения("INVOIC"),"ОтправитьСообщения",Истина,"Отправить_INVOIC",8);//INVOIC
		
		Если ЕстьКоррИспрСФ Тогда
			ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеINVOIC,"Отправить "+ПеревестиТипСообщения("COINVOIC"),"ОтправитьСообщения",Истина,"Отправить_COINVOIC",8);
		КонецЕсли;	
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеRETDES,"Отправить "+ПеревестиТипСообщения("RETREC"),"ОтправитьСообщения",Истина,"Отправить_RETDES",8);//RETDES
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеRETDES,"Провести Возврат товаров от покупателя","ПровестиДокумент",Истина,"ПровестиДокумент_ВозвратТоваровОтПокупателя",8);//RETDES
		
	ИначеЕсли РежимРаботы = "Покупатель" Тогда
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Сообщения","Обработать уточнение заказа","ОбработатьРасхождения",Истина,"ОбработатьРасхождения_ORDRSP",7);//Сообщения

		
		ТипДокументаORDERS = ПолучитьТипЗначенияОбъекта("ИсходящийЗаказПоставщику",,Истина);
		ПредставлениеORDERS = Метаданные.Документы[ТипДокументаORDERS].Синоним;
		
		ТипДокументаORDRSP = ПолучитьТипЗначенияОбъекта("ВходящийОтветНаЗаказ",,Истина);
		ПредставлениеORDRSP = Метаданные.Документы[ТипДокументаORDRSP].Синоним;
		
		ТипДокументаDESADV = ПолучитьТипЗначенияОбъекта("ВходящееУведомлениеОбОтгрузке",,Истина);
		ПредставлениеDESADV = Метаданные.Документы[ТипДокументаDESADV].Синоним;
		
		ТипДокументаRECADV = ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОПриемке",,Истина);
		ПредставлениеRECADV = Метаданные.Документы[ТипДокументаRECADV].Синоним;
		
		ТипДокументаINVOIC = ПолучитьТипЗначенияОбъекта("ВходящийСчетФактура",,Истина);
		ПредставлениеINVOIC = Метаданные.Документы[ТипДокументаINVOIC].Синоним;
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеORDERS,"Отправить "+ПеревестиТипСообщения("ORDERS"),"ОтправитьСообщения",Истина,"Отправить_ORDERS",8);//ORDERS
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеORDRSP,"Ожидайте "+ПеревестиТипСообщения("ORDRSP"),"ВтораяСторона",Ложь,"Получить_ORDRSP",12);//ORDRSP/ORDERS
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеDESADV,"Ожидайте "+ПеревестиТипСообщения("DESADV"),"ВтораяСторона",Ложь,"Получить_DESADV",12);//ORDRSP/ORDERS
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеRECADV,"Отправить "+ПеревестиТипСообщения("RECADV"),"ОтправитьСообщения",Истина,"Отправить_RECADV",8);//RECADV
		
		ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,ПредставлениеINVOIC,"Ожидайте "+ПеревестиТипСообщения("INVOIC"),"ВтораяСторона",Ложь,"Получить_INVOIC",12);//ORDRSP/ORDERS
		
	КонецЕсли;	
	
    //снова универсальный код для поставщика и сети
	
	//создание/проведение документов кидаем именно из таблицы сборки запросов в нужные группы
	//напрашивается такой же алгоритм, как в ОбновитьСписокЗадач
	//а вот и он
	//эти 2 алгоритма логично будет объединить
	
	СтрокиТаблицыТипов = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
	КопияТаблицыТипов = ТаблицаТипов.Скопировать(СтрокиТаблицыТипов);
	КопияТаблицыТипов.Сортировать("ПорядокСообщения ВОЗР");
	
	ТекущийТипДокумента="";
	
	Для Каждого Стр Из КопияТаблицыТипов Цикл
		
		Если Стр.ПорядокСообщения<=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийТипДокумента<>Стр.ИмяТипа 
			И ТекущийТипДокумента<>"" 
			И ПолучитьНаправлениеСообщения(Стр.ТипСообщения,РежимРаботы)="Исходящее"
			//Предложим создать документ ТипСоздаваемогоДокумента только в том случае, если сообщение по нему является исходящим.
			//Если сообщение для него является входящим, то нам надо не создать документ, а дождаться входящего сообщения.
		Тогда
		
			ТипТекущегоДокумента = СтрЗаменить(ТекущийТипДокумента,"ДокументСсылка.","");
			ТипСоздаваемогоДокумента = СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","");
			
			СинонимТекущегоДокумента = Метаданные.Документы[ТипТекущегоДокумента].Синоним;
			СинонимСоздаваемогоДокумента = Метаданные.Документы[ТипСоздаваемогоДокумента].Синоним;
			
			НеСоздаватьДокументВМодуле = (ПолучитьКонстантуEDI("НСД_"+ТипСоздаваемогоДокумента)=Истина);
			НеПроводитьДокументОснованиеВМодуле = (ПолучитьКонстантуEDI("НПД_"+ТипТекущегоДокумента)=Истина);  //настройку получаем именно для предыдущего документа
			СоздаватьПоНепроведенномуОснованию = (ПолучитьКонстантуEDI("СПНО_"+ТипСоздаваемогоДокумента)=Истина);
			
			Если НеСоздаватьДокументВМодуле Тогда
				ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,СинонимТекущегоДокумента,"Ожидается создание: "+СинонимСоздаваемогоДокумента,"ВвестиНаОсновании",Ложь,"ЖдатьСозданиеДокумента_"+ТипСоздаваемогоДокумента,11);
			Иначе
				ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,СинонимТекущегоДокумента,"Создать "+СинонимСоздаваемогоДокумента,"ВвестиНаОсновании",Истина,"СоздатьДокумент_"+ТипСоздаваемогоДокумента,11);
				Если Не СоздаватьПоНепроведенномуОснованию Тогда
					Если НеПроводитьДокументОснованиеВМодуле Тогда
						ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,СинонимТекущегоДокумента,"Ожидается проведение: "+СинонимТекущегоДокумента,"ПровестиДокумент",Ложь,"ЖдатьПроведение_"+ТипТекущегоДокумента,10);
					Иначе
						ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,СинонимТекущегоДокумента,"Провести "+СинонимТекущегоДокумента,"ПровестиДокумент",Истина,"ПровестиДокумент_"+ТипТекущегоДокумента,10);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
		ТекущийТипДокумента=Стр.ИмяТипа;
		
	КонецЦикла;	
	
	
	//еще надо пройтись по всем типам сообщений и для них тоже вывести пункт "Провести документ" при необходимости
	
	//исходящие можно кинуть сюда же
	//И заодно проверять, есть ли у нас хоть по одному партнеру в цепочке документов это сообщение/документ
	
	
	СтрокиТиповСообщений = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
	Для Каждого СтрокаТипаСообщения Из СтрокиТиповСообщений Цикл
		Направление = ПолучитьНаправлениеСообщения(СтрокаТипаСообщения.ТипСообщения,РежимРаботы);
		Если Направление = "Исходящее" Тогда
			//поймем тип документа, чтобы понять: надо ли нам добавить действие "Ожидайте проведение документа"/"Провести документ"
			ОтправлятьПоНепроведенномуДокументу = (ПолучитьКонстантуEDI("ОПНД_"+СтрокаТипаСообщения.ТипСообщения)=Истина);
			
			ТипДокумента = СтрЗаменить(СтрокаТипаСообщения.ИмяТипа,"ДокументСсылка.","");
			
			НеПроводитьДокумент = (ПолучитьКонстантуEDI("НПД_"+ТипДокумента)=Истина);
			
			СинонимДокумента = Метаданные.Документы[ТипДокумента].Синоним;
			
			Если Не ОтправлятьПоНепроведенномуДокументу Тогда
				Если НеПроводитьДокумент Тогда
					ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,СинонимДокумента,"Ожидается проведение: "+СинонимДокумента,"ПровестиДокумент",Ложь,"ЖдатьПроведение_"+ТипДокумента,10);
				Иначе	
					ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,СинонимДокумента,"Провести "+СинонимДокумента,"ПровестиДокумент",Истина,"ПровестиДокумент_"+ТипДокумента,10);
				КонецЕсли;	
			КонецЕсли;	
			
			
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат НастройкаОформленияТребуемогоДействия;
	//настройки оформления готовы
КонецФункции

//точка входа для обновления основного списка задач в интерфейсе
Функция ПостроитьСписокЗадач_Сервер(РежимРаботы,НачалоПериода,КонецПериода,МассивПартнеров,МассивТиповСообщений,МассивТребуемыхДействий,МассивОрганизаций,ПоказыватьЗавершенные) Экспорт
	
	//{
	//Если вас сюда привел отладчик, то вот описание.
	
	//Для отладки можно использовать 2 инструмента:
	//1. Функция "ПросмотретьВременнуюТаблицуЗапроса". В табло можно написать, например, так:
	//	ПросмотретьВременнуюТаблицуЗапроса(ЗапросСКэшемПартнеров,"ВТ_ВсеСообщения")
	//2. Большая часть запросов выполняется через функцию "ВыполнитьЗапросСОтладкой".
	//	В самом начале этой функции содержатся инструкции по отладке, в т.ч. по проверке скорости выполнения отдельных запросов пакета.
	
	//В общем виде алгоритм выглядит так:
	
	//1. Инициализируем "ЗапросСКэшемПартнеров", устанавливаем его параметры (начало/конец периода, фильтры).
	//	Далее в этом запросе на каждом шаге меняется текст, формируется одна или несколько временных таблиц.
	//	Наименования этих ВТ помещаются в "МассивВременныхТаблиц".
	//	Метод "ВывестиСписокДокументовСообщений" в конце соберет содержимое этих таблиц в единый список.
	
	//2. Метод "СформироватьСписокСообщений" создает первую временную таблицу: "ВТ_ВсеСообщения"
	//	Выбираем сообщения, уже существующие в справочнике (как входящие, так и исходящие).

	//3. Далее надо предложить пользователю создать исходящие сообщения.
	//	Принцип простой: если в базе существует документ, по которому отправляется, например, DESADV,
	//		само сообщение DESADV по данному документу еще не было создано,
	//		а предыдущее действие в цепочке документов/сообщений по данному партнеру было успешно завершено,
	//		то предложим пользователю отправить DESADV по данному документу.
	//	Для этого сначала соберем документы, участвующие в EDI, во временные таблицы. Это происходит в методе "СформироватьВременныеТаблицыДокументов".
	//	Например, для цепочки документов "Заказ-Реализация-СФ" будут сформированы временные таблицы с именами:
	//		"ВТ_ЗаказПокупателя", "ВТ_РеализацияТоваровУслуг", "ВТ_СчетФактураВыданный"
	
	//4. Теперь временные таблицы документов из предыдущего пункта соединяем с таблицей "Справочник.КонтурEDI_Сообщения" в различных комбинациях
	//		и определяем, что надо сделать пользователю. 
	//	Этим занимаются процедуры:
	
	//	а) "СформироватьСписокДокументов_ДляОтправкиОжиданияСообщений" - отвечает за появление строк с требуемыми действиями вроде "Отправить уведомление об отгрузке" и "Ожидайте уведомление о приемке"
	//		"Провести Реализация товаров и услуг" или "Ожидается проведение: Реализация товаров и услуг" возникает здесь же.
	
	//	б) "СформироватьСписокДокументов_ДляСозданияСледующего" - отвечает за появление строс с требуемыми действиями вроде:
	//		"Создать документ"/"Провести документ"/"Ожидается создание документа"/"Ожидается проведение документа"
	
	//	в) "ВывестиСписокЗаказов_ДляОтправкиPORDERS" - не укладывается в общую логику, потому вынесен отдельно
	//	г) "СформироватьСписокДокументов_ДляОтправкиКоррИспрINVOIC" - на данный момент в стадии разработки, также вынесен отдельно
	//	д) "СформироватьТаблицуДокументовДляПроведенияПоКороткойЦепочке" - также не укладывается в общую логику. 
	//		Отвечает за вывод действия "Провести Заказ покупателя" в случае, если после ORDERS следующее сообщение - INVOIC, или вообще нет никаких сообщений дальше.
	
	
	//5. "ВывестиСписокДокументовСообщений". Объединение содержимого всех полученных временных таблиц из массива "СформироватьСписокСообщений",
	//		обогащение данными из справочника сообщений и из таблиц документов, подсчет количества записей в разрезе партнеров, требуемых действий, типов сообщений и организаций. 
	
	//В режиме внешнего хранилища происходит примерно то же самое, только запросы по таблице "Справочник.КонтурEDI_Сообщения" выполняются во внешней базе.
	//Результаты запросов мигрируют между местной базой и COM-объектом с помощью методов "ПолучитьТаблицуИзВнешнейБазы" и "ПоместитьТаблицуВоВнешнююБазу"
	//}
	
	ТабСообщения.Очистить();
	
	Если ИмяКонфигурации1С<>Неопределено И Лев(ИмяКонфигурации1С,3)<>"УФ_" Тогда  //на УФ уже гарантированно обновлено в момент приезда на сервер с использованием конструкции МодульОбъекта()
		ОбновитьКэшПартнеров();   	
	КонецЕсли;
	
	//поместим сюда кэш партнеров
	ЗапросСКэшемПартнеров = ИнициализироватьЗапросСКэшемПартнеров(ВнешнееХранилище,НачалоПериода,КонецПериода,МассивПартнеров);
	Если ВнешнееХранилище Тогда
		ЗапросСКэшемПартнеров_Внутренний = ИнициализироватьЗапросСКэшемПартнеров(Ложь,НачалоПериода,КонецПериода,МассивПартнеров);//локальная копия запроса
	КонецЕсли;	
	
	//следующие запросы помещаются во временные таблицы, имеющие одинаковый формат:
	//ТипСообщения,Партнер,ТребуемоеДействие,Документ,Сообщение.
	МассивВременныхТаблиц = Новый Массив;
	
	//Запрос по таблице "Справочник.КонтурEDI_Сообщения".
	СформироватьСписокСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,НачалоПериода,КонецПериода,МассивПартнеров,МассивТиповСообщений,МассивТребуемыхДействий,МассивОрганизаций,ПоказыватьЗавершенные);//
	
	//Запросы по таблицам документов, из которых отправляются EDI-сообщения.
	//Текст берется из СКД основного или подключаемого модуля и мутирует по необходимости.
	СформироватьВременныеТаблицыДокументов(РежимРаботы,ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний);
	
	Если РежимРаботы = "Поставщик" Тогда
		
		// добавим требуемое действие "Провести "+<СинонимДокументаЗаказ>.
		СформироватьТаблицуДокументовДляПроведенияПоКороткойЦепочке(РежимРаботы,ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц);
		
		// выведем заказы, по которым надо отправить PORDERS или провести сам заказ.
		ВывестиСписокЗаказов_ДляОтправкиPORDERS(ЗапросСКэшемПартнеров,МассивВременныхТаблиц);
		
		// выведем ИСФ/КСФ на отправку.
		СформироватьСписокДокументов_ДляОтправкиКоррИспрINVOIC(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц);
		
		// выведем список RETREC на отправку.
		СформироватьСписокДокументов_ДляОтправкиRETREC(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц);

	КонецЕсли;	
		
	Для Каждого ТипСообщения Из EDI_РазложитьСтрокуВМассивСлов("ORDERS,ORDRSP,DESADV,RECADV,INVOIC",",") Цикл
		
		Если НЕ МассивТиповСообщений.Найти(ТипСообщения)=Неопределено Тогда
			СформироватьСписокДокументов_ДляОтправкиОжиданияСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,ТипСообщения);
		КонецЕсли;
		
	КонецЦикла;
		
	//теперь пробежимся по таблице ТаблицаТипов в порядке возрастания сообщений
	//найдем границы смены документов
	//и на границах выведем запросы
	
	//здесь нет пока фильтра требуемых действий, т.к. надо поменять все дерево треб.действий
	СтрокиТаблицыТипов = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
	КопияТаблицыТипов = ТаблицаТипов.Скопировать(СтрокиТаблицыТипов);
	КопияТаблицыТипов.Сортировать("ПорядокСообщения ВОЗР");
	
	ТекущийТипДокумента="";
	
	Для Каждого Стр Из КопияТаблицыТипов Цикл
		
		Если Стр.ПорядокСообщения<=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийТипДокумента<>Стр.ИмяТипа 
			И ТекущийТипДокумента<>"" 
			И ПолучитьНаправлениеСообщения(Стр.ТипСообщения,РежимРаботы)="Исходящее"
			//Предложим создать документ ТипСоздаваемогоДокумента только в том случае, если сообщение по нему является исходящим.
			//Если сообщение для него является входящим, то нам надо не создать документ, а дождаться входящего сообщения.
			Тогда
			//здесь и выполним запрос
			
			ТипТекущегоДокумента = СтрЗаменить(ТекущийТипДокумента,"ДокументСсылка.","");
			ТипСоздаваемогоДокумента = СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","");
			
			СформироватьСписокДокументов_ДляСозданияСледующего(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,Стр.ТипСообщения,ТипТекущегоДокумента,ТипСоздаваемогоДокумента);
		КонецЕсли;
		
		ТекущийТипДокумента=Стр.ИмяТипа;
		
	КонецЦикла;	  //вывели действия "Создать документ"/"Провести документ"/"Ожидается создание документа"/"Ожидается проведение документа"
	
	//выведем содержимое временных таблиц, полученных предыдущими запросами
	Если РежимРаботы = "Покупатель"
		Или РежимРаботы = "Поставщик" Тогда
		СтруктураВозврата = ВывестиСписокДокументовСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,МассивТребуемыхДействий,МассивОрганизаций,ТабСообщения);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


//получает список сообщений (из справочника "КонтурEDI_Сообщения")
//общая для режима поставщика и покупателя
Процедура СформироватьСписокСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,НачалоПериода,КонецПериода,МассивПартнеров,МассивТиповСообщений,МассивТребуемыхДействий,МассивОрганизаций,ПоказыватьЗавершенные)
	
	//Если работаем с внешним хранилищем, то этот запрос полностью внешний

	МассивВременныхТаблиц.Добавить("ВТ_ВсеСообщения");
	
	ЗапросСКэшемПартнеров.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сообщения.Партнер КАК Партнер,
	|	Сообщения.Документ КАК Документ,
	|	Сообщения.Ссылка КАК Сообщение,
	|	Сообщения.ТипСообщения КАК ТипСообщения,
	|	ВЫБОР
	|		КОГДА Сообщения.ТребуемоеДействие = ""РаботаЗавершена""
	|			ТОГДА ""Работа завершена""
	|   	КОГДА Сообщения.ТребуемоеДействие = ""ОбработатьСохраненноеСообщение""
	|			ТОГДА ВЫБОР
	|					КОГДА Сообщения.ТипСообщения = ""PORDERS""
	|					ТОГДА ""Отправить обратный заказ""
	|					КОГДА Сообщения.ТипСообщения = ""ORDERS""
	|					ТОГДА ""Отправить заказ""
	|					КОГДА Сообщения.ТипСообщения = ""ORDRSP""
	|					ТОГДА ""Отправить ответ на заказ""
	|					КОГДА Сообщения.ТипСообщения = ""DESADV""
	|					ТОГДА ""Отправить уведомление об отгрузке""
	|					КОГДА Сообщения.ТипСообщения = ""RECADV""
	|					ТОГДА ""Отправить уведомление о приемке""
	|					КОГДА Сообщения.ТипСообщения = ""INVOIC""
	|					ТОГДА ""Отправить счет-фактуру""
	|				КОНЕЦ
	|		КОГДА Сообщения.ТребуемоеДействие = ""СообщениеОтменено""
	|			ТОГДА ""Сообщение отменено""
	|		КОГДА Сообщения.ТребуемоеДействие = ""СообщениеОтмененоОтправителем""
	|			ТОГДА ""Сообщение отменено отправителем""
	|		КОГДА Сообщения.ТребуемоеДействие = ""СообщениеОтклоненоПолучателем""
	|			ТОГДА ""Сообщение отклонено получателем""
	|		КОГДА Сообщения.ТребуемоеДействие = ""ПринятьСообщение""
	|			ТОГДА ""Обработать входящее сообщение""
	|		КОГДА Сообщения.ТребуемоеДействие = ""ВыполнитьОбмен""
	|			ТОГДА ""Выполнить обмен""
	|		КОГДА Сообщения.ТребуемоеДействие = ""ДождатьсяДоставки""
	|			ТОГДА ""Обрабатывается сервером""
	|		КОГДА Сообщения.ТребуемоеДействие = ""ИсправитьОшибки""
	|			ТОГДА ""Переотправить сообщение""
	|		КОГДА Сообщения.ТребуемоеДействие = ""ОбработатьНовуюВерсию""
	|			ТОГДА ""Обработать новую версию""
	|		КОГДА Сообщения.ТребуемоеДействие = ""ПодписатьВДиадок""
	|			ТОГДА ""Подписать в Диадоке""
	|		КОГДА Сообщения.ТребуемоеДействие = ""НеПрошлоВалидацию""
	|			ТОГДА ""Не прошло валидацию""
	|		КОГДА Сообщения.ТребуемоеДействие = ""ОбработатьРасхождения""
	|			ТОГДА ВЫБОР
	|					КОГДА Сообщения.ТипСообщения = ""ORDRSP""
	|						ТОГДА ""Обработать уточнение заказа""
	|					КОГДА Сообщения.ТипСообщения = ""ORDERS""
	|						ТОГДА ""Обработать уточнение обратного заказа""
	|					КОГДА Сообщения.ТипСообщения = ""RECADV""
	|						ТОГДА ""Обработать результат приемки""
	|				КОНЕЦ
	|	КОНЕЦ КАК ТребуемоеДействие,
	|	"""" КАК СтатусДокумента,
	|	Сообщения.Сумма КАК СуммаСообщения
	|ПОМЕСТИТЬ ВТ_ВсеСообщения
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК Сообщения
	|ГДЕ
	|	Сообщения.ДатаДокумента МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (Сообщения.Партнер В
	|				(ВЫБРАТЬ
	|					ВТ.Партнер
	|				ИЗ
	|					ТаблицаКэшПартнеров КАК ВТ)
	|			ИЛИ Сообщения.Партнер = ЗНАЧЕНИЕ(Справочник.КонтурEDI_ДополнительныеСправочники.))
	|	И &Условия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Сообщение"
	;
	
	ЗапросСКэшемПартнеров.УстановитьПараметр("НачалоПериода",НачалоПериода);
	ЗапросСКэшемПартнеров.УстановитьПараметр("КонецПериода",КонецПериода);
	
	ТекстУсловий = "Истина";//сюда можно будет закидывать произвольные условия
	
	Если РежимРаботы = "Поставщик" Тогда
		
		ТекстУсловий = ТекстУсловий+Символы.ПС+
		"	И ВЫБОР
		|			КОГДА Сообщения.Направление = ""Входящее""
		|				ТОГДА ВЫБОР
		|						КОГДА Сообщения.ТипСообщения = ""ORDERS""
		|								ИЛИ Сообщения.ТипСообщения = ""RECADV""
		|								ИЛИ Сообщения.ТипСообщения = ""RETANN""
		|								ИЛИ Сообщения.ТипСообщения = ""RETDES""
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА Сообщения.ТипСообщения = ""PORDERS""
		|							ИЛИ Сообщения.ТипСообщения = ""ORDRSP""
		|							ИЛИ Сообщения.ТипСообщения = ""DESADV""
		|							ИЛИ Сообщения.ТипСообщения = ""INVOIC""
		|							ИЛИ Сообщения.ТипСообщения = ""COINVOIC""
		|							ИЛИ Сообщения.ТипСообщения = ""RETANN""
		|							ИЛИ Сообщения.ТипСообщения = ""RETREC""
		|							ИЛИ Сообщения.ТипСообщения = ""PRICELIST""
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОНЕЦ";
		
	ИначеЕсли РежимРаботы = "Покупатель" Тогда	
		
		ТекстУсловий = ТекстУсловий+Символы.ПС+
		"	И ВЫБОР
		|			КОГДА Сообщения.Направление = ""Исходящее""
		|				ТОГДА ВЫБОР
		|						КОГДА Сообщения.ТипСообщения = ""ORDERS""
		|								ИЛИ Сообщения.ТипСообщения = ""RECADV""
		|								ИЛИ Сообщения.ТипСообщения = ""RETANN""
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА Сообщения.ТипСообщения = ""PORDERS""
		|							ИЛИ Сообщения.ТипСообщения = ""ORDRSP""
		|							ИЛИ Сообщения.ТипСообщения = ""DESADV""
		|							ИЛИ Сообщения.ТипСообщения = ""INVOIC""
		|							ИЛИ Сообщения.ТипСообщения = ""RETANN""
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОНЕЦ";
		
	КонецЕсли;	

	//Добавим условие на типы сообщений
	ТекстУсловий = ТекстУсловий+Символы.ПС+
	"	И Сообщения.ТипСообщения в (&ТипыСообщений)";
	Если ВнешнееХранилище Тогда
		ЗапросСКэшемПартнеров.УстановитьПараметр("ТипыСообщений",СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивТиповСообщений)));
	Иначе	
		ЗапросСКэшемПартнеров.УстановитьПараметр("ТипыСообщений",МассивТиповСообщений);
	КонецЕсли;	
	                            
	//Добавим условие на требуемые действия. Но оно срабатывает в самом конце пакета запросов
	Если ВнешнееХранилище Тогда
		ЗапросСКэшемПартнеров.УстановитьПараметр("ТребуемыеДействия",СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(МассивТребуемыхДействий)));
	Иначе
		ЗапросСКэшемПартнеров.УстановитьПараметр("ТребуемыеДействия",МассивТребуемыхДействий);
	КонецЕсли;
	
	Если Не ПоказыватьЗавершенные Тогда
		//добавим условие на архивные
		ТекстУсловий = ТекстУсловий+Символы.ПС+
		"	И Не Сообщения.Архив"
		;
	КонецЕсли;	
	
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"&Условия",ТекстУсловий);//сюда будем подставлять нужные условия
	
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры	


//на входе - запрос с временными таблицами, в которых должны быть такие (и только такие) колонки:
//Партнер,Документ,Сообщение,ТипСообщения,ТребуемоеДействие
//Процедура дополняет эту таблицу нужными реквизитами (контрагент, сумма документа,..) и выводит в окно задач
//на будущее: пробросить сюда подключаемый модуль, чтобы дополнять список врем.таблиц
Функция ВывестиСписокДокументовСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,МассивТребуемыхДействий,МассивОрганизаций,ТаблицаРезультата)
	
	//соберем все временные таблицы в одну таблицу
	
	ТекстЗапроса = "";
	Для Каждого ИмяВТ Из МассивВременныхТаблиц Цикл
		ТекстЗапроса = ТекстЗапроса+ ?(ТекстЗапроса="",
		"ВЫБРАТЬ
		|	ВТ.Партнер КАК Партнер,
		|	ВТ.ТребуемоеДействие КАК ТребуемоеДействие,
		|	ВТ.ТипСообщения КАК ТипСообщения,
		|	ВТ.Сообщение КАК Сообщение,
		|	ВТ.Документ КАК Документ
		|ПОМЕСТИТЬ ВТ_ВсеДокументыДляВывода
		|ИЗ
		|	"+ИмяВТ+" КАК ВТ
		|ГДЕ
		|	ВТ.ТребуемоеДействие В(&ТребуемыеДействия)
		|"
		,
		" ОБЪЕДИНИТЬ ВСЕ 
		|ВЫБРАТЬ
		|	ВТ.Партнер КАК Партнер,
		|	ВТ.ТребуемоеДействие КАК ТребуемоеДействие,
		|	ВТ.ТипСообщения КАК ТипСообщения,
		|	ВТ.Сообщение КАК Сообщение,
		|	ВТ.Документ КАК Документ
		|ИЗ
		|	"+ИмяВТ+" КАК ВТ
		|ГДЕ
		|	ВТ.ТребуемоеДействие В(&ТребуемыеДействия)
		|");
	КонецЦикла;	
	
	ЗапросСКэшемПартнеров.Текст = ТекстЗапроса;
	
	ТекстУсловий = "ВТ_ВсеДокументыДляВывода.ТипСообщения в (&ТипыСообщений)";//параметр устанавливается в ИнициализироватьЗапросСКэшемПартнеров
	
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	//теперь выберем все из этой ВТ, заодно заполним нужные для отображения поля: даты поставки, номер заказа и т.д.
	ЗапросСКэшемПартнеров.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ВсеДокументыДляВывода.Документ КАК Документ,
	|	ВТ_ВсеДокументыДляВывода.Партнер КАК Партнер,
	|	ВТ_ВсеДокументыДляВывода.ТребуемоеДействие КАК ТребуемоеДействие,
	|	ВТ_ВсеДокументыДляВывода.ТипСообщения КАК ТипСообщения,
	|	ВТ_ВсеДокументыДляВывода.Сообщение КАК Сообщение,
	|	КонтурEDI_Сообщения.Направление КАК Направление,
	|	КонтурEDI_Сообщения.Статус КАК Статус,
	|	КонтурEDI_Сообщения.Сумма КАК СуммаСообщения,
	|	КонтурEDI_Сообщения.ТочкаДоставки КАК ТочкаДоставки,
	|	КонтурEDI_Сообщения.Организация КАК Организация,
	|	КонтурEDI_Сообщения.НомерЗаказа КАК НомерЗаказа,
	|	КонтурEDI_Сообщения.ДатаЗаказа КАК ДатаЗаказа,
	|	КонтурEDI_Сообщения.НомерДокумента КАК НомерДокумента,
	|	КонтурEDI_Сообщения.ДатаПоставки КАК ДатаПоставки,
	|	КонтурEDI_Сообщения.ДатаЗагрузки КАК ДатаЗагрузки,
	|	КонтурEDI_ТочкиДоставки.АдресДоставки КАК АдресДоставки,
	|	КонтурEDI_ТочкиДоставки.Наименование КАК ТочкаДоставкиПредставление,
	|	КонтурEDI_ДополнительныеСправочники_Партнеры.Наименование КАК ПартнерПредставление
	|ПОМЕСТИТЬ ВТ_ТабСообщений_Внешняя
	|ИЗ
	|	ВТ_ВсеДокументыДляВывода КАК ВТ_ВсеДокументыДляВывода
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ТочкиДоставки КАК КонтурEDI_ТочкиДоставки
	|			ПО КонтурEDI_Сообщения.ТочкаДоставки = КонтурEDI_ТочкиДоставки.Ссылка
	|		ПО ВТ_ВсеДокументыДляВывода.Сообщение = КонтурEDI_Сообщения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники_Партнеры
	|		ПО ВТ_ВсеДокументыДляВывода.Партнер = КонтурEDI_ДополнительныеСправочники_Партнеры.Ссылка
	|ГДЕ
	|	&Условия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ";
	
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"&Условия",ТекстУсловий);
	//Конструктор кастомов часть 3 - попробуем чуток добавить (кусок нужен для определения даты поставки в строках по которым нет сообщения (porders у поставщика на УТ11) 
	//Хмм, но на стороне сети первое сообщение ORDERS и там это другой документ и другой реквизит
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Дата) КАК ДатаПоставки",ПолучитьТипЗначенияОбъекта("РеквизитДатаПоставкиЗаказ")+") КАК ДатаПоставки");
	//\\кк3
	Если НЕ ЕстьМетаданныеХраненияОрганизации Тогда
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"КонтурEDI_Сообщения.Организация",?(ВнешнееХранилище,"""""","НЕОПРЕДЕЛЕНО"));
	КонецЕсли;	
	
	//эта таблица может собираться во внешней базе
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	Если ВнешнееХранилище Тогда
		//передадим ВТ_ТабСообщений_Внешняя в запрос текущей базы
		ЗапросСКэшемПартнеров.Текст = "Выбрать * Из ВТ_ТабСообщений_Внешняя";
		ТабСообщенийДокументов_Внешняя = ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров).Выгрузить();
		
		СтрокаОписанияТипов = "";
		СтрокиВозможныхТипов = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
		Для Каждого Стр Из СтрокиВозможныхТипов Цикл
			
			Если Не ЕстьКоррИспрСФ И Стр.ИмяОбъекта = "ИсходящийКСФ" Тогда
				Продолжить;//
			КонецЕсли;
			
			Если Найти(СтрокаОписанияТипов,Стр.ИмяТипа)=0 Тогда
				СтрокаОписанияТипов = ?(СтрокаОписанияТипов="","",СтрокаОписанияТипов+",")+Стр.ИмяТипа;
			КонецЕсли;	
		КонецЦикла;
		
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура();
		СтруктураКолонокПреобразуемыхВСсылки.Вставить("Документ",Новый ОписаниеТипов(СтрокаОписанияТипов));
		
		Если ЕстьМетаданныеХраненияОрганизации Тогда
			СтруктураКолонокПреобразуемыхВСсылки.Вставить("Организация",Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое")));
		КонецЕсли;
					
		ТабСообщенийДокументов_Внутренняя = ПолучитьТаблицуИзВнешнейБазы(ТабСообщенийДокументов_Внешняя,СтруктураКолонокПреобразуемыхВСсылки);
		
		ЗапросСКэшемПартнеров = Неопределено;//очистим такой запрос во внешней базе
		
		ЗапросСКэшемПартнеров = Новый Запрос; //создаем уже локальный запрос
		ЗапросСКэшемПартнеров.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросСКэшемПартнеров.Текст = "Выбрать * Поместить ВТ_ТабСообщений_Внешняя Из &ВТ_ТабСообщений_Внешняя как ВТ_ТабСообщений_Внешняя Индексировать по Документ";
		ЗапросСКэшемПартнеров.УстановитьПараметр("ВТ_ТабСообщений_Внешняя",ТабСообщенийДокументов_Внутренняя);
		ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
		
	КонецЕсли;	
	
	ЗапросСКэшемПартнеров.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТабСообщений_Внешняя.Партнер КАК Партнер,
	|	ВТ_ТабСообщений_Внешняя.ПартнерПредставление КАК ПартнерПредставление,
	|	ВТ_ТабСообщений_Внешняя.ТребуемоеДействие КАК ТребуемоеДействие,
	|	ВТ_ТабСообщений_Внешняя.ТипСообщения КАК ТипСообщения,
	|	ВТ_ТабСообщений_Внешняя.Сообщение КАК СообщениеСсылка,
	|	ВТ_ТабСообщений_Внешняя.Статус КАК Статус,
	|	ВТ_ТабСообщений_Внешняя.ТочкаДоставки КАК ТочкаДоставки,
	|	ВТ_ТабСообщений_Внешняя.ТочкаДоставкиПредставление КАК ТочкаДоставкиПредставление,
	|	ВТ_ТабСообщений_Внешняя.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВТ_ТабСообщений_Внешняя.Направление КАК Направление,
	|	ВТ_ТабСообщений_Внешняя.НомерЗаказа КАК НомерЗаказа,
	|	ВТ_ТабСообщений_Внешняя.ДатаЗаказа КАК ДатаЗаказа,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВТ_ТабСообщений_Внешняя.ДатаПоставки, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ) КАК ДатаПоставки,
	|	ВТ_ТабСообщений_Внешняя.Документ КАК Документ,
	|	ВТ_ТабСообщений_Внешняя.АдресДоставки КАК АдресДоставки,
	|	ВТ_ТабСообщений_Внешняя.Документ.Контрагент КАК Контрагент,
	|	ВТ_ТабСообщений_Внешняя.Документ.Проведен КАК Проведен,
	|	ВТ_ТабСообщений_Внешняя.Документ.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕСТЬNULL(ВТ_ТабСообщений_Внешняя.Документ.Организация, ВТ_ТабСообщений_Внешняя.Организация) КАК Организация,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_ТабСообщений_Внешняя.Документ.СуммаДокумента, ВТ_ТабСообщений_Внешняя.СуммаСообщения) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЕСТЬNULL(ВТ_ТабСообщений_Внешняя.Документ.Номер, ВТ_ТабСообщений_Внешняя.НомерДокумента) КАК НомерДокумента,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_ТабСообщений_Внешняя.Документ.Дата, ВТ_ТабСообщений_Внешняя.ДатаЗагрузки) КАК ДАТА) КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТВыводСписка
	|ИЗ
	|	ВТ_ТабСообщений_Внешняя КАК ВТ_ТабСообщений_Внешняя
	|ГДЕ
	|	ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ВТ_ТабСообщений_Внешняя.ТребуемоеДействие КАК СТРОКА(8))) = ""Провести""
	|					И ВТ_ТабСообщений_Внешняя.Документ.Проведен = ИСТИНА
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И &УсловиеОрганизации
	|";
	
	Если ЕстьМетаданныеХраненияОрганизации Тогда
		
		ТекстУсловияОрганизации = "		IsNull(ВТ_ТабСообщений_Внешняя.Документ.Организация,ВТ_ТабСообщений_Внешняя.Организация) В (&СписокОрганизаций)";
		
		// если не удалось определить организацию, то будем выводить сообщение в любом случае
		МассивОрганизаций.Добавить(Неопределено);
		ЗапросСКэшемПартнеров.УстановитьПараметр("СписокОрганизаций",МассивОрганизаций);
		
	Иначе
		ТекстУсловияОрганизации = "ИСТИНА";
	КонецЕсли;

	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"&УсловиеОрганизации",ТекстУсловияОрганизации);
	
	Если ИмяКонфигурации1С = "АСТОР" или ИмяКонфигурации1С = "ДалионУМ" Тогда
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Документ.Организация","Документ.Фирма");
	КонецЕсли;	
	Если ИмяКонфигурации1С = "АСТОР" Тогда
		ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Документ.СуммаДокумента","Документ.ИтогоСумма");
	КонецЕсли;
	
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	ЗапросСКэшемПартнеров.Текст = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыводСписка.Партнер,
	|	ВТВыводСписка.ПартнерПредставление,
	|	ВТВыводСписка.ТребуемоеДействие,
	|	ВТВыводСписка.ТипСообщения,
	|	ВТВыводСписка.СообщениеСсылка,
	|	ВТВыводСписка.Статус,
	|	ВТВыводСписка.ТочкаДоставки,
	|	ВТВыводСписка.ТочкаДоставкиПредставление,
	|	ВТВыводСписка.ДатаЗагрузки,
	|	ВТВыводСписка.Направление,
	|	ВТВыводСписка.НомерЗаказа,
	|	ВТВыводСписка.ДатаЗаказа,
	|	ВТВыводСписка.ДатаПоставки,
	|	ВТВыводСписка.Документ,
	|	ВТВыводСписка.АдресДоставки,
	|	ВТВыводСписка.Контрагент,
	|	ВТВыводСписка.Проведен,
	|	ВТВыводСписка.ПометкаУдаления,
	|	ВТВыводСписка.Организация,
	|	ВТВыводСписка.Сумма,
	|	ВТВыводСписка.НомерДокумента,
	|	ВТВыводСписка.ДатаДокумента
	|ИЗ
	|	ВТВыводСписка КАК ВТВыводСписка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТВыводСписка.ДатаДокумента УБЫВ,
	|	ВТВыводСписка.ТипСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеДокументыДляВывода.Партнер,
	|	КОЛИЧЕСТВО(ВТ_ВсеДокументыДляВывода.Партнер) КАК Количество
	|ИЗ
	|	ВТВыводСписка КАК ВТ_ВсеДокументыДляВывода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВсеДокументыДляВывода.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеДокументыДляВывода.ТипСообщения,
	|	КОЛИЧЕСТВО(ВТ_ВсеДокументыДляВывода.ТипСообщения) КАК Количество
	|ИЗ
	|	ВТВыводСписка КАК ВТ_ВсеДокументыДляВывода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВсеДокументыДляВывода.ТипСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеДокументыДляВывода.ТребуемоеДействие,
	|	КОЛИЧЕСТВО(ВТ_ВсеДокументыДляВывода.ТребуемоеДействие) КАК Количество
	|ИЗ
	|	ВТВыводСписка КАК ВТ_ВсеДокументыДляВывода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВсеДокументыДляВывода.ТребуемоеДействие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеДокументыДляВывода.Организация,
	|	КОЛИЧЕСТВО(ВТ_ВсеДокументыДляВывода.Организация) КАК Количество
	|ИЗ
	|	ВТВыводСписка КАК ВТ_ВсеДокументыДляВывода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВсеДокументыДляВывода.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВыводСписка";
	
	Рез=ЗапросСКэшемПартнеров.ВыполнитьПакет();
	
	Если ТипЗнч(ТаблицаРезультата) = Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультата = Рез[0].Выгрузить();//возможно, будем выводить не только в форму, но и для внутренних нужд: например, автоотправка сообщений.
	Иначе
		ТаблицаРезультата.Загрузить(Рез[0].Выгрузить());
	КонецЕсли;
	
	//обнулим запросы, чтобы освободить все временные таблицы и параметры
	ЗапросСКэшемПартнеров_Внутренний = Неопределено;
	ЗапросСКэшемПартнеров = Неопределено;
	
	//и вернем обратно подсчитанные количества сообщений в отборах
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТабКоличествоПартнеров",			Рез[1].Выгрузить());
	СтруктураВозврата.Вставить("ТабКоличествоСообщений",			Рез[2].Выгрузить());
	СтруктураВозврата.Вставить("ТабКоличествоТребуемыхДействий",	Рез[3].Выгрузить());
	СтруктураВозврата.Вставить("ТабКоличествоОрганизаций",			Рез[4].Выгрузить());
	
	Возврат СтруктураВозврата;
	
КонецФункции

//будем разбивать здесь пакетные запросы на отдельные и писать время выполнения каждого по отдельности
//удобно использовать для отладки быстродействия, а также для работы с внешним соединением.
Функция ВыполнитьЗапросСОтладкой(Запрос)
	
	РежимОтладки = Ложь;
	РазбиватьПакетыЗапросов = Ложь;
	
	////включить этот блок для отладки
	//РежимОтладки = Истина;
	//РазбиватьПакетыЗапросов = Истина;
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	
	ТекстыЗапросов = Новый Массив;
	
	Если РазбиватьПакетыЗапросов Тогда
		//разобьем пакетный запрос на отдельные запросы
		Пока ИсходныйТекстЗапроса<>"" Цикл
			ПозицияРазделителя = Найти(ИсходныйТекстЗапроса,";");
			Если ПозицияРазделителя=0 Тогда
				ТекстыЗапросов.Добавить(ИсходныйТекстЗапроса);
				ИсходныйТекстЗапроса="";
			Иначе
				ТекстыЗапросов.Добавить(Лев(ИсходныйТекстЗапроса,ПозицияРазделителя-1));
				ИсходныйТекстЗапроса = Сред(ИсходныйТекстЗапроса,ПозицияРазделителя+1);
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ТекстыЗапросов.Добавить(ИсходныйТекстЗапроса);// включить в том случае, если разбивка будет не нужна. Остальное отключить
	КонецЕсли;	
	
	Для Каждого ТекстЗапроса Из ТекстыЗапросов Цикл
		Запрос.Текст = ТекстЗапроса;
		
		ПредВремя = 0;
		Если РежимОтладки Тогда
			Попытка
				Выполнить("ПредВремя = ТекущаяУниверсальнаяДатаВМиллисекундах()/1000");//не на всех платформах есть
			Исключение
				ПредВремя = ТекущаяДата();
			КонецПопытки;
		КонецЕсли;	
		
		Если ТипЗнч(Запрос)="COMОбъект" 
			И РежимОтладки Тогда
			Результат = СоединениеСХранилищем.ВыполнитьЗапросСОтладкой(Запрос);
		Иначе	
			Результат = Запрос.Выполнить();
		КонецЕсли;	
		
		ВремяВыполнения = 0;
		Если РежимОтладки Тогда
			Попытка
				Выполнить("ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах()/1000)-ПредВремя");
			Исключение
				ВремяВыполнения = ТекущаяДата()-ПредВремя;
			КонецПопытки;
		КонецЕсли;
		
		Если РежимОтладки 
			И ВремяВыполнения > 1 Тогда	//В режиме отладки отобразим тексты запросов, выполнявшиеся дольше, чем девиз вендора.
			Сообщить(Запрос.Текст);
			Сообщить(""+ВремяВыполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьВременныеТаблицыДокументов(РежимРаботы,ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний)
	
	ТаблицаСоединенийДокументов = ПолучитьТаблицуДляСборкиЗапросов(РежимРаботы);
	
	
	Для Каждого СтрокаОписанияТаблицы Из ТаблицаСоединенийДокументов Цикл
		
		ТекстТекущейТаблицы = ПолучитьТекстЗапросаДляТаблицы(СтрокаОписанияТаблицы.ПсевдонимТаблицы,ТаблицаСоединенийДокументов,"ПостроениеСписка");
		ТекстТекущейТаблицы = СтрЗаменить(ТекстТекущейТаблицы,"&Условия","Истина");//сюда будем подставлять нужные условия
		
		Если ВнешнееХранилище Тогда
			//нам нужна строка с индексами
			
			ПозицияНачалаИндексов = Найти(ТекстТекущейТаблицы,"ИНДЕКСИРОВАТЬ ПО");
			СтрокаИндексов = СокрЛП(Сред(ТекстТекущейТаблицы,ПозицияНачалаИндексов+17));
			
			ИмяВременнойТаблицы = "ВТ_"+СтрокаОписанияТаблицы.ТипДокумента;
			
			//+
			ЗапросСКэшемПартнеров_Внутренний.Текст = ТекстТекущейТаблицы
			+"; /////////
			| Выбрать * Из "+ИмяВременнойТаблицы;
			ВТДокументы = ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров_Внутренний).Выгрузить();
			
			СтруктураКолонокПреобразуемыхВСсылки = Новый Структура(
								"Партнер",
								"КонтурEDI_ДополнительныеСправочники"
								);
			ЗапросСКэшемПартнеров.УстановитьПараметр("ВТДокументы",ПоместитьТаблицуВоВнешнююБазу(ВТДокументы,СтруктураКолонокПреобразуемыхВСсылки));
			
			ЗапросСКэшемПартнеров.Текст = "Выбрать * Поместить "+ИмяВременнойТаблицы+" Из &ВТДокументы как ВТДокументы Индексировать по "+СтрокаИндексов;
			
		Иначе
			//выполним запрос в текущей базе
			ЗапросСКэшемПартнеров.Текст  = ТекстТекущейТаблицы;
		КонецЕсли;	
		
		ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
		
	КонецЦикла;	
	
КонецПроцедуры	

//показать действие "Провести заказ" для коротких цепочек: ORDERS или ORDERS+INVOIC
Процедура СформироватьТаблицуДокументовДляПроведенияПоКороткойЦепочке(РежимРаботы,ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц)
	
	ТипДокументаORDERS = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина);
	ПредставлениеORDERS = Метаданные.Документы[ТипДокументаORDERS].Синоним;
		
	ИмяДействияПровестиДокумент = "Провести "+ПредставлениеORDERS;
		
	ЗапросСКэшемПартнеров.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Партнер КАК Партнер,
	|	""ИмяДействияПровестиДокумент"" КАК ТребуемоеДействие,
	|	""ORDERS"" КАК ТипСообщения,
	|	КонтурEDI_Сообщения.Ссылка КАК Сообщение,
	|	КонтурEDI_Сообщения.Документ КАК Документ
	|ПОМЕСТИТЬ ВТ_ПринятыеORDERS
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ДатаДокумента МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
	|	И КонтурEDI_Сообщения.Партнер В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				КонтурEDI_ДополнительныеСправочники.Ссылка
	|			ИЗ
	|				Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|					ПО
	|						КонтурEDI_ДополнительныеСправочники.Ссылка = КонтурEDI_ДополнительныеРеквизиты.Объект
	|							И КонтурEDI_ДополнительныеРеквизиты.Свойство = ""ПроводитьЗаказВсегда""
	|							И КонтурEDI_ДополнительныеРеквизиты.Значение = ИСТИНА
	|							И КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""Партнеры"")
	|	И КонтурEDI_Сообщения.ТребуемоеДействие = ""РаботаЗавершена""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КонтурEDI_Сообщения.Ссылка,
	|	Документ";
	
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"ИмяДействияПровестиДокумент",ИмяДействияПровестиДокумент);
	
	ЗапросСКэшемПартнеров.Выполнить();
	МассивВременныхТаблиц.Добавить("ВТ_ПринятыеORDERS");
	
КонецПроцедуры	

//получает список заказов для отправки сообщения PORDERS
Процедура ВывестиСписокЗаказов_ДляОтправкиPORDERS(ЗапросСКэшемПартнеров,МассивВременныхТаблиц)
	
	ТипДокументаPORDERS = ПолучитьТипЗначенияОбъекта("ИсходящийОбратныйЗаказ",,Истина);
	ТипДокументаORDERS = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина);
	ТребоватьПроведение = Не (ПолучитьКонстантуEDI("ОПНД_"+"PORDERS")=Истина);
	
	ТипСообщения = "PORDERS";
	РежимРаботы = "Поставщик";
	ПредставлениеСообщения = ПеревестиТипСообщения(ТипСообщения);
	
	ДействиеЕслиПроведен = "Отправить "+ПредставлениеСообщения;//временно убрать фильтр.
	ТребоватьПроведение = Не (ПолучитьКонстантуEDI("ОПНД_"+ТипСообщения)=Истина);
	
	НеПроводитьДокументВМодуле = (ПолучитьКонстантуEDI("НПД_"+ТипДокументаPORDERS)=Истина);
	
	Если ТребоватьПроведение Тогда
		СинонимДокумента = Метаданные.Документы[ТипДокументаPORDERS].Синоним;
		Если НеПроводитьДокументВМодуле Тогда
			ДействиеЕслиНеПроведен = "Ожидается проведение: "+СинонимДокумента;
		Иначе	
			ДействиеЕслиНеПроведен = "Провести "+СинонимДокумента;
		КонецЕсли;	
	КонецЕсли;	
	
	//теперь найдем из документов, полученных предыдущим запросом, те, по которым не отправлен PORDERS и не пришел ORDERS
	//их и будем показывать в списке как "Отправить обратный заказ"
	ЗапросСКэшемПартнеров.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыДляPORDERS.Партнер КАК Партнер,
	|	ВТ_ДокументыДляPORDERS.Документ_PORDERS КАК Документ,
	|	ЗНАЧЕНИЕ(Справочник.КонтурEDI_Сообщения.) КАК Сообщение,
	|	ВТ_ДокументыДляPORDERS.Док_Проведен
	|ПОМЕСТИТЬ ВТ_Заказы_Без_ORDERS
	|ИЗ
	|	ВТ_ДокументыДляPORDERS КАК ВТ_ДокументыДляPORDERS
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_ORDERS
	|		ПО ВТ_ДокументыДляPORDERS.Документ_ORDERS = КонтурEDI_ORDERS.Документ
	|			И (КонтурEDI_ORDERS.ТипСообщения = ""ORDERS"")
	|			И (КонтурEDI_ORDERS.Направление = ""Входящее"")
	|ГДЕ
	|	КонтурEDI_ORDERS.Ссылка ЕСТЬ NULL 
	|	И ВТ_ДокументыДляPORDERS.PORDERS
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Заказы_Без_ORDERS.Партнер КАК Партнер,
	|	ВТ_Заказы_Без_ORDERS.Документ КАК Документ,
	|	ЗНАЧЕНИЕ(Справочник.КонтурEDI_Сообщения.) КАК Сообщение,
	|	""PORDERS"" КАК ТипСообщения,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_Заказы_Без_ORDERS.Док_Проведен
	|				И &ТребоватьПроведение
	|			ТОГДА &ДействиеЕслиНеПроведен
	|		ИНАЧЕ &ДействиеЕслиПроведен
	|	КОНЕЦ КАК ТребуемоеДействие
	|ПОМЕСТИТЬ ВТ_Заказы_ДляОтправкиPORDERS
	|ИЗ
	|	ВТ_Заказы_Без_ORDERS КАК ВТ_Заказы_Без_ORDERS
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_PORDERS
	|		ПО ВТ_Заказы_Без_ORDERS.Документ = КонтурEDI_PORDERS.Документ
	|			И (КонтурEDI_PORDERS.ТипСообщения = ""PORDERS"")
	|			И (КонтурEDI_PORDERS.Направление = ""Исходящее"")
	|ГДЕ
	|	КонтурEDI_PORDERS.Ссылка ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Заказы_Без_ORDERS"
	;
	
	ЗапросСКэшемПартнеров.УстановитьПараметр("ДействиеЕслиНеПроведен",ДействиеЕслиНеПроведен);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ДействиеЕслиПроведен",ДействиеЕслиПроведен);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТребоватьПроведение",ТребоватьПроведение);
	
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"ВТ_ДокументыДляPORDERS","ВТ_"+ТипДокументаPORDERS);
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Документ_ORDERS","Док_"+ТипДокументаORDERS);
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Документ_PORDERS","Док_"+ТипДокументаPORDERS);
	
	МассивВременныхТаблиц.Добавить("ВТ_Заказы_ДляОтправкиPORDERS");
			
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

//получает список уведомлений о приемке возвратов (RETREC) для отправки
Процедура СформироватьСписокДокументов_ДляОтправкиRETREC(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц)
	
	Если ВнешнееХранилище Тогда
		Возврат;
	КонецЕсли;
	
	// выбираем все 
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	ТабОтгрузок.Документ КАК Документ,
	                              |	ТабОтгрузок.Партнер КАК Партнер,
	                              |	ВЫБОР
	                              |		КОГДА ТабОтгрузок.Документ.Проведен
	                              |			ТОГДА ""Отправить уведомление о приемке возврата""
	                              |		ИНАЧЕ ""Провести Возврат товаров от покупателя""
	                              |	КОНЕЦ КАК ТребуемоеДействие,
	                              |	ВЫБОР
	                              |		КОГДА ТабОтгрузок.Документ.Проведен
	                              |			ТОГДА ""RETREC""
	                              |		ИНАЧЕ ""RETDES""
	                              |	КОНЕЦ КАК ТипСообщения,
	                              |	ВЫБОР
	                              |		КОГДА ТабОтгрузок.Документ.Проведен
	                              |			ТОГДА НЕОПРЕДЕЛЕНО
	                              |		ИНАЧЕ ТабОтгрузок.Ссылка
	                              |	КОНЕЦ КАК Сообщение
	                              |ПОМЕСТИТЬ ВТ_ПриемкаВозвратов
	                              |ИЗ
	                              |	Справочник.КонтурEDI_Сообщения КАК ТабОтгрузок
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК ТабПриемок
	                              |		ПО ТабОтгрузок.Документ = ТабПриемок.Документ
	                              |			И (ТабПриемок.ТипСообщения = ""RETREC"")
	                              |ГДЕ
	                              |	ТабОтгрузок.ТипСообщения = ""RETDES""
	                              |	И ТабПриемок.Ссылка ЕСТЬ NULL 
	                              |	И ТабОтгрузок.Архив
	                              |
	                              |ИНДЕКСИРОВАТЬ ПО
	                              |	Документ,
	                              |	Партнер,
	                              |	ТипСообщения";
								  
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);

	МассивВременныхТаблиц.Добавить("ВТ_ПриемкаВозвратов");
	
КонецПроцедуры

//получает список корректировочных и исправительных СФ для отправки
Процедура СформироватьСписокДокументов_ДляОтправкиКоррИспрINVOIC(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц);

	Если Не ЕстьКоррИспрСФ Тогда
		Возврат;
	КонецЕсли;
	
	// выбрать все корректировки реализации по нашим контрагентам
	// найти у них реализации и заказы 	// присоединить блокирующее сообщение
	
	ТекстЗапросаПоДокументам = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Документ,
	|	ТаблицаКэшПартнеровКонтрагентов.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|			ТОГДА ""Отправить счет-фактуру""
	|		ИНАЧЕ ""Отправить корректировочный счет-фактуру""
	|	КОНЕЦ КАК ТребуемоеДействие,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|			ТОГДА ""INVOIC""
	|		ИНАЧЕ ""COINVOIC""
	|	КОНЕЦ КАК ТипСообщения,
	|	СчетФактура_ИсходнойСФ.Ссылка КАК СчетФактураИсходнойСФ_Ссылка
	|ПОМЕСТИТЬ ВТ_Документы_КоррИспрСФ
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКэшПартнеровКонтрагентов КАК ТаблицаКэшПартнеровКонтрагентов
	|		ПО (ТаблицаКэшПартнеровКонтрагентов.Контрагент = КорректировкаРеализации.Контрагент)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|			ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
	|		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = КорректировкаРеализации.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактура_ИсходнойСФ
	|		ПО (СчетФактура_ИсходнойСФ.ДокументОснование = КорректировкаРеализации.ДокументРеализации)
	|ГДЕ
	|	КорректировкаРеализации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КорректировкаРеализации.Проведен
	|	И НЕ СчетФактураВыданный.ПометкаУдаления
	|	И (КорректировкаРеализации.ДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ИЛИ КорректировкаРеализации.ДокументРеализации ССЫЛКА Документ.КорректировкаРеализации)
	|	И ВЫБОР
	|			КОГДА КорректировкаРеализации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|				ТОГДА ТаблицаКэшПартнеровКонтрагентов.INVOIC
	|						И НЕ ТаблицаКэшПартнеровКонтрагентов.НеОтправлять_I_INVOIC
	|			ИНАЧЕ ТаблицаКэшПартнеровКонтрагентов.COINVOIC
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	Документ,
	|	ТипСообщения";
	
	ТекстЗапросаПоСообщениям = 
	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы_КоррИспрСФ.Документ КАК Документ,
	|	ВТ_Документы_КоррИспрСФ.Партнер КАК Партнер,
	|	ВТ_Документы_КоррИспрСФ.ТребуемоеДействие КАК ТребуемоеДействие,
	|	ВТ_Документы_КоррИспрСФ.ТипСообщения КАК ТипСообщения,
	|	КонтурEDI_INVOIC.Ссылка КАК Сообщение
	|ПОМЕСТИТЬ ВТ_КоррИспрСФ
	|ИЗ
	|	ВТ_Документы_КоррИспрСФ КАК ВТ_Документы_КоррИспрСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_COINVOIC
	|		ПО ВТ_Документы_КоррИспрСФ.Документ = КонтурEDI_COINVOIC.Документ
	|			И (КонтурEDI_COINVOIC.ТипСообщения = ""COINVOIC""
	|				ИЛИ КонтурEDI_COINVOIC.ТипСообщения = ""INVOIC"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_INVOIC
	|		ПО (КонтурEDI_INVOIC.ТипСообщения = ""COINVOIC""
	|				ИЛИ КонтурEDI_INVOIC.ТипСообщения = ""INVOIC"")
	|			И (КонтурEDI_INVOIC.Архив
	|				ИЛИ КонтурEDI_INVOIC.ТребуемоеДействие = ""ИсправитьОшибки"")
	|			И ВТ_Документы_КоррИспрСФ.СчетФактураИсходнойСФ_Ссылка = КонтурEDI_INVOIC.Документ
	|ГДЕ
	|	КонтурEDI_COINVOIC.Ссылка ЕСТЬ NULL ";
	
	Если ИмяКонфигурации1С="УФ_УТ" Тогда
		 ТекстЗапросаПоДокументам = УФ_СформироватьТекстЗапросаДляОтправкиКоррИспрINVOIC();
	КонецЕсли;
	 
	Если ВнешнееХранилище Тогда
		//нам нужна строка с индексами
		
		ПозицияНачалаИндексов = Найти(ТекстЗапросаПоДокументам,"ИНДЕКСИРОВАТЬ ПО");
		СтрокаИндексов = СокрЛП(Сред(ТекстЗапросаПоДокументам,ПозицияНачалаИндексов+17));
		
		ИмяВременнойТаблицы = "ВТ_Документы_КоррИспрСФ";
		
		ЗапросСКэшемПартнеров_Внутренний.Текст = ТекстЗапросаПоДокументам
		+"; /////////
		| Выбрать * Из "+ИмяВременнойТаблицы;
		ВТДокументы = ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров_Внутренний).Выгрузить();
		
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура(
							"Партнер",
							"КонтурEDI_ДополнительныеСправочники"
							);
		ЗапросСКэшемПартнеров.УстановитьПараметр("ВТДокументы",ПоместитьТаблицуВоВнешнююБазу(ВТДокументы,СтруктураКолонокПреобразуемыхВСсылки));
		
		ЗапросСКэшемПартнеров.Текст = "Выбрать * Поместить "+ИмяВременнойТаблицы+" Из &ВТДокументы как ВТДокументы Индексировать по "+СтрокаИндексов;
		
	Иначе
		//выполним запрос в текущей базе
		ЗапросСКэшемПартнеров.Текст  = ТекстЗапросаПоДокументам;
	КонецЕсли;	
	
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	ЗапросСКэшемПартнеров.Текст = ТекстЗапросаПоСообщениям;
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
 	МассивВременныхТаблиц.Добавить("ВТ_КоррИспрСФ");

КонецПроцедуры

//универсальная процедура для формирования запроса на отправку/ожидания сообщения - и со стороны ТС, и со стороны поставщика. Проведение кинуть сюда же
Процедура СформироватьСписокДокументов_ДляОтправкиОжиданияСообщений(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,ТипСообщения)
	
	ПредставлениеСообщения = ПеревестиТипСообщения(ТипСообщения);
	
	//еще надо определить, входящее у нас сообщение или исходящее
	Если ПолучитьНаправлениеСообщения(ТипСообщения,РежимРаботы) = "Входящее" Тогда
		ДействиеЕслиПроведен = "Ожидайте "+ПредставлениеСообщения;//временно убрать фильтр.
		ТребоватьПроведение = Ложь;//Для получения входящих сообщений нам не надо проводить документ.
	Иначе	
		ДействиеЕслиПроведен = "Отправить "+ПредставлениеСообщения;//временно убрать фильтр.
		ТребоватьПроведение = Не (ПолучитьКонстантуEDI("ОПНД_"+ТипСообщения)=Истина);
	КонецЕсли;	
	
	ТипДокумента = ПолучитьНазваниеТипаДокументаПоТипуСообщения(ТипСообщения,РежимРаботы);
	НеПроводитьДокументВМодуле = (ПолучитьКонстантуEDI("НПД_"+ТипДокумента)=Истина);
	
	Если ТребоватьПроведение Тогда
		СинонимДокумента = Метаданные.Документы[ТипДокумента].Синоним;
		Если НеПроводитьДокументВМодуле Тогда
			ДействиеЕслиНеПроведен = "Ожидается проведение: "+СинонимДокумента;
		Иначе	
			ДействиеЕслиНеПроведен = "Провести "+СинонимДокумента;
		КонецЕсли;	
	КонецЕсли;	
	
	//теперь сам запрос
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыДляОтправки.Партнер КАК Партнер,
	|	ВТ_ДокументыДляОтправки.ОтправляемыйДокумент КАК ДокументДляОтправки,
	|	ВТ_ДокументыДляОтправки.СуммаДокумента КАК СуммаДокумента,
	|	NULL КАК СуммаСообщения,
	|	ВТ_ДокументыДляОтправки.PORDERS,
	|	ВТ_ДокументыДляОтправки.ORDERS,
	|	ВТ_ДокументыДляОтправки.ORDRSP,
	|	ВТ_ДокументыДляОтправки.DESADV,
	|	ВТ_ДокументыДляОтправки.RECADV,
	|	ВТ_ДокументыДляОтправки.INVOIC,
	|	ВТ_ДокументыДляОтправки.Док_Проведен КАК Док_Проведен,
	|	&ПолеБлокирующегоСообщения КАК ТипПредыдущегоСообщения,
	|	ВЫБОР
	|		КОГДА &ПолеБлокирующегоСообщения = ""PORDERS""
	|			ТОГДА &ДокументЦепочки_PORDERS
	|		КОГДА &ПолеБлокирующегоСообщения = ""ORDERS""
	|			ТОГДА &ДокументЦепочки_ORDERS
	|		КОГДА &ПолеБлокирующегоСообщения = ""ORDRSP""
	|			ТОГДА &ДокументЦепочки_ORDRSP
	|		КОГДА &ПолеБлокирующегоСообщения = ""DESADV""
	|			ТОГДА &ДокументЦепочки_DESADV
	|		КОГДА &ПолеБлокирующегоСообщения = ""RECADV""
	|			ТОГДА &ДокументЦепочки_RECADV
	|		КОГДА &ПолеБлокирующегоСообщения = ""INVOIC""
	|			ТОГДА &ДокументЦепочки_INVOIC
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПредыдущийДокументЦепочки
	|ПОМЕСТИТЬ ВТ_НеотправленныеСообщения
	|ИЗ
	|	ВТ_ДокументыДляОтправки КАК ВТ_ДокументыДляОтправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КонтурEDI_Сообщения.Ссылка КАК Ссылка,
	|			КонтурEDI_Сообщения.ТипСообщения КАК ТипСообщения,
	|			КонтурEDI_Сообщения.Документ КАК Документ
	|		ИЗ
	|			Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ГДЕ
	|			КонтурEDI_Сообщения.Документ В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ДокументыДляОтправки.ОтправляемыйДокумент
	|					ИЗ
	|						ВТ_ДокументыДляОтправки КАК ВТ_ДокументыДляОтправки)) КАК КонтурEDI_Сообщения_УжеСуществующие
	|		ПО (КонтурEDI_Сообщения_УжеСуществующие.ТипСообщения = &ТипСообщенияДляОтправки)
	|			И ВТ_ДокументыДляОтправки.ОтправляемыйДокумент = КонтурEDI_Сообщения_УжеСуществующие.Документ
	|ГДЕ
	|	&ПолеТипаСообщенияДляОтправки
	|	И КонтурEDI_Сообщения_УжеСуществующие.Ссылка ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ДокументДляОтправки,
	|	ПредыдущийДокументЦепочки,
	|	ТипПредыдущегоСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_НеотправленныеСообщения.Партнер,
	|	ВТ_НеотправленныеСообщения.ДокументДляОтправки КАК Документ,
	|	&ТипСообщенияДляОтправки КАК ТипСообщения,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_НеотправленныеСообщения.Док_Проведен
	|				И &ТребоватьПроведение
	|			ТОГДА &ДействиеЕслиНеПроведен
	|		ИНАЧЕ &ДействиеЕслиПроведен
	|	КОНЕЦ КАК ТребуемоеДействие,
	|	"""" КАК СтатусДокумента,
	|	ВТ_НеотправленныеСообщения.СуммаДокумента,
	|	ВТ_НеотправленныеСообщения.СуммаСообщения,
	|	КонтурEDI_Сообщения_Блокирующие.Ссылка КАК Сообщение
	|ПОМЕСТИТЬ ВТ_ОтправитьСообщения_
	|ИЗ
	|	ВТ_НеотправленныеСообщения КАК ВТ_НеотправленныеСообщения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения_Блокирующие
	|		ПО ВТ_НеотправленныеСообщения.ТипПредыдущегоСообщения = КонтурEDI_Сообщения_Блокирующие.ТипСообщения
	|			И ВТ_НеотправленныеСообщения.ПредыдущийДокументЦепочки = КонтурEDI_Сообщения_Блокирующие.Документ
	|			И (КонтурEDI_Сообщения_Блокирующие.Архив)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_НеотправленныеСообщения.ТипПредыдущегоСообщения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КонтурEDI_Сообщения_Блокирующие.Ссылка ЕСТЬ НЕ NULL 
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА КонтурEDI_Сообщения_Блокирующие.Партнер ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА КонтурEDI_Сообщения_Блокирующие.Партнер = ЗНАЧЕНИЕ(Справочник.КонтурEDI_ДополнительныеСправочники.ПустаяССылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ КонтурEDI_Сообщения_Блокирующие.Партнер = ВТ_НеотправленныеСообщения.Партнер
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Сообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НеотправленныеСообщения"
	;
	
	ЗапросСКэшемПартнеров.УстановитьПараметр("ДействиеЕслиНеПроведен",ДействиеЕслиНеПроведен);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ДействиеЕслиПроведен",ДействиеЕслиПроведен);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТребоватьПроведение",ТребоватьПроведение);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТипСообщенияДляОтправки",ТипСообщения);
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПолеТипаСообщенияДляОтправки","ВТ_ДокументыДляОтправки."+ТипСообщения);
	
	Если ТипСообщения="ORDERS" И РежимРаботы = "Покупатель" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПолеБлокирующегоСообщения","""""");
		//в режиме торговой сети нам не нужен входящий PORDERS, чтобы отправить уже существующий ЗаказПоставщику
	ИначеЕсли ТипСообщения="ORDERS" И РежимРаботы = "Поставщик" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПолеБлокирующегоСообщения",
		"Выбор Когда ВТ_ДокументыДляОтправки.PORDERS Тогда ""PORDERS"" Иначе ""___"" Конец"
		//для случаев, когда в цепочке нет PORDERS, в качестве "блокирующего" сообщения будем указывать несуществующий тип
		//костыль связан с тем, что PORDERS является "не очень обязательным" сообщением
		);
		
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПолеБлокирующегоСообщения","ВТ_ДокументыДляОтправки.СообщениеБлокирующее"+ТипСообщения);
	КонецЕсли;	
	
	ТипДокумента = ПолучитьНазваниеТипаДокументаПоТипуСообщения(ТипСообщения,РежимРаботы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВТ_ДокументыДляОтправки","ВТ_"+ТипДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ОтправляемыйДокумент","Док_"+ТипДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВТ_ОтправитьСообщения_","ВТ_ОтправитьСообщения_"+ТипСообщения);
	
	ЗаменитьНазванияТаблицВТекстеЗапроса(ТекстЗапроса,РежимРаботы);
	
	СтрокиДляЗамены = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
	Для Каждого Стр Из СтрокиДляЗамены Цикл
		ТипДокумента = СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","");
		
		Если ПолучитьМассивПредыдущихСообщений(ТипСообщения).Найти(Стр.ТипСообщения)<>Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДокументЦепочки_"+Стр.ТипСообщения,"Док_"+ТипДокумента);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДокументЦепочки_"+Стр.ТипСообщения,"NULL");
		КонецЕсли;	
	КонецЦикла;
	
	ЗаменитьСсылкиДляВнешнегоХранилищаВЗапросе(ЗапросСКэшемПартнеров.Текст);
	
	МассивВременныхТаблиц.Добавить("ВТ_ОтправитьСообщения_"+ТипСообщения);
	
	ЗапросСКэшемПартнеров.Текст = ТекстЗапроса;
	
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры


//универсальная процедура для вывода треб.действия "Создать документ" - и со стороны ТС, и со стороны поставщика
Процедура СформироватьСписокДокументов_ДляСозданияСледующего(РежимРаботы,ЗапросСКэшемПартнеров,МассивВременныхТаблиц,ТипСообщения,ИмяТекущегоДокумента,ИмяСоздаваемогоДокумента)

	СоздаватьПоНепроведенномуОснованию = (ПолучитьКонстантуEDI("СПНО_"+ИмяСоздаваемогоДокумента)=Истина);
	НеСоздаватьДокументВМодуле = (ПолучитьКонстантуEDI("НСД_"+ИмяСоздаваемогоДокумента)=Истина);
	НеПроводитьДокументОснованиеВМодуле = (ПолучитьКонстантуEDI("НПД_"+ИмяТекущегоДокумента)=Истина);

	//Если стоит флаг "Не создавать в модуле" и одновременно "Создавать по непроведенному", то флаг "Не создавать в модуле" приоритетнее
	СинонимСоздаваемогоДокумента = Метаданные.Документы[ИмяСоздаваемогоДокумента].Синоним;
	Если НеСоздаватьДокументВМодуле Тогда
		ДействиеЕслиНеПроведен = "Ожидается создание: "+СинонимСоздаваемогоДокумента;
		ДействиеЕслиПроведен = "Ожидается создание: "+СинонимСоздаваемогоДокумента;
	Иначе	//создаем из модуля
		ДействиеЕслиПроведен = "Создать "+СинонимСоздаваемогоДокумента;
		Если СоздаватьПоНепроведенномуОснованию Тогда
			ДействиеЕслиНеПроведен = "Создать "+СинонимСоздаваемогоДокумента;
		Иначе
			СинонимТекущегоДокумента = Метаданные.Документы[ИмяТекущегоДокумента].Синоним;
			Если НеПроводитьДокументОснованиеВМодуле Тогда
				ДействиеЕслиНеПроведен = "Ожидается проведение: "+СинонимТекущегоДокумента;
			Иначе
				ДействиеЕслиНеПроведен = "Провести "+СинонимТекущегоДокумента;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДокументыДляОтправки.Партнер КАК Партнер,
	|	ВТ_ДокументыДляОтправки.ОтправляемыйДокумент КАК ДокументДляОтправки,
	|	ВТ_ДокументыДляОтправки.СуммаДокумента КАК СуммаДокумента,
	|	NULL КАК СуммаСообщения,
	|	ВТ_ДокументыДляОтправки.PORDERS,
	|	ВТ_ДокументыДляОтправки.ORDERS,
	|	ВТ_ДокументыДляОтправки.ORDRSP,
	|	ВТ_ДокументыДляОтправки.DESADV,
	|	ВТ_ДокументыДляОтправки.RECADV,
	|	ВТ_ДокументыДляОтправки.INVOIC,
	|	ВТ_ДокументыДляОтправки.Док_Проведен КАК Док_Проведен,
	|	&ПолеБлокирующегоСообщения КАК ТипПредыдущегоСообщения,
	|	ВЫБОР
	|		КОГДА &ПолеБлокирующегоСообщения = ""PORDERS""
	|			ТОГДА &ДокументЦепочки_PORDERS
	|		КОГДА &ПолеБлокирующегоСообщения = ""ORDERS""
	|			ТОГДА &ДокументЦепочки_ORDERS
	|		КОГДА &ПолеБлокирующегоСообщения = ""ORDRSP""
	|			ТОГДА &ДокументЦепочки_ORDRSP
	|		КОГДА &ПолеБлокирующегоСообщения = ""DESADV""
	|			ТОГДА &ДокументЦепочки_DESADV
	|		КОГДА &ПолеБлокирующегоСообщения = ""RECADV""
	|			ТОГДА &ДокументЦепочки_RECADV
	|		КОГДА &ПолеБлокирующегоСообщения = ""INVOIC""
	|			ТОГДА &ДокументЦепочки_INVOIC
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПредыдущийДокументЦепочки,
	|	&СледующийДокументЦепочки КАК СледующийДокументЦепочки
	|ПОМЕСТИТЬ ВТ_ОтсутствующиеДокументы
	|ИЗ
	|	ВТ_ДокументыДляОтправки КАК ВТ_ДокументыДляОтправки
	|ГДЕ
	|	&ПолеТипаСообщенияДляОтправки
	|	И &СледующийДокументЦепочки ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ДокументДляОтправки,
	|	ПредыдущийДокументЦепочки,
	|	ТипПредыдущегоСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ОтсутствующиеДокументы.Партнер,
	|	ВТ_ОтсутствующиеДокументы.ДокументДляОтправки КАК Документ,
	|	&ТипСообщенияДляОтправки КАК ТипСообщения,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_ОтсутствующиеДокументы.Док_Проведен
	|				И &ТребоватьПроведение
	|			ТОГДА &ДействиеЕслиНеПроведен
	|		ИНАЧЕ &ДействиеЕслиПроведен
	|	КОНЕЦ КАК ТребуемоеДействие,
	|	"""" КАК СтатусДокумента,
	|	ВТ_ОтсутствующиеДокументы.СуммаДокумента,
	|	ВТ_ОтсутствующиеДокументы.СуммаСообщения,
	|	КонтурEDI_Сообщения_Блокирующие.Ссылка КАК Сообщение
	|ПОМЕСТИТЬ ВТ_СоздатьДокументы_
	|ИЗ
	|	ВТ_ОтсутствующиеДокументы КАК ВТ_ОтсутствующиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения_Блокирующие
	|		ПО ВТ_ОтсутствующиеДокументы.ТипПредыдущегоСообщения = КонтурEDI_Сообщения_Блокирующие.ТипСообщения
	|			И ВТ_ОтсутствующиеДокументы.ПредыдущийДокументЦепочки = КонтурEDI_Сообщения_Блокирующие.Документ
	|			И (КонтурEDI_Сообщения_Блокирующие.Архив)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ОтсутствующиеДокументы.ТипПредыдущегоСообщения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КонтурEDI_Сообщения_Блокирующие.Ссылка ЕСТЬ НЕ NULL 
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА КонтурEDI_Сообщения_Блокирующие.Партнер ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА КонтурEDI_Сообщения_Блокирующие.Партнер = ЗНАЧЕНИЕ(Справочник.КонтурEDI_ДополнительныеСправочники.ПустаяССылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ КонтурEDI_Сообщения_Блокирующие.Партнер = ВТ_ОтсутствующиеДокументы.Партнер
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Сообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОтсутствующиеДокументы"
	;
	
	ЗапросСКэшемПартнеров.УстановитьПараметр("ДействиеЕслиНеПроведен",ДействиеЕслиНеПроведен);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ДействиеЕслиПроведен",ДействиеЕслиПроведен);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТребоватьПроведение",Не СоздаватьПоНепроведенномуОснованию);
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТипСообщенияДляОтправки",ТипСообщения);
	
	Если ТипСообщения = "DESADV" Тогда
		ТекстУсловия = "(ВТ_ДокументыДляОтправки.DESADV ИЛИ ВТ_ДокументыДляОтправки.RECADV ИЛИ ВТ_ДокументыДляОтправки.INVOIC)";		
	Иначе
		ТекстУсловия = "ВТ_ДокументыДляОтправки."+ТипСообщения;
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПолеТипаСообщенияДляОтправки",ТекстУсловия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ПолеБлокирующегоСообщения","ВТ_ДокументыДляОтправки.СообщениеБлокирующее"+ТипСообщения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&СледующийДокументЦепочки","ВТ_ДокументыДляОтправки.Док_"+ИмяСоздаваемогоДокумента);
	
	ТипДокумента = ПолучитьНазваниеТипаДокументаПоТипуСообщения(ТипСообщения,РежимРаботы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВТ_ДокументыДляОтправки","ВТ_"+ИмяТекущегоДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ОтправляемыйДокумент","Док_"+ИмяТекущегоДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВТ_СоздатьДокументы_","ВТ_СоздатьДокументы_"+ИмяСоздаваемогоДокумента);

	ЗаменитьНазванияТаблицВТекстеЗапроса(ТекстЗапроса,РежимРаботы);
	
	СтрокиДляЗамены = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",РежимРаботы));
	Для Каждого Стр Из СтрокиДляЗамены Цикл
		
		Если Стр.ПорядокСообщения = -1 Тогда
			Продолжить;//костыль для RETANN
		КонецЕсли;	
		
		ТипДокумента = СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","");
		
		Если ПолучитьМассивПредыдущихСообщений(ТипСообщения).Найти(Стр.ТипСообщения)<>Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДокументЦепочки_"+Стр.ТипСообщения,"Док_"+ТипДокумента);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ДокументЦепочки_"+Стр.ТипСообщения,"NULL");
		КонецЕсли;	
	КонецЦикла;
	
	МассивВременныхТаблиц.Добавить("ВТ_СоздатьДокументы_"+ИмяСоздаваемогоДокумента);
	
	ЗапросСКэшемПартнеров.Текст = ТекстЗапроса;
	
	ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

Функция ПолучитьМассивПредыдущихСообщений(ТипСообщения)
	
	Если ТипСообщения = "INVOIC" Тогда
		МассивПредыдущихСообщений = EDI_РазложитьСтрокуВМассивСлов("RECADV,DESADV,ORDRSP,ORDERS,PORDERS",",");
	ИначеЕсли ТипСообщения = "RECADV" Тогда
		МассивПредыдущихСообщений = EDI_РазложитьСтрокуВМассивСлов("DESADV,ORDRSP,ORDERS,PORDERS",",");
	ИначеЕсли ТипСообщения = "DESADV" Тогда
		МассивПредыдущихСообщений = EDI_РазложитьСтрокуВМассивСлов("ORDRSP,ORDERS,PORDERS",",");
	ИначеЕсли ТипСообщения = "ORDRSP" Тогда
		МассивПредыдущихСообщений = EDI_РазложитьСтрокуВМассивСлов("ORDERS,PORDERS",",");
	ИначеЕсли ТипСообщения = "ORDERS" Тогда
		МассивПредыдущихСообщений = EDI_РазложитьСтрокуВМассивСлов("PORDERS",",");
	ИначеЕсли ТипСообщения = "PORDERS" Тогда
		МассивПредыдущихСообщений = Новый Массив;
		//для PORDERS пустой
	КонецЕсли;	

	Возврат МассивПредыдущихСообщений;
	
КонецФункции	

Процедура ЗаменитьНазванияТаблицВТекстеЗапроса(ТекстЗапроса,_РежимРаботы="Поставщик/Покупатель")
	
	СтрокиДляЗамены = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона",_РежимРаботы));
	Для Каждого Стр Из СтрокиДляЗамены Цикл
		ТипДокумента = СтрЗаменить(Стр.ИмяТипа,"ДокументСсылка.","");
		//ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВТ_ДокументыДляОтправки_"+Стр.ТипСообщения,"ВТ_"+ТипДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ_"+Стр.ТипСообщения,"Док_"+ТипДокумента);
	КонецЦикла;
	
КонецПроцедуры	

Функция ПолучитьНазваниеТипаДокументаПоТипуСообщения(ТипСообщения,_РежимРаботы)
	Строки = ТаблицаТипов.НайтиСтроки(Новый Структура("Сторона,ТипСообщения",_РежимРаботы,ТипСообщения));
	Если Строки.Количество()=1 Тогда
		Возврат СтрЗаменить(Строки[0].ИмяТипа,"ДокументСсылка.","");
	Иначе
		ВызватьИсключение "Неправильно настроен шаблон цепочки";
		Возврат "";
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьНаправлениеСообщения(ТипСообщения,_РежимРаботы) Экспорт
	Если _РежимРаботы = "Поставщик" Тогда
		Если ТипСообщения = "PORDERS"
			Или ТипСообщения = "ORDRSP"
			Или ТипСообщения = "DESADV"
			Или ТипСообщения = "INVOIC"
			Или ТипСообщения = "COINVOIC"
			Или ТипСообщения = "RETREC"
		Тогда
			Возврат "Исходящее";
		Иначе
			Возврат "Входящее";
		КонецЕсли;	
	ИначеЕсли _РежимРаботы = "Покупатель" Тогда
		Если ТипСообщения = "ORDERS"
			Или ТипСообщения = "RECADV"
			Или ТипСообщения = "RETANN"
			Или ТипСообщения = "RETDES"
		Тогда
			Возврат "Исходящее";
		Иначе
			Возврат "Входящее";
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции	

Функция ПеревестиТипСообщения(ТипСообщения) Экспорт
	Результат = "";
	Если ТипСообщения="PORDERS" Тогда
		Результат = "обратный заказ";
	ИначеЕсли ТипСообщения="ORDERS" Тогда
		Результат = "заказ";
	ИначеЕсли ТипСообщения="ORDRSP" Тогда
		Результат = "подтверждение заказа";
	ИначеЕсли ТипСообщения="DESADV" Тогда
		Результат = "уведомление об отгрузке";
	ИначеЕсли ТипСообщения="RECADV" Тогда
		Результат = "уведомление о приемке";
	ИначеЕсли ТипСообщения="INVOIC" Тогда
		Результат = "счет-фактуру";
	ИначеЕсли ТипСообщения="COINVOIC" Тогда
		Результат = "корректировочный счет-фактуру";
	ИначеЕсли ТипСообщения="RETANN" Тогда
		Результат = "возврат";
	ИначеЕсли ТипСообщения="RETREC" Тогда
		Результат = "уведомление о приемке возврата";
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Для удобной навигации по цепочке документов.
//Например, в сообщении INVOIC надо по текущему документу 1С найти документ, относящийся к DESADV,
// и при этом не перебирать "ДокументыОснования", "ДокументОснование" и т.д.
Функция НайтиСвязанныйДокументПоТипуСообщения(ИсходныйДокумент,НужныйТипСообщения) Экспорт
	
	ТаблицаЦепочкиДокументов = ПолучитьТаблицуСвязанныхДокументовПоТипамСообщений(ИсходныйДокумент);
	
	// проверяем чтобы было заполнено значение соответствовало требованиям:
	//	- было не пустое значение в колонке с нужным типом сообщения
	//	- в этой строке встретилась хотя бы один раз ссылка на исходный документ
	Для Каждого Стр ИЗ ТаблицаЦепочкиДокументов Цикл
		Если ЗначениеЗаполнено(Стр["Документ_"+НужныйТипСообщения]) Тогда
			Для Каждого Колонка ИЗ ТаблицаЦепочкиДокументов.Колонки Цикл	
				Если Стр[Колонка.Имя] = ИсходныйДокумент Тогда
					Возврат Стр["Документ_"+НужныйТипСообщения];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//НужныйДокумент = Неопределено;
	//
	//ПодходящаяСтрока = ТаблицаЦепочкиДокументов.Найти(ИсходныйДокумент);
	////если мы ищем связанные документы по ЗаказуПокупателя, и на один входящий ORDERS было создано несколько ЗаказовПокупателя, то нам надо найти именно "наш".
	//
	//Если ПодходящаяСтрока<>Неопределено
	//	И ЗначениеЗаполнено(ПодходящаяСтрока["Документ_"+НужныйТипСообщения]) Тогда
	//	Возврат ПодходящаяСтрока["Документ_"+НужныйТипСообщения];
	//КонецЕсли;
					
	Возврат Неопределено;
	
КонецФункции

// Заполняет ДеревоФильтров - ДеревоЗначений в левой панели отборов главной формы (обычной и управляемой)
Процедура ЗаполнитьДеревоОтборовОсновнойФормы(ДеревоФильтров,НастройкиПерезаполнения,РежимРаботы,ПоказыватьЗавершенные,НастройкаОформленияТребуемогоДействия) Экспорт
	
	Если НастройкиПерезаполнения.ПерезаполнятьПартнеров Тогда
		//партнеры
		Партнеры = ПолучитьСписокЭлементовСправочника("Партнеры");
		
		СтрокаГруппировкиПартнеров = ДеревоФильтров.Строки.Найти("Партнеры","ГруппаНастроек");
		
		Если НЕ ЗначениеЗаполнено(СтрокаГруппировкиПартнеров) Тогда
			
			СтрокаГруппировкиПартнеров = ДобавитьСтрокуДереваФильтров(ДеревоФильтров, "Партнеры", "Партнеры", "Партнеры", БиблиотекаКартинок.СоздатьЭлементСписка);
			
		КонецЕсли;
					
		СтрокаГруппировкиПартнеров.Строки.Очистить();
		Для Каждого Эл из Партнеры Цикл
			
			Если (РежимРаботы = "Поставщик" И Эл.ТорговаяСеть<>Истина)
				Или (РежимРаботы = "Покупатель" И Эл.Поставщик<>Истина)
			Тогда
			    //не будем показывать лишних партнеров
				Продолжить;
			КонецЕсли;	
			
			// не будем показывать недоступных партнеров
			Если ЗначениеЗаполнено(ПараметрыПользователяEDI.НедоступныеПартнеры) Тогда
				Если НЕ ПараметрыПользователяEDI.НедоступныеПартнеры.Найти(Эл.Ссылка) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьСтрокуДереваФильтров(СтрокаГруппировкиПартнеров, Эл.Ссылка, Эл.Наименование, "Партнеры", БиблиотекаКартинок.Изменить);
			
		КонецЦикла;	
	КонецЕсли;
	
	Если НастройкиПерезаполнения.ПерезаполнятьОрганизации Тогда
		
		СтрокаГруппировкиОрганизаций = ДеревоФильтров.Строки.Найти("Организации","ГруппаНастроек");
		Если НЕ ЗначениеЗаполнено(СтрокаГруппировкиОрганизаций) Тогда
			
			СтрокаГруппировкиОрганизаций = ДобавитьСтрокуДереваФильтров(ДеревоФильтров, "Организации", "Организации", "Организации", "");
			
		КонецЕсли;	
		
		СтрокаГруппировкиОрганизаций.Строки.Очистить();
		
		СписокЮрЛиц = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
	
		Для каждого Стр ИЗ СписокЮрЛиц Цикл
			
			Если ЗначениеЗаполнено(ПараметрыПользователяEDI.НедоступныеОрганизации) Тогда
				Если НЕ ПараметрыПользователяEDI.НедоступныеОрганизации.Найти(Стр.ЮрФизЛицо) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьСтрокуДереваФильтров(СтрокаГруппировкиОрганизаций, Стр.ЮрФизЛицо, Стр.ЮрФизЛицо, "Организации");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НастройкиПерезаполнения.ПерезаполнятьТипыСообщений Тогда
		
		СтруктураДоступностиТиповСообщений = Новый Структура;
		СтруктураДоступностиТиповСообщений.Вставить("PORDERS",		Истина);
		СтруктураДоступностиТиповСообщений.Вставить("ORDERS",		Истина);
		СтруктураДоступностиТиповСообщений.Вставить("ORDRSP",		Истина);
		СтруктураДоступностиТиповСообщений.Вставить("DESADV",		Истина);
		СтруктураДоступностиТиповСообщений.Вставить("RECADV",		Истина);
		СтруктураДоступностиТиповСообщений.Вставить("INVOIC",		Истина);
		СтруктураДоступностиТиповСообщений.Вставить("COINVOIC",		РежимРаботы = "Поставщик");
		СтруктураДоступностиТиповСообщений.Вставить("RETANN",		Истина);
		
		Если НЕ Лев(ИмяКонфигурации1С,3)="УФ_" Тогда
			//RETDES и RETREC пока реализованы только на обычных формах
			СтруктураДоступностиТиповСообщений.Вставить("RETDES",		Истина);
			СтруктураДоступностиТиповСообщений.Вставить("RETREC",		Истина);
		КонецЕсли;
		
		СтруктураДоступностиТиповСообщений.Вставить("PRICELIST",	ПолучитьКонстантуEDI("МыПоставщик")=Истина);
		
		НедоступныеДокументы = ПараметрыПользователяEDI.НедоступныеДокументы;
		НедоступныеСообщения = ПараметрыПользователяEDI.НедоступныеСообщения;
		
		Если НЕ НедоступныеДокументы = Неопределено Тогда
			Если НЕ НедоступныеДокументы.НайтиПоЗначению("ЗаказПокупателя") = Неопределено Тогда
				СтруктураДоступностиТиповСообщений.Вставить("PORDERS",	Ложь);
				СтруктураДоступностиТиповСообщений.Вставить("ORDERS",	Ложь);
				СтруктураДоступностиТиповСообщений.Вставить("ORDRSP",	Ложь);
			КонецЕсли;
			Если НЕ НедоступныеДокументы.НайтиПоЗначению("РеализацияТоваров") = Неопределено Тогда
				СтруктураДоступностиТиповСообщений.Вставить("DESADV",	Ложь);
				СтруктураДоступностиТиповСообщений.Вставить("RECADV",	Ложь);
			КонецЕсли;
			Если НЕ НедоступныеДокументы.НайтиПоЗначению("СчетФактураВыданный") = Неопределено Тогда
				СтруктураДоступностиТиповСообщений.Вставить("INVOIC",	Ложь);
				СтруктураДоступностиТиповСообщений.Вставить("COINVOIC",	Ложь);
			КонецЕсли;
			Если НЕ НедоступныеДокументы.НайтиПоЗначению("ВозвратТоваров") = Неопределено Тогда
				СтруктураДоступностиТиповСообщений.Вставить("RETANN",	Ложь);
				СтруктураДоступностиТиповСообщений.Вставить("RETDES",	Ложь);
				СтруктураДоступностиТиповСообщений.Вставить("RETREC",	Ложь);
			КонецЕсли;
		КонецЕсли;	
		
		Если НЕ НедоступныеСообщения = Неопределено Тогда
			Для Каждого НедоступноеСообщение Из НедоступныеСообщения Цикл
				СтруктураДоступностиТиповСообщений.Вставить(НедоступноеСообщение.Значение,Ложь);
			КонецЦикла;	
		КонецЕсли;
		
		Если НЕ ЕстьКоррИспрСФ Тогда
			СтруктураДоступностиТиповСообщений.Вставить("COINVOIC",	Ложь);
		КонецЕсли;
		
		СтруктураДоступностиПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьСтруктуруДоступностиТиповСообщений",,
									Новый Структура("СтруктураДоступностиТиповСообщений",
									СтруктураДоступностиТиповСообщений));
		
		Если НЕ СтруктураДоступностиПМ = Неопределено Тогда
			СтруктураДоступностиТиповСообщений = СтруктураДоступностиПМ;
		КонецЕсли;	
	
		СтрокаГруппировкиТиповСообщений = ДеревоФильтров.Строки.Найти("ТипыСообщений","ГруппаНастроек");
		
		Если НЕ ЗначениеЗаполнено(СтрокаГруппировкиТиповСообщений) Тогда
			
			СтрокаГруппировкиТиповСообщений = ДобавитьСтрокуДереваФильтров(ДеревоФильтров, "Типы сообщений", Неопределено, "ТипыСообщений");
			
		КонецЕсли;
		
		СтрокаГруппировкиТиповСообщений.Строки.Очистить();
		Для Каждого Эл ИЗ СтруктураДоступностиТиповСообщений Цикл
			
			ТипСообщения = Эл.Ключ;
			
			Если НЕ Эл.Значение = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			//если у текущего пользователя есть доступ к данному типу сообщений, то добавим его в отборы
			ЭлементИзменить = ?(ТипСообщения = "PRICELIST",БиблиотекаКартинок.СоздатьЭлементСписка,"");
			ДобавитьСтрокуДереваФильтров(СтрокаГруппировкиТиповСообщений, ТипСообщения, Неопределено, "ТипыСообщений", ЭлементИзменить);
			
		КонецЦикла;	
	КонецЕсли;
	
	Если НастройкиПерезаполнения.ПерезаполнятьТребуемыеДействия Тогда
		//требуемые действия
		НастройкаОформленияТребуемогоДействия = ПолучитьТаблицуТребуемыхДействий(РежимРаботы,ПоказыватьЗавершенные);
		
		СтрокаГруппыДействий = ДеревоФильтров.Строки.Найти("ТребуемыеДействия","ГруппаНастроек");
		
		Если НЕ ЗначениеЗаполнено(СтрокаГруппыДействий) Тогда
			
			СтрокаГруппыДействий = ДобавитьСтрокуДереваФильтров(ДеревоФильтров, "Требуемые действия", Неопределено, "ТребуемыеДействия");
			
		КонецЕсли;
		
		СтрокаГруппыДействий.Строки.Очистить();
		ГруппыТребуемыхДействий = НастройкаОформленияТребуемогоДействия.Скопировать(,"Раздел");
		ГруппыТребуемыхДействий.Свернуть("Раздел");
		Для Каждого СтрокаГруппы Из ГруппыТребуемыхДействий Цикл
			
			НовГруппаДерева = ДобавитьСтрокуДереваФильтров(СтрокаГруппыДействий, СтрокаГруппы.Раздел, Неопределено, "ТребуемыеДействия");
			
			ПодчиненныеСтроки = НастройкаОформленияТребуемогоДействия.НайтиСтроки(Новый Структура("Раздел",СтрокаГруппы.Раздел));
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				
				ИконкаУФ = ?(Лев(ИмяКонфигурации1С,3)="УФ_", ПодчиненнаяСтрока.Иконка, Неопределено); 
				ДобавитьСтрокуДереваФильтров(НовГруппаДерева, ПодчиненнаяСтрока.Значение, Неопределено, "ТребуемыеДействия", , ПодчиненнаяСтрока.ИмяКартинки, ИконкаУФ);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьСтрокуДереваФильтров(ТекущаяСтрокаДерева, Значение, Представление, ГруппаНастроек, Изменить=Неопределено, ИмяКартинки=Неопределено, Иконка=Неопределено);
//Функция ДобавитьСтрокуДереваФильтров(ТекущаяСтрокаДерева, Значение, Представление, Изменить, ГруппаНастроек, Пометка, ИмяКартинки=Неопределено)
	
	НоваяСтрокаДерева = ТекущаяСтрокаДерева.Строки.Добавить();
	
	НоваяСтрокаДерева.Значение			= Значение;
	НоваяСтрокаДерева.Представление		= Представление;
	НоваяСтрокаДерева.Изменить			= Изменить;
	НоваяСтрокаДерева.ГруппаНастроек	= ГруппаНастроек;
	НоваяСтрокаДерева.Пометка			= Истина;
	НоваяСтрокаДерева.ИмяКартинки		= ИмяКартинки;
	Если Не Иконка = Неопределено Тогда
		НоваяСтрокаДерева.Иконка		= Иконка;
	КонецЕсли;
	
	Возврат НоваяСтрокаДерева;
	
КонецФункции

//}#КонецОбласти //ПостроениеСпискаЗадач


//{#Область 12_СохранениеНастроек

Функция МожноИзменятьНастройкуОтбора(ИмяНастройки,Действие) Экспорт
	
	Если ИмяНастройки = "Все документы" Тогда
		Возврат Ложь;
	//ИначеЕсли ИмяНастройки = "Мои задачи" И Действие = "Удалить" Тогда
	//	Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
	
Функция ПолучитьКлючСохраненияНастроекОтбора()
	
	Возврат "КонтурEDI/СохраненныеНастройкиСписка";
		
КонецФункции
	
Процедура СохранитьНастройкуОтбора(ИмяНастройки,МассивОтмеченныхПартнеров,МассивОтмеченныхТиповСообщений,МассивОтмеченныхДействий,МассивОтмеченныхОрганизаций,ПоказыватьЗавершенные,РежимРаботы) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("МассивОтмеченныхПартнеров",			МассивОтмеченныхПартнеров);
	СтруктураНастроек.Вставить("МассивОтмеченныхТиповСообщений",	МассивОтмеченныхТиповСообщений);
	СтруктураНастроек.Вставить("МассивОтмеченныхДействий",			МассивОтмеченныхДействий);
	СтруктураНастроек.Вставить("МассивОтмеченныхОрганизаций",		МассивОтмеченныхОрганизаций);
	СтруктураНастроек.Вставить("ПоказыватьЗавершенные",				ПоказыватьЗавершенные);
	СтруктураНастроек.Вставить("РежимРаботы",						РежимРаботы);
	
	Попытка
		Выполнить("ХранилищеОбщихНастроек.Сохранить(ПолучитьКлючСохраненияНастроекОтбора(),ИмяНастройки,СтруктураНастроек);");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСписокНастроекОтбора() Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	Если КонтурEDI_ВерсияПлатформы()<>"81" Тогда
		Попытка
			Выполнить("СписокНастроек = ХранилищеОбщихНастроек.ПолучитьСписок(ПолучитьКлючСохраненияНастроекОтбора());");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат СписокНастроек;
	
КонецФункции

Функция ПолучитьНастройкуОтбора(ИмяНастройки) Экспорт
	
	ЗначениеНастройки = Неопределено;
	Попытка
		Выполнить("ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьКлючСохраненияНастроекОтбора(),ИмяНастройки);");
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

Функция УдалитьНастройкуОтбора(ИмяНастройки) Экспорт
	
	Попытка
		Выполнить("ХранилищеОбщихНастроек.Удалить(ПолучитьКлючСохраненияНастроекОтбора(),ИмяНастройки,ИмяПользователя());");
	Исключение
	КонецПопытки;
	
КонецФункции


//}#КонецОбласти //СохранениеНастроек


//{#Область 13_Автотесты
	
Процедура Автотесты_ОчиститьДанныеМодуля() Экспорт
	
	// во избежание случайного вызова
	Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВнешнееХранилище Тогда
		
		СправочникиДляУдаления = СоединениеСХранилищем.Справочники;
		РегистрыСведенияДляУдаления = СоединениеСХранилищем.РегистрыСведений;
		
	Иначе
		
		СправочникиДляУдаления = Справочники;
		РегистрыСведенияДляУдаления = РегистрыСведений;
		
	КонецЕсли;
	
	Выб=СправочникиДляУдаления.КонтурEDI_ДополнительныеСправочники.Выбрать();
	Пока Выб.Следующий() Цикл
		Об=Выб.ПолучитьОбъект();
		Об.Удалить();//да, так сурово
	КонецЦикла;	
	
	Выб=СправочникиДляУдаления.КонтурEDI_Сообщения.Выбрать();
	Пока Выб.Следующий() Цикл
		Об=Выб.ПолучитьОбъект();
		Об.Удалить();//да, так сурово
	КонецЦикла;	
	
	Выб=СправочникиДляУдаления.КонтурEDI_ТочкиДоставки.Выбрать();
	Пока Выб.Следующий() Цикл
		Об=Выб.ПолучитьОбъект();
		Об.Удалить();//да, так сурово
	КонецЦикла;	
	
	НЗ=РегистрыСведенияДляУдаления.КонтурEDI_ДополнительныеРеквизиты.СоздатьНаборЗаписей();
	НЗ.Записать();
	
	НЗ=РегистрыСведенияДляУдаления.КонтурEDI_СоответствияТоваров.СоздатьНаборЗаписей();
	НЗ.Записать();
	
	НЗ=РегистрыСведенияДляУдаления.КонтурEDI_СтатусыДокументов.СоздатьНаборЗаписей();
	НЗ.Записать();
	
КонецПроцедуры

Процедура Автотесты_УстановитьНачальныеНастройки() Экспорт
	
	// 1. Удаляем все настройки и сообщения
	Автотесты_ОчиститьДанныеМодуля();
	
	ВариантОбмена = ПараметрыАвтотестирования.Настройки.ВариантОбменаДанными;
	
	УстановитьКонстантуEDI("ПротоколОбмена_КонтурEDI",	ВариантОбмена.Вид);
	УстановитьКонстантуEDI("Сервер",						ВариантОбмена.Сервер);
	УстановитьКонстантуEDI("Порт",						21);
	УстановитьКонстантуEDI("АдресКаталогаОбменаEDI",		ВариантОбмена.ПутьККаталогу);
	
	// 2. Устанавливаем настройки структуры компании
	ПолучитьФорму("ФормаСтруктураКомпании_Элемент").ОткрытьМодально();
	
	// 3. Устанавливаем настройки модуля
	ПолучитьФорму("ФормаСервис_Настройка").ОткрытьМодально();
	
	// 4. Устанавливаем настройки партнеров
	ПолучитьФорму("ФормаПартнеры_Элемент").ОткрытьМодально();
	
	// 5. Устанавливаем учетные записи (может в структуру компании их добавить?)
	ПолучитьФорму("ФормаУчетныеЗаписи_Элемент").ОткрытьМодально();
	
	// 6. Получаем выполняемый код
	
	Действия = Новый ТаблицаЗначений;
	Действия.Колонки.Добавить("ФормаОбработки");
	Действия.Колонки.Добавить("ВыполняемыйКод");
	Действия.Колонки.Добавить("Выполнено");
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПараметрыАвтотестирования.КаталогСценария+"\in\source.txt");
	
	ТекстКода	= "";
	НоваяСтрока = Неопределено;

	Для н = 1 По Текст.КоличествоСтрок() Цикл
		
		ТекСтрока = Текст.ПолучитьСтроку(н);
		
		Если СокрЛП(ТекСтрока) = "************НОВЫЙ_ШАГ" Тогда
			
			Если НЕ ТекстКода = "" Тогда
				НоваяСтрока.ВыполняемыйКод = ТекстКода;
			КонецЕсли;
			
			ТекстКода = "";
			
			НоваяСтрока = Действия.Добавить();
			НоваяСтрока.Выполнено = Ложь;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НоваяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ФормаОбработки) Тогда
			
			НоваяСтрока.ФормаОбработки = СокрЛП(ТекСтрока);
			ТекстКода = "";
			
			Продолжить;
			
		КонецЕсли;
			
		ТекстКода = ТекстКода + Символы.ПС+ " " + ТекСтрока;	

	КонецЦикла;
	
	Если НЕ ТекстКода = "" Тогда
		НоваяСтрока.ВыполняемыйКод = ТекстКода;
	КонецЕсли;
	
	ПараметрыАвтотестирования.Вставить("ВыполняемыеДействия",	Действия);
	
	// инициализируем результаты выполнения
	РезультатВыполненияСценария = Новый ТаблицаЗначений();
	РезультатВыполненияСценария.Колонки.Добавить("Имя");
	РезультатВыполненияСценария.Колонки.Добавить("Тип");
	РезультатВыполненияСценария.Колонки.Добавить("Значение");
	
	ПараметрыАвтотестирования.Вставить("РезультатВыполненияСценария",РезультатВыполненияСценария);
	
	ТекстЛога = Новый ТекстовыйДокумент;
	ТекстЛога.Записать(ПараметрыАвтотестирования.КаталогСценария+"\out\log.txt");
	
КонецПроцедуры

Процедура Автотесты_ЗаменитьПеременныеПоШаблону(ТекСообщение)
	
	Для Каждого ПолеСообщения Из ТекСообщение Цикл
		Если НЕ ПолеСообщения.Ключ = "Товары" Тогда
			Если Найти(СокрЛП(ПолеСообщения.Значение),"{**")>0 Тогда
				ШаблонПоляСообщения = СокрЛП(ПолеСообщения.Значение);
				Для Каждого ПолеПеременной Из ПараметрыАвтотестирования.Настройки.Переменные Цикл
					ШаблонПеременной = ПолеПеременной.Значение.Шаблон;
					Если ШаблонПоляСообщения = ШаблонПеременной Тогда
						ТекСообщение[ПолеСообщения.Ключ] = ПолеПеременной.Значение.Значение;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция Автотесты_ПолучитьНовыйИдентификаторСообщения() 
	
	УИД = Новый УникальныйИдентификатор();
	УИД = СтрЗаменить(УИД,"-","");
	
	Возврат УИД;
	
КонецФункции

Функция Автотесты_ОтправитьТестовоеСообщение(ИмяСообщения) Экспорт
	
	ВходящиеДанные = ПараметрыАвтотестирования.Настройки.ВходящиеДанные;
	
	НайденноеСообщение = Неопределено;
	Для Каждого Стр Из ВходящиеДанные Цикл
		Если Стр.Имя = ИмяСообщения Тогда
			НайденноеСообщение = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденноеСообщение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекСообщение = НайденноеСообщение.Значение;
	Автотесты_ЗаменитьПеременныеПоШаблону(ТекСообщение);
	
	Сообщение = ПолучитьСтруктуруСообщения(ТекСообщение.ТипСообщения,"Исходящее");
	Сообщение.ТипСообщения		= ТекСообщение.ТипСообщения;
	Сообщение.Направление		= "Исходящее";
	Сообщение.ID = Автотесты_ПолучитьНовыйИдентификаторСообщения();
	
	Сообщение.ПокупательEDI.GLN = ТекСообщение.Покупатель;
	Сообщение.ПродавецEDI.GLN = ТекСообщение.Поставщик;
	Сообщение.ГрузополучательEDI.GLN = ТекСообщение.Грузополучатель;
	
	Сообщение.ДокументEDI.Номер = ТекСообщение.НомерДокумента;
	Сообщение.ДокументEDI.Дата = ТекСообщение.ДатаДокумента;
	
	Если Сообщение.ТипСообщения = "ORDERS" Тогда
		Сообщение.ОбратныйЗаказEDI.Номер	= ТекСообщение.НомерОбратногоЗаказа;
		Сообщение.ОбратныйЗаказEDI.Дата		= ТекСообщение.ДатаОбратногоЗаказа;
	КонецЕсли;
	
	Сообщение.ЗаказEDI.Номер = ТекСообщение.НомерЗаказа;
	Сообщение.ЗаказEDI.Дата = ТекСообщение.ДатаЗаказа;
	
	Сообщение.НакладнаяEDI.Номер = ТекСообщение.НомерНакладной;
	Сообщение.НакладнаяEDI.Дата = ТекСообщение.ДатаНакладной;
	
	Сообщение.ВалютаEDI = "RUB";
	
	Сообщение.Статус = ТекСообщение.Статус;
	
	Сообщение.ОтправительEDI.GLN = СокрЛП(ПараметрыАвтотестирования.Настройки.Партнер.GLN);
	Сообщение.ПолучательEDI.GLN = СокрЛП(ПараметрыАвтотестирования.Настройки.СтруктураКомпании.GLN);
	
	Для Каждого СтрокаТоваров Из ТекСообщение.Товары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТоваров);
		НоваяСтрока.КодЕдиницыИзмеренияEDI = СтрокаТоваров.КодЕдиницыИзмерения;
		НоваяСтрока.СтавкаНДСEDI = СтрокаТоваров.СтавкаНДС;
		
	КонецЦикла;
	
	РезультатКонвертации = КонвертироватьИсходящееСообщениеПоНовому(Сообщение);
	
	ТекПутьККаталогу = ПараметрыАвтотестирования.Настройки.ВариантОбменаДанными.ПутьККаталогу;
	Если ЗначениеЗаполнено(ТекПутьККаталогу) Тогда
		ПереместитьФайл(РезультатКонвертации.ПутьКФайлу,ТекПутьККаталогу+"\inbox\"+ИмяСообщения+"_"+СокрЛП(Сообщение.ДокументEDI.Номер)+".xml")
	КонецЕсли;
	
КонецФункции

Процедура Автотесты_ДобавитьЗаписьВЛог(Текст) Экспорт
	
	ТекстЛога = Новый ТекстовыйДокумент;
	ТекстЛога.Прочитать(ПараметрыАвтотестирования.КаталогСценария+"\out\log.txt");
	ТекстЛога.ДобавитьСтроку(Текст);
	ТекстЛога.Записать(ПараметрыАвтотестирования.КаталогСценария+"\out\log.txt");
		
КонецПроцедуры

Процедура Автотесты_УстановитьЗначениеПеременной(Имя,Значение,Шаблон) Экспорт
	
	СтруктураПеременной = Новый Структура();
	
	СтруктураПеременной.Вставить("Имя", 	Имя);
	СтруктураПеременной.Вставить("Значение",Значение);
	СтруктураПеременной.Вставить("Шаблон",	Шаблон);

	ПараметрыАвтотестирования.Настройки.Переменные.Вставить(Имя,СтруктураПеременной);
	
КонецПроцедуры

Процедура Автотесты_ЗавершитьВыполнениеТестирования(Флаг) Экспорт
	
	Если Флаг = "fail" Тогда
		ПараметрыАвтотестирования.ВыполняемыеДействия.Очистить();
	КонецЕсли;	
		
	СтруктураВыполнения = Новый Структура;
	СтруктураВыполнения.Вставить("РезультатВыполнения",ПараметрыАвтотестирования.РезультатВыполненияСценария);
	СтруктураВыполнения.Вставить("Переменные",ПараметрыАвтотестирования.Настройки.Переменные);
	
	ФайлРезультата = Новый ТекстовыйДокумент;
	ФайлРезультата.УстановитьТекст(ЗначениеВСтрокуВнутр(СтруктураВыполнения));
	ФайлРезультата.Записать(ПараметрыАвтотестирования.КаталогСценария+"\out\result.txt");
	
	ПутьКФайлу = ПараметрыАвтотестирования.КаталогСценария+"\out\"+Флаг+".txt";

	Текст = Новый ТекстовыйДокумент;
	Текст.Записать(ПутьКФайлу);
	
КонецПроцедуры

Процедура Автотесты_УдалитьПоследниеДокументы(ВидДокумента) Экспорт
	
	// во избежание случайного вызова
	Если НЕ ЗначениеЗаполнено(ПараметрыАвтотестирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.Документы.Найти(ВидДокумента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документ.Ссылка
		|ИЗ
		|	Документ."+ВидДокумента+" КАК Документ
		|ГДЕ
		|	Документ.Дата >= &ТекущаяДата";

	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		Попытка
			ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().Удалить();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция Автотесты_ПолучитьПустуюСтруктуруДокументаАвтотестирования()
	
	Структура = Новый Структура("Контрагент,Грузополучатель,Организация,Грузоотправитель,СуммаВклНДС");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Единица");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	
	Структура.Вставить("Товары",ТаблицаТоваров);
	
	Возврат Структура;
	
КонецФункции

Функция Автотесты_ПолучитьПустуюСтруктуруСообщенияАвтотестирования()
	
	Структура = Новый Структура("ТипСообщения,Покупатель,Поставщик,Грузополучатель,НомерДокумента,ДатаДокумента,НомерЗаказа,ДатаЗаказа,НомерОтветаНаЗаказ,ДатаОтветаНаЗаказ,НомерОтгрузки,ДатаОтгрузки,НомерПриемки,ДатаПриемки,НомерСчетаФактуры,ДатаСчетаФактуры,СуммаБезНДС,СуммаНДС,СуммаСНДС,Статус");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ТаблицаТоваров,
		"GTIN
		|КодТовараПартнера
		|Наименование
		|Количество
		|КодЕдиницыИзмерения
		|ЦенаБезНДС
		|ЦенаСНДС
		|СтавкаНДС
		|СуммаБезНДС
		|СуммаНДС
		|СуммаСНДС
		|Статус"
	);
	
	Структура.Вставить("Товары",ТаблицаТоваров);
	
	Возврат Структура;
	
КонецФункции

Функция Автотесты_ПолучитьКодЭлементаСправочника(ЭлементСсылка)
	
	Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
		Возврат СокрЛП(ЭлементСсылка.Код);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция Автотесты_ПолучитьПредставлениеСтавкиНДС(СтавкаНДС)
	
	Возврат "10";
	
КонецФункции

Процедура Автотесты_ПоместитьДокументНаПроверку(Имя,Документ) Экспорт
	
	СтруктураДокумента = Автотесты_ПолучитьПустуюСтруктуруДокументаАвтотестирования();
	СтруктураДокумента.Контрагент = Автотесты_ПолучитьКодЭлементаСправочника(Документ.Контрагент);
	Попытка
		СтруктураДокумента.Грузополучатель = Автотесты_ПолучитьКодЭлементаСправочника(Документ.Грузополучатель);
	Исключение
	КонецПопытки;
	СтруктураДокумента.Организация = Автотесты_ПолучитьКодЭлементасправочника(Документ.Организация);
	СтруктураДокумента.СуммаВклНДС = Документ.СуммаВключаетНДС;
	
	Для Каждого Стр Из Документ.Товары Цикл
		НоваяСтрокаДокумента = СтруктураДокумента.Товары.Добавить();
		НоваяСтрокаДокумента.Номенклатура = Автотесты_ПолучитьКодЭлементаСправочника(Стр.Номенклатура);
		Попытка
			НоваяСтрокаДокумента.Единица = Автотесты_ПолучитьКодЭлементаСправочника(Стр.ЕдиницаИзмерения);
		Исключение
		КонецПопытки;
		НоваяСтрокаДокумента.Количество = Стр.Количество;
		НоваяСтрокаДокумента.Цена = Стр.Цена;
		НоваяСтрокаДокумента.СуммаНДС = Стр.СуммаНДС;
		НоваяСтрокаДокумента.СтавкаНДС = Автотесты_ПолучитьПредставлениеСтавкиНДС(Стр.СтавкаНДС);
		НоваяСтрокаДокумента.Сумма = Стр.Сумма;
	КонецЦикла;	
		
	НоваяСтрока = ПараметрыАвтотестирования.РезультатВыполненияСценария.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Тип = "Документ";
	НоваяСтрока.Значение = СтруктураДокумента;
	
КонецПроцедуры

Функция Автотесты_ПривестиСтатусСообщенияКОдномуВиду(Статус)
	
	Если Статус = "Подтвержден" Тогда
		Возврат "Accepted";
	ИначеЕсли Статус = "Уточнен" Тогда
		Возврат "Changed";
	ИначеЕсли Статус = "Отклонен" Тогда
		Возврат "Declined";
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Процедура Автотесты_ПоместитьСообщениеНаПроверку(Имя,Сообщение) Экспорт
	
	СтруктураСообщения = Автотесты_ПолучитьПустуюСтруктуруСообщенияАвтотестирования();
	
	СтруктураСообщения.НомерДокумента = Сообщение.ДокументEDI.Номер;
	СтруктураСообщения.ДатаДокумента = Сообщение.ДокументEDI.Дата;
	СтруктураСообщения.НомерЗаказа = Сообщение.ЗаказEDI.Номер;
	СтруктураСообщения.ДатаЗаказа = Сообщение.ЗаказEDI.Дата;
	СтруктураСообщения.Покупатель = Сообщение.ПокупательEDI.GLN;
	СтруктураСообщения.Поставщик = Сообщение.ПродавецEDI.GLN;
	СтруктураСообщения.Грузополучатель = Сообщение.ГрузополучательEDI.GLN;
	
	СтруктураСообщения.Статус = Автотесты_ПривестиСтатусСообщенияКОдномуВиду(Сообщение.Статус);
	
	Для Каждого Стр Из Сообщение.Товары Цикл
		НоваяСтрокаСообщения = СтруктураСообщения.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСообщения,Стр);
		НоваяСтрокаСообщения.КодЕдиницыИзмерения = Стр.КодЕдиницыИзмеренияEDI;
		НоваяСтрокаСообщения.СтавкаНДС = Стр.СтавкаНДСEDI;
		НоваяСтрокаСообщения.Статус = Автотесты_ПривестиСтатусСообщенияКОдномуВиду(Стр.Статус);
	КонецЦикла;
	
	НоваяСтрока = ПараметрыАвтотестирования.РезультатВыполненияСценария.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Тип = "Сообщение";
	НоваяСтрока.Значение = СтруктураСообщения;
	
КонецПроцедуры

Процедура Автотесты_ЭмулироватьПолучениеСтатусногоСообщения(Сообщение,Этап,Статус) Экспорт
	
	Результат = СформироватьУведомлениеОПрочтенииСообщения(Сообщение,Этап,Статус);
 	ТекПутьККаталогу = ПараметрыАвтотестирования.Настройки.ВариантОбменаДанными.ПутьККаталогу;

	Если Результат.Успешно = Истина Тогда
		ФайлСтатусного = Новый Файл(Результат.ПутьКФайлу);
		Если ФайлСтатусного.Существует() Тогда
			ПереместитьФайл(Результат.ПутьКФайлу,ТекПутьККаталогу+"\Reports\"+ФайлСтатусного.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//}#КонецОбласти //Автотесты


//{#Область 20_Конфигурация
	
//В данной области расположим то, что включает непосредственные обращения к конфигурации.
//Затем будем постепенно вычищать.
//По сути это аналог "Модуль_Интеграция_УТ_УПП_КА"
//В идеале каждый такой метод должен переопределяться через ПМ.
	
//Использовать данную функцию в подключаемом модуле пока не рекомендуется.
Функция ПолучитьРеквизитДокументаДляСообщения(Документ,ИмяРеквизита) Экспорт
	
	//Допустимые варианты на сейчас:
	//Договор, Контрагент, ВалютаДокумента, СуммаВключаетНДС, ДатаОтгрузки
	
	Если ИмяРеквизита = "Договор" Тогда
		
		Если ИмяКонфигурации1С ="УФ_УТ"
			Или ИмяКонфигурации1С ="УФ_УНФ" Тогда
			
			Если Документ.Метаданные().Имя = "СчетФактураВыданный" Тогда
				Возврат Документ.ДокументОснование.Договор;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
			
			Возврат Документ.ДоговорВзаиморасчетов;
			
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			
			Возврат Документ.Договор;
			
		Иначе
			
			Возврат Документ.ДоговорКонтрагента;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		Если ИмяКонфигурации1С ="УФ_УТ"
			Или ИмяКонфигурации1С ="УФ_УНФ" Тогда
			
			Если Документ.Метаданные().Имя = "СчетФактураВыданный" Тогда
				Возврат Документ.ДокументОснование.Контрагент;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			
			Если Документ.Договор.ТипДоговора = Перечисления.ТипыДоговоров.Комиссия Тогда
				Возврат Ложь;
			Иначе	
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
			
			Возврат Документ.Контрагент;
			
		Иначе
			
			Возврат Документ.Контрагент;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "СуммаВключаетНДС" Тогда	
		
		Если ИмяКонфигурации1С = "ТКПТ" Тогда
			
			Возврат Документ.ТипЦен.ЦенаВключаетНДС;
			
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			
			МетаданныеДокумента = Документ.Метаданные();
			Если МетаданныеДокумента.Имя = "Заказ" Тогда
				Возврат Ложь;
			ИначеЕсли МетаданныеДокумента.Имя = "ПриходнаяНакладная" Тогда
				Возврат Документ.ВариантРасчетаНДС = Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С="УФ_УТ" Тогда
			
			Возврат Документ.ЦенаВключаетНДС;
			
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "Валюта" Тогда	
		
		Если ИмяКонфигурации1С = "АСТОР" Тогда
			Возврат Документ.Валюта;	
		ИначеЕсли ИмяКонфигурации1С <> "УФ_УТ" Тогда
			Возврат Документ.ВалютаДокумента;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ДатаОтгрузки" Тогда
		
		МетаданныеДокумента = Документ.Метаданные();
		
		Если ИмяКонфигурации1С = "ТКПТ" Тогда
			
			Если МетаданныеДокумента.Имя = "ЗаказПокупателя"
				Или МетаданныеДокумента.Имя = "ЗаказПоставщику" Тогда
				Возврат Документ.СрокПоставки;
			Иначе
				Возврат Документ.Дата;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
			
			Если МетаданныеДокумента.Имя = "ЗаказПоставщику" Тогда
				Возврат Документ.ДатаПоставки;
			Иначе
				Возврат Документ.Дата;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			
			Если МетаданныеДокумента.Имя = "Заказ" Тогда
				Возврат Документ.ДатаПоставки;
			Иначе
				Возврат Документ.Дата;
			КонецЕсли;
			
		Иначе
			
			Если ЕстьРеквизитОбъекта_Контур(Документ,"ДатаОтгрузки") Тогда
				Возврат Документ.ДатаОтгрузки;
			ИначеЕсли ЕстьРеквизитОбъекта_Контур(Документ,"ДатаПоступления") Тогда
				Возврат Документ.ДатаПоступления;
			Иначе
				Возврат Документ.Дата;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Документ[ИмяРеквизита];//по умолчанию. Предусмотреть вариант, когда такого реквизита нет.
	
КонецФункции

Процедура ЗаполнитьВходящийДокументПоСообщению_ORDERS_ОФ(НовыйДокумент,Сообщение)
	
	Если ИспользоватьМаппингМетаданных Тогда
		Маппинг_ЗаполнитьВходящийДокументПоСообщению_ORDERS_ОФ(НовыйДокумент,Сообщение);
		Возврат;
	КонецЕсли;
	
	ТипЦен				= Неопределено;
	флУчитыватьНДС		= Истина;
	флСуммаВключаетНДС	= Истина;
	
	ИмяРеквизитаОрганизация = ?(ИмяКонфигурации1С = "ДалионУМ", "Фирма", 		"Организация");
	ИмяРеквизитаТипЦен 		= ?(ИмяКонфигурации1С = "ДалионУМ", "КатегорияЦен", "ТипЦен");
	
	ДоговорКонтрагента = Сообщение.Договор;
	Если ЗначениеЗаполнено(ДоговорКонтрагента)
		И ЕстьРеквизитОбъекта_Контур(ДоговорКонтрагента,ИмяРеквизитаТипЦен) Тогда
		ТипЦен = ДоговорКонтрагента[ИмяРеквизитаТипЦен];
	КонецЕсли;
	
	Если ИмяКонфигурации1С = "ДалионУМ" Тогда
		
		Склад  				= ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
		УчетнаяПолитика		= Неопределено;
		Выполнить("УчетнаяПолитика = ПолучитьУчетнуюПолитику(ТекущаяДата(), Сообщение.Продавец1С, Склад);");
		Если Не УчетнаяПолитика = Неопределено Тогда
			флУчитыватьНДС 		= НЕ УчетнаяПолитика.НеЯвляетсяПлательщикомНДС;			
			флСуммаВключаетНДС 	= УчетнаяПолитика.СуммаВключаетНДС;
		КонецЕсли;
		
	Иначе 
	
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			Если ИмяКонфигурации1С = "БП" Тогда
				ЗначениеРассчитывается = Ложь;
			Иначе
				ЗначениеРассчитывается = ТипЦен.Рассчитывается;
			КонецЕсли;			
			
			Если ТипЗнч(ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") И ЗначениеРассчитывается Тогда
				флСуммаВключаетНДС = ТипЦен.БазовыйТипЦен.ЦенаВключаетНДС;
			Иначе
				флСуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйДокумент[ИмяРеквизитаТипЦен] = ТипЦен;
	
	Если ИмяКонфигурации1С<>"ТКПТ" Тогда
		НовыйДокумент.УчитыватьНДС		= флУчитыватьНДС;
		НовыйДокумент.СуммаВключаетНДС	= флСуммаВключаетНДС;
	КонецЕсли;
	
	НовыйДокумент.Дата = ТекущаяДата();
	
	НовыйДокумент[ИмяРеквизитаОрганизация] = Сообщение.Продавец1С;
	НовыйДокумент.Контрагент = Сообщение.Покупатель1С;
	
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"ДоговорВзаиморасчетов") Тогда
		НовыйДокумент.ДоговорВзаиморасчетов = ДоговорКонтрагента;
	ИначеЕсли ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"ДоговорКонтрагента") Тогда
		НовыйДокумент.ДоговорКонтрагента = ДоговорКонтрагента;
	КонецЕсли;
	
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"СкладГруппа") Тогда
		НовыйДокумент.СкладГруппа = ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
	ИначеЕсли ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"Склад") Тогда
		НовыйДокумент.Склад = ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
	ИначеЕсли ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"СкладКомпании") Тогда
		НовыйДокумент.СкладКомпании = ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрыПользователяEDI.СозданиеЗаказаРСчет) Тогда
		
		ИмяДокумента = НовыйДокумент.Метаданные().Имя;
		Если ИмяДокумента = "РеализацияТоваровУслуг" 
			Или ИмяДокумента = "схРеализацияТоваровУслуг" Тогда

			НовыйДокумент.БанковскийСчетОрганизации = ПараметрыПользователяEDI.СозданиеЗаказаРСчет;
		Иначе
			Попытка
				НовыйДокумент.СтруктурнаяЕдиница = ПараметрыПользователяEDI.СозданиеЗаказаРСчет;
			Исключение
			КонецПопытки;
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"СрокПоставки") Тогда
		НовыйДокумент.СрокПоставки = Сообщение.ДатаПоставки;
	ИначеЕсли ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"ДатаОтгрузки") Тогда
		НовыйДокумент.ДатаОтгрузки = Сообщение.ДатаПоставки;
	КонецЕсли;
	
	НовыйДокумент.ВалютаДокумента = Сообщение.Валюта1С;
	Если ИмяКонфигурации1С = "ТКПТ" Тогда
		Попытка
			НовыйДокумент.КурсВалютыУпр				= 1;  //не во всех релизах
		Исключение
		КонецПопытки;
		Попытка
			НовыйДокумент.ПодразделениеКомпании = ПараметрыСеанса.Пользователь.Подразделение;  //не во всех релизах
		Исключение
		КонецПопытки;
		НовыйДокумент.КурсДокумента				= 1; 
	Иначе
		НовыйДокумент.КурсВзаиморасчетов		= 1; 
		НовыйДокумент.КратностьВзаиморасчетов	= 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение.Грузополучатель1С) Тогда
		
		ТочкаДоставкиСторонняя		= ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",Сообщение.Грузополучатель1С);
		
		Если ПараметрыПользователяEDI.ГрузополучательИзЮрФизЛицаТД = Истина Тогда

			Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"Грузополучатель") Тогда
				НовыйДокумент.Грузополучатель = ТочкаДоставкиСторонняя.ЮрФизЛицо;
				
				//TODO проверить, насколько нам вообще нужен адрес из учетн системы поставщика. Можем ли мы всегда ставить свой адрес, без лишних вопросов?
				Если ЗначениеЗаполнено(НовыйДокумент.Грузополучатель) Тогда
					
					Попытка
						
						Если ИмяКонфигурации1С = "БП" Тогда
							Выполнить("НовыйДокумент.АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(НовыйДокумент.Грузополучатель,""Фактический"");");
						ИначеЕсли ИмяКонфигурации1С = "УТ_10_2" Тогда
							Выполнить("НовыйДокумент.АдресДоставки = ПолучитьАдресИзКонтактнойИнформации(НовыйДокумент.Грузополучатель,""Фактический"");");
						Иначе
							Выполнить("НовыйДокумент.АдресДоставки = ЗаполнениеДокументов.ПолучитьАдресДоставкиСтрокой(НовыйДокумент.Грузополучатель, """");");
						КонецЕсли;
						
					Исключение
					КонецПопытки;
						
				КонецЕсли;				
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"АдресДоставки") Тогда
			Если НЕ ЗначениеЗаполнено(НовыйДокумент.АдресДоставки) Тогда	
				Если ЗначениеЗаполнено(ТочкаДоставкиСторонняя.АдресДоставки) Тогда
					НовыйДокумент.АдресДоставки = ТочкаДоставкиСторонняя.АдресДоставки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// по метаданным находим реквизит точки доставки, и если есть чем заполнять, заполняем его
		Если ЗначениеЗаполнено(ТочкаДоставкиСторонняя.ТочкаДоставкиСвойСправочник) Тогда
			
			РеквизитыШапки = НовыйДокумент.Метаданные().Реквизиты;
			
			Для Каждого Реквизит Из РеквизитыШапки Цикл
				
				ТипыРеквизита = Реквизит.Тип.Типы();
				Если ТипыРеквизита.Количество()=1 Тогда
					Если Реквизит.Тип.СодержитТип(ТипЗнч(ТочкаДоставкиСторонняя.ТочкаДоставкиСвойСправочник)) Тогда
						НовыйДокумент[Реквизит.Имя] = ТочкаДоставкиСторонняя.ТочкаДоставкиСвойСправочник;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяТабЧастиТовары = "Товары";
	НовыйДокумент[ИмяТабЧастиТовары].Очистить();
	
	ЕстьРеквизитЕдиницаИзмерения = ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"ЕдиницаИзмерения",ИмяТабЧастиТовары);
	ЕстьХарактеристики = ЗначениеЗаполнено(ПолучитьТипЗначенияОбъекта("ХарактеристикаНоменклатуры")) 
		И ЕстьРеквизитОбъекта_Контур(НовыйДокумент,"ХарактеристикаНоменклатуры",ИмяТабЧастиТовары);
	
	Для Каждого СтрокаСообщения Из Сообщение.Товары Цикл
		
		НоваяСтрока = НовыйДокумент[ИмяТабЧастиТовары].Добавить();
		
		НоваяСтрока.Номенклатура		= СтрокаСообщения.Номенклатура;
		Если ЕстьРеквизитЕдиницаИзмерения Тогда
			НоваяСтрока.ЕдиницаИзмерения	= СтрокаСообщения.ЕдиницаИзмерения;
		КонецЕсли;	
		
		Если НЕ ИмяКонфигурации1С = "БП" Тогда
			НоваяСтрока.Коэффициент			= СтрокаСообщения.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		Если ЕстьХарактеристики Тогда
			НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаСообщения.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
		//Код ниже похож на древний костыль для случаев, когда сеть присылает в vATRate значение "0" или "NOT_APPLICABLE"
		//0 конвертируется в "НДС0", а "NOT_APPLICABLE" - в "БезНДС"
		Если ЗначениеЗаполнено(СтрокаСообщения.СтавкаНДС1С) Тогда
			Если   СтрокаСообщения.ЦенаБезНДС=0 и СтрокаСообщения.ЦенаСНДС=0 и СтрокаСообщения.СтавкаНДС1С=?(ИмяКонфигурации1С = "ТКПТ",Справочники.СтавкиНДС.БезНДС,Перечисления.СтавкиНДС.НДС0)  Тогда 
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
					НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
					СтрокаСообщения.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
				КонецЕсли;
			Иначе
				НоваяСтрока.СтавкаНДС			= СтрокаСообщения.СтавкаНДС1С;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
				НоваяСтрока.СтавкаНДС			= НоваяСтрока.Номенклатура.СтавкаНДС;
				СтрокаСообщения.СтавкаНДС1С					= НоваяСтрока.Номенклатура.СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		
		//Посчитаем цену без НДС / с НДС по суммам без / с НДС, если сеть не прислала эти данные в сообщении
		ЗаполнитьНедостающиеПоляСтрокиТоваров(СтрокаСообщения);
		
		НоваяСтрока.Количество			= СтрокаСообщения.Количество;
		
		Если флСуммаВключаетНДС Тогда
			НоваяСтрока.Цена = СтрокаСообщения.ЦенаСНДС;
		Иначе        
			НоваяСтрока.Цена = СтрокаСообщения.ЦенаБезНДС;
		КонецЕсли;	

		//Теперь необходимо рассчитать сумму по строке и НДС, так как данные, отправленные покупателем, могут быть неправильными.
		Если ИмяКонфигурации1С = "УТ_10_2" 
			Или ИмяКонфигурации1С = "УТ_10_3" 
			Или ИмяКонфигурации1С = "УПП" 
			Или ИмяКонфигурации1С = "КА" 
			Или ИмяКонфигурации1С = "БП" 
			Или ИмяКонфигурации1С = "Розница" 
			Тогда
			
			_ОбщийМодуль = Метаданные.ОбщиеМодули.Найти("ОбработкаТабличныхЧастей");
			Если НовыйДокумент.Метаданные().Имя = "схРеализацияСельхозПродукции" Тогда
				//БСХП
				Выполнить("
					|ПроцентыСтавокНДС = схОбщийСервер.ПолучитьПроцентыСтавокНДС();
					|СтруктураПараметров = Новый Структура(""УчитыватьНДС,СуммаВключаетНДС"", НовыйДокумент.УчитыватьНДС, НовыйДокумент.СуммаВключаетНДС);
					|схОбщийКлиент.РассчитатьСуммуТабЧастиСельхоз(НоваяСтрока, Истина, Истина);
					|схОбщийКлиент.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ПроцентыСтавокНДС, СтруктураПараметров);
					|");
			ИначеЕсли НЕ _ОбщийМодуль=Неопределено И Не _ОбщийМодуль.Глобальный Тогда
				Выполнить("
					|ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйДокумент);
					|ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйДокумент);
					|");
			ИначеЕсли Не _ОбщийМодуль = Неопределено Тогда
				Выполнить("
					|РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйДокумент);
					|РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйДокумент);
					|");
			Иначе
				//что-то совсем старое или сильно измененное. В любом случае придется писать код - здесь или в ПМ.
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда
			НовыйДокумент.ОбработкаРеквизита("Товары.Цена",НоваяСтрока);
			
		ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
			СвойстваТЧТовары = Новый Структура;
			СвойстваТЧТовары.Вставить("ИмяТЧ", "Товары");
			СвойстваТЧТовары.Вставить("ХарактеристикаНоменклатуры");
			СвойстваТЧТовары.Вставить("ЕдиницаИзмерения");
			СвойстваТЧТовары.Вставить("Цена");
			
			Выполнить("тчПриИзмененииЦеныТабЧастиРасходнойНакладной(НоваяСтрока, НовыйДокумент, СвойстваТЧТовары);");
		
		ИначеЕсли ИмяКонфигурации1С = "АСТОР" Тогда
			Выполнить("
				|ОмРаботаСФормами.РассчитатьСуммуТабЧасти(НоваяСтрока);
				|ОмРаботаСФормами.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйДокумент.ВариантРасчетаНДС);
				|ОмРаботаСФормами.РассчитатьВсегоТабЧасти(НоваяСтрока, НовыйДокумент.ВариантРасчетаНДС);
				|");
		Иначе
		//ИначеЕсли ИмяКонфигурации1С = "ХлебУСП" Тогда
		//ИначеЕсли ИмяКонфигурации1С = "RIT" Тогда
		
		    //в остальных конфигурациях алгоритмы расчета не выяснены. Оставим пока просто заполнение из сообщения, старый вариант.
			Если флСуммаВключаетНДС Тогда
				НоваяСтрока.Сумма = СтрокаСообщения.СуммаСНДС;
			Иначе        
				НоваяСтрока.Сумма = СтрокаСообщения.СуммаБезНДС;
			КонецЕсли;	
			НоваяСтрока.СуммаНДС = СтрокаСообщения.СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Комментарий="";//В некоторых сообщениях может не быть комментария
	Сообщение.Свойство("Комментарий",Комментарий);
	ТипПоставки = ТипПоставкиСообщения(Сообщение);
	НовыйДокумент.Комментарий = "Загружен из Контур-EDI"+?(ТипПоставки="","",", тип поставки: "+ТипПоставки);
	
	Если ИмяКонфигурации1С = "ТКПТ" 
		или ИмяКонфигурации1С = "ДалионУМ" Тогда
		НовыйДокумент.Автор			= ПолучитьТекущегоПользователя1С();
	Иначе
		НовыйДокумент.Ответственный = ПолучитьТекущегоПользователя1С();
	КонецЕсли;
	
	ДозаполнитьПоляДокументаИзВходящегоORDERS(НовыйДокумент,Сообщение);//свалка алгоритмов из известных типовых конфигураций: счета учета, количество мест, флажки УУ\БУ\НУ и т.д.
	
	//и проставим свои цены вместо тех, что прислал покупатель
	УстанавливатьСобственныеЦеныВЗаказах = (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Отправитель1С,"УстанавливатьСобственныеЦеныВЗаказах")=Истина);
	
	Если УстанавливатьСобственныеЦеныВЗаказах Тогда
		
		ЦеныУстановлены = ПерезаполнитьЦеныСкидкиВДокументе(НовыйДокумент);
		
		Если Не ЦеныУстановлены Тогда
			ВызватьИсключение "В документе не указан тип цен: невозможно установить собственные цены"; //свалимся намертво, чтоб не пропустить некорректные цены
		КонецЕсли;	
		
	КонецЕсли;
	
	//Обработка настройки ОткрыватьФормуЗаказаПередЗаписью перенесена в шаблон ПМ, событие "ПриЗагрузкеВходящегоСообщения"
	
	Если ИмяКонфигурации1С = "RIT" Тогда
		НовыйДокумент.ОбменДанными.Загрузка = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВходящийДокументПоСообщению_ORDERS_УФ(Док,Сообщение)
	
	ДокументНомер = Сообщение.ДокументEDI.Номер;
	НомерСерииЗаказов = Сообщение.НомерСерииЗаказов;
	ДокументДата = Сообщение.ДокументEDI.Дата;
	ДатаПоставки=Сообщение.ДатаПоставки;
	
	
	ОтправительGLN = Сообщение.ОтправительEDI.GLN;
	ПолучательGLN = Сообщение.ПолучательEDI.GLN;
	
	ЮрФизЛицоСвое		= Сообщение.Продавец1С;
	ЮрФизЛицоСтороннее	= Сообщение.Покупатель1С;
	Грузополучатель		= Сообщение.Грузополучатель1С;
	
	Партнер = Сообщение.Партнер;
	
	УстанавливатьСобственныеЦеныВПринятыхЗаказах=Ложь;
	
	Партнер = ПолучитьЭлементСправочника("Партнеры",Сообщение.Отправитель1С);
	
	Если ТипЗнч(Партнер) = Тип("Структура") Тогда
		Если Партнер.Свойство("УстанавливатьСобственныеЦеныВЗаказах") Тогда
			УстанавливатьСобственныеЦеныВПринятыхЗаказах = (Партнер.УстанавливатьСобственныеЦеныВЗаказах=истина);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОпределитьРелизКонфигурации();
	
	//конец инициализации лок перем/////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	
	ИмяДокЗаказ = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина);
	
	Если ИмяКонфигурации1С = "УФ_УНФ" Тогда
		
		Если ИмяДокЗаказ = "РасходнаяНакладная" Тогда
			Док.Дата= ДатаПоставки;
			Док.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			Док.ВидОперации     = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
			_Подразделение=Неопределено;
			Выполнить("_Подразделение   = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПараметрыСеанса.ТекущийПользователь, ""ОсновноеПодразделение"")");
			Если ЗначениеЗаполнено(_Подразделение) Тогда
				Если Док.Подразделение <> _Подразделение Тогда
					Док.Подразделение = _Подразделение;
				КонецЕсли;
			Иначе
				Док.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
			КонецЕсли;
		Иначе  //ЗаказПокупателя
			Док.ДатаИзменения = ТекущаяДата();
			Док.ДатаОтгрузки= ДатаПоставки;	
			Если Метаданные.Перечисления.Найти("СтатусыЗаказов")<>Неопределено Тогда
				Док.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.НайтиПоРеквизиту("СтатусЗаказа",Перечисления.СтатусыЗаказов.ВРаботе);
			Иначе
				Док.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В работе");				
			КонецЕсли;
			Док.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			Док.ВидОперации     = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
			
		КонецЕсли;
		
		Док.Автор           = ПолучитьТекущегоПользователя1С();
		
		Док.Контрагент		= ЮрФизЛицоСтороннее;
		
		Док.Кратность =1;
		Док.Курс=1;
		
		Док.ВалютаДокумента			= Константы.ВалютаУчета.Получить();
		
		Док.Организация		= ЮрФизЛицоСвое;
		
		Док.НомерВходящегоДокумента=ДокументНомер;
		
		//заполнить грузополучателя контрагентом, основной договор, вид цен договора, цена включает НДС!!!
		//для УНФ начиная с какого-то релиза выпилили Грузополучателя пока через попытку
		Попытка
			Если ЗначениеЗаполнено(Грузополучатель) и ЗначениеЗаполнено(Грузополучатель.СвязанныйСправочник1) Тогда 
				Док.Грузополучатель =  Грузополучатель.СвязанныйСправочник1;
			Иначе
				Док.Грузополучатель =  Док.Контрагент;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ПараметрыПользователяEDI.СозданиеЗаказаРСчет) Тогда
			Док.БанковскийСчет	= ПараметрыПользователяEDI.СозданиеЗаказаРСчет;
		КонецЕсли;
		
		СтруктунаяЕдиницаНастройкаМодуля = ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
		Если СтруктунаяЕдиницаНастройкаМодуля<>Неопределено Тогда
			времСтруктурнаяЕдиница = СтруктунаяЕдиницаНастройкаМодуля;
		Иначе
			времСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта_Контур(Док,"СтруктурнаяЕдиница") Тогда 
			Док.СтруктурнаяЕдиница = времСтруктурнаяЕдиница;
		КонецЕсли;
		Если ЕстьРеквизитОбъекта_Контур(Док,"СтруктурнаяЕдиницаПродажи") Тогда 
			Док.СтруктурнаяЕдиницаПродажи = времСтруктурнаяЕдиница;
		КонецЕсли;
		Если ЕстьРеквизитОбъекта_Контур(Док,"СтруктурнаяЕдиницаРезерв") Тогда 
			Док.СтруктурнаяЕдиницаРезерв = времСтруктурнаяЕдиница;
		КонецЕсли;
		
		МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
		
		СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Док.Ссылка, Док.ВидОперации);
		ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Док.Контрагент, Док.Организация, СписокВидовДоговоров);
		
		Док.Договор=ДоговорПоУмолчанию;
		
		Если ЗначениеЗаполнено(Док.Договор) Тогда
			Док.ВалютаДокумента = Док.Договор.ВалютаРасчетов;
			ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Валюта", Док.Договор.ВалютаРасчетов));
			Док.Курс      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
			Док.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
			Док.ВидСкидкиНаценки = Док.Договор.ВидСкидкиНаценки;
			Док.ВидЦен = Док.Договор.ВидЦен;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
				|			ТОГДА Организации.БанковскийСчетПоУмолчанию
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК БанковскийСчет,
				|	Организации.КассаПоУмолчанию КАК Касса
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
			|	Организации.Ссылка = &Организация");
			Запрос.УстановитьПараметр("Организация", Док.Организация);
			Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Док.ВалютаДокумента);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Док.БанковскийСчет = Выборка.БанковскийСчет;
				
				Если ИмяДокЗаказ = "ЗаказПокупателя" Тогда 
					Док.Касса = Выборка.Касса;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;		
		Док.НалогообложениеНДС =  Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Если ЗначениеЗаполнено(Док.ВидЦен) Тогда 
			Док.СуммаВключаетНДС=Док.ВидЦен.ЦенаВключаетНДС;
		КонецЕсли;
		
		флСуммаВключаетНДС = Док.СуммаВключаетНДС;
		Док.НДСВключатьВСтоимость  = Док.СуммаВключаетНДС;
		
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда   //УТ11.Х
		//ЗаказЗаполнятьПартнераПоКонтрагентуЮрЛица	= ОбработкаОбъект.ПолучитьКонстантуEDI("ЗаказЗаполнятьПартнераПоКонтрагентуЮрЛица");
		//ЗаказВсегдаПодставлятьГоловногоПартнера		= ОбработкаОбъект.ПолучитьКонстантуEDI("ЗаказВсегдаПодставлятьГоловногоПартнера");
		
		РелизКонфигурации = ОпределитьРелизКонфигурации();
		
		СоздаваемыйЗаказСтатус                  = ПолучитьКонстантуEDI("СоздаваемыйЗаказСтатус");
		СоздаваемыйЗаказПриоритет               = ПолучитьКонстантуEDI("СоздаваемыйЗаказПриоритет");
		
		
		Если ИмяДокЗаказ="РеализацияТоваровУслуг" Тогда
			
			//Если не ЗначениеЗаполнено(СоздаваемыйЗаказСтатус) Тогда 
			СоздаваемыйЗаказСтатус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
			//КонецЕсли;
			
			Док.Заполнить(Неопределено);
			
			Если РелизКонфигурации="11.0" Тогда //для 11.0 проставим статус  (11.1 сама умеет)
			Док.Статус 						= Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке;
			КонецЕсли;
			
			Док.Дата						= ДатаПоставки;
			Док.Основание 					=  "Заказ № "+ДокументНомер+" от "+ДокументДата;
			Если ЗначениеЗаполнено(ПараметрыПользователяEDI.СозданиеЗаказаРСчет) Тогда
				Док.БанковскийСчетОрганизации	= ПараметрыПользователяEDI.СозданиеЗаказаРСчет;
			КонецЕсли;
			
			Если ЭтоERP() Тогда
				
				Док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				
			КонецЕсли;
			
			
		Иначе
			
			//Если не ЗначениеЗаполнено(СоздаваемыйЗаказСтатус) Тогда 
			СоздаваемыйЗаказСтатус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
			//КонецЕсли;
			
			Если не ЗначениеЗаполнено(СоздаваемыйЗаказПриоритет) Тогда 
				Попытка
					ВыборкаВсехПриоритетов = Справочники.Приоритеты.Выбрать();
					Если ВыборкаВсехПриоритетов.Следующий() Тогда 
						СоздаваемыйЗаказПриоритет = ВыборкаВсехПриоритетов.Ссылка;
					Иначе 
						СоздаваемыйЗаказПриоритет = Справочники.Приоритеты.ПустаяСсылка();
					КонецЕсли;
				Исключение //ут 11.0
					СоздаваемыйЗаказПриоритет = Перечисления.Приоритеты.Средний;
				КонецПопытки;
			КонецЕсли;
			
			Док.Заполнить(Неопределено);
			Если РелизКонфигурации="11.0" Тогда //для 11.0 проставим статус  (11.1 сама умеет)
			Док.Статус 					= СоздаваемыйЗаказСтатус;
			КонецЕсли;
			Док.Приоритет				= СоздаваемыйЗаказПриоритет;
			Док.ЖелаемаяДатаОтгрузки	= ДатаПоставки;
			Док.НомерПоДаннымКлиента	= ДокументНомер;
			Док.ДатаПоДаннымКлиента		= ДокументДата;
			Если ЗначениеЗаполнено(ПараметрыПользователяEDI.СозданиеЗаказаРСчет) Тогда
				Док.БанковскийСчет			= ПараметрыПользователяEDI.СозданиеЗаказаРСчет;
			КонецЕсли;
			Док.Склад					= ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
			
			Если РелизКонфигурации="11.2" Тогда 
				Док.СпособДоставки			= ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента");
			КонецЕсли;
			
			Док.НеОтгружатьЧастями		= истина;
			Попытка
				Док.ДатаОтгрузки			= ДатаПоставки;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Док.Менеджер		= ПолучитьТекущегоПользователя1С();
		Если ЗначениеЗаполнено(Док.Менеджер) Тогда 
			Попытка
				Док.Подразделение	= Док.Менеджер.ТекущееПодразделение;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Док.Валюта			= Константы.ВалютаРегламентированногоУчета.Получить();
		Док.Организация		= ЮрФизЛицоСвое;
		
		Док.Контрагент		= ЮрФизЛицоСтороннее;
		
		//Посмотрим на значение функц. опции раздельного учета Партнеров и контрагентов
		Если УТ11_1_Константа_ИспользоватьПартнеровИКонтрагентов() = истина Тогда
			Если СокрЛП(ПолучитьКонстантуEDI("СвойСправочникТочекДоставки"))<>"" Тогда 
				Док.Партнер					= Грузополучатель.СвязанныйСправочник2;//использованы магазины-партнеры(клиенты). Правильный учет по рекомендациям 1С.
				Док.Грузополучатель         = Грузополучатель.СвязанныйСправочник1;			
			Иначе
				Док.Партнер					= Док.Контрагент.Партнер;//партнер юр лица (поля контрагент)
				Док.Грузополучатель         = Грузополучатель.СвязанныйСправочник1;
			КонецЕсли;
			
		иначе //отключено использование партнеров в конфигурации
			Док.Грузополучатель 		= Грузополучатель.СвязанныйСправочник1; //точка доставки в грузополучателе
			Док.Партнер					= Док.Контрагент.Партнер;     //1Сники мастера мутных функциональных опций    "ИспользоватьПартнеровИКонтрагентов" & "ИспользоватьПартнеровКакКонтрагентов"
		КонецЕсли;

		//Док.Грузоотправитель		= Грузоотправитель;
		
		Док.ЗаполнитьУсловияПродажПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Док.Договор) и ЗначениеЗаполнено(Сообщение.Договор)Тогда 
			Док.Договор = Сообщение.Договор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Док.Соглашение) Тогда
			Попытка
				Док.ЗаполнитьУсловияПродажПоСоглашению();
			Исключение
				Док.ЗаполнитьУсловияПродажПоCоглашению();//ВызватьИсключение "В этом релизе УТ11.1 присутствует ошибка именования процедуры ЗаполнитьУсловияПродажПоCоглашению (Буква С - латиницей)";
			КонецПопытки;
		КонецЕсли;
		
		Попытка   //появилось внутри релиза 11.0 поэтому так...
			Док.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		Исключение
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Грузополучатель) и Док.АдресДоставки="" Тогда 
			Док.АдресДоставки			= Грузополучатель.АдресДоставки;
		КонецЕсли;
		Док.Склад					= ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
		
		флСуммаВключаетНДС = Док.ЦенаВключаетНДС;
		
		
	Иначе    //БП30
		
		Док.Заполнить(неопределено); //проставим умолчания, например, Док.СуммаВключаетНДС 
		
		Если ИмяДокЗаказ="РеализацияТоваровУслуг" Тогда
			
			Док.ВидОперации			= Перечисления.ВидыОперацийРеализацияТоваров.Товары;
			Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(Док);
			Док.БанковскийСчетОрганизации	= ПараметрыПользователяEDI.СозданиеЗаказаРСчет;
			Если ЗначениеЗаполнено(Грузополучатель) Тогда 
				Док.Грузополучатель 			= Грузополучатель.СвязанныйСправочник1;
				Док.АдресДоставки 				= Грузополучатель.АдресДоставки;
			КонецЕсли;
			
		ИначеЕсли ИмяДокЗаказ="СчетНаОплатуПокупателю" Тогда
			
			Если ЗначениеЗаполнено(Грузополучатель) Тогда 
				Док.АдресДоставки 				= Грузополучатель.АдресДоставки;
			КонецЕсли;
			Док.СтруктурнаяЕдиница	= ПараметрыПользователяEDI.СозданиеЗаказаРСчет;
			
		КонецЕсли;
		
		флСуммаВключаетНДС = Док.СуммаВключаетНДС;
		
		Док.Склад				= ПолучитьКонстантуEDI("СоздаваемыйДокументСклад");
		Док.Контрагент			= ЮрФизЛицоСтороннее;
		
		Док.ВалютаДокумента		= Константы.ВалютаРегламентированногоУчета.Получить();
		Док.Организация			= ЮрФизЛицоСвое;
		
		Выполнить("Док.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновноеПодразделениеОрганизации"")");

		Док.Ответственный		= ПолучитьТекущегоПользователя1С();	
		
		СписокВидовДоговоров = Новый Массив;
		Выполнить("СписокВидовДоговоров.Добавить(ПредопределенноеЗначение(""Перечисление.ВидыДоговоровКонтрагентов.СПокупателем""))");//в 8.1 нет такого метода
		
		Попытка //реорганизация в типовой БП30
			Выполнить("РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Док.ДоговорКонтрагента, Док.Контрагент, Док.Организация,СписокВидовДоговоров);");
		исключение
			Выполнить("БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Док.ДоговорКонтрагента, Док.Контрагент, Док.Организация,СписокВидовДоговоров);");
		КонецПопытки;
		
		РеквизитыДоговора = Неопределено;
		Выполнить("РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Док.ДоговорКонтрагента, ""Владелец,ТипЦен,ВидДоговора"")");
		Если ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
			Док.ТипЦен           = РеквизитыДоговора.ТипЦен;
			Док.СуммаВключаетНДС = РеквизитыДоговора.ТипЦен.ЦенаВключаетНДС;
			флСуммаВключаетНДС = Док.СуммаВключаетНДС;
		КонецЕсли;
		
		СтруктураКурсаДокумента = Неопределено;
		Выполнить("СтруктураКурсаДокумента     = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Док.ВалютаДокумента, ТекущаяДата())");
		Док.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Док.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		
		
	КонецЕсли;
	
	ТипПоставки = ТипПоставкиСообщения(Сообщение);
	Док.Комментарий = "Загружен из Контур-EDI"+?(ТипПоставки="","",", тип поставки: "+ТипПоставки);
	
	Если не ЗначениеЗаполнено(Док.Дата) Тогда 
		Док.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		Если ИмяКонфигурации1С <> "УФ_УНФ" Тогда 
			Док.АдресДоставки	= Грузополучатель.АдресДоставки;
		Иначе
			//Док.Грузополучатель	= Грузополучатель.АдресДоставки;
		КонецЕсли;
	КонецЕсли;	
	
	Если ИмяКонфигурации1С <> "УФ_УНФ" Тогда 
		Док.Товары.Очистить();
	Иначе
		Док.Запасы.Очистить();
	КонецЕсли;
	
	ЕстьРеквизитВариантОбеспечения = ложь;
	Если ИмяКонфигурации1С = "УФ_УТ" Тогда 
		ЕстьРеквизитВариантОбеспечения = Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.Найти("ВариантОбеспечения")<>Неопределено;
	КонецЕсли;
	
	ТоварыЗаказа=Сообщение.Товары;
	Для Каждого Стр Из ТоварыЗаказа Цикл
		
		Если Стр.НеЗагружать=истина тогда Продолжить; КонецЕсли;
		
		Если ИмяКонфигурации1С <> "УФ_УНФ" Тогда 
			НоваяСтрока = Док.Товары.Добавить();
		Иначе
			НоваяСтрока = Док.Запасы.Добавить();
		КонецЕсли;
		
		Если ИмяКонфигурации1С = "УФ_УНФ" Тогда
			
			НоваяСтрока.Номенклатура		= Стр.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения	= Стр.ЕдиницаИзмерения;
			Попытка
				НоваяСтрока.СтруктурнаяЕдиница	= Док.СтруктурнаяЕдиница;
			Исключение
				//1.5, 1.6 нет С.Е.
			КонецПопытки;
			НоваяСтрока.Количество			= Стр.Количество;
			
			Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда 
				НоваяСтрока.Характеристика			= Стр.ХарактеристикаНоменклатуры;
			КонецЕсли;
			
		ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
			
			НоваяСтрока.Номенклатура		= Стр.Номенклатура;
			Если ИмяДокЗаказ="РеализацияТоваровУслуг" Тогда 
				НоваяСтрока.ЕдиницаИзмерения	= Стр.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент			= 1;
			КонецЕсли;
			НоваяСтрока.Количество			= Стр.Количество;
			
		Иначе //УТ
			
			НоваяСтрока.Номенклатура		= Стр.Номенклатура;
			НоваяСтрока.Упаковка			= Стр.ЕдиницаИзмерения;
			НоваяСтрока.КоличествоУпаковок	= Стр.Количество;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда 
				НоваяСтрока.Количество			= Стр.Количество;//базовая единица
			иначе
				Если ОпределитьРелизКонфигурации() = "11.2" Тогда
					СтруктураДействий=Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока,СтруктураДействий,Неопределено)");
				Иначе
					НоваяСтрока.Количество			= Стр.Количество*НоваяСтрока.Упаковка.Коэффициент;//в упаковках
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Склад				= Док.Склад;
			Если НЕ ИмяДокЗаказ="РеализацияТоваровУслуг" Тогда
				Попытка
					НоваяСтрока.ДатаОтгрузки                     = Док.ДатаОтгрузки;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			НоваяСтрока.Характеристика	= Стр.ХарактеристикаНоменклатуры;
			
		КонецЕсли;
		
		//рефакторинг от //bps
		Если ЗначениеЗаполнено(Стр.СтавкаНДС1С) Тогда
			НоваяСтрока.СтавкаНДС			= Стр.СтавкаНДС1С;
		Иначе
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И ЗначениеЗаполнено(Стр.ЦенаБезНДС) И ЗначениеЗаполнено(Стр.ЦенаСНДС) Тогда
				
				СтавкаНДС = Окр((Стр.ЦенаСНДС * 100) / Стр.ЦенаБезНДС-100,0);
				Если ИмяКонфигурации1С="УФ_УНФ" Тогда
					НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка",СтавкаНДС);
					Стр.СтавкаНДС1С = НоваяСтрока.СтавкаНДС;
				Иначе	
					Если СтавкаНДС = 18 Тогда
						НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
						Стр.СтавкаНДС1С = НоваяСтрока.СтавкаНДС;	
					ИначеЕсли СтавкаНДС = 10 Тогда
						НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
						Стр.СтавкаНДС1С = НоваяСтрока.СтавкаНДС;	
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда 
					НоваяСтрока.СтавкаНДС		= НоваяСтрока.Номенклатура.СтавкаНДС;
					Стр.СтавкаНДС1С				= НоваяСтрока.Номенклатура.СтавкаНДС;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьНедостающиеПоляСтрокиТоваров(Стр);
		
		Если флСуммаВключаетНДС Тогда
			НоваяСтрока.Цена = Стр.ЦенаСНДС;
		Иначе        
			НоваяСтрока.Цена = Стр.ЦенаБезНДС;
		КонецЕсли;	
		
		Если ИмяКонфигурации1С = "УФ_БП" Тогда
			Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока)");
			Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, флСуммаВключаетНДС)");
		ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда
			СтавкаНДС =18;
			Выполнить("СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС)");
			НоваяСтрока.СуммаНДС = ?(флСуммаВключаетНДС, 
			НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
			НоваяСтрока.Сумма * СтавкаНДС / 100);
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Док.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);						  
			
			Если ОпределитьРелизКонфигурации()="1.6" Тогда 
				Выполнить("РаботаСНоменклатуройКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(Док, НоваяСтрока, ""Запасы"")");
			КонецЕсли;
			
		Иначе
			Выполнить("НоваяСтрока.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, флСуммаВключаетНДС)");
			Выполнить("Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока,ложь,ложь,ложь,флСуммаВключаетНДС)");
		КонецЕсли;
		
		Если ЕстьРеквизитВариантОбеспечения Тогда 
			Попытка //11.1 несколько из релизов
				Выполнить("НоваяСтрока.ВариантОбеспечения = ОбеспечениеКлиентСервер.ВариантОбеспеченияПоУмолчанию(НоваяСтрока.Номенклатура.ТипНоменклатуры,Ложь);");
			Исключение
				//не тот релиз
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРеквизитВариантОбеспечения и (РелизКонфигурации1С = "11.1" или РелизКонфигурации1С = "11.2") Тогда 
		Попытка //11.1,11.2
			ЗаполнитьОбособленно=Ложь;
			Выполнить("ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Док.Товары, ЗаполнитьОбособленно);");
		Исключение
			//11.0 или 11.1 старых версий
		КонецПопытки;
	КонецЕсли;
	
	Если ИмяКонфигурации1С = "УФ_БП" и ИмяДокЗаказ="РеализацияТоваровУслуг" Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Товары");
		Док.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью",истина)   //нов релиз
	КонецЕсли;
	
	Если ИмяКонфигурации1С = "УФ_УНФ" Тогда
		Док.СуммаДокумента = Док.Запасы.Итог("Всего");
	ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
		Док.СуммаДокумента = Док.Товары.Итог("Сумма");
	Иначе
		Если флСуммаВключаетНДС Тогда 
			Док.СуммаДокумента = Док.Товары.Итог("Сумма");
		иначе
			Док.СуммаДокумента = Док.Товары.Итог("СуммаСНДС");
		КонецЕсли;
	КонецЕсли;
	
	//Док.ОбменДанными.Загрузка=Истина; //событие перед записью нужно все же отработать
	
	Док.Записать();
	
	Если ИмяКонфигурации1С = "УФ_УТ" Тогда
		
		Если РелизКонфигурации1С = "11.1" или РелизКонфигурации1С = "11.2" Тогда 
			СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Док.Склад);
			Выполнить("СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Док.Склад, СкладГруппа, Док.Товары, Ложь)");
			ДанныеДляФС= "";
			
			Попытка
				Выполнить("ДанныеДляФС=НоменклатураСервер.ПараметрыУказанияСерий(Док, Документы.ЗаказКлиента)");
				Выполнить("ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(ДанныеДляФС)");//в 8.1 нет такого метода
				Если НЕ ИмяДокЗаказ="РеализацияТоваровУслуг" Тогда
					Выполнить("НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий)");
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			УФ_УТ_ПрименитьАвтоматическиеСкидки(Док);
			
		ИначеЕсли  РелизКонфигурации1С = "11.0" Тогда
			
			СкладГруппа=Справочники.Склады.ПустаяСсылка();
			ПараметрыУказанияСерий=неопределено;
			Выполнить("СкладГруппа = ЗначениеНастроекПовтИсп.ПолучитьПризнакСкладГруппаВПродажах(Док.Склад)");
			Выполнить("ОбработкаТабличнойЧастиСервер.ЗаполнитьСкладыВТабличнойЧасти(Док.Склад, СкладГруппа, Док.Товары, Ложь)");
			Выполнить("ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЗаказКлиента.ПараметрыУказанияСерий(Док))");//в 8.1 нет такого метода
			Если НЕ ИмяДокЗаказ="РеализацияТоваровУслуг" Тогда
				Выполнить("ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий(Док, ПараметрыУказанияСерий)");
			КонецЕсли;
			
			
			//Выполнить("ОбработкаТабличнойЧастиСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(   //и так вызовется после записи дока
			//|	Док.Товары,
			//|	Новый Структура(
			//|		""ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи"",
			//|		Новый Структура(""Номенклатура"", ""ХарактеристикиИспользуются""),
			//|		Новый Структура(""Номенклатура"", ""ТипНоменклатуры""),
			//|		Новый Структура(""Номенклатура"", ""ВариантОформленияПродажи"")
			//|	)
			//|)");
			
		КонецЕсли;
		
		Если НЕ ИмяДокЗаказ="РеализацияТоваровУслуг" Тогда 
			Попытка   //неизвестно, начиная с какой версии они вынесли это в перед записью документа
				Выполнить("Док.РассчитатьДатуОтгрузки()");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Док.Записать();
	КонецЕсли;	
	
	//собственные цены
	Если ЗначениеЗаполнено(Партнер) и УстанавливатьСобственныеЦеныВПринятыхЗаказах Тогда 	
		ЦеныУстановлены=Ложь;
		Если ИмяКонфигурации1С = "УФ_УТ" Тогда
			ЦеныУстановлены=УстановитьСобственныеценыВЗаказ_УТ(Док);
			УФ_УТ_ПрименитьАвтоматическиеСкидки(Док);
		ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда 
			ЦеныУстановлены=УстановитьСобственныеценыВЗаказ_БП(Док);
		ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" и ОпределитьРелизКонфигурации()="1.6"  Тогда 
			ЦеныУстановлены=УстановитьСобственныеценыВЗаказ_УНФ16(Док);
		КонецЕсли;
		Если ЦеныУстановлены Тогда 
			Док.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УФ_УТ_ПрименитьАвтоматическиеСкидки(ДокОбъект)
	Попытка
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);
		
		Выполнить("СкидкиНаценкиСервер.Рассчитать(ДокОбъект, СтруктураПараметры);");
		ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма");
	Исключение
	КонецПопытки;
КонецПроцедуры


//В ут 11 колонка ЕИ будет нетипизирована (ЕИ/Уп/null) - необходимо типизировать и связь построить по 2ум колонкам
Процедура ПреобразоватьТипыЕдиницыИзмеренияЗапросаУТ11_УНФ(Запрос)
	
	Если ИмяКонфигурации1С = "УФ_УТ" ИЛИ ИмяКонфигурации1С = "УФ_УНФ" тогда
		
		ТабТоваровНетипизированная = Запрос.Параметры.ТаблицаТоваров;
		
		Если ИмяКонфигурации1С = "УФ_УТ" И ОпределитьРелизКонфигурации() = "11.2" Тогда
			ТабТоваровНетипизированная.Колонки.Добавить("ЕдиницаИзмеренияТип1",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		Иначе
			ТабТоваровНетипизированная.Колонки.Добавить("ЕдиницаИзмеренияТип1",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		КонецЕсли;
		
		Если ИмяКонфигурации1С = "УФ_УТ" Тогда 
			Если ОпределитьРелизКонфигурации() = "11.2" Тогда
				ТабТоваровНетипизированная.Колонки.Добавить("ЕдиницаИзмеренияТип2",Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			Иначе
				ТабТоваровНетипизированная.Колонки.Добавить("ЕдиницаИзмеренияТип2",Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
			КонецЕсли;
		Иначе
			ТабТоваровНетипизированная.Колонки.Добавить("ЕдиницаИзмеренияТип2",Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		КонецЕсли;
		
		Для Каждого СтрокаТоваров ИЗ ТабТоваровНетипизированная Цикл
			Если ИмяКонфигурации1С = "УФ_УТ" И ОпределитьРелизКонфигурации() = "11.2" 
				И (ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения)=Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") ИЛИ СтрокаТоваров.ЕдиницаИзмерения=Неопределено) Тогда
				СтрокаТоваров.ЕдиницаИзмеренияТип2=СтрокаТоваров.ЕдиницаИзмерения;
			Иначе
				Если ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтрокаТоваров.ЕдиницаИзмеренияТип1=СтрокаТоваров.ЕдиницаИзмерения;
				ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" И ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения)=Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда 
					СтрокаТоваров.ЕдиницаИзмеренияТип2=СтрокаТоваров.ЕдиницаИзмерения;
				ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" И ТипЗнч(СтрокаТоваров.ЕдиницаИзмерения)=Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда 
					СтрокаТоваров.ЕдиницаИзмеренияТип2=СтрокаТоваров.ЕдиницаИзмерения;
				Иначе
					//оставить пустыми наверное???
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТабТоваровНетипизированная.Колонки.Удалить("ЕдиницаИзмерения");
		Запрос.Параметры.ТаблицаТоваров= ТабТоваровНетипизированная;//теперь типизированная
		
		//Типизировали Таблицу товаров, теперь только объяснить Запросу что связь через 2 колонки
		
		ТекстЗапроса = Запрос.Текст;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Таб.ЕдиницаИзмерения КАК ЕдиницаИзмерения","Таб.ЕдиницаИзмеренияТип1 КАК ЕдиницаИзмеренияТип1,
		|	Таб.ЕдиницаИзмеренияТип2 КАК ЕдиницаИзмеренияТип2");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"_ТабТоваров.ЕдиницаИзмерения,","ВЫБОР КОГДА _ТабТоваров.ЕдиницаИзмеренияТип1 = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ТОГДА _ТабТоваров.ЕдиницаИзмеренияТип2
		|	ИНАЧЕ _ТабТоваров.ЕдиницаИзмеренияТип1
		|	КОНЕЦ КАК ЕдиницаИзмерения,");
		
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИНДЕКСИРОВАТЬ ПО
|	Номенклатура,
|	ХарактеристикаНоменклатуры,
|	ЕдиницаИзмерения","ИНДЕКСИРОВАТЬ ПО
|	Номенклатура,
|	ХарактеристикаНоменклатуры");
		
		Запрос.Текст= ТекстЗапроса;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТаблицуДокументовДляПривязки_к_ORDERS(ДокументСсылка,НачалоПериода,КонецПериода) Экспорт
	
	//предложим привязать другие заказы/реализации к ORDERS	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Проведен,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.Склад как Склад,
	|	РеализацияТоваровУслуг.Комментарий,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РеализацияТоваровУслуг.Организация = &Организация
	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.Грузополучатель = &Грузополучатель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|");
	
	_ТипДокументаЗаказ = ПолучитьТипЗначенияОбъекта("ВходящийЗаказПокупателя",,Истина);
	
	Если Метаданные.Документы[_ТипДокументаЗаказ].Реквизиты.Найти("Грузополучатель")=Неопределено Тогда
		//уберем этот реквизит из запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И РеализацияТоваровУслуг.Грузополучатель = &Грузополучатель","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РеализацияТоваровУслуг.Грузополучатель","""""");
	Иначе
		Запрос.УстановитьПараметр("Грузополучатель",ДокументСсылка.Грузополучатель);
	КонецЕсли;	
	
	//Поле Склад может в документе называться по-другому или вообще отсутствовать. Соберем наиболее часто встречающиеся случаи:
	МетаданныеДокументаЗаказа = Метаданные.Документы[_ТипДокументаЗаказ];
	Если МетаданныеДокументаЗаказа.Реквизиты.Найти("СкладГруппа")<>Неопределено Тогда
		//если у нас ЗаказПокупателя из УТ,УПП,КА
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РеализацияТоваровУслуг.Склад","РеализацияТоваровУслуг.СкладГруппа");
		
	ИначеЕсли МетаданныеДокументаЗаказа.Реквизиты.Найти("СкладКомпании")<>Неопределено Тогда
		//для ТКПТ
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РеализацияТоваровУслуг.Склад","РеализацияТоваровУслуг.СкладКомпании");
		
	ИначеЕсли МетаданныеДокументаЗаказа.Реквизиты.Найти("Склад") = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг.Склад", """""");
		
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"РеализацияТоваровУслуг",_ТипДокументаЗаказ);
	
	ИмяРеквизитаОрганизация = ?(ИмяКонфигурации1С = "ДалионУМ" ИЛИ ИмяКонфигурации1С = "АСТОР", "Фирма", "Организация");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,_ТипДокументаЗаказ+".Организация",_ТипДокументаЗаказ+"."+ИмяРеквизитаОрганизация);
	
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация",ДокументСсылка[ИмяРеквизитаОрганизация]);
	Запрос.УстановитьПараметр("Контрагент",ДокументСсылка.Контрагент);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	ТекстЗапросаПоСообщениям = 
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументы.Ссылка,
	|	ВТДокументы.Номер,
	|	ВТДокументы.Дата,
	|	ВТДокументы.Проведен,
	|	ВТДокументы.СуммаДокумента,
	|	ВТДокументы.Склад,
	|	ВТДокументы.Комментарий,
	|	ВТДокументы.Контрагент,
	|	ВТДокументы.Организация,
	|	ВТДокументы.Грузополучатель
	|ИЗ
	|	ВТДокументы КАК ВТДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ПО ВТДокументы.Ссылка = КонтурEDI_Сообщения.Документ
	|			И (КонтурEDI_Сообщения.ТипСообщения = ""ORDERS"")
	|ГДЕ
	|	КонтурEDI_Сообщения.Ссылка ЕСТЬ NULL ";
	
	ТекстЗапросаПоСообщениям = СтрЗаменить(ТекстЗапросаПоСообщениям, "ВТДокументы.Организация", "ВТДокументы."+ИмяРеквизитаОрганизация+" КАК Организация");
	
	Если ВнешнееХранилище Тогда
		Запрос.Текст = "Выбрать * Из ВТДокументы";
		ВремТаб = Запрос.Выполнить().Выгрузить();
		Запрос_Внешний = СоединениеСХранилищем.NewObject("Запрос");
		Запрос_Внешний.УстановитьПараметр("ВТДокументы",ПоместитьТаблицуВоВнешнююБазу(ВремТаб));
		Запрос_Внешний.Текст = "Выбрать _ВТДокументы.* Поместить ВТДокументы Из &ВТДокументы как _ВТДокументы Индексировать по Ссылка; "
								+ ТекстЗапросаПоСообщениям;
		Таб = Запрос_Внешний.Выполнить().Выгрузить();
		
		СтруктураПреобразованияКолонок = Новый Структура;
		СтруктураПреобразованияКолонок.Вставить("Организация",Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое",,)));
		СтруктураПреобразованияКолонок.Вставить("Контрагент",Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее",,)));
		СтруктураПреобразованияКолонок.Вставить("Грузополучатель",Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее",,)));
		
		ТипСклад = ПолучитьТипЗначенияОбъекта("ТочкаДоставкиСвоя");
		СтруктураПреобразованияКолонок.Вставить("Склад",Новый ОписаниеТипов(ТипСклад));
		
		СтруктураПреобразованияКолонок.Вставить("Ссылка",Документы.ТипВсеСсылки());
		
		Таб = ПолучитьТаблицуИзВнешнейБазы(Таб,СтруктураПреобразованияКолонок);
		
	Иначе
		Запрос.Текст = ТекстЗапросаПоСообщениям;
		Таб = Запрос.Выполнить().Выгрузить();
	КонецЕсли;	
	
	Возврат Таб;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоступления_УФ(Док,НоваяСтрока,Стр,НайденныйЗаказ,флСуммаВключаетНДС);
	НоваяСтрока.Характеристика		= Стр.ХарактеристикаНоменклатуры;
	НоваяСтрока.Упаковка			= Стр.ЕдиницаИзмерения;
	НоваяСтрока.КоличествоУпаковок	= Стр.Количество;
	НоваяСтрока.ЗаказПоставщику		= НайденныйЗаказ;
	Если Не ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда 
		НоваяСтрока.Количество			= Стр.Количество;//базовая единица
	иначе
		Если ОпределитьРелизКонфигурации() = "11.2" Тогда
			СтруктураДействий=Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			Выполнить("ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока,СтруктураДействий,Неопределено)");
		Иначе
			НоваяСтрока.Количество			= Стр.Количество*НоваяСтрока.Упаковка.Коэффициент;//в упаковках
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Склад				= Док.Склад;
	НоваяСтрока.СтавкаНДС			= Стр.СтавкаНДС1С;
	Если флСуммаВключаетНДС Тогда
		НоваяСтрока.Цена			= Стр.ЦенаСНДС;
		НоваяСтрока.Сумма			= Стр.СуммаСНДС;
	Иначе
		НоваяСтрока.Цена			= Стр.ЦенаБезНДС;
		НоваяСтрока.Сумма			= Стр.СуммаБезНДС;
	КонецЕсли;
	Выполнить("НоваяСтрока.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, флСуммаВключаетНДС)");
	Выполнить("Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока,ложь,ложь,ложь,флСуммаВключаетНДС)");
	
	//  нужно корректно привязать строки к заказу
	//если будет несколько строк в заказе - печаль беда
	ПоискСтрок=Новый Структура("Номенклатура,Упаковка,Отменено",НоваяСтрока.Номенклатура,НоваяСтрока.Упаковка,ложь);
	НайденныеСтроки = НайденныйЗаказ.Товары.НайтиСтроки(ПоискСтрок);
	НайденоСтрок=НайденныеСтроки.Количество();
	Если НайденоСтрок=1 Тогда 
		НайденнаяСтрокаЗаказа=НайденныеСтроки[0];
		Если НоваяСтрока.Номенклатура<>Неопределено Тогда 
			НоваяСтрока.КодСтроки=НайденнаяСтрокаЗаказа.КодСтроки;
		иначе
			НоваяСтрока.КодСтроки = 0;    //незаказанное
			НоваяСтрока.РасхождениеЗаказ = 1;
		КонецЕсли;
		
		НоваяСтрока.НомерСтрокиДокументаПоставщика=НоваяСтрока.НомерСтроки;
		НоваяСтрока.Характеристика=НайденнаяСтрокаЗаказа.Характеристика;
	ИначеЕсли  НайденоСтрок>1 Тогда
		//
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПоступления_УФ_БП(Док,НоваяСтрока,Стр,НайденныйЗаказ,флСуммаВключаетНДС);
	
	НоваяСтрока.ЕдиницаИзмерения	= Стр.ЕдиницаИзмерения;
	НоваяСтрока.Количество			= Стр.Количество;
	НоваяСтрока.Коэффициент			= 1;
	//НоваяСтрока.Склад				= Док.Склад;
	НоваяСтрока.СтавкаНДС			= Стр.СтавкаНДС1С;
	
	Если флСуммаВключаетНДС Тогда
		НоваяСтрока.Цена			= Стр.ЦенаСНДС;
		НоваяСтрока.Сумма			= Стр.СуммаСНДС;
	Иначе
		НоваяСтрока.Цена			= Стр.ЦенаБезНДС;
		НоваяСтрока.Сумма			= Стр.СуммаБезНДС;
	КонецЕсли;
	
	ЗаполнитьНедостающиеПоляСтрокиТоваров(Стр);
	Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока)");
	Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, флСуммаВключаетНДС)");
	
КонецПроцедуры

//Облегчим работу с поиском реквизитов.
//Можно заодно кэшировать
Функция ЕстьРеквизитОбъекта_Контур(Объект,ИмяРеквизита,ИмяТабличнойЧасти=Неопределено)
	
	Результат = Ложь;
	
	_Метаданные = Объект.Метаданные();
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		Результат = НЕ _Метаданные.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяРеквизита)=Неопределено
	Иначе	
		Результат = НЕ _Метаданные.Реквизиты.Найти(ИмяРеквизита)=Неопределено
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//}#КонецОбласти //20_Конфигурация


//{#Область 30_ОбработкаРасхожденийСообщенияДокумента
	
//Вынесены общие блоки из форм ОбработкаРасхожденийПриемки (управляемой и обычной).
//Это пересекается с областью 20 Конфигурация, продумать размещение методов.
	
//разворачивает дерево Таб, которое видит пользователь, в плоскую ТаблицуЗначений
Функция РазложитьДеревоСоответствийВТаблицу(ДеревоСоответствий) Экспорт
	
	ТабСоответствий = Новый ТаблицаЗначений;
	ДобавитьКолонкиВТаблицуЗначений(ТабСоответствий,
			"Номенклатура
			|ЕдиницаИзмерения
			|ХарактеристикаНоменклатуры
			|СерияНоменклатуры
			|КоличествоВНакладной
			|КоличествоПринято
			|ЦенаБезНДСВНакладной
			|ЦенаСНДСВНакладной
			|СуммаБезНДСВНакладной
			|СуммаСНДСВНакладной
			|ЦенаБезНДСПринято
			|ЦенаСНДСПринято
			|СуммаБезНДСПринято
			|СуммаСНДСПринято"
		);
	
	Для Каждого СтрОсн Из ДеревоСоответствий.Строки Цикл
		
		Если СтрОсн.ГруппаНоменклатур Тогда
			Для Каждого Стр Из СтрОсн.Строки Цикл
				НоваяСтрока = ТабСоответствий.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			КонецЦикла;
		Иначе
			НоваяСтрока = ТабСоответствий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрОсн);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабСоответствий;
	
КонецФункции	

//типовой механизм пересчета цен/сумм в документе
Процедура ПересчитатьСтрокуДокумента(НайденнаяСтрока,Док) Экспорт
	
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(НайденнаяСтрока)).Имя;
	
	Если ИмяКонфигурации1С = "УТ_10_2" ИЛИ ИмяКонфигурации1С = "RIT" Тогда
		
		Выполнить("РассчитатьКоличествоМестТабЧасти(НайденнаяСтрока, Док);");
		Выполнить("РассчитатьСуммуТабЧасти(НайденнаяСтрока, Док);");
		Если ИмяТабличнойЧасти<>"ВозвратнаяТара" Тогда
			Выполнить("РассчитатьСуммуНДСТабЧасти(НайденнаяСтрока, Док);");
		КонецЕсли;
		
	ИначеЕсли ИмяКонфигурации1С = "ТКПТ" Тогда 
		
		Выполнить("Док.ОбработкаРеквизита(""Товары.Количество"",НайденнаяСтрока);");
		
		//блок УФ
	ИначеЕсли ИмяКонфигурации1С = "УФ_УТ" Тогда
		
		Выполнить("Ценообразование.ПересчитатьСуммыВСтроке(НайденнаяСтрока,ложь,ложь,ложь,Док.ЦенаВключаетНДС)");
		//очистим СуммаВзаиморасчетов по тч (пересчитаем после обхода стандартным образом)
		Попытка //Реализация или возврат- в возврате нет такого реквизита
			НайденнаяСтрока.СуммаВзаиморасчетов=0;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_БП" Тогда
		
		Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НайденнаяСтрока, 0)");
		Выполнить("ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НайденнаяСтрока, Док.СуммаВключаетНДС)");
		//итоги пересчитаются в конф-ции при записи
		
	ИначеЕсли ИмяКонфигурации1С = "УФ_УНФ" Тогда
		
		//нет нормальной серверной функции ОМ .хмммм
		
		НайденнаяСтрока.Сумма = НайденнаяСтрока.Цена * НайденнаяСтрока.Количество;						  
		СтавкаНДС = 18;
		Выполнить("СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НайденнаяСтрока.СтавкаНДС)");
		НайденнаяСтрока.СуммаНДС = ?(Док.СуммаВключаетНДС, 
									  НайденнаяСтрока.Сумма - (НайденнаяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
									  НайденнаяСтрока.Сумма * СтавкаНДС / 100);
									  
		НайденнаяСтрока.Всего = НайденнаяСтрока.Сумма + ?(Док.СуммаВключаетНДС, 0, НайденнаяСтрока.СуммаНДС);						  

	ИначеЕсли ИмяКонфигурации1С = "ДалионУМ" Тогда
		
		СвойстваТЧТовары = Новый Структура;
		СвойстваТЧТовары.Вставить("ИмяТЧ", "Товары");
		СвойстваТЧТовары.Вставить("ХарактеристикаНоменклатуры");
		СвойстваТЧТовары.Вставить("ЕдиницаИзмерения");
		СвойстваТЧТовары.Вставить("Цена");
		Если ТипЗнч(Док) = Тип("ДокументСсылка.РасходнаяНакладная") или
			 ТипЗнч(Док) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
			Выполнить("тчПриИзмененииКоличестваТабЧастиРасходнойНакладной(НайденнаяСтрока, Док, СвойстваТЧТовары);");
		Иначе
			Выполнить("тчПриИзмененииКоличестваТабЧасти(НайденнаяСтрока, Док, СвойстваТЧТовары);");
		КонецЕсли;
		Выполнить("тчПриИзмененииСтавкиНДСТабЧасти(НайденнаяСтрока, Док, СвойстваТЧТовары);");
		
	Иначе//остальные типовые конфигурации
		
		Если ИмяКонфигурации1С <> "БП" Тогда
			Выполнить("ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НайденнаяСтрока, Док);");
		КонецЕсли;
		
		Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НайденнаяСтрока, Док);");
		
		Если ИмяТабличнойЧасти<>"ВозвратнаяТара" Тогда
			Выполнить("ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НайденнаяСтрока, Док);");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

//находит в табличной части Товары документа Док строку, соответствующую СтрокаСоответствий
Функция НайтиСоответствиеСтрокиВДокументе(СтрокаСоответствий,Док) Экспорт
	
	ИспользуютсяСерии	= НЕ (ИмяКонфигурации1С = "БП" или ИмяКонфигурации1С = "УФ_БП");
	НайденнаяСтрока		= Неопределено;
	ПриоритетПоиска		= 0;
	
	ИмяТабличнойЧастиДокумента = ?(ИмяКонфигурации1С = "УФ_УНФ" , "Запасы" , "Товары"); 
	ИмяРеквизитаХарактеристика = ?(ИмяКонфигурации1С = "УФ_УНФ" или ИмяКонфигурации1С = "УФ_УТ" , "Характеристика" , "ХарактеристикаНоменклатуры");
	
	Для Каждого СтрокаДокумента Из Док[ИмяТабличнойЧастиДокумента] Цикл
		
		Если СтрокаСоответствий.Номенклатура = СтрокаДокумента.Номенклатура Тогда
			
			//У совпадающей номенклатуры приоритет 1
			ТекПриоритет = 1;
			
			//Если характеристика тоже совпадет, увеличим приоритет
			Если НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры И ЗначениеЗаполнено(СтрокаСоответствий.ХарактеристикаНоменклатуры) Тогда
				
				Если СтрокаДокумента[ИмяРеквизитаХарактеристика] = СтрокаСоответствий.ХарактеристикаНоменклатуры Тогда
					ТекПриоритет = ТекПриоритет+1;
				КонецЕсли;
				
			ИначеЕсли Не НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
				//ИмяКонфигурации1С = "БП" или ИмяКонфигурации1С = "УФ_БП"  Тогда
				
				ТекПриоритет = ТекПриоритет+1;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаДокумента[ИмяРеквизитаХарактеристика]) Тогда
				
				ТекПриоритет = ТекПриоритет+1;
				
			КонецЕсли;
			
			//Если в строке совпадает еще и серия, увеличим приоритет
			Если ИмяКонфигурации1С <>"УФ_УТ" И ИспользуютсяСерии И ЗначениеЗаполнено(СтрокаСоответствий.СерияНоменклатуры) Тогда
				Если СтрокаДокумента.СерияНоменклатуры = СтрокаСоответствий.СерияНоменклатуры Тогда
					ТекПриоритет = ТекПриоритет+1;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекПриоритет>ПриоритетПоиска Тогда
				НайденнаяСтрока = СтрокаДокумента;
				ПриоритетПоиска = ТекПриоритет;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденнаяСтрока;//вернем наиболее подходящую строку, т.е. с наивысшим приоритетом
	
КонецФункции	

//Таб - ДеревоЗначений из формы ОбработкаРасхожденийПриемки (обычной или управляемой)
//В нем содержатся строки из исходного сообщения и соответствующие им строки из документа (Реализация,Заказ).
Процедура ЗаполнитьДеревоРасхожденийДокумента(Таб,Документ,ИсточникРасхождений,Успешно,ТоварыСообщения = Неопределено,СообщениеСсылка) Экспорт
	
	Таб.Строки.Очистить();
	
	Если ИсточникРасхождений = "ОбратныйЗаказ" Тогда
		Сообщение		= ПрочитатьСообщение(СообщениеСсылка,Документ,"ORDERS","Входящее");
		КонвертироватьСообщениеEDIв1С(Сообщение); // для добавления нового товара
		ТоварыДокумента	= ПолучитьТоварыДокумента1С(Документ,"ОбработкаРасхожденийОбратногоЗаказа",Сообщение);
	Иначе
		Параметры		= Новый Структура("ИсточникРасхождений", ИсточникРасхождений);
		Сообщение		= ПрочитатьСообщение(СообщениеСсылка,Документ,"RECADV","Входящее",,Параметры);
		ТоварыДокумента = ПолучитьТоварыДокумента1С(Документ,"ОбработкаРасхожденийПриемки",Сообщение);
	КонецЕсли;
	
	Партнер = Сообщение.Партнер;
	
	ПересчитатьТоварыСообщения(ТоварыДокумента,Партнер,"В1С");//в этот момент товары документа уже пересчитаны в EDI, вернем значения обратно
	ПересчитатьТоварыСообщения(Сообщение.Товары,Партнер,"В1С");
	
	Если Сообщение = Неопределено Тогда
		ВывестиПредупреждение_КонтурEDI("Не удалось прочитать сообщение!");
		//ЭтаФорма.Закрыть();
		Успешно = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТоварыДокумента.Колонки.Найти("Пометка")<>Неопределено Тогда
		ТоварыДокумента.Колонки.Удалить("Пометка");
	КонецЕсли;	
	ТоварыДокумента.Колонки.Добавить("Пометка",Новый ОписаниеТипов("Булево"));
	
	//добавим колонки ХарактеристикаНоменклатуры и СерияНоменклатуры, если их нет в ТоварыДокумента (например, для БП)
	ДобавитьКолонкиВТаблицуЗначений(ТоварыДокумента,"ХарактеристикаНоменклатуры,СерияНоменклатуры");
	
	ТоварыСообщения = Новый("ТаблицаЗначений");
	ТоварыСообщения = Сообщение.Товары;
	
	
	СверятьВRECADVЦеныИСтавки = (ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СверятьВRECADVЦеныИСтавки") = Истина);
	Если СверятьВRECADVЦеныИСтавки Тогда
		МассивЧисловыхПолей = EDI_РазложитьСтрокуВМассивСлов("Количество,ЦенаБезНДС,ЦенаСНДС,СуммаБезНДС,СуммаСНДС",",");
	Иначе
		МассивЧисловыхПолей = EDI_РазложитьСтрокуВМассивСлов("Количество",",");
	КонецЕсли;
	
	ТоварыНакладной = Новый ТаблицаЗначений;//выываливаем сюда все строки, которые будут соответствовать строке из RECADV
	ДобавитьКолонкиВТаблицуЗначений(ТоварыНакладной,
		"Номенклатура
		|ЕдиницаИзмерения
		|ХарактеристикаНоменклатуры
		|СерияНоменклатуры"
	);
	ДобавитьКолонкиВТаблицуЗначений(ТоварыНакладной,МассивЧисловыхПолей);
	
	ТоварыСинхронизируютсяТолькоПоGTIN = ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Партнер,"СинхронизироватьТоварыТолькоПоGTIN")= Истина; 	
	
	Для Каждого Стр Из ТоварыСообщения Цикл
		
		ТоварыНакладной.Очистить();
		//ТоварыНакладной - это таблица товаров из ТоварыДокумента, которые подходят под текущую строку RECADV
		
		НоваяСтрока = Таб.Строки.Добавить();
		Для Каждого Поле Из МассивЧисловыхПолей Цикл
			НоваяСтрока[Поле+"Принято"]   = Стр[Поле];
		КонецЦикла;
		
		//Добавим эту строку из RECADV сразу в дерево Таб, которая на форме.
		//а потом припишем к ней к ней вторую часть - данные из документа Реализация
		
		//ОбластьА//Подберем в ТоварыНакладной все строки из Реализации, подходящие под данную строку из сообщения RECADV
		МассивКодовДляПоиска = Новый Массив;
		//Приоритет 1
		// поиск по коду покупателя (если не он не отключен) если найдется что-то по коду торговой сети - этого достаточно 
		//и дополнительный поиск по GTIN может привести к тому что мы найдем что-то лишнее (т.к. не у всех сетей GTIN является перв. ключем номенклатуры)
		Если Не ТоварыСинхронизируютсяТолькоПоGTIN Тогда
			МассивКодовДляПоиска.Добавить("КодТовараПокупателя");
		КонецЕсли;
		
		//Приоритет 2
		// поиск по GTIN (при этом если найдется по 1 приоритету то не будем применять этот поиск
		МассивКодовДляПоиска.Добавить("GTIN");      // зачем искать еще и по GTIN, если нашли по коду покупателя - ведь GTIN ы могуь быть одинаковыми  
		
		//МассивКодовДляПоиска.Добавить("КодТовараПоставщика"); (закомметировано по причине того, что в случае обработки номенклатуры с характеристиками первой строке RECADV достаются все строки реализации, а другим ничего)
		//будем искать соответствия строк RECADV и Реализации по этим 3 кодам
		НайденоПоПриоритету=0;
		Сч=0;
		Для Каждого ИмяКодаДляПоиска Из МассивКодовДляПоиска Цикл
			Сч=Сч+1; //итератор приоритетов
			Если НайденоПоПриоритету=0 Тогда
				Если ЗначениеЗаполнено(Стр[ИмяКодаДляПоиска]) Тогда
					//Нужны строки, в которых совпадает код и которые еще не были обработаны
					//Будем искать в соотв. с приоритетами кодов
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить(ИмяКодаДляПоиска,Стр[ИмяКодаДляПоиска]);
					СтруктураПоиска.Вставить("Пометка",Ложь);
					НайденныеСтрокиРеализации = ТоварыДокумента.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтрокиРеализации.Количество()>0 Тогда //сделаем отметку на этой строке обхода RECADV и не будем искать другие строки из документа с использованием ключа более низкого приоритета
						НайденоПоПриоритету = Сч;
					КонецЕсли;
					Для Каждого СтрРеализации Из НайденныеСтрокиРеализации Цикл
						СтрРеализации.Пометка = Истина;//больше не будем обрабатывать эту строку, если она потом найдется по следующему коду
						НоваяСтрокаРеализации = ТоварыНакладной.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаРеализации,СтрРеализации);
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		//КонецОбластиА//Теперь в таблице ТоварыНакладной собраны все строки из Реализации, подходящие под данную строку из сообщения RECADV
		
		Если ТоварыНакладной.Количество()=0 Тогда
			//у нас нет такой строки в Реализации. Добавим ее, не заполняя количества/цены "ВНакладной", т.е. на форме в верхней половине строки будут пустые значения
			
			НоваяСтрока.Номенклатура = ?(ЗначениеЗаполнено(Стр.Номенклатура),Стр.Номенклатура,Стр.Наименование);
			НоваяСтрока.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
			
		ИначеЕсли ТоварыНакладной.Количество()=1 Тогда
			//идеальный вариант: мы нашли в накладной только одну строку, которая соответствует строке из RECADV. Заполним в ней количества/цены "ВНакладной"
			
			НоваяСтрока.Номенклатура = ?(ЗначениеЗаполнено(ТоварыНакладной[0].Номенклатура),ТоварыНакладной[0].Номенклатура,ТоварыНакладной[0].Наименование);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТоварыНакладной[0],"ЕдиницаИзмерения,ХарактеристикаНоменклатуры,СерияНоменклатуры");
			
			Для Каждого Поле Из МассивЧисловыхПолей Цикл
				НоваяСтрока[Поле+"ВНакладной"]   = ТоварыНакладной[0][Поле];
			КонецЦикла;
			
		Иначе
			//Это ситуация, когда одна строка из RECADV соответствует нескольким строкам из Реализации.
			//Для нее сделаем отдельную ветку в дереве Таб и закинем в нее соответствующие строки Реализации.
			ОстатокКоличества = НоваяСтрока.КоличествоПринято;
			
			Итог = 0; //посчитаем, какое количество товара из RECADV нам удалось распределить по товарам Реализации.
			Для Каждого СтрРеализации Из ТоварыНакладной Цикл
				НоваяСтрокаРеализации = НоваяСтрока.Строки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРеализации,СтрРеализации,"Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,СерияНоменклатуры");
			
				Для Каждого Поле Из МассивЧисловыхПолей Цикл
					НоваяСтрокаРеализации[Поле+"ВНакладной"]   = СтрРеализации[Поле];
				КонецЦикла;
				
				НоваяСтрокаРеализации.ЦенаБезНДСПринято				= Стр.ЦенаБезНДС;
				НоваяСтрокаРеализации.ЦенаСНДСПринято				= Стр.ЦенаСНДС;
				
				Итог = Итог + СтрРеализации.Количество;
				
				Если ОстатокКоличества>СтрРеализации.Количество Тогда
					НоваяСтрокаРеализации.КоличествоПринято = СтрРеализации.Количество;
					ОстатокКоличества = ОстатокКоличества-СтрРеализации.Количество;
				ИначеЕсли ОстатокКоличества>0 Тогда
					НоваяСтрокаРеализации.КоличествоПринято = ОстатокКоличества;
					ОстатокКоличества = 0;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если в сообщении больше, чем в документе, то добавляем остаток к последней строке
			Если ОстатокКоличества>0 Тогда
				Если ТоварыНакладной.Количество()>0 Тогда
					НоваяСтрокаРеализации.КоличествоПринято = НоваяСтрокаРеализации.КоличествоПринято+ОстатокКоличества;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.КоличествоВНакладной = Итог;
			НоваяСтрока.Номенклатура = ?(ЗначениеЗаполнено(Стр.Номенклатура),Стр.Номенклатура,Стр.Наименование);
			НоваяСтрока.ГруппаНоменклатур = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Теперь пройдемся еще раз по товарам из Реализации и посмотрим, какие строки у нас не распределились по товарам из RECADV.
	//И докинем их в таблицу на форме.
	
	НераспределенныеСтроки = ТоварыДокумента.НайтиСтроки(Новый Структура("Пометка",Ложь));
	Для Каждого Стр Из НераспределенныеСтроки Цикл
		НоваяСтрока = Таб.Строки.Добавить();                   
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр,"Номенклатура,ЕдиницаИзмерения,ХарактеристикаНоменклатуры,СерияНоменклатуры");
		
		Для Каждого Поле Из МассивЧисловыхПолей Цикл
			НоваяСтрока[Поле+"ВНакладной"]   = Стр[Поле];
		КонецЦикла;
			
	КонецЦикла;
	
	//И последняя проверка.
	//Глянем, а есть ли вообще расхождения?
	//Если, например, пришел RECADV с расхождениями, а потом вручную исправили реализацию вне модуля, то расхождений уже не будет 
	флЕстьРасхождения = Ложь;
	ПлоскаяТаблица = РазложитьДеревоСоответствийВТаблицу(Таб);
	Для Каждого ПроверяемаяСтрока Из ПлоскаяТаблица Цикл
		
		Для Каждого Поле Из МассивЧисловыхПолей Цикл
			Если ПроверяемаяСтрока[Поле+"ВНакладной"]   <> ПроверяемаяСтрока[Поле+"Принято"] Тогда
				флЕстьРасхождения = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
	Если Не флЕстьРасхождения Тогда
		//расхождений уже нет, сразу установим нужный статус
		УстановитьСтатусДокумента(Документ,"НакладнаяПринятЧастичноОбработан","Приемка",СообщениеСсылка);
	КонецЕсли;
	
КонецПроцедуры

//}#КонецОбласти //30_ОбработкаРасхожденийСообщенияДокумента

//{#Область 30_АнализДанных

//возвращает товары за период
Функция Анализ_СформироватьИсходныеДанныеСервер(ДатаС,ДатаПо,ОтборПоДатеПоставки=Ложь) Экспорт
	
	ДатаПо = КонецДня(ДатаПо);

	//Для начала соберем только заказы
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_Сообщения.ТипСообщения,
	               |	КонтурEDI_Сообщения.Направление,
	               |	КонтурEDI_Сообщения.НомерДокумента,
	               |	КонтурEDI_Сообщения.ДатаДокумента,
	               |	КонтурEDI_Сообщения.НомерЗаказа,
	               |	КонтурEDI_Сообщения.ДатаЗаказа,
	               |	КонтурEDI_Сообщения.ДатаПоставки,
	               |	КонтурEDI_Сообщения.ТочкаДоставки,
	               |	КонтурEDI_Сообщения.Партнер,
	               |	КонтурEDI_Сообщения.Статус,
	               |	МАКСИМУМ(КонтурEDI_Сообщения.Ссылка) КАК Ссылка,
	               |	КонтурEDI_Сообщения.Организация,
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	               |	0 КАК Количество,
	               |	0 КАК ЦенаБезНДС,
	               |	0 КАК СуммаБезНДС,
	               |	0 КАК ЦенаСНДС,
	               |	0 КАК СуммаСНДС
	               |ИЗ
	               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |ГДЕ
	               |	НЕ КонтурEDI_Сообщения.ПометкаУдаления
	               |	И НЕ КонтурEDI_Сообщения.ТипСообщения ПОДОБНО ""#""
	               |	И НЕ КонтурEDI_Сообщения.ОтклоненоОтправителем
	               |	И КонтурEDI_Сообщения.ДатаЗаказа МЕЖДУ &ДатаОт И &ДатаПо
	               |	И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КонтурEDI_Сообщения.ТипСообщения,
	               |	КонтурEDI_Сообщения.Направление,
	               |	КонтурEDI_Сообщения.НомерДокумента,
	               |	КонтурEDI_Сообщения.ДатаДокумента,
	               |	КонтурEDI_Сообщения.НомерЗаказа,
	               |	КонтурEDI_Сообщения.ДатаЗаказа,
	               |	КонтурEDI_Сообщения.ДатаПоставки,
	               |	КонтурEDI_Сообщения.ТочкаДоставки,
	               |	КонтурEDI_Сообщения.Партнер,
	               |	КонтурEDI_Сообщения.Статус,
	               |	КонтурEDI_Сообщения.Организация";
	
	Если ОтборПоДатеПоставки = истина Тогда
		Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "И КонтурEDI_Сообщения.ДатаЗаказа", "И КонтурEDI_Сообщения.ДатаПоставки");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОт",ДатаС );
	Запрос.УстановитьПараметр("ДатаПо",ДатаПо);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ИзвлеченныеДанные = РезультатЗапроса.Выгрузить();
	ИзвлеченныеДанные.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЕдиницаИзмерения")));
	ИзвлеченныеДанные.Очистить(); //подготовили пустую таблицу  //рефакторинг
	
	Пока Выборка.Следующий() Цикл
		//Достаем из хранилища сообщение
		Сообщение = ПрочитатьСообщение(Выборка.Ссылка);
		ТоварыЗаказа=Сообщение.Товары;
		Если ТоварыЗаказа<>Неопределено Тогда 
			Для Каждого ЗаказаннаяПозиция Из ТоварыЗаказа Цикл
				НоваяСтрокаДанных=ИзвлеченныеДанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных,Выборка);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных,ЗаказаннаяПозиция,"Номенклатура,ЕдиницаИзмерения,Количество,ЦенаБезНДС,СуммаБезНДС,ЦенаСНДС,СуммаСНДС");
			КонецЦикла;
		ИНаче
			НоваяСтрокаДанных=ИзвлеченныеДанные.Добавить();
			НоваяСтрокаДанных.Партнер = "Ошибка чтения товаров заказа: "+Сообщение.ДокументEDI.Номер;
		КонецЕсли;
	КонецЦикла;
	
	ИзвлеченныеДанные.Сортировать("Номенклатура Убыв, ДатаПоставки Возр");
	
	Возврат ИзвлеченныеДанные;
КонецФункции // СформироватьИсходныеДанныеСервер()

//Преобразовывает товары сообщения в основные соответствия для отчетности
Процедура Анализ_ПреобразоватьТоварыВОсновныеСоответствия(ТоварыЗаказа,Сообщение) Экспорт
	
	ТаблицаТоваров = ТоварыЗаказа.Скопировать(,"GTIN, КодТовараПокупателя, КодТовараПоставщика,КодЕдиницыИзмеренияEDI");
		
		//+махинация
		ТаблицаТоваров.Колонки.Добавить("КодЕдиницыИзмеренияEDI_нов",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(3)));
		ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("КодЕдиницыИзмеренияEDI"),"КодЕдиницыИзмеренияEDI_нов");
		ТаблицаТоваров.Колонки.Удалить("КодЕдиницыИзмеренияEDI");
		ТаблицаТоваров.Колонки.КодЕдиницыИзмеренияEDI_Нов.Имя = "КодЕдиницыИзмеренияEDI";
		//-махинация
		
		ИмяКодТовараПокупателя = "КодТовараСторонний";
		ИмяКодТовараПоставщика = "КодТовараСвой";

		ТаблицаТоваров.Колонки.КодТовараПокупателя.Имя = ИмяКодТовараПокупателя;
		ТаблицаТоваров.Колонки.КодТовараПоставщика.Имя = ИмяКодТовараПоставщика;
		
		ТаблицаСоответствий = КонвертироватьТоварыEDIв1С(ТаблицаТоваров,Сообщение); // передаем сообщения, т.к. поиск номенклатуры может зависеть от полей шапки (контрагента, договора и проч.)

		//теперрь переустановим номенклатуру
		ТоварыЗаказа.Индексы.Добавить("GTIN, КодТовараПокупателя, КодТовараПоставщика");
		
		Для Каждого Стр Из ТаблицаСоответствий Цикл
			Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("GTIN",				Стр.GTIN);
				СтруктураОтбора.Вставить("КодТовараПокупателя",	Стр.КодТовараСторонний);
				СтруктураОтбора.Вставить("КодТовараПоставщика",	Стр.КодТовараСвой);
				
				НайденныеСтроки = ТоварыЗаказа.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
					
					СтрокаТоваров.Номенклатура					= Стр.Номенклатура;
					СтрокаТоваров.ХарактеристикаНоменклатуры	= Неопределено;
					СтрокаТоваров.ЕдиницаИзмерения				= Неопределено;
					
					Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
						СтрокаТоваров.ХарактеристикаНоменклатуры	= Стр.ХарактеристикаНоменклатуры;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
						СтрокаТоваров.ЕдиницаИзмерения				= Стр.ЕдиницаИзмерения;
					КонецЕсли;
					
					//СтрокаТоваров.КоэффициентEDIВ1С				= Стр.КоэффициентEDIВ1С;
					//код единицы измерения мы можем взять и из входящего сообщения. А коэффициент - только из 1С.
					
				КонецЦикла;		
			КонецЕсли;
		КонецЦикла;		
		
		
		//теперь еще рассчитать недостающие значения
	Для Каждого СтрокаТоваров из ТоварыЗаказа Цикл	
		ЗаполнитьНедостающиеПоляСтрокиТоваров(СтрокаТоваров);
	КонецЦикла;
	
КонецПроцедуры

//за указанный период по !!ДАТЕ ЗАКАЗА!! обновляет регистр статистики
Процедура Отчетность_ПересчитатьСтатичтикуSLСервер(ДатаС,ДатаПо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ДатаЗаказа МЕЖДУ &ДатаС И &ДатаПо";
	
	Запрос.УстановитьПараметр("ДатаС", ДатаС);
	Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Всего=Выборка.Количество();
	й=0;
	Пока Выборка.Следующий() Цикл
		й=й+1;
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();  //объект уже 100% записан в базу и у него есть ссылка
		СообщениеСтруктура=СообщениеОбъект.Хранилище.Получить();
		
		Отчетность_ОтразитьСтатистикуСообщения(СообщениеОбъект,СообщениеСтруктура);
	#Если Клиент Тогда
		Состояние("Рассчитываю статистику за интервал Этап 1 из 3 сообщение "+й+" из "+Всего);	
	#КонецЕсли
		
	КонецЦикла;
	
	
	//дополнительно пересчитать recadv без даты заказа!!  (могут быть цепочки без заказов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КонтурEDI_Сообщения.НомерЗаказа
	               |ПОМЕСТИТЬ НомераЗаказов
	               |ИЗ
	               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |ГДЕ
	               |	КонтурEDI_Сообщения.ДатаЗаказа МЕЖДУ &ДатаС И &ДатаПо
	               |	И КонтурEDI_Сообщения.ТипСообщения = ""ORDERS""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_Сообщения.Ссылка,
	               |	КонтурEDI_Сообщения.НомерЗаказа
	               |ПОМЕСТИТЬ ПриемкисПустойДатойЗаказа
	               |ИЗ
	               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |ГДЕ
	               |	КонтурEDI_Сообщения.ТипСообщения = ""RECADV""
	               |	И КонтурEDI_Сообщения.ДатаЗаказа = &ПустаяДатаЗаказа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриемкисПустойДатойЗаказа.Ссылка
	               |ИЗ
	               |	НомераЗаказов КАК НомераЗаказов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриемкисПустойДатойЗаказа КАК ПриемкисПустойДатойЗаказа
	               |		ПО НомераЗаказов.НомерЗаказа = ПриемкисПустойДатойЗаказа.НомерЗаказа";
	
	Запрос.УстановитьПараметр("ДатаС", ДатаС);
	Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
	Запрос.УстановитьПараметр("ПустаяДатаЗаказа", Дата(1,1,1));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Всего=Выборка.Количество();
	й=0;
	Пока Выборка.Следующий() Цикл
		й=й+1;
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		СообщениеСтруктура=СообщениеОбъект.Хранилище.Получить();
		
		Отчетность_ОтразитьСтатистикуСообщения(СообщениеОбъект,СообщениеСтруктура);
		#Если Клиент Тогда
			Состояние("Рассчитываю статистику за интервал Этап 2 из 3 сообщение "+й+" из "+Всего);	
		#КонецЕсли
	КонецЦикла;
	
	//дополнительно пересчитать recadv без даты заказа и без номера заказа
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_Сообщения.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|ГДЕ
	|	КонтурEDI_Сообщения.ДатаЗаказа = &ПустаяДатаЗаказа
	|	И КонтурEDI_Сообщения.НомерЗаказа = &ПустойНомерЗаказа
	|	И КонтурEDI_Сообщения.ТипСообщения В(&ТипыСообщения)";
	
	СписокТиповСообщений= новый Массив;
	СписокТиповСообщений.добавить("ORDRSP");
	СписокТиповСообщений.добавить("DESADV");
	СписокТиповСообщений.добавить("RECADV");
	Запрос.УстановитьПараметр("ТипыСообщения", СписокТиповСообщений);
	Запрос.УстановитьПараметр("ПустойНомерЗаказа", "");
	Запрос.УстановитьПараметр("ПустаяДатаЗаказа", Дата(1,1,1));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Всего=Выборка.Количество();
	й=0;
	Пока Выборка.Следующий() Цикл
		й=й+1;
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		СообщениеСтруктура=СообщениеОбъект.Хранилище.Получить();
		
		Отчетность_ОтразитьСтатистикуСообщения(СообщениеОбъект,СообщениеСтруктура);
	#Если Клиент Тогда
		Состояние("Рассчитываю статистику за интервал Этап 3 из 3 сообщение "+й+" из "+Всего);	
	#КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

Процедура Отчетность_ОтразитьСтатистикуСообщения(СообщениеОбъект,СообщениеСтруктура) Экспорт
	
		Если НЕ ЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_Статистика") Тогда 
			//Сообщить_КонтурEDI("В метаданных не найден регистр Статистики, добавьте его в конфигурацию!");
			Возврат;
		КонецЕсли;
	
		//прочитаем текущий набор записей по этому сообщению (элементу справочника сообщений)
		
		НаборЗаписей = РегистрыСведений.КонтурEDI_Статистика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СообщениеСсылка.Установить(СообщениеОбъект.Ссылка);
		НаборЗаписей.Прочитать();//наверно можно не читать, а тупо потом заместить записи
		НаборЗаписей.Очистить();
		
		//Если Структура пришла пустая то придется её достать из хранилища значения
		Если СообщениеСтруктура=Неопределено Тогда 
			СообщениеСтруктура=СообщениеОбъект.Хранилище.Получить();
		КонецЕсли;
		
		//Может так статься что у нас нет номера заказа в каком-либо сообщении  (СообщениеОбъект.НомерЗаказа)
		//в таком случае следует попытаться разыскать номер заказа  иначе статистика отражена не будет
		//Также нельзя допустить отсутствия даты заказа, ведь тогда в отчете через год перемешаются заказы.
		Если СокрЛП(СообщениеОбъект.НомерЗаказа) = "" ИЛИ СообщениеОбъект.ДатаЗаказа = Дата(1,1,1) Тогда 
			Отчетность_РозыскНомераЗаказаСообщения(СообщениеОбъект);    //положим номер заказа в сообщение объект временно (оно не будет записано)
		КонецЕсли;
		//если в сообщении есть какие-то товары - отражаем статистику
		Если СообщениеСтруктура.Товары <> Неопределено 
			И СообщениеСтруктура.Товары.Количество() <> 0 Тогда  

			Отчетность_ЗаполнитьЗаписиНабораПоСообщению(НаборЗаписей,СообщениеОбъект,СообщениеСтруктура);
		КонецЕсли;
	
		НаборЗаписей.Записать(Истина);
		
КонецПроцедуры

Процедура Отчетность_РозыскНомераЗаказаСообщения(СообщениеОбъект);

//Если есть документ 1С - то ищем по нему
Если ЗначениеЗаполнено(СообщениеОбъект.Документ) Тогда 
	СтрокиДерева = ПолучитьСвязанныеСообщения(,СообщениеОбъект.Документ).Строки;
	
	Если СтрокиДерева.Количество()>0 Тогда 
		ОтборЗаказа = Новый Структура;
		ОтборЗаказа.Вставить("ТипСообщения","ORDERS");
		ОтборЗаказа.Вставить("Вид","Сообщение");
		СтрокиЗаказа=СтрокиДерева.НайтиСтроки(ОтборЗаказа,истина);
		
		Если СтрокиЗаказа.Количество()>0 Тогда
			СообщениеЗаказСсылка=СтрокиЗаказа[0].Ссылка;
			Если ЗначениеЗаполнено(СообщениеЗаказСсылка) Тогда 
				СообщениеОбъект.НомерЗаказа=СообщениеЗаказСсылка.НомерЗаказа;
				СообщениеОбъект.ДатаЗаказа=СообщениеЗаказСсылка.ДатаЗаказа;
			КонецЕсли;
		Конецесли;
	Конецесли;
КонецЕсли;


КонецПроцедуры


Процедура Отчетность_ЗаполнитьЗаписиНабораПоСообщению(НаборЗаписей,СообщениеОбъект,СообщениеСтруктура)
	//переданный набор записей пустой и у него установлен отбор по ссылке на сообщение 
	
	//также отсекаем сообщения, которые были отклонены отправителем
	
	Если СокрЛП(СообщениеОбъект.ТипСообщения)="PORDERS"  //эти типы сообщений пока не используются в статистике
		ИЛИ СокрЛП(СообщениеОбъект.ТипСообщения)="RETANN" 
		ИЛИ СокрЛП(СообщениеОбъект.ТипСообщения)="COINVOIC" 
		ИЛИ СокрЛП(СообщениеОбъект.ТипСообщения)="#COINVOIC" 
		ИЛИ СокрЛП(СообщениеОбъект.ТипСообщения)="INVOIC" 
		ИЛИ СокрЛП(СообщениеОбъект.ТипСообщения)="#INVOIC" Тогда
		Возврат;
	КонецЕсли;
	
	//переконвертировать номенклатуру в основное соответствие"!
	Анализ_ПреобразоватьТоварыВОсновныеСоответствия(СообщениеСтруктура.Товары,СообщениеСтруктура);
	
	//заполним набор по товарам сообщения (номенклатура уже основная)
	й=0;//могут отсутствовать номера строки у ТЧ товары
	Для Каждого СтрокаТабЧастиСообщения Из СообщениеСтруктура.Товары Цикл
		й=й+1;
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		
		//данные из шапки сообщения
		НоваяЗаписьНабора.Организация = СообщениеОбъект.Организация;  
		НоваяЗаписьНабора.ТипСообщения = СообщениеОбъект.ТипСообщения; 
		НоваяЗаписьНабора.НомерЗаказа = СообщениеОбъект.НомерЗаказа; 
		НоваяЗаписьНабора.ДатаЗаказа = СообщениеОбъект.ДатаЗаказа; 
		НоваяЗаписьНабора.Партнер = СообщениеОбъект.Партнер; 
		НоваяЗаписьНабора.ТочкаДоставки = СообщениеОбъект.ТочкаДоставки; 
		НоваяЗаписьНабора.СообщениеСсылка = СообщениеОбъект.Ссылка; 
		НоваяЗаписьНабора.ДатаПоставки = СообщениеОбъект.ДатаПоставки; 
		НоваяЗаписьНабора.Документ1С = СообщениеОбъект.Документ; 
		НоваяЗаписьНабора.Направление = СообщениеОбъект.Направление; 
		
		//даныые из самой строки товары сообщения
		НоваяЗаписьНабора.Номенклатура = СтрокаТабЧастиСообщения.Номенклатура; 
		НоваяЗаписьНабора.Количество = СтрокаТабЧастиСообщения.Количество; 
		НоваяЗаписьНабора.СуммаБезНДС = СтрокаТабЧастиСообщения.СуммаБезНДС; 
		НоваяЗаписьНабора.СуммаСНДС = СтрокаТабЧастиСообщения.СуммаСНДС; 
		НоваяЗаписьНабора.СуммаНДС = СтрокаТабЧастиСообщения.СуммаНДС; 
		НоваяЗаписьНабора.ЦенаБезНДС = СтрокаТабЧастиСообщения.ЦенаБезНДС; 
		НоваяЗаписьНабора.ЦенаСНДС = СтрокаТабЧастиСообщения.ЦенаСНДС; 
		НоваяЗаписьНабора.НомерСтрокиТоваров = й; 
		
		//специфические колонки
		НоваяЗаписьНабора.СтатусСтрокиТоваров =  СтрокаТабЧастиСообщения.Статус;
		НоваяЗаписьНабора.Статус =  СообщениеОбъект.Статус;
		НоваяЗаписьНабора.Пользователь = ПолучитьТекущегоПользователя1С();
		НоваяЗаписьНабора.ДатаЗаписи = ТекущаяДата();
		
		//Специфические условия отражения в статистике  //учтено на модуле набора записей регистра статистики
		
	КонецЦикла;
	
	
КонецПроцедуры


//}#КонецОбласти //30_АнализДанных

//{#Область 98_КонструкторКастомовЧасть3

//формирование данных маппинга -------------------------
Функция ОпределитьВидСвойстваОбъектаМаппинга(ИмяОбъекта)
	
	ВидОбъекта = "";	
	
	Если Найти(ИмяОбъекта, "Реквизиты") > 0 И 
		 Найти(ИмяОбъекта, "ТабличныеЧасти") > 0 Тогда
		ВидОбъекта = "РеквизитТабличнойЧастиОбъекта";
	ИначеЕсли Найти(ИмяОбъекта, "Реквизиты") > 0 Тогда
		ВидОбъекта = "РеквизитОбъекта";
	ИначеЕсли Найти(ИмяОбъекта, "ТабличныеЧасти") > 0 Тогда
		ВидОбъекта = "ТабличнаяЧастьОбъекта";
	КонецЕсли;
	
	Возврат ВидОбъекта;	
	
КонецФункции

Функция ОпределитьКлассОбъектаМаппинга(Объект)
	
	//Классом объекта считаем: либо "Сообщение", либо "Документы.Заказ", либо "Документы.ПриходнаяНакладная"
	
	КлассОбъекта = "";
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		КлассОбъекта = "Сообщение";
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
		Если Не ОбъектМетаданных = Неопределено Тогда
			ИмяОбъектаМетаданных = ОбъектМетаданных.Имя;
			Если Не Метаданные.Справочники.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
				КлассОбъекта = "Справочники." + ИмяОбъектаМетаданных;
			ИначеЕсли Не Метаданные.Документы.Найти(ИмяОбъектаМетаданных) = Неопределено Тогда
				КлассОбъекта = "Документы." + ИмяОбъектаМетаданных;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлассОбъекта;
	
КонецФункции

Процедура ДобавитьСвойствоОбъектаВМаппинг(ДеревоМаппинга, ПараметрыСвойстваСтрокой)
	
	Если Не ЗначениеЗаполнено(ПараметрыСвойстваСтрокой.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор       = ПараметрыСвойстваСтрокой.Идентификатор;
	Имя 				= ПараметрыСвойстваСтрокой.Имя;
	ВыражениеВычисления = ПараметрыСвойстваСтрокой.ВыражениеВычисления;
	Триггер             = ПараметрыСвойстваСтрокой.Триггер;
	
	//раскладываем полное имя объекта на массив строк составляющих, из которых по метаданным
	//находим объекты (Документ - Табличная часть - Реквизиты - Реквизит) и формируем дерево
	МассивЧастей = EDI_РазложитьСтрокуВМассивСлов(Имя,".");
	Количество   = МассивЧастей.Количество();
	ИмяОбъекта   = "";
	
	//определяем тип объекта, который мы загружаем (Сообщение - edi, Документ - 1с)
	Если МассивЧастей[0] = "Сообщение" Тогда //объект Сообщение
		ТипОбъекта = "EDI";
	Иначе //объект Документ, Справочник, ...
		ТипОбъекта = "1С";
	КонецЕсли;
	
	ВеткаДанных = ДеревоМаппинга.Строки;
	
	Для К = 0 По Количество-1 Цикл
		
		Если ТипОбъекта = "1С" Тогда 
			
			ИмяОбъекта = ИмяОбъекта + МассивЧастей[К];
			Если Не ЕстьНеобходимыеМетаданные(ИмяОбъекта, Истина) Тогда
				ИмяОбъекта = ИмяОбъекта + ".";
				Продолжить;
			КонецЕсли;
				
			ВеткаПоиска = ВеткаДанных.Найти(ИмяОбъекта, "Объект", Истина);
			Если ВеткаПоиска = Неопределено Тогда
				ВидОбъекта = ОпределитьВидСвойстваОбъектаМаппинга(ИмяОбъекта);
				ВеткаПоиска = ВеткаДанных.Добавить();
				ВеткаПоиска.Объект = ИмяОбъекта;
				ВеткаПоиска.Имя = МассивЧастей[К];
				Если МассивЧастей[К-1] = "Реквизиты" или
					 МассивЧастей[К-1] = "ТабличныеЧасти" Тогда
					ЗаполнитьЗначенияСвойств(ВеткаПоиска, ПараметрыСвойстваСтрокой, , "Имя");
					ВеткаПоиска.Вид = ВидОбъекта;
				КонецЕсли;
			КонецЕсли;
			ВеткаДанных = ВеткаПоиска.Строки;
				
		ИначеЕсли ТипОбъекта = "EDI" Тогда
			
			//создаем дерево аналогичное по структуре, как для объекта 1С
			ИмяОбъекта = ИмяОбъекта + МассивЧастей[К];
			
			Если Найти("Реквизиты|ТабличныеЧасти",МассивЧастей[К]) > 0 Тогда
				ИмяОбъекта = ИмяОбъекта + ".";
				Продолжить;
			КонецЕсли;
													
			Если ИмяОбъекта = "Сообщение" Тогда //создаем объект EDI
				Объект = ИмяОбъекта;
				ВеткаПоиска = ВеткаДанных.Найти(Объект, "Объект", Истина);
				Если ВеткаПоиска = Неопределено Тогда
					ВеткаПоиска = ВеткаДанных.Добавить();
					ВеткаПоиска.Объект = Объект;
					ВеткаПоиска.Имя = Объект;
				КонецЕсли;
				ВеткаДанных = ВеткаПоиска.Строки;
			ИначеЕсли Найти("Реквизиты",МассивЧастей[К-1]) > 0 Тогда //создаем свойство объекта EDI (реквизит или реквизит тч)
				ВеткаПоиска = ВеткаДанных.Добавить();
				ВеткаПоиска.Объект = ИмяОбъекта;
				ВеткаПоиска.Идентификатор = СтрЗаменить(СтрЗаменить(СтрЗаменить(ИмяОбъекта, "Сообщение.", ""), "ТабличныеЧасти.", ""), "Реквизиты.", "");
				ВеткаПоиска.Имя = МассивЧастей[К];
				ВеткаПоиска.Вид = ОпределитьВидСвойстваОбъектаМаппинга(ИмяОбъекта); 
				ВеткаПоиска.ВыражениеВычисления = ВыражениеВычисления;
				ВеткаПоиска.Триггер = Триггер;
			ИначеЕсли Найти("ТабличныеЧасти",МассивЧастей[К-1]) > 0 Тогда //создаем свойство объекта EDI (табличную часть)				
				ВеткаПоиска = ВеткаДанных.Найти(ИмяОбъекта, "Объект", Истина);
				Если ВеткаПоиска = Неопределено Тогда
					ВеткаПоиска = ВеткаДанных.Добавить();
					ВеткаПоиска.Объект = ИмяОбъекта;
					ВеткаПоиска.Идентификатор = МассивЧастей[К];
					ВеткаПоиска.Имя = МассивЧастей[К];
					ВеткаПоиска.Вид = ОпределитьВидСвойстваОбъектаМаппинга(ИмяОбъекта);
					ВеткаПоиска.ВыражениеВычисления = ВыражениеВычисления;
					ВеткаПоиска.Триггер = Триггер;
				КонецЕсли;
				ВеткаДанных = ВеткаПоиска.Строки;
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяОбъекта = ИмяОбъекта + ".";
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМаппингМетаданных()

	ДеревоМаппинга = Новый ДеревоЗначений;
	ДеревоМаппинга.Колонки.Добавить("Объект");
	ДеревоМаппинга.Колонки.Добавить("Идентификатор");
	ДеревоМаппинга.Колонки.Добавить("Имя");
	ДеревоМаппинга.Колонки.Добавить("Вид");
	ДеревоМаппинга.Колонки.Добавить("ВыражениеВычисления");
	ДеревоМаппинга.Колонки.Добавить("Триггер");
			
	Макет = ПолучитьМакет("АдресацияОбъектовМетаданных");
	ИК = ПолучитьИмяКонфигурацииДляЗапроса();
	
	МассивИменОбластей = Новый Массив;
	Если ПолучитьКонстантуEDI("МыПоставщик") = Истина Тогда
		МассивИменОбластей.Добавить("Поставщик_" + ИК);
	КонецЕсли;
	Если ПолучитьКонстантуEDI("МыТорговаяСеть") = Истина Тогда
		МассивИменОбластей.Добавить("Сеть_" + ИК);		
	КонецЕсли;
	
	Для Каждого ИмяОбласти Из МассивИменОбластей Цикл
	
		Область = Макет.Области.Найти(ИмяОбласти);
		Если Область = Неопределено Тогда
			Возврат ДеревоМаппинга;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
		Для Сч = 2 По Область.ВысотаТаблицы Цикл
			
			ПараметрыСвойстваСтрокой = Новый Структура;
			ПараметрыСвойстваСтрокой.Вставить("Идентификатор", 			Строка(Область.ПолучитьОбласть("R"+Формат(Сч,"ЧГ=0")+"C1").ТекущаяОбласть.Текст));
			ПараметрыСвойстваСтрокой.Вставить("Имя", 					Строка(Область.ПолучитьОбласть("R"+Формат(Сч,"ЧГ=0")+"C2").ТекущаяОбласть.Текст));
			ПараметрыСвойстваСтрокой.Вставить("ВыражениеВычисления",	Строка(Область.ПолучитьОбласть("R"+Формат(Сч,"ЧГ=0")+"C3").ТекущаяОбласть.Текст));
			ПараметрыСвойстваСтрокой.Вставить("Триггер", 				Строка(Область.ПолучитьОбласть("R"+Формат(Сч,"ЧГ=0")+"C4").ТекущаяОбласть.Текст));
			
			ДобавитьСвойствоОбъектаВМаппинг(ДеревоМаппинга, ПараметрыСвойстваСтрокой);
	        			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоМаппинга;
	
КонецФункции

Функция ПолучитьМаппингОбъекта(Объект) Экспорт
		
	КлассОбъекта = ОпределитьКлассОбъектаМаппинга(Объект);
		
	//копируем маппинг метаданных и оставляем в копии только маппинг объекта
	МассивУдаляемыхОбъектов = Новый Массив;	
	МаппингОбъекта = МаппингМетаданных.Скопировать();
	Для Каждого Строка Из МаппингОбъекта.Строки Цикл
		Если Не Строка.Объект = КлассОбъекта Тогда
			МассивУдаляемыхОбъектов.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивУдаляемыхОбъектов Цикл
		МаппингОбъекта.Строки.Удалить(Элемент);	
	КонецЦикла;
	МаппингОбъекта = МаппингОбъекта.Строки[0];	
		
	//для объекта "Сообщение" проверим наличие свойств, заявленных в маппинге
	Если КлассОбъекта = "Сообщение" Тогда
		//реквизиты
		МассивУдаляемыхРеквизитов = Новый Массив;
		ОтборРеквизиты = Новый Структура("Вид","РеквизитОбъекта");
		Реквизиты = МаппингОбъекта.Строки.НайтиСтроки(ОтборРеквизиты, Истина); 
		Для Каждого СтрРеквизит Из Реквизиты Цикл
			Если Не Объект.Свойство(СтрРеквизит.Имя) Тогда
				МассивУдаляемыхРеквизитов.Добавить(СтрРеквизит);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
			МаппингОбъекта.Строки.Удалить(Элемент);	
		КонецЦикла;
		//табличные части
		МассивУдаляемыхТЧ = Новый Массив;
		ОтборТабличныеЧасти = Новый Структура("Вид","ТабличнаяЧастьОбъекта");
		ТабличныеЧасти = МаппингОбъекта.Строки.НайтиСтроки(ОтборТабличныеЧасти, Истина);
		Для Каждого СтрТабличнаяЧасть Из ТабличныеЧасти Цикл
			ТЧОбъекта = Неопределено;
			Если Не Объект.Свойство(СтрТабличнаяЧасть.Имя, ТЧОбъекта) Тогда
				МассивУдаляемыхТЧ.Добавить(СтрТабличнаяЧасть);
			Иначе
				//реквизиты табличных частей
				МассивУдаляемыхРеквизитовТЧ = Новый Массив;
				Если ТипЗнч(ТЧОбъекта) = Тип("ТаблицаЗначений") Тогда
					ОтборРеквизитыТЧ = Новый Структура("Вид", "РеквизитТабличнойЧастиОбъекта");
					РеквизитыТЧ = СтрТабличнаяЧасть.Строки.НайтиСтроки(ОтборРеквизитыТЧ, Истина);
					Для Каждого СтрРеквизитТЧ Из РеквизитыТЧ Цикл
						Если ТЧОбъекта.Колонки.Найти(СтрРеквизитТЧ.Имя) = Неопределено Тогда
							МассивУдаляемыхРеквизитовТЧ.Добавить(СтрРеквизитТЧ);		
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Для Каждого Элемент Из МассивУдаляемыхРеквизитовТЧ Цикл
					СтрТабличнаяЧасть.Строки.Удалить(Элемент);	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Элемент Из МассивУдаляемыхТЧ Цикл
			МаппингОбъекта.Строки.Удалить(Элемент);	
		КонецЦикла;
	КонецЕсли;	
	
	Возврат МаппингОбъекта;
	
КонецФункции

//заполнение объекта по маппингу ---------------------------------------------------------------------------------
Процедура ЗаполнитьЗначенияРеквизитовОбъекта(Источник, Приемник, МаппингОбъекта, Параметры = Неопределено) Экспорт
	
	//Источник 				- может быть Документ 1С или Сообщение
	//Приемник 				- может быть Документ 1С или Сообщение
	//МаппингОбъекта 		- структура структур, описывающая поля источника и выражения по их заполнению
	//Параметры 			- дополнительные параметры, которые могут описывать кастомные значения реквизитов
	
	ОтборРеквизитыМаппингаОбъекта = Новый Структура("Вид","РеквизитОбъекта");
	РеквизитыМаппингаОбъекта = МаппингОбъекта.Строки.НайтиСтроки(ОтборРеквизитыМаппингаОбъекта);
		
	Для Каждого Реквизит Из РеквизитыМаппингаОбъекта Цикл
		
		Значение = Неопределено;
		Попытка
			Выполнить(Реквизит.ВыражениеВычисления);
		Исключение
			_ОписаниеОшибки = ОписаниеОшибки();
			Сообщить("Не удалось вычислить значение свойства объекта """ + Реквизит.Имя + """:" + Символы.ПС + _ОписаниеОшибки);	
		КонецПопытки;
		
		Если Не Значение = Неопределено Тогда
			Приемник[Реквизит.Имя] = Значение;
			Если ЗначениеЗаполнено(Реквизит.Триггер) Тогда
				Попытка
					Выполнить(Реквизит.Триггер);
				Исключение
					_ОписаниеОшибки = ОписаниеОшибки();
					Сообщить("Не удалось выполнить триггер свойства объекта """ + Реквизит.Имя + """:" + Символы.ПС + _ОписаниеОшибки);		
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(Источник, Приемник, МаппингОбъекта, Параметры = Неопределено) Экспорт
	
	//Источник 				- может быть Документ 1С или Сообщение
	//Приемник 				- может быть Документ 1С или Сообщение
	//МаппингОбъекта 		- структура структур, описывающая поля источника и выражения по их заполнению
	//Параметры 			- дополнительные параметры, которые могут описывать кастомные значения свойств объекта
		
	ОтборТабличныеЧастиОбъекта = Новый Структура("Вид", "ТабличнаяЧастьОбъекта");
	ТабличныеЧастиОбъекта = МаппингОбъекта.Строки.НайтиСтроки(ОтборТабличныеЧастиОбъекта);
		
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		
		//получаем значение табличной части
		Значение = ПолучитьЗначениеКлючаСтруктуры(Параметры,"ЗначенияСвойствОбъектов."+ТабличнаяЧасть.Имя); //приоритет отдаем значению, переданному через Параметры
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Значение = Неопределено;
	        Попытка
				Выполнить(ТабличнаяЧасть.ВыражениеВычисления);
			Исключение
				_ОписаниеОшибки = ОписаниеОшибки();
				Сообщить("Не удалось вычислить значение свойства объекта """ + ТабличнаяЧасть.Имя + """:" + Символы.ПС + _ОписаниеОшибки);
			КонецПопытки;
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		ЗначениеТабличнойЧасти = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Значение));
		
		//обходим строки табличной части источника
		Для Каждого СтрИсточник Из ЗначениеТабличнойЧасти Цикл
			
			СтрПриемник = Приемник[ТабличнаяЧасть.Имя].Добавить();
						
			ОтборРеквизитыТЧОбъекта = Новый Структура("Вид", "РеквизитТабличнойЧастиОбъекта");
			РеквизитыТЧОбъекта = ТабличнаяЧасть.Строки.НайтиСтроки(ОтборРеквизитыТЧОбъекта);
			
			Для Каждого РеквизитыТЧ Из РеквизитыТЧОбъекта Цикл
				
				//вычисляем значения свойств объекта
				Значение = Неопределено;
	            Попытка
					Выполнить(РеквизитыТЧ.ВыражениеВычисления);
				Исключение
					_ОписаниеОшибки = ОписаниеОшибки();
					Сообщить("Не удалось вычислить значение свойства объекта """ + РеквизитыТЧ.Имя + """:" + Символы.ПС + _ОписаниеОшибки);
				КонецПопытки;
							
				Если ЗначениеЗаполнено(Значение) Тогда
					
					СтрПриемник[РеквизитыТЧ.Имя] = Значение;
					
					//выполняем действия после установки значения свойства объекта
					Если ЗначениеЗаполнено(РеквизитыТЧ.Триггер) Тогда
	 					Попытка
							Выполнить(РеквизитыТЧ.Триггер);
						Исключение
							_ОписаниеОшибки = ОписаниеОшибки();
							Сообщить("Не удалось выполнить триггер свойства объекта """ + РеквизитыТЧ.Имя + """:" + Символы.ПС + _ОписаниеОшибки);
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;					
				
			КонецЦикла;
			
		КонецЦикла;
		
		//выполним действия после заполнения табличной части
		Если ЗначениеЗаполнено(ТабличнаяЧасть.Триггер) Тогда
 			Попытка
				Выполнить(ТабличнаяЧасть.Триггер);
			Исключение
				_ОписаниеОшибки = ОписаниеОшибки();
				Сообщить("Не удалось выполнить триггер свойства объекта """ + ТабличнаяЧасть.Имя + """:" + Символы.ПС + _ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

//получения данных маппинга -------------------------------------------------------------------------
Функция ПолучитьИмяСвойстваОбъектаМетаданных(Идентификатор, Объект, КонтрольНаличия = Истина) Экспорт

	ИмяСвойства = "";
	
	КлассОбъекта = ОпределитьКлассОбъектаМаппинга(Объект);
	
	ОтборДанныеОбъекта = Новый Структура("Объект", КлассОбъекта);
	ДанныеОбъекта = МаппингМетаданных.Строки.НайтиСтроки(ОтборДанныеОбъекта);
	Если ДанныеОбъекта.Количество() = 0 Тогда
		Если КонтрольНаличия Тогда
			ВызватьИсключение "Не удалось получить имя свойства объекта. Не найдено описание объекта в маппинге (объект: """ + КлассОбъекта + """).";
		Иначе
			Возврат ИмяСвойства;
		КонецЕсли;
	КонецЕсли;
	Если ДанныеОбъекта.Количество() > 1 Тогда
		Если КонтрольНаличия Тогда
			ВызватьИсключение "Не удалось получить имя свойства объекта. Множественное описание объекта недопустимо в маппинге (объект: """ + КлассОбъекта + """).";
		Иначе
			Возврат ИмяСвойства;	
		КонецЕсли;
	КонецЕсли;
    Если ДанныеОбъекта.Количество() = 1 Тогда	
		ОтборДанныеСвойства = Новый Структура("Идентификатор", Идентификатор);
		ДанныеСвойства = ДанныеОбъекта[0].Строки.НайтиСтроки(ОтборДанныеСвойства, Истина);
		Если ДанныеСвойства.Количество() = 0 Тогда
			//Если КонтрольНаличия Тогда
			//	ВызватьИсключение "Не удалось получить имя свойства объекта. Не найдено описание свойства объекта в маппинге (объект: """ + КлассОбъекта + """, идентификатор свойства: """ + Идентификатор + """).";
			//Иначе
				Возврат ИмяСвойства;
			//КонецЕсли;	
		КонецЕсли;
		Если ДанныеСвойства.Количество() > 1 Тогда
			Если КонтрольНаличия Тогда
				ВызватьИсключение "Не удалось получить имя свойства объекта. Множественное описание свойства объекта недопустимо в маппинге (объект: """ + КлассОбъекта + """, идентификатор свойства: """ + Идентификатор + """).";
			Иначе
				Возврат ИмяСвойства;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеСвойства.Количество() = 1 Тогда
			ИмяСвойства = ДанныеСвойства[0].Имя;
	    КонецЕсли;
	КонецЕсли;
		
	Возврат ИмяСвойства;		
	
КонецФункции

Функция ПолучитьИдентификаторСвойстваОбъектаМетаданных(ИмяСвойства, Объект, КонтрольНаличия = Истина) Экспорт
	
	Идентификатор = "";
	
	КлассОбъекта = ОпределитьКлассОбъектаМаппинга(Объект);
	
	ОтборДанныеОбъекта = Новый Структура("Объект", КлассОбъекта);
	ДанныеОбъекта = МаппингМетаданных.Строки.НайтиСтроки(ОтборДанныеОбъекта);
	Если ДанныеОбъекта.Количество() = 0 Тогда
		Если КонтрольНаличия Тогда
			ВызватьИсключение "Не удалось получить идентификатор объекта. Не найдено описание объекта в маппинге (объект: """ + КлассОбъекта + """).";
		Иначе
			Возврат Идентификатор;
		КонецЕсли;
	КонецЕсли;
	Если ДанныеОбъекта.Количество() > 1 Тогда
		Если КонтрольНаличия Тогда
			ВызватьИсключение "Не удалось получить имя свойства объекта. Множественное описание объекта недопустимо в маппинге (объект: """ + КлассОбъекта + """).";
		Иначе
			Возврат Идентификатор;
		КонецЕсли;	
	КонецЕсли;
	Если ДанныеОбъекта.Количество() = 1 Тогда	
		ОтборДанныеСвойства = Новый Структура("Имя", ИмяСвойства);
		ДанныеСвойства = ДанныеОбъекта[0].Строки.НайтиСтроки(ОтборДанныеСвойства, Истина);
        Если ДанныеСвойства.Количество() = 0 Тогда
			Если КонтрольНаличия Тогда
				ВызватьИсключение "Не удалось получить идентификатор объекта. Не найдено описание свойства объекта в маппинге (объект: """ + КлассОбъекта + """, имя свойства: """ + ИмяСвойства + """).";
			Иначе
				Возврат Идентификатор;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеСвойства.Количество() > 1 Тогда
			Если КонтрольНаличия Тогда
				ВызватьИсключение "Не удалось получить идентификатор объекта. Множественное описание свойства объекта недопустимо в маппинге (объект: """ + КлассОбъекта + """, имя свойства: """ + ИмяСвойства + """).";
			Иначе
				Возврат Идентификатор;
			КонецЕсли;	
		КонецЕсли;
		Если ДанныеСвойства.Количество() = 1 Тогда
			Идентификатор = ДанныеСвойства[0].Идентификатор;
	    КонецЕсли;
	КонецЕсли;
		
	Возврат Идентификатор;
		
КонецФункции

Функция ПолучитьИдентификаторыМаппингаОбъекта(Объект) Экспорт
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(Объект);
	
	СоответствиеОбъекта = Новый Соответствие;
	
	ДополнитьСоответствиеОбъекта(МаппингОбъекта, СоответствиеОбъекта, "Идентификатор", "Имя");
	
КонецФункции

Процедура ДополнитьСоответствиеОбъекта(МаппингОбъекта, СоответствиеОбъекта, ИмяКолонкиКлюч, ИмяКолонкиЗначение)
	
	Для Каждого Строка Из МаппингОбъекта.Строки Цикл
		Если ИмяКолонкиКлюч = "Идентификатор" Тогда
			Ключ = ПолучитьПолныйИдентификатор("", ИмяКолонкиКлюч, Строка);
		Иначе
			Ключ = Строка[ИмяКолонкиКлюч];	
		КонецЕсли;	
		Значение = Строка[ИмяКолонкиЗначение];
		СоответствиеОбъекта.Вставить(Ключ, Значение);
		Если Строка.Строки.Количество() > 0 Тогда
			ДополнитьСоответствиеОбъекта(Строка, СоответствиеОбъекта, ИмяКолонкиКлюч, ИмяКолонкиЗначение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПолныйИдентификатор(Значение, ИмяКолонки, Строка)
	
	ЗначениеТекущейСтроки = Строка[ИмяКолонки];
	Если ЗначениеЗаполнено(ЗначениеТекущейСтроки) Тогда
		Если Значение = "" Тогда
			Значение = ЗначениеТекущейСтроки;
		Иначе
			Значение = ЗначениеТекущейСтроки + "." + Значение;
		КонецЕсли;
	КонецЕсли;
	Если Не Строка.Родитель = Неопределено Тогда
		Значение = ПолучитьПолныйИдентификатор(Значение, ИмяКолонки, Строка.Родитель);
	КонецЕсли;
	Возврат Значение;	
	
КонецФункции

//получение значений свойтв объектов по маппингу -----------------------------------------------
Функция ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору(Идентификатор, Объект) Экспорт
	
	ИмяСвойства = "";
	ЗначениеСвойства = Неопределено;
	
	ИмяСвойства = ПолучитьИмяСвойстваОбъектаМетаданных(Идентификатор, Объект, Ложь);
	
	Если Не ЗначениеЗаполнено(ИмяСвойства) Тогда
		Возврат ЗначениеСвойства;
	КонецЕсли;

	ЗначениеСвойства = Объект[ИмяСвойства];
	
	Возврат ЗначениеСвойства;
	
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИмени(Имя, Объект) Экспорт
	
	ЗначениеСвойства = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("СтрокаТаблицыЗначений") Тогда //проверка для заполнения т.ч. сообщения Товары, когда мы передаем в качестве источника результат запроса по товарам
		ОбъектСодержитСвойство = Ложь;
		ТабличаЗначений = Объект.Владелец();
		Если ТипЗнч(ТабличаЗначений) = Тип("ТаблицаЗначений") Тогда
			Если ТабличаЗначений.Колонки.Найти(Имя)	<> Неопределено Тогда
				ОбъектСодержитСвойство = Истина;		
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбъектСодержитСвойство = Истина;
	КонецЕсли;
	
	Если ОбъектСодержитСвойство Тогда
		ЗначениеСвойства = Объект[Имя];		
	КонецЕсли;
	
	Возврат ЗначениеСвойства;
	
КонецФункции

//прочее --------------------------------------------------
Функция ПолучитьЗначениеКлючаСтруктуры(Знач Значение, Ключ)
				
	Массив = EDI_РазложитьСтрокуВМассивСлов(Ключ,".");
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Не ТипЗнч(Значение) = Тип("Структура") Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Не Значение.Свойство(Элемент,Значение) Тогда
			Возврат Неопределено;			
		КонецЕсли;
		
	КонецЦикла;
			    	
	Возврат Значение; 
	
КонецФункции

Функция ПолучитьСвязанныеДокументыВходящихВозвратов(Сообщение)
	
	ТаблицаВозвратов = Новый ТаблицаЗначений;
	ТаблицаВозвратов.Колонки.Добавить("Документ");
	
	//Попробуем собрать связанные возвраты товаров, чтобы они сминусовали товары из DESADV
	//Предполагаем, что они всегда лежат в табличной части "ДокументыОснования"
	ТабличнаяЧастьДокументыОснования = ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору("ДокументыОснования",Сообщение.Документ1С);
	Если ЗначениеЗаполнено(ТабличнаяЧастьДокументыОснования) Тогда
		ИмяРеквизитаДокументОснование = ПолучитьИмяСвойстваОбъектаМетаданных("ДокументыОснования.ДокументОснование",Сообщение.Документ1С);
		Если ЗначениеЗаполнено(ИмяРеквизитаДокументОснование) Тогда
			ТипВозврата = ПолучитьТипЗначенияОбъекта("ВходящийВозврат");
			Для Каждого СтрокаОснования Из ТабличнаяЧастьДокументыОснования Цикл
				Если ТипЗнч(СтрокаОснования[ИмяРеквизитаДокументОснование]) = Тип(ТипВозврата) Тогда
					НоваяСтрока = ТаблицаВозвратов.Добавить();
					НоваяСтрока.Документ = СтрокаОснования[ИмяРеквизитаДокументОснование];
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяКонфигурации1С = "ДалионУМ" Тогда
		ТипДокументаВозврата = ПолучитьТипЗначенияОбъекта("ВходящийВозврат",Истина,);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтПокупателя.Ссылка КАК Документ
		|ИЗ
		|	"+ТипДокументаВозврата+" КАК ВозвратТоваровОтПокупателя
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.ДокументОснование В (&ДокументОснование)";
		Запрос.УстановитьПараметр("ДокументОснование", Сообщение.Накладная1С);
		ТаблицаВозвратов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаВозвратов;
		
КонецФункции

//подготовка сообщений по маппингу ---------------------------------
Функция Маппинг_ПодготовитьЗаказ(ДокументСсылка,Сообщение,Параметры)
		
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;	
	КонецЕсли;
	
	Сообщение.Документ1С = ДокументСсылка;
	ОбратныйЗаказ1С = НайтиОбратныйЗаказ(ДокументСсылка);
	Если ЗначениеЗаполнено(ОбратныйЗаказ1С) Тогда
		Сообщение.ОбратныйЗаказ1С = ОбратныйЗаказ1С;
	КонецЕсли;
	Сообщение.Заказ1С = Сообщение.Документ1С;
		
	МаппингОбъекта = ПолучитьМаппингОбъекта(Сообщение);
	
	ЗаполнитьЗначенияРеквизитовОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем реквизиты
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовкаЗаказаПоставщику",,Сообщение); //получаем товары заказа
	
	Параметры.Вставить("ЗначенияСвойствОбъектов", Новый Структура("Товары", Товары));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем табличные части
	
	Если ТипЗнч(Параметры)=Тип("Структура")
		 И Параметры.Свойство("Статус")
		 И Параметры.Статус = "Отменить" Тогда
		Сообщение.Статус = "Отменен";
	КонецЕсли;
	
КонецФункции

Функция Маппинг_ПодготовитьОбратныйЗаказ(ДокументСсылка,Сообщение)

	Параметры = Новый Структура;
	
	Сообщение.Документ1С = ДокументСсылка;
			
	МаппингОбъекта = ПолучитьМаппингОбъекта(Сообщение);
	
	ЗаполнитьЗначенияРеквизитовОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем реквизиты
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовкаОбратногоЗаказа",,Сообщение); //получаем товары заказа
	
	Параметры.Вставить("ЗначенияСвойствОбъектов", Новый Структура("Товары", Товары));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем табличные части	
		
КонецФункции

Функция Маппинг_ПодготовитьОтветНаЗаказ(ДокументСсылка,Сообщение,Параметры)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;	
	
	//отклонение заказа, НЕ загруженного в документ 1С
	Если Параметры.Свойство("ЭтоОтклонениеНезагруженногоЗаказа") Тогда
		//В этом случае мы просто берем входящий ORDERS, меняем тип сообщения на ORDRSP, 
		//меняем местами отправителей/получателей, обнуляем количества в строках и т.д.
		//В Параметры.ВходящийЗаказ должна быть именно Ссылка! (раньше была Структура - избыточно).
		Сообщение = ПрочитатьСообщение(Параметры.ВходящийЗаказ);
		УчетнаяЗапись				= Сообщение.ОтправительEDI;
		Сообщение.ОтправительEDI	= Сообщение.ПолучательEDI;
		Сообщение.ПолучательEDI		= УчетнаяЗапись;
        Сообщение.ТипСообщения		= "ORDRSP";
		Сообщение.Направление		= "Исходящее";
		Сообщение.ЗаказEDI			= Сообщение.ДокументEDI;
		Если НЕ ЗначениеЗаполнено(Сообщение.ВалютаEDI) Тогда
			Сообщение.ВалютаEDI = "RUB";
		КонецЕсли;
		Сообщение.Статус = "Отклонен";
		Для каждого Стр Из Сообщение.Товары Цикл
			Стр.Статус = "Отклонен";
			Если Не Сообщение.Товары.Колонки.Найти("КоличествоЗаказанное") = Неопределено Тогда
				Стр.КоличествоЗаказанное = Стр.Количество;		
			КонецЕсли;
			Стр.Количество = 0;
		КонецЦикла;
		Эталон = ПолучитьСтруктуруСообщения(Сообщение.ТипСообщения,Сообщение.Направление);
		ДополнитьСтруктуруСообщенияИзЭталона(Сообщение,Эталон);
		Сообщение.Вставить("ИсходныйORDERS",Сообщение.СообщениеСсылка);//понадобится в процедуре СохранитьСообщение
		Сообщение.СообщениеСсылка = Неопределено;//это будет новое сообщение
		Возврат Сообщение;
	КонецЕсли;
	
	Сообщение.Документ1С = ДокументСсылка;
	Сообщение.Заказ1С = Сообщение.Документ1С;
		
	МаппингОбъекта = ПолучитьМаппингОбъекта(Сообщение);
	
	ЗаполнитьЗначенияРеквизитовОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем реквизиты
	
	МассивСвязанныхДокументов = Новый Массив;
	ТаблицаВиртуальныхСообщений = ПолучитьВиртуальныеСвязанныеORDERS(Сообщение.Документ1С);
	Для Каждого Стр Из ТаблицаВиртуальныхСообщений Цикл
		МассивСвязанныхДокументов.Добавить(Стр.Документ);
	КонецЦикла;
	Товары = ПолучитьТоварыДокументаДляСообщения(МассивСвязанныхДокументов,Истина,"ПодготовкаОтветаНаЗаказ",,Сообщение); //получаем товары заказа
	
	Параметры.Вставить("ЗначенияСвойствОбъектов", Новый Структура("Товары", Товары));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем табличные части
			
	//отклонение заказа, загруженного в документ 1С
	Если ЗначениеЗаполнено(Параметры) Тогда
		Если Параметры.Свойство("Статус") И Параметры.Статус = "Отклонить" Тогда
			Сообщение.Статус = "Отклонен";
			Сообщение.СообщениеСсылка = Неопределено;//зачистим, иначе будет ссылаться на исходный ORDERS
			Для Каждого Стр Из Сообщение.Товары Цикл
				Стр.Статус = "Отклонен";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//------ дополнение расчетными данными -------
	
	Если Не ЗначениеЗаполнено(Сообщение.Грузоотправитель1С) Тогда
		Сообщение.Грузоотправитель1С = Сообщение.Продавец1С;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Сообщение.Грузополучатель1С) Тогда
		Сообщение.Грузополучатель1С = Сообщение.Покупатель1С;
	КонецЕсли;
	
	ТоварыОтветаНаЗаказ = Сообщение.Товары;
				
	//получаем товары входящего заказа
	Если Параметры.Свойство("ВходящийЗаказ") Тогда 	//указали ORDERS в явном виде
		ВходящийЗаказ = Параметры.ВходящийЗаказ; 
	Иначе 											//не указали, сами прочитаем
		Если Не Параметры.Свойство("Действие") Тогда 
			Параметры.Вставить("Действие","ПодготовитьОтветНаЗаказ");
		КонецЕсли;	
		ВходящийЗаказ = ПрочитатьСообщение(,Сообщение.Документ1С,"ORDERS","Входящее",,Параметры);
	КонецЕсли;
	ТоварыВходящегоЗаказа = ВходящийЗаказ.Товары;

	//добавим колонку "Пометка" для идентификации товаров, отсутствующих во входящем заказе
	ТоварыОтветаНаЗаказ.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	ЕстьОтклонения 		= Ложь;
	ЕстьИзменения 		= Ложь;
	ЕстьПодтверждения 	= Ложь;
	
	Для Каждого Стр Из ТоварыВходящегоЗаказа Цикл
	
		//ищем в товарах ответа на заказ строку товара входящего заказа
		НайденнаяСтрока = Неопределено;
		Если НайденнаяСтрока = Неопределено И ЗначениеЗаполнено(Стр.КодТовараПокупателя) Тогда
			НайденнаяСтрока = ТоварыОтветаНаЗаказ.Найти(Стр.КодТовараПокупателя,"КодТовараПокупателя");
		КонецЕсли;
		Если НайденнаяСтрока = Неопределено И ЗначениеЗаполнено(Стр.GTIN) Тогда
			НайденнаяСтрока = ТоварыОтветаНаЗаказ.Найти(Стр.GTIN,"GTIN");
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда //не нашли товар входящего заказа в товарах ответа на заказ
							
			//добавим его в ответ на заказ как "отмененный"
			ЕстьОтклонения = Истина;
			ОтклоненнаяСтрока = ТоварыОтветаНаЗаказ.Добавить();
			ЗаполнитьЗначенияСвойств(ОтклоненнаяСтрока,Стр,"Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КодТовараПокупателя,GTIN,КодТовараПоставщика,Наименование");
			ОтклоненнаяСтрока.НомерСтроки = ТоварыОтветаНаЗаказ.Количество();
			ОтклоненнаяСтрока.КоличествоЗаказанное = Стр.Количество;
			ОтклоненнаяСтрока.Статус = "Отклонен";
			ОтклоненнаяСтрока.Пометка = Истина;
						
		Иначе //нашли товар входящего заказа в товарах ответа на заказ
			
			//сравним строки по основным полям: ЦенаБезНДС, ЦенаСНДС, Количество, СтавкаНДСEDI
			Если Стр.ЦенаБезНДС > 0 И ((Стр.ЦенаБезНДС - НайденнаяСтрока.ЦенаБезНДС >= 0.01) ИЛИ (НайденнаяСтрока.ЦенаБезНДС - Стр.ЦенаБезНДС >= 0.01)) Тогда //нашли расхождение по "ЦенеБезНДС"
				НайденнаяСтрока.Статус	= "Уточнен";
				ЕстьИзменения 			= Истина;
			ИначеЕсли Стр.ЦенаСНДС > 0 И ((Стр.ЦенаСНДС - НайденнаяСтрока.ЦенаСНДС >= 0.01) ИЛИ (НайденнаяСтрока.ЦенаСНДС - Стр.ЦенаСНДС >= 0.01)) Тогда //нашли расхождение по "ЦенеСНДС"
				НайденнаяСтрока.Статус	= "Уточнен";
				ЕстьИзменения 			= Истина;
			ИначеЕсли НЕ НайденнаяСтрока.Количество = Число(Стр.Количество) Тогда //нашли расхождение по "Количеству"
				НайденнаяСтрока.Статус	= "Уточнен";
				ЕстьИзменения			= Истина;
			//пока не конвертируем ставку НДС при получении товаров документа - конвертируем при сравнении
			ИначеЕсли НЕ КонвертироватьЗначение1СвEDI(НайденнаяСтрока.СтавкаНДС1С,"СтавкаНДС","СтавкаНДС") = Стр.СтавкаНДСEDI Тогда //нашли расхождение по "СтавкеНДСEDI"
				НайденнаяСтрока.Статус	= "Уточнен";
				ЕстьИзменения			= Истина;
				
			Иначе //значения основных полей равны - отмечаем строку как "подтвержденную"
				НайденнаяСтрока.Статус 	= "Подтвержден";
				ЕстьПодтверждения		= Истина;
				
			КонецЕсли;
			
			НайденнаяСтрока.Пометка = Истина;
			НайденнаяСтрока.КоличествоЗаказанное = Стр.Количество;
			
		КонецЕсли; 		
        						
	КонецЦикла;
	
	//пометим товары ответа на заказ, которые не нашли во входящем заказе, как "уточненные"
	Для Каждого Стр Из ТоварыОтветаНаЗаказ Цикл
		Если НЕ Стр.Пометка = Истина Тогда
			Стр.Статус = "Уточнен";
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	//рассчитаем дату поставки на основании входящего заказа и документа 
	ДатаПоставки = ПолучитьЗначениеКлючаСтруктуры(Параметры, "ИзмененныеРеквизиты.ДатаПоставки");
	Если Не ЗначениеЗаполнено(ДатаПоставки) Тогда
		ДатаПоставки = ОпределитьДатуПоставки(Сообщение,ВходящийЗаказ);
	КонецЕсли;
	Сообщение.ДатаПоставки = ДатаПоставки;
	
	//определим наличие расхождения по "ДатеПоставки"
	Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Покупатель1С));
	_СтатусChangedДляИзмененнойДатыПоставкиORDRSP = ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СтатусChangedДляИзмененнойДатыПоставкиORDRSP");
	Если _СтатусChangedДляИзмененнойДатыПоставкиORDRSP = Истина Тогда
		Если ЗначениеЗаполнено(ВходящийЗаказ.ДатаПоставки) и ВходящийЗаказ.ДатаПоставки <> Сообщение.ДатаПоставки Тогда
	    	ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//определяем статус сообщения
	Если ЕстьИзменения ИЛИ (ЕстьПодтверждения И ЕстьОтклонения) Тогда
		Статус = "Уточнен";
	ИначеЕсли ЕстьПодтверждения Тогда
		Статус = "Подтвержден";
	Иначе
		Статус = "Отклонен";
	КонецЕсли;
	Сообщение.Статус = Статус;
			
	//дополним данные из входящего заказа
	Сообщение.КонечныйГрузополучатель1С 	 	= ПолучитьЗначениеКлючаСтруктуры(ВходящийЗаказ, "КонечныйГрузополучатель1С");
	Сообщение.ПромежуточныйГрузополучатель1С 	= ПолучитьЗначениеКлючаСтруктуры(ВходящийЗаказ, "ПромежуточныйГрузополучатель1С");
	Сообщение.ДатаВывозаОтПоставщика		 	= ПолучитьЗначениеКлючаСтруктуры(ВходящийЗаказ, "ДатаВывозаОтПоставщика");
	Сообщение.Транспортировка.ДатаВремяПрибытия = ПолучитьЗначениеКлючаСтруктуры(ВходящийЗаказ, "Транспортировка.ДатаВремяПрибытия");
	
	//в дальнейшем, убрать возврат
	Возврат Сообщение;
		
КонецФункции

Функция Маппинг_ПодготовитьУведомлениеОбОтгрузке(ДокументСсылка,Сообщение,Параметры)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(Сообщение);
		
	Сообщение.Документ1С = ДокументСсылка;
	Сообщение.Заказ1С = НайтиСвязанныйДокументПоТипуСообщения(Сообщение.Документ1С,"ORDERS");
	Сообщение.Накладная1С = Сообщение.Документ1С;
	
	ЗаполнитьЗначенияРеквизитовОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем реквизиты
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовитьУведомлениеОбОтгрузке",,Сообщение); //получаем товары
	
	Параметры.Вставить("ЗначенияСвойствОбъектов", Новый Структура("Товары", Товары));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем табличные части

	//------ дополнение расчетными данными -------
	
	Если Не ЗначениеЗаполнено(Сообщение.Грузоотправитель1С) Тогда
		Сообщение.Грузоотправитель1С = Сообщение.Продавец1С;
	КонецЕсли;
	
	//протянем прочих грузополучателей из входящего заказа
	Если ЗначениеЗаполнено(Сообщение.Заказ1С) Тогда
		ВходящийЗаказ = ПрочитатьСообщение(,Сообщение.Заказ1С,"ORDERS","Входящее");
		Сообщение.КонечныйГрузополучатель1С = ПолучитьЗначениеКлючаСтруктуры(ВходящийЗаказ, "КонечныйГрузополучатель1С");
		Сообщение.ПромежуточныйГрузополучатель1С = ПолучитьЗначениеКлючаСтруктуры(ВходящийЗаказ, "ПромежуточныйГрузополучатель1С");
	КонецЕсли;
			
	//при переотправке:
	Если ПолучитьЗначениеКлючаСтруктуры(Параметры,"Действие") = "Переотправка" Тогда
		//подтягиваем транспортные упаковки из предыдущего DESADV
		ТранспортныеУпаковки = ПолучитьЗначениеКлючаСтруктуры(Параметры,"ИсходноеСообщение.ТранспортныеУпаковки");
		Если ТипЗнч(ТранспортныеУпаковки) = Тип("ДеревоЗначений") И
			 ТранспортныеУпаковки.Строки.Количество() > 0 Тогда
			Сообщение.ТранспортныеУпаковки = Параметры.ИсходноеСообщение.ТранспортныеУпаковки;
		КонецЕсли;
		//устанавливаем статус "Changed", если этого требует соответствующая настройка партнера
		Партнер = ОпределитьПартнера(Новый Структура("ТипЗначения,ЮрФизЛицо","ЮрФизЛицо",Сообщение.Покупатель1С));
		_СтатусChangedДляПовторныхDESADV = (ПолучитьЗначениеСвойстваОбъектаEDI(Партнер, "СтатусChangedДляПовторныхDESADV") = Истина);
		Если _СтатусChangedДляПовторныхDESADV Тогда
			Сообщение.Статус = "Уточнен";	
		КонецЕсли;
	КонецЕсли;
	
	//заполним СФ, если она уже введена
	СФ = ПолучитьСчетФактуруНакладной(Сообщение.Документ1С);
	Если НЕ СФ = Неопределено Тогда
		Сообщение.СчетФактура1С = СФ;	
	КонецЕсли;
	
	//заполняем дату поставки на основе анализа дат из входящего заказа и документов
	Сообщение.ДатаПоставки	= ОпределитьДатуПоставки(Сообщение);
	
	ДополнитьСообщениеСохраненнымиДанными(Сообщение, Параметры);

КонецФункции

Функция Маппинг_ПодготовитьОтчетОПродажеАлкоголя(ДокументСсылка,Сообщение)
		
	Параметры = Новый Структура;
	
	Сообщение.Документ1С = ДокументСсылка;
	Сообщение.Заказ1С = НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"ORDERS");
    Сообщение.Накладная1С = ДокументСсылка;
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(Сообщение);
			
	ЗаполнитьЗначенияРеквизитовОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем реквизиты
	
	Товары = ПолучитьТоварыРеализацииАлкогольнойПродукции(ДокументСсылка); //получаем товары
	//Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,,"ПолучитьТоварыРеализацииАлкогольнойПродукции",,Сообщение);	//TODO набросать запросы в СКД и тогда включить
	
	Параметры.Вставить("ЗначенияСвойствОбъектов", Новый Структура("Товары", Товары));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем табличные части

	//------ дополнение расчетными данными -------
	
	Если Не ЗначениеЗаполнено(Сообщение.Грузоотправитель1С) Тогда
		Сообщение.Грузополучатель1С = Сообщение.Покупатель1С;
	КонецЕсли;
			
	БылОтправленALCRPT = ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Документ1С, "БылОтправленALCRPT");
	Сообщение.Вставить("БылОтправленALCRPT", (БылОтправленALCRPT=Истина));
		
КонецФункции

Функция Маппинг_ПодготовитьУведомлениеОПриемке(ДокументСсылка, Сообщение)
		
	Параметры = Новый Структура;
	
	Сообщение.Документ1С = ДокументСсылка;
	Сообщение.Заказ1С = НайтиСвязанныйДокументПоТипуСообщения(ДокументСсылка,"ORDERS");
	Сообщение.Накладная1С = ДокументСсылка;
	Сообщение.Приемка1С = ДокументСсылка;
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(Сообщение);
	
	ЗаполнитьЗначенияРеквизитовОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем реквизиты
	
	Товары = ПолучитьТоварыДокументаДляСообщения(ДокументСсылка,Истина,"ПодготовкаУведомленияОПриемке",,Сообщение); //получаем товары накладной
	
	Параметры.Вставить("ЗначенияСвойствОбъектов", Новый Структура("Товары", Товары));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем табличные части
		
КонецФункции

Функция Маппинг_ПодготовитьСчетФактуру(ДокументСсылка,Сообщение)
    		
	Параметры = Новый Структура;
	
	Сообщение.Документ1С = ДокументСсылка;
	Сообщение.Заказ1С = НайтиСвязанныйДокументПоТипуСообщения(Сообщение.Документ1С,"ORDERS");
	Сообщение.Накладная1С = НайтиСвязанныйДокументПоТипуСообщения(Сообщение.Документ1С,"DESADV");
	Сообщение.Приемка1С = НайтиСвязанныйДокументПоТипуСообщения(Сообщение.Документ1С,"RECADV");
	Сообщение.СчетФактура1С = Сообщение.Документ1С;
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(Сообщение);
		
	ЗаполнитьЗначенияРеквизитовОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем реквизиты
		
	МассивВозвратов = Новый Массив;
	ТаблицаСвязанныхВозвратов = ПолучитьСвязанныеДокументыВходящихВозвратов(Сообщение);
	Для Каждого Стр Из ТаблицаСвязанныхВозвратов Цикл
		МассивВозвратов.Добавить(Стр.Документ);
	КонецЦикла; 
	Товары = ПолучитьТоварыДокументаДляСообщения(Сообщение.Накладная1С,Истина,"ПодготовкаСчетФактурыКОтправке",МассивВозвратов,Сообщение); //получаем товары с учетом возвратов
		
	Параметры.Вставить("ЗначенияСвойствОбъектов", Новый Структура("Товары", Товары));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем табличные части
	
	//------ дополнение расчетными данными -------
	
	СообщениеИсточник = "";
	Если ЗначениеЗаполнено(Сообщение.Заказ1С) Тогда
		СообщениеИсточник = ПрочитатьСообщение(,Сообщение.Заказ1С,"ORDERS","Входящее");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СообщениеИсточник) И ЗначениеЗаполнено(Сообщение.Накладная1С) Тогда
		СообщениеИсточник = ПрочитатьСообщение(,Сообщение.Накладная1С,"RECADV","Входящее");
	КонецЕсли;
	Если ЗначениеЗаполнено(СообщениеИсточник) Тогда
		СообщениеИсточник.Свойство("КонечныйГрузополучатель1С",			Сообщение.КонечныйГрузополучатель1С);
		СообщениеИсточник.Свойство("ПромежуточныйГрузополучатель1С",	Сообщение.ПромежуточныйГрузополучатель1С);
	КонецЕсли;
	
	Сообщение.СуммаТоваровНДС = 0;
	Сообщение.СуммаТоваровВсего = 0;
	Сообщение.СуммаТоваровВсегоБезНДС = 0;
	Для Каждого Строка Из Сообщение.Товары Цикл
		Если Строка.ТипЕдиницы <> "RC" Тогда //по возвратной таре сумму не считаем
			Сообщение.СуммаТоваровНДС			= Сообщение.СуммаТоваровНДС+Строка.СуммаНДС;
			Сообщение.СуммаТоваровВсего			= Сообщение.СуммаТоваровВсего+Строка.СуммаСНДС;
			Сообщение.СуммаТоваровВсегоБезНДС	= Сообщение.СуммаТоваровВсегоБезНДС+Строка.СуммаБезНДС;
		КонецЕсли;				
	КонецЦикла;	
	
КонецФункции

Процедура Маппинг_ЗаполнитьИсправительныйКорректировочныйСчетФактуру(ДокументСсылка,Сообщение)
	
	Параметры = новый Структура;
	
	//находим корректировку реализации
	ТабЧастьДокументыОснования = ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору("ДокументыОснования", ДокументСсылка);
	ИмяРеквизитаТабЧастиДокументОснование = ПолучитьИмяСвойстваОбъектаМетаданных("ДокументыОснования.ДокументОснование", ДокументСсылка);
	Если ЗначениеЗаполнено(ТабЧастьДокументыОснования) И ЗначениеЗаполнено(ИмяРеквизитаТабЧастиДокументОснование) Тогда
		Для Каждого Строка ИЗ ТабЧастьДокументыОснования Цикл
			ЗначениеРеквизитаТабЧастиДокументОснование = Строка[ИмяРеквизитаТабЧастиДокументОснование];
			Если ТипЗнч(ЗначениеРеквизитаТабЧастиДокументОснование) = Тип(ПолучитьТипЗначенияОбъекта("ИсходящийКСФ")) Тогда
				КорректировкаРеализации = ЗначениеРеквизитаТабЧастиДокументОснование;
			КонецЕсли;
		КонецЦикла;		
	Иначе
		ИмяРеквизитаДокументОснование = ПолучитьИмяСвойстваОбъектаМетаданных("ДокументОснование", ДокументСсылка);	
		Если ЗначениеЗаполнено(ИмяРеквизитаДокументОснование) Тогда
			КорректировкаРеализации = ДокументСсылка[ИмяРеквизитаДокументОснование];	
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КорректировкаРеализации) Тогда
		ВызватьИсключение "Не удалось подготовить исправительный (корректировочный) СФ. Не найден документ корректировки.";
	КонецЕсли;
	
	//находим документ отгрузки
	ДокументРеализацииКР = ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору("ДокументРеализации", КорректировкаРеализации);
	Если ЗначениеЗаполнено(ДокументРеализацииКР) Тогда
		ТипДокументаИсходящееУведомлениеОбОтгрузке = Тип(ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОбОтгрузке"));
		Если ТипЗнч(ДокументРеализацииКР) = ТипДокументаИсходящееУведомлениеОбОтгрузке Тогда
			ДокументОтгрузки = ДокументРеализацииКР;
		Иначе
			ДокументРеализацииДокументаРеализацииКР = ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору("ДокументРеализации", ДокументРеализацииКР);
			Если ЗначениеЗаполнено(ДокументРеализацииДокументаРеализацииКР) И
				 ТипЗнч(ДокументРеализацииДокументаРеализацииКР) = ТипДокументаИсходящееУведомлениеОбОтгрузке Тогда
				ДокументОтгрузки = ДокументРеализацииДокументаРеализацииКР;		 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		ВызватьИсключение "Не удалось подготовить исправительный (корректировочный) СФ. Не найден документ отгрузки.";
	КонецЕсли;
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(Сообщение);
	
	Сообщение.Заказ1С = НайтиСвязанныйДокументПоТипуСообщения(ДокументОтгрузки,"ORDERS");
	Сообщение.Накладная1С = НайтиСвязанныйДокументПоТипуСообщения(ДокументОтгрузки,"DESADV");
	Сообщение.Приемка1С = НайтиСвязанныйДокументПоТипуСообщения(ДокументОтгрузки,"RECADV");
	Сообщение.СчетФактура1С = НайтиСвязанныйДокументПоТипуСообщения(ДокументОтгрузки,"INVOIC");
	Сообщение.Документ1С = ДокументСсылка;
	
	ЗаполнитьЗначенияРеквизитовОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем реквизиты
	
	Товары = ПолучитьТоварыДокументаДляСообщения(КорректировкаРеализации,Истина,?(Сообщение.ТипСообщения = "INVOIC","ПодготовкаИсправительногоСчетаФактурыКОтправке","ПодготовкаКорректировочногоСчетаФактурыКОтправке"),,Сообщение);
	
	Параметры.Вставить("ЗначенияСвойствОбъектов", Новый Структура("Товары", Товары));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(ДокументСсылка, Сообщение, МаппингОбъекта, Параметры); //заполняем табличные части
	
	//------ дополнение расчетными данными -------
	
	ЗначениеРеквизитаГрузоотправитель = ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору("Грузоотправитель", КорректировкаРеализации);
	Если ЗначениеЗаполнено(ЗначениеРеквизитаГрузоотправитель) Тогда
		Сообщение.Грузоотправитель1С = ЗначениеРеквизитаГрузоотправитель;
	Иначе
		ЗначениеРеквизитаОрганизация = ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору("Организация", КорректировкаРеализации);
		Сообщение.Грузоотправитель1С = ?(ЗначениеЗаполнено(ЗначениеРеквизитаОрганизация), ЗначениеРеквизитаОрганизация, Неопределено);
	КонецЕсли;
	ЗначениеРеквизитаГрузополучатель = ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору("Грузополучатель", КорректировкаРеализации);
	Если ЗначениеЗаполнено(ЗначениеРеквизитаГрузополучатель) Тогда
		Сообщение.Грузополучатель1С = ЗначениеРеквизитаГрузополучатель;
	Иначе
		ЗначениеРеквизитаКонтрагент = ПолучитьЗначениеСвойстваОбъектаМетаданныхПоИдентификатору("Контрагент", КорректировкаРеализации);
		Сообщение.Грузополучатель1С = ?(ЗначениеЗаполнено(ЗначениеРеквизитаКонтрагент), ЗначениеРеквизитаКонтрагент, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

//загрузка сообщений по маппингу -----------------------------------------------------------------
Функция Маппинг_ПринятьОбратныйЗаказПоставщика(Сообщение,ПервоначальнаяЗагрузкаСообщения = Истина)
	
	Если ПервоначальнаяЗагрузкаСообщения Тогда
		Если Не ИмяКонфигурации1С = "БП" Тогда
			ТипДокументаЗаказ = ПолучитьТипЗначенияОбъекта("ВходящийОбратныйЗаказ",,Истина); 
			НовыйДокумент = Документы[ТипДокументаЗаказ].СоздатьДокумент();
		Иначе
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Для Каждого Строка Из Сообщение.Товары Цикл 
		ЗаполнитьНедостающиеПоляСтрокиТоваров(Строка);
	КонецЦикла;
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(НовыйДокумент);
	
	НовыйДокумент.Дата = ТекущаяДата();
	ЗаполнитьЗначенияРеквизитовОбъекта(Сообщение, НовыйДокумент, МаппингОбъекта); //заполняем реквизиты
			
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(Сообщение, НовыйДокумент, МаппингОбъекта); //заполняем табличные части
	
	ОбработкаСобытияПодключаемогоМодуля("ПриЗагрузкеВходящегоСообщения",,Новый Структура("Сообщение,ДокументСсылка",Сообщение,НовыйДокумент));

	Если ПолучитьКонстантуEDI("ОткрыватьФормуОбратногоЗаказаПередЗаписью") = Истина Тогда
		
		ФормаДокумента = НовыйДокумент.ПолучитьФорму();
  		ФормаДокумента.ЭлементыФормы.Склад.ОграничениеТипа = Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ТочкаДоставкиСвоя"));
		ФормаДокумента.ОткрытьМодально();
		СсылкаНаДокумент = НовыйДокумент.Ссылка;		
	    Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе	
		
		НовыйДокумент.Записать();
		Если ПолучитьКонстантуEDI("ПроводитьЗагруженныеОбратныеЗаказы") = Истина Тогда
			ПроводитьЗаказ = Истина;
		Иначе
			ПроводитьЗаказ = НовыйДокумент.Проведен;
		КонецЕсли;
		Если ПроводитьЗаказ Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Контур-EDI: Не удалось провести документ "+СокрЛП(НовыйДокумент.Ссылка));
			КонецПопытки;
		КонецЕсли;
		СсылкаНаДокумент = НовыйДокумент.Ссылка;
		
	КонецЕсли;
				
	Возврат СсылкаНаДокумент;
	
КонецФункции

Процедура Маппинг_ЗаполнитьВходящийДокументПоСообщению_ORDERS_ОФ(НовыйДокумент,Сообщение)
			
	Параметры = Новый Структура;
	
	Для Каждого Строка Из Сообщение.Товары Цикл 
		ЗаполнитьНедостающиеПоляСтрокиТоваров(Строка);
	КонецЦикла;
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(НовыйДокумент);
	
	НовыйДокумент.Дата = ТекущаяДата();
	ЗаполнитьЗначенияРеквизитовОбъекта(Сообщение, НовыйДокумент, МаппингОбъекта, Параметры); //заполняем реквизиты документа
			
	Параметры.Вставить("УстанавливатьСобственныеЦеныВЗаказах", (ПолучитьЗначениеСвойстваОбъектаEDI(Сообщение.Отправитель1С,"УстанавливатьСобственныеЦеныВЗаказах")=Истина));
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(Сообщение, НовыйДокумент, МаппингОбъекта, Параметры); //заполняем табличные части
	
	Если ЗначениеЗаполнено(Сообщение.Грузополучатель1С) Тогда
		ТочкаДоставкиСторонняя = ПолучитьЭлементСправочника("ТочкиДоставкиСторонние",Сообщение.Грузополучатель1С);
		Если ЗначениеЗаполнено(ТочкаДоставкиСторонняя) И 
			ЗначениеЗаполнено(ТочкаДоставкиСторонняя.ТочкаДоставкиСвойСправочник) Тогда
			РеквизитыШапки = НовыйДокумент.Метаданные().Реквизиты;
			Для Каждого Реквизит Из РеквизитыШапки Цикл
				ТипыРеквизита = Реквизит.Тип.Типы();
				Если ТипыРеквизита.Количество()=1 Тогда
					Если Реквизит.Тип.СодержитТип(ТипЗнч(ТочкаДоставкиСторонняя.ТочкаДоставкиСвойСправочник)) Тогда
						НовыйДокумент[Реквизит.Имя] = ТочкаДоставкиСторонняя.ТочкаДоставкиСвойСправочник;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция Маппинг_ПринятьУведомлениеОбОтгрузке(Сообщение)
	
	СтандартнаяОбработкаEDI = Истина;
	Док = ОбработкаСобытияПодключаемогоМодуля("ПринятьУведомлениеОбОтгрузке",СтандартнаяОбработкаEDI,Новый Структура("Сообщение",Сообщение));
	Если Не СтандартнаяОбработкаEDI Тогда
		Возврат Док.Ссылка;			
	КонецЕсли;
	
	ТипДокументаORDERS = ПолучитьТипЗначенияОбъекта("ИсходящийЗаказПоставщику",,Истина);
	ТипДокументаDESADV = ПолучитьТипЗначенияОбъекта("ВходящееУведомлениеОбОтгрузке",,Истина);

	ДатаДокумента = Сообщение.ЗаказEDI.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;	
	НайденныйЗаказ = Документы[ТипДокументаORDERS].НайтиПоНомеру(Сообщение.ЗаказEDI.Номер,ДатаДокумента);
			
	Если Не ЗначениеЗаполнено(НайденныйЗаказ) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Сообщение.Заказ1С = НайденныйЗаказ;
	
	НовыйДокумент = Документы[ТипДокументаDESADV].СоздатьДокумент();
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(НовыйДокумент);
	
	НовыйДокумент.Дата = ТекущаяДата();
	ЗаполнитьЗначенияРеквизитовОбъекта(Сообщение, НовыйДокумент, МаппингОбъекта); //заполняем реквизиты
	
	ИмяТабличнойЧастиТовары = ПолучитьИмяСвойстваОбъектаМетаданных("Товары", НовыйДокумент);
	Если ЗначениеЗаполнено(ИмяТабличнойЧастиТовары) Тогда
		НовыйДокумент[ИмяТабличнойЧастиТовары].Очистить();
	КонецЕсли;		
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(Сообщение, НовыйДокумент, МаппингОбъекта); //заполняем табличные части
	
	НовыйДокумент.Записать();

	Возврат НовыйДокумент.Ссылка;

КонецФункции

Функция Маппинг_ПринятьСчетФактуру(Сообщение)
	
	ТипДокументаПриемка = ПолучитьТипЗначенияОбъекта("ИсходящееУведомлениеОПриемке",,Истина);
	ОбъектМетаданных = Документы[ТипДокументаПриемка].ПустаяСсылка();
	
	ИмяРеквизитаОрганизация = ПолучитьИмяСвойстваОбъектаМетаданных("Организация", ОбъектМетаданных);
	ИмяРеквизитаКонтрагент = ПолучитьИмяСвойстваОбъектаМетаданных("Контрагент", ОбъектМетаданных);
	ИмяРеквизитаНомерВходящегоДокумента = ПолучитьИмяСвойстваОбъектаМетаданных("НомерВходящегоДокумента", ОбъектМетаданных);
	ИмяРеквизитаДатаВходящегоДокумента = ПолучитьИмяСвойстваОбъектаМетаданных("ДатаВходящегоДокумента", ОбъектМетаданных);
	
	Если Не ЗначениеЗаполнено(ИмяРеквизитаНомерВходящегоДокумента) И
		 Не ЗначениеЗаполнено(ИмяРеквизитаДатаВходящегоДокумента)  Тогда
		Сообщить("Не удалось принять входящий счет-фактуру №" + СокрЛП(Сообщение.ДокументEDI.Номер) + " от " + Формат(Сообщение.ДокументEDI.Дата,"ДФ=dd.MM.yyyy") + "из-за отсутствия номера и даты документа приемки.");		 
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
    |	ДокументПриемки.Ссылка
    |ИЗ
    |	Документ."+ТипДокументаПриемка+" КАК ДокументПриемки
    |ГДЕ
	|	ИСТИНА";
	Если ЗначениеЗаполнено(ИмяРеквизитаОрганизация) И ЗначениеЗаполнено(Сообщение.Покупатель1С) Тогда
		Запрос.Текст = Запрос.Текст + "	И ДокументПриемки."+ИмяРеквизитаОрганизация+" = &Организация ";
		Запрос.УстановитьПараметр("Организация", Сообщение.Покупатель1С);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяРеквизитаКонтрагент) И ЗначениеЗаполнено(Сообщение.Продавец1С) Тогда
		Запрос.Текст = Запрос.Текст + "	И ДокументПриемки."+ИмяРеквизитаКонтрагент+" = &Контрагент ";
		Запрос.УстановитьПараметр("Контрагент", Сообщение.Продавец1С);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяРеквизитаНомерВходящегоДокумента) И ЗначениеЗаполнено(Сообщение.НакладнаяEDI.Номер) Тогда	
		Запрос.Текст = Запрос.Текст + "	И ДокументПриемки."+ИмяРеквизитаНомерВходящегоДокумента+" = &НомерВходящегоДокумента ";
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Сообщение.НакладнаяEDI.Номер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяРеквизитаДатаВходящегоДокумента) И ЗначениеЗаполнено(Сообщение.НакладнаяEDI.Дата) Тогда	
		Запрос.Текст = Запрос.Текст + "	И ДокументПриемки."+ИмяРеквизитаДатаВходящегоДокумента+" МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаВходящегоДокумента, МЕСЯЦ, -2) И ДОБАВИТЬКДАТЕ(&ДатаВходящегоДокумента, МЕСЯЦ, 1) ";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", Сообщение.НакладнаяEDI.Дата);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не смог найти поступление с вх. номером " + Сообщение.НакладнаяEDI.Номер);
	ИначеЕсли РезультатЗапроса.Выгрузить().Количество() > 1 Тогда //нашли несколько подходящих поступлений, скажем об этом
        Если ИмяКонфигурации1С = "АСТОР" Тогда
			Сообщить("Не удается однозначно сопоставить регистрацию счета-фактуры и приходную накладную с вх. номером " + Сообщение.НакладнаяEDI.Номер + " и вх. датой " + Сообщение.НакладнаяEDI.Дата);	
		Иначе
			Сообщить("Не удается однозначно сопоставить счет-фактуру и поступление с вх. номером " + Сообщение.НакладнаяEDI.Номер + " и вх. датой " + Сообщение.НакладнаяEDI.Дата);
		КонецЕсли;
	Иначе //только одно подходящее поступление, можем продолжать.
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
	    Сообщение.Приемка1С = Выборка.Ссылка;
	    СчетФактура = НайтиСвязанныйДокументПоТипуСообщения(Сообщение.Приемка1С,"INVOIC"); //пробуем найти счет-фактуру (в случае повторного INVOIC или уже введенного вручную)
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			Док = СчетФактура.ПолучитьОбъект();
			Сообщение.СчетФактура1С = СчетФактура;
		Иначе	
			ТипДокументаСФ = ПолучитьТипЗначенияОбъекта("ВходящийСчетФактура",,Истина);
			Док = Документы[ТипДокументаСФ].СоздатьДокумент();	
		КонецЕсли;
		
		МаппингОбъекта = ПолучитьМаппингОбъекта(Док);
		ЗаполнитьЗначенияРеквизитовОбъекта(Сообщение, Док, МаппингОбъекта); //заполняем реквизиты
		
		Док.Записать();
	    Возврат Док.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция Маппинг_ПринятьВозвратТоваров(Сообщение,ПервоначальнаяЗагрузкаСообщения = Истина)
		
	Если ПервоначальнаяЗагрузкаСообщения Тогда
		ТипRETANN = ПолучитьТипЗначенияОбъекта("ВходящийВозврат",,Истина);
		Если ЗначениеЗаполнено(ТипRETANN) Тогда
			НовыйДокумент = Документы[ТипRETANN].СоздатьДокумент();
		Иначе
			ВызватьИсключение "Не удалось создать документ возврата (не определен тип документа).";
		КонецЕсли;
	Иначе
		НовыйДокумент = Сообщение.ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Для Каждого Строка Из Сообщение.Товары Цикл 
		ЗаполнитьНедостающиеПоляСтрокиТоваров(Строка);
	КонецЦикла;
	
	МаппингОбъекта = ПолучитьМаппингОбъекта(НовыйДокумент);
			
	НовыйДокумент.Дата = ТекущаяДата();
	ЗаполнитьЗначенияРеквизитовОбъекта(Сообщение, НовыйДокумент, МаппингОбъекта); //заполняем реквизиты документа
			
	ЗаполнитьЗначенияРеквизитовТабличныхЧастейОбъекта(Сообщение, НовыйДокумент, МаппингОбъекта); //заполняем табличные части документа
			
	Возврат НовыйДокумент.Ссылка;
			
КонецФункции

//}#КонецОбласти //98_КонструкторКастомовЧасть3

//{#Область 99_Релизы

Функция ПолучитьНомерРелиза_КонтурEDI() Экспорт
	               
	Возврат ?(КонтурEDI_ВерсияПлатформы()="81","3","4")+".03.014.32b";

	//Лог изменений
	
	//4.03.014.32b
	//E1C_in-31082. Теперь статус ConvertingToDiadoc обрабатывается при использовании схемы MetroOkNotOk при работе со статусными по подписке.
	
	//4.03.014.31b
	//E1C_in-29746. Теперь кнопка "Прекратить обработку сообщения" есть в карточке сообщения для всех исходящих.
	
	//4.03.014.30b
	//E1C_in-30921. В заголовок сообщения Pricat в структуру XML добавлен атрибут "name", заполняется наименованием типа цен.
	//Исправления по E1C_in-31609.
	
	//4.03.014.29b
	//Исправления по E1C_in-29746.
	
	//4.03.014.28b
	//Исправления по E1C_in-30960.
	
	//4.03.014.27b
	//Добавлена резервная схема формирования SSCC кодов. 
	//Функция реализована в виде общей настройки модуля.
	
	//4.03.014.26b
	//Поправлен EDI1C-2017
	
	//4.03.014.25b
	//Мелкие правки E1C_in-31095
	
	//4.03.014.24b
    //Для исходящих сообщений более точно устанавливается ДатаСоздания, 
	//учтена повторная конвертация сообщения после выполнения обмена
	
	//4.03.014.23b
	//В структуру сообщения 1С добавлено поле "ДатаСоздания".
	//Для входящих сообщений записывается дата/время получения сообщения сервером EDI в стандарте UTC, также, как нам передает сервер.
	//Для исходящих - дата/время генерации сообщения в модуле по времени сервера 1С.
	//Дата/время выводится в шапку формы сообщения и в XML файл, который генерируется функцией "Показать XML файл".
	
	//4.03.014.22b
	//Доработаны механизмы релиза 4.03.014.21b
	
	//4.03.014.21b
	//E1C_in-29815 Реализована возможность отправлять признак самовывоза для ТС Магнит.
	//Добавлен плагин Плагин_ВыбратьТочкуСамовывоза
	//Добавлены Расширения "ТС Магнит - признак самовывоза (despatchParty)" и "ТС Магнит - Точки самовывоза в основном списке"  Расширения Будут выведены в библиотеку только если в у вас в списке есть Магнит
	
	//4.03.014.20b
    //E1C_in-30903. Реализована групповая печать палетных листов из модуля на ОФ и УФ, кнопка вызова находится в разделе "Еще" -> "Распечатать палетные листы".
	//В связи с этим, также оптимизирован плагин подключаемого модуля "Печать палетного листа".
	//EDI1C-2008. Исправлен выявленный баг по работе с SSCC кодами из карточки DESADV на УФ.
	//Прочие интерфейсные правки страницы "Транспортные упаковки" формы сообщения на УФ.
	//Исправлена ошибка компиляции подключаемого модуля, из-за чего модуль не подключался для использования.
	
	//4.03.014.19b
	//Добавил расширение для Метро, когда при игнорировании RECADV создаются фейковые RECADV на другие DESADV
	
	//4.03.014.17b
	//Исправлен баг с получением представления особенностей модуля E1C_in-31131
	
	//4.03.014.16b
	//Добавлена ед. измерения MTQ (м3)
	
	//4.03.014.15b
	//Исправления по RETDES E1C_in-31116
	
	//4.03.014.14b
	//EDI1C-2006
	//Исправлена ошибка в имени элемента XML "ДатаПоставки" при отправке INVOIC в режиме XDTO.
	
	//4.03.014.13b
	//E1C_in-31102 Автоматический помошник сопоставления номенклатуры теперь для УФ_БП будет также искать номенклатуру контрагентов сети по справочнику НоменклатураПоставщиков
	
	//4.03.014.12b
	//E1C_in-31076
	//Исправлена ошибка дублирования "наших организаций" при обновлении с сервера.
	
	//4.03.014.11b
	//Функционал самообновления модуля УФ
	
	//4.03.014.01
	
	//	Основные изменения:
	
	//Доработан механизм формирования PRICELIST.
	//Оптимизирована приемка ORDRSP в режиме сети.
	//Добавлена возможность экспорта расширений на ОФ.
	//Добавлено расширение для гибкой отправки Грузоотправителя в режиме поставщика.
	//Добавлено расширение "Ворота времени в основном списке".
	//Добавлено расширение "RECADV толерантен к расхождениям менее 1 рубля".
	//Добавлено расширение "ТС 7Континент и ТС СпарМиддлВолга".
	//Добавлен плагин для РЦ Призма.
	//Перенос некоторых общих настроек в настройки партнера.
	//Добавлена ед. изм. "рулон".
	//Устранены выявленные неполадки.
	
	//Поправлены прочие неполадки:
	
	//E1C_in-31045 Исправлена ошибка при заполнении алкоданных.
	//Исправлена видимость таблицы ошибок на форме Pricelist.
	//В шаблоне ПМ в макете ТипыОбъектов добавлено поле ТипыЦен, используется в Pricelist.
	//EDI1C-1989 Исправлен баг с определением вида ЮрФизЛицо на УНФ.
	//Исправлен баг. Не открывалась библиотека расширений, когда в списке были самописные расширения.
	//EDI1C-1986, EDI1C-1989 исправлено.
	//E1C_in-31036 Исправлена ошибка определения релиза конфигурации на новым релизе УТ 11.2
	//E1C_in-31066 Исправлена ошибка при загрузке DESADV в ERP 2.1
	//EDI1C-1969 Восстановлена работоспособность настройки "Обновлять данные в списке документов полностью" на УФ.
	//На УФ при первоначальном запуске модуля и при обновлении модуля на версию > 4.03.014.00 настройка будет установлена в Ложь.
	//На УФ УТ и БП при обработке ORDRSP на стороне сети теперь изменения по-умолчанию не переносятся в документ. Это можно изменить в ПМ при нажатии кнопки Принять 
	//E1C_in-30916 теперь в Pricelist можно добавить товары, если не выбран тип цен. 
	//Поправлен баг при отклонении заказа сетью на УФ из формы обработки ORDRSP с изменениями E1C_in-28701
	//Исправлена ошибка сопоставления точек доставок на внешнем хранилище. E1C_in-31058
	//Заполнение гл. бух. и руководителя при загрузке ORDERS в БП 2.0. E1C_in-29851
	//Информация о наличии расширений выводится в заголовок формы и исх. сообщениях. E1C_in-30917
	//При загрузке RECADV без изменений в реализацию с товаром, разбитых по партиям, сообщение не уходило в архив. E1C_in-30950
	//E1C_in-31009 добавил в шаблоны запросов для БП 2.0 запрос по товарам для RETREC
	//+ при создании RETANN, RETDES добавил для БП 2.0 заполнение счетов учета расчетов
	//EDI1C-1960 немного поправил видимость полей на ОФ.
	//E1C_in-31020 добавлена возможность отправить ПрайсЛист без указания покупателя (buyer).
	//E1C_in-31015 при отправке ПрайсЛиста без указания покупателя (buyer) поле получатель (recipient) теперь заполняется.  
	//EDI1C-1960 исправил.
	//Исправлено E1C_in-30954, EDI1C-1962, EDI1C-1960
	//E1C_in-30872 в УНФ с 1.4 по 1.6 перезаполнение СФ вызывается из формы документа РасходнаяНакладная в обработчике ПослеЗаписи
	//добавил еще условие проверки при установке НастройкаПериода
	//E1C_in-27430 РазрешитьПустыеКодыGTIN перенесена в партнера в РазрешитьПустыеКодыGTINВИсходящихСообщениях
	//E1C_in-27037 Отправлять возвратную тару в desadv перенесена в партнера
	//Галочки автосоздания заказа из ORDERS и автопроведения заказа перенесены в настройки партнера.
	//E1C_in-30949 Оптимизировано сравнение строк по количеству.
	//E1C_in-26955 Ставка НДС по возвратной таре в исходящих сообщениях теперь всегда "БезНДС" вместо "НДС 0%"
	//Автоматическое преобразование общей галочки в партнеров произойдет только на 14м релизе при запуске новой версии модуля.
	//Добавлена картинка "Шлагбаум"
	//Модуль подготовлен для работы с расширением "Грузоотправитель - настройка отправки"
	//небольшая оптимизация при приемке ORDRSP на стороне сети
	//E1C_in-28810. подставлены условия, отражающие возможное получение статусных не в том порядке, в котором мы их ждем
	//получение DraftOfDocumentPackagePostedIntoDiadoc до MessageCheckingOk
	//получение MessageCheckingFail до DraftOfDocumentPackageSignedByMe
	//E1C_in-30991.
	//В схеме XDTO добавлен элемент receivingAdviceIdentificatorInBuyerSystem для сообщений RECADV, INVOIC, COINVOIC.
	//Изменен его тип с DocumentIdentificatorType на blanketOrderIdentificator.
	//E1C_in-30977.
	//Теперь при сопоставлении ТД со своим справочником ВидыКонтактнойИнформации можно сопоставить несколько точек доставок с одним видом, но только в разрезе разных контрагентов и партнеров.
	//E1C_in-30961, E1C_in-30963. 
	//Модуль не запускался на типовых конфигурациях ранних релизов, где нет документа КорректировкаРеализации.
	//крит баг фикс Не уходит тэг <totalVATAmount> E1C_in-30975
	//E1C_in-30964. Поддержка УТ 11.2. Теперь код единицы EDI передается так, как указан в табличной части сообщения.
	//E1C_in-30911 Поправлена xsd схема СхемыСообщений - blanketOrderIdentificator - number  атрибут
	//E1C_in-30951. Теперь при формировании основного списка, в разделе исходящих будет проверяться условие (если есть с чем сравнить) на равенство партнера определенного по тек. документу и партнера из текущего блокирующего сообщения (предыдущего сообщения в цепочке) - все это при формировании ВТ_ОтправитьСообщения_
	//E1C_in-30902. Теперь восстанавливаем дату поставки из сохраненного DESADV.
	//E1C_in-30952 bug fix. 
	//Стандартное диалоговое окно выбора периода дает выбрать дату начала периода > даты окончания, если сохранить значения, то модуль перестает открываться.
	//E1C_in-29813 ОпределитьДатуПоставки теперь смотрит Сообщение.ДокументСсылка вместо не заполненного Сообщение.Документ1С при попытке понять дату отгрузки по заказу
	//и при отправке desadv снова видит исходящий ordrsp и будет брать дату поставки из него.
	//E1C_in-30938 fix  баг при загрузке RECADV, сообщение приходит со статусом "Обработать входящее сообщение"
	//E1C_in-30937 fix - баг при работе с библиотекой расширений на внешнем хранилище полечен
	//E1C_in-30020 В Плагин для РЦ Призма добавлен функционал печати паллетных ведомостей
	//E1C_in-30020 В шаблон ПМ добавлен Плагин для РЦ Призма /  подтверждение по консолидированным заказам / разрез ultimateCustomer в товарах при формировании ORDRSP
	//Поправил автозапуск
	//Убрали лишнюю директиву в Модуле объекта
	//E1C_in-30859 исправлено.
	//На УФ не заполнялись действия и картинки для дерева отборов в основной форме, поправил. 
	//Рефакторинг: заполнение дерева отборов в основной форме (ОФ и УФ) вынесено в общий серверный метод "ЗаполнитьДеревоОтборовОсновнойФормы".

	
	//4.03.013.01
	
	//	Основные изменения:
	//Добавлено расширение "Авто-игнорирование Расхождений RECADV (настраивается для партнера)",  модуль подготовлен для использования этого расширения 
	//"Отправка произвольного сообщения" перенесена на УФ
	//Печать заказа (ORDERS): теперь если Партнер не прислал наименование то будет подставлено представление сопоставленной номенклатуры. Добавлен автоматический дорасчет и вывод рассчетных колонок СуммыСНДС и СуммыБезНДС если эти данные не прислала сеть.
	//На УФ: Механизм сохранения файлов обновления конфигурации КонтурEDI_upd и инструкции переделан так чтобы они сохранялись на клиентской машине (каталоге) а не по серверному адресу как ранее
	//Общая настройка модуля "ИспользоватьXDTOПарсинг" теперь включена по умолчанию.  Для клиентов, которые были внедрены ранее эта настройка НЕ будет автоматически включена
	//Добавлена поддержка конфигурации «Управление торговлей, редакция 11.3» (определяется модулем и работает как в 11.2).
	//Исправлена неполадка со сворачиванием в ORDRSP товаров с разной серией
	//"НеОтправлять_I_INVOIC" протянут в УФ (EDI1C-1944, часть 2).
	//Устранена неполадка на БП30 при создании РТУ из заказа - в некоторых случаях неверно указывалась Цена с НДС E1C_in-30650
	//Добавлено заполнение собственных цен на БП30 при загрузке Orders в документ Счет.
	//Реализована работа на стороне ТС на конфигурации БП30 - Цепочка сообщений ORDERS-ORDRSP-DESADV-RECADV-INVOIC, Шаблон документов - ПоступлениеТоваровУслуг-СчетФактураПолученный. 
	//В списое доступных единиц измерения EDI добавлен DKL, 
	//В список стран-производителей добавлен Европейский союз (EU), код 980. 
	//(Важная неполадка) Поправлен баг с сопоставлением контрагента, когда торговая сеть передает GLN buyer в GLN invoicee.
	//Добавлена возможность автоматически отправлять сообщения PORDERS на стороне поставщика. (Включается в настройках партнера, добавлен соответствующий флаг "PORDERS (обратный заказ)" в разделе "Автоматически отправлять сообщения") (E1C_in-29952)
	//Добавлена настройка для отключения отправки I-Invoic партнерам (E1C_in-30014)
	//Добавлена возможность через ПМ добавлять свои собственные настройки для партнеров (макет ПМ _НастройкиПараметры - достаточно убрать подчеркивание и исправить содержащийся там пример) Также добавлена возможность добавлять эти настройки через Расширения или ПМ – новое событие «ДобавитьКастомныеНастройкиПартнера»
	//Добавлена возможность вручную игнорировать ошибки из checking_fail в отправленных сообщениях на стороне поставщика (E1C_in-29746). Реализовано кнопкой "Пропустить сообщение" в форме сообщения (ОФ и УФ).
	//Дополнены события расширений (приведены в соответствие с ПМ) и удалены старые события (более не используемые)
	
	//Изменения в PRICELIST:
	//•	Поправлен PriceList по формату (теперь в сообщении будет слово PRICAT). Кроме этого, его номер теперь берется из кода типа цен. (если не заполнен, то как раньше - тек дата с секундами)
	//•	Исправления неполадок по Pricelist:
	//				добавлена проверка в таблице товаров заполнения GTIN, смотрим на общую настройку модуля "Разрешить пустые GTIN" 
	//				добавлена проверка в таблице товаров заполнения ставки НДС
	//				добавлены поля количество в одном месте (onePlaceQuantity) и квант поставки (IncrementalOrderQuantity)
	//				добавлены поля срок годности (shelfLife) и страна происхождения (countryOfOriginISOCode)
	//				изменен формат строки категория товара (productCategory)
	//•	Добавлено новое событие ПМ "ИзменитьЗапросПоНоменклатуреДляПрайсЛиста" - позволяет полностью изменить запрос получения данных для полей Pricelist, а также использовать фиксированные значения для заполнения таблицы.
	
	//•	Интерфейсные улучшения
	//Технологические:
	//В вызове события ПерезаполнитьЦеныСкидкиВДокументе в ПМ параметр "Документ" передается под 2 именами для совместимости с уже существующими ПМ клиентов.
	//При подписании ЭСФ убрана проверка сертификата на IsQualifiedElectronicSignature (E1C_in-29490)
	//Оптимизация запроса по счетам-фактурам в функции "СформироватьСписокДокументов_ДляОтправкиКоррИспрINVOIC" (по замечаниям от клиентов).
	//Добавлена отправка пустых сумм в нулевом RETREC
	//Поправлен баг с конвертацией грузоотправителя/грузополучателя из 1С в EDI и наоборот.
	//В форму обработки расхождений (ОФ) возвращена случайно потерявшаяся возможность создавать документ "Корректировка реализации". А отправка КСФ все-таки удалена.
	//Дополнено описание некоторых событий механизма расширений
	//Поправлена инициализация и использование ДанныеОтладки в ПМ. (на работала отладка, сообщение событий и конструктор)
	//Исправлено: в ПроверитьЗапускНовойВерсииМодуля при обновлении регистра соответствий товаров при выполнении запроса было опасное соединение, приводившее иногда к переполнению памяти. На всякий случай теперь сбрасываются в Неопределено ссылки на объекты в ЗаполнитьТребуемоеДействиеВСообщениях, чтобы сборщик мусора не прозевал. Может, и лишнее.
	//В шаблон ПМ добавлен пример обработчика ПередЗаписьюОбъектаСообщения - пропуск desadv
	//В событие ПМ "ИзменитьЗапросКонвертацииТоваровEDIв1С" добавлен параметр "Сообщение" (E1C_in-30572).
	
	//Поправлены прочие неполадки:
	//E1C_in-30764 исправлен баг на УФ при открытии формы сообщения INVOIC из карточки связанных сообщений.
	//E1C_in-30679 исправлен баг при групповой отправке на УФ, если производилось сохранение DESADV из формы сообщения.
	//E1C_in-30036 Поправлен баг с отправкой lot в ALCRPT
	//E1C_in-30641 при обработке расхождений в RECADV добавилась проверка на ссылку на документ, если ее нет, открывается карточка сообщения для сопоставления и загрузки.
	//E1C_in-30662 увеличена допустимая длина дома и квартиры
	//E1C_in-30638 исправлен расчет цен в COINVOIC
	//E1C_in-30642 Поправлена мелкая неполадка в отчете «Анализ заказов»
	//Поправлен ввод РТУ из Счета в БП30
	//Поправлен баг контактной информации на релизах УТ11.1.2 и УТ11.2.3
	//Исправлена неполадка, приводившая в ряде случаев к путанице при формировании COINVOIC, когда в документе стоял признак "Сумма не включает НДС"
	//Исправлена неполадка с подготовкой ИСФ на УФ

	
	//4.03.012.01
	
    // Далион: поддерживается обработка сообщений без GTIN (числовые коды справочника номенклатуры).
	// Добавлена функция "Показать на Яндекс картах" в основном списке УФ и ОФ.
	// Добавлены новые сообщения RETDES и RETREC для модуля на обычных формах.
	// Добавлено кэширование в функции ПолучитьТаблицуСвязанныхДокументовПоТипамСообщений()
	// Добавлен механизм расширений для управляемых форм.
	// Проработано повторное открытие формы (обычной) "Просмотр расхождений заказа" - по отзыву от "Русское Море".
	// Добавлена возможность просматривать расхождения между версиями заказов (ОФ и УФ).
	// Переделан механизм сбора COINVOIC на УФ_УТ
	// Добавлена настройка партнера "Несколько товаров сети = одному товару поставщика".
	// Удалена старая настройка и функционал отправки КСФ из RECADV (E1C_in-28816).
	// Проброшен ID Основной формы в МодульОбъекта. Теперь в ПМ можно писать СообщенияПользователю в Основную форму модуля.
	// Обновление списка соответствий номенклатуры в форме партнера объединено для ОФ и УФ, вынесено в модуль объекта и оптимизировано. Актуально для клиентов с большим ассортиментом.
	// В ОФ добавлено сохранение позиции текущего соответствия после обновления списка.
	// При запуске модуля под пользователем автообмена больше не происходит построение списка документов (E1C_in-29909).
	
	// Ключ структуры Сообщение "КонтрактEDI" Заменен на "Контракт" - внесены исправления в том числе в шаблон ПМ.
	// Теперь Контракт (contractIdentificator) является полностью штатным полем структуры Сообщение.
	// Слегка Реорганизована карточка сообщения на закладке Дополнительно.
	// Реализован вывод Контракт Номер и Контракт Дата в случае, если они пришли.
	// Контракт проброшен в ORDRSP и INVOIC.
	// В карточке сообщения добавлен ПроизвольныйРеквизит (невидимый) - его можнео использовать как резервный для вывода любой информации.
	// В библиотеку расширений добавлено новое расширение по выводу в ПроизвольныйРеквизит additionalIdentificator так же добавлен аналогичный код в шаблон ПМ в событие ПриОткрытииФормыСообщения.
	// (E1C_in-29958)
	
	// Новые события ПМ: 
	// - ПерезаполнитьЦеныСкидкиВДокументе (E1C_in-29839).
	// - ПослеПроверкиПолей1С. Кто-то из клиентов вставлял туда контроль цен.
	// - ЗаполнитьТаблицуТоваровПоВходящемуСообщению (для заполнения таблицы товаров по входящему сообщению по произвольному алгоритму).
	// В шаблоне ПМ изменено описание алгоритма пересчетов (E1C_in-29846).
	// В шаблоне ПМ добавлена инструкция в самом начале функции "ОбработатьСобытиеКонтурEDI".
	// В шаблон ПМ добавлен пример отображения итоговой суммы документов в основном списке (событие "ПриОткрытииОсновнойФормы").
	
	// Исправлены выявленные ошибки:
	// - ALCRPT - при XDTO lot выводится в разрезе номенклатуры, а не номенклатура+серия
	// - Оптимизированы вызовы Обновления КэшаПартнеров при обновлении списка на УФ (ранее запрос исполнялся 4 раза при каждом обновлении списка без необходимости)
	// - Проверка ALCRPT перенесена в МодульОбъекта, решена проблема групповой отправки desadv с невалидными ALCRPT (E1C_in-28346).
	// - Ошибка при загрузке входящих сообщений в режиме сеть при включенной функции "Загружать сообщения от данной точки доставки" (E1C_in-30040)
	// - Неверный код валидации SSCC в форме сообщения (падал на длинных номерах палетт).
	// - В списке COINVOIC выводится точка доставки и номер заказа
	// - Корректно обрабатываются статусные на полную отмену заказа 
	// - Вывод треб. действий "Создать реализацию", если в середине цепочки нет DESADV
	// - В карточке соответствий номенклатуры предлагается выбрать любую ед. изм из классификатора
	// - В исходящих сообщениях заполняются внутренние коды контрагентов
	
	// - Теперь после передачи на сервер ORDRSP со статусом "Отклонен" модуль будет помечать связанный документ на удаление.
	//   Как следствие - не будут появляться требуемые действия Провести заказ и Создать РТУ.
	//   Тикеты: E1C_in-28697, E1C_in-28677, E1C_in-28568.
	
	// - В некоторых случаях в INVOIC возникали некорректные суммы (E1C_in-29943).
	// - Ошибка обработки Retann на КА 2.0 (EDI1C-1930).
	// - Мелкая ошибка в одном из примеров в шаблоне ПМ (E1C_in-29933).
	// - Ошибка при переотправке desadv (E1C_in-29928).
	// - При перевыборе соответствия в форме сообщения не перезаполнялся коэффициент (E1C_in-29515). В ОФ и УФ.
	// - Отправка PriceList на УФ (EDI1C-1818).
	// - Падение на УТАП 11.2 в запросе алко товаров.
	// - Подготовка ORDRSP: учтены флаги "СинхронизироватьТоварыТолькоПоGTIN" и "СинхронизироватьТоварыТолькоПоКодуПартнера".
	// - Открытие формы настроек без флагов "мы поставщик" и "мы покупатель" (E1C_in-29611).
	// - Функция "ЕстьРеквизитОбъекта" переименована в "ЕстьРеквизитОбъекта_Контур" для совместимости с конфигурацией "ДАЛИОН: Управление магазином.ПРО ред 1.2 (1.2.30.04)".
	
	//4.03.011.01
	
	// Добавлена поддержка конфигураций УТАП 11.2 и УНФ 1.6.
	// Реализована отправка egaisFixationIdentificator в DESADV. элемент Сообщения имеет внутреннее имя "ФиксацияВЕГАИС" и заполняется в подключаемом модуле.
	// На УФ добавлена возможность переключения компактности интерфейса приложения.
	// Добавлено новое событие ПМ - ПослеЧтенияСообщения_XDTO. Здесь можно добавить в Сообщение любые теги из XML, о которых основной модуль еще не знает.
	// Добавлена возможность отправки корректировочного счета-фактуры на конфигурации "Бухгалтерия предприятия 2.0".
	// Отчет "Сверка документов": разбивка списка документов по организациям, роуминговые статусы ДД.
	// Добавлено событие ПМ  "ИзменитьСтруктуруДоступностиТиповСообщений"
	// Добавлено чередование цветов строк основного списка УФ.
	// Добавлен вывод номеров заказов (1С и EDI) в форму "ПросмотрРасхождений".
	
	// Исправление выявленных ошибок:
	// - Обновление кэша модуля объекта при изменении критически важных настроек в режиме управляемых форм
	// - Падение на отправке PORDERS на УНФ1.6 при установленной настройке ТД из грузополучателя (на УНФ нет штатного реквизита грузополучатель)
	// - Флаг "Автоматически создавать заказ в 1С, если все соответствия найдены" в УФ не считывался из памяти в форму настроек
	// - Первый запуск модуля на не настроенной базе приводил к падению модуля
	// - Теги "quantityIncrease/quantityDecrease" и прочие в корректировочном счете-фактуре приведены к стандартам.
	// - Кнопка "Показать расхождения приемки" возвращена в основной интерфейс (ОФ и УФ)
	// - При обработке ответа на заказ на стороне сети на УТ11 не пересчитывалось количество по строке
	// - Дополнительное выравнивание элементов интерфейса для платформы 8.3.4 и старше ранее в некоторых ситуациях приводило к "съезду" элементов управления (УФ)
	// - Построение списка ИСФ/КСФ на отправку: выдавались лишние строки
	// - Отправка иерархии товаров в PRICELIST в теге "lineItem.comment" для "мелкой розницы".
	
	//4.03.010.02
	
	// Исправление выявленных ошибок:
	// - Не отображался выбор собственного справочника точек доставки в обычных формах
	// - Не записывались идентификаторы документов при использовании XDTO.
	
	
	//4.03.010.01
	
	// Переделан запрос по товарам в Шаблоне запросов на УФ_УТ: теперь смотрим ТЧ "Виды запасов" вместо ТЧ "Товары" в РТУ, т.к. хотим брать ГТД и страну
	// Добавлен функционал отчета по SL
	// В основной управляемой форме добавлен подсчет количества в отборах основной формы, как в ОФ.
	// Развитие сериализации сообщений через XDTO.
	// Удалена экспортная глобальная переменная "ПараметрыИнтернетСоединения_КонтурEDI". Заменена на кэшируемую функцию "ПолучитьПараметрыИнтернетСоединения_KE"
	// Новое событие ПМ "ПолучитьТекущегоПользователя1С"
	// В методе "ПостроитьСписокЗадач_Сервер" добавлено описание того, как строится список задач.
	
	// Для работы в режиме торговой сети в РИБ добавлены 2 новых события в ПМ:
	// "ОтфильтроватьЯщикиДляПолученияСообщений" и "ПолучитьЯщикДляОтправкиСообщения". 
	// Шаблон ПМ обновлен, добавлен "Плагин_МаршрутизацияСообщенийТорговойСети".
	
	// Исправление выявленных ошибок:
	// - шаблон получения товаров для БХСП
	// - шаблон печати паллетных листов обрезал длинные адреса
	// - В шаблон ПМ возвращен пример события "ПолучитьДоговорКонтрагентаДляСообщения"
	// - возвращена поддержка конфигурации RIT
	// - применение автоматических скидок в УТ11 при создании документа 1С
	// - открытие XML файла сообщения на УФ
	
	
	//4.03.009.02
	
	//Требуемая версия компоненты Диадок повышена до 5_5_5_86.
	//Исправлена ошибка: при вызове "ПрочитатьСообщение" из метода "ЗаполнитьДеревоРасхожденийДокумента" не передавался тип сообщения, только ссылка.
	//Влияло на пересчеты в подключаемом модуле.
	
	
	//4.03.009.01
	
	//Реализованы сообщения COINVOIC и исправительный INVOIC для конфигураций семейства УФ_УТ: (УТ 11, ERP 2, УТАП 11) и УФ_БП (БП 3.0, УСХП 3.0).
	//Добавлена возможность работы с конечным грузополучателям в сообщениях от ТС "Детский мир".
	//	Соответствующий код расположен в шаблоне подключаемого модуля, раздел "Плагин_ДетскийДир_ultimateCustomer".
	//Добавлена групповая печать входящих заявок (меню "Еще -> Распечатать заказы").
	//Улучшена поддержка конфигурации "1С: Астор: Торговый Дом 7.0 SE".
	//Добавлена экспериментальная возможность: чтение XML-файлов сообщений с использованием механизма XDTO.
	//	Включается отдельной настройкой "ИспользоватьXDTOПарсинг".
	//Исправлены выявленные ошибки.
	
	
	//4.03.008.01
	
	//Интерфейсное: добавлен "режим вычеркивания" на обычных формах. Аналогично УФ.
	//Добавлена индикация даты последнего обмена с сервером (ОФ и УФ).
	//На управляемой форме добавлен вызов Kontur VNC.
	//Расшифрованы названия сообщений на русском языке в основной УФ.
	//Горячие клавиши основной УФ приведены в соответствие с обычной формой.
	//Сделано групповое отклонение заказов УФ.
	//Реализован вывод состояния при отработке групповых действий (раньше выглядело так, словно модуль завис).
	
	//Добавлена форма отправки произвольного сообщения, пригодится при работе через API (только на обычных формах).
	//Реализована переотправка COINVOIC через меню "Ещё", из подменю сообщения.
	//В карточке сообщения INVOIC тоже добавлена переотправка.
	
	//Для УФ добавлена экспериментальная возможность кэшировать модуль объекта во временном хранилище.
	//Включается флагом "(ЭКСПЕРИМЕНТАЛЬНО) Кэшировать модуль объекта" в общих настройках.
	//Позволяет сильно ускорить работу с модулем.
	
	//Добавлен идентификатор договора в PORDERS для ТС "Низкоцен", а также в PRICAT (тег "<contractIdentificator>").
	//Добавлена обработка статусных сообщений "Cheking_fail" на PORDERS.
	
	//На стороне сети доработана отправка штрихкода EAN8 в случае, если он только один.
	//ВВЕДЕНИЕ ВТОРОГО ШК ПРИВЕДЕТ К ОТСУТСТВИЮ ВАЛИДНОГО СООТВЕТСТВИЯ ТОВАРОВ.
	
	//Изменения в обработке повторных RECADV:
	//1) Полностью дублирущиеся RECADV теперь игнорируются и не загружаются в базу (по аналогии с ORDERS).
	//2) При открытии формы "Обработка расхождений приемки" действие теперь выполняется именно с тем сообщением, которое выбрал пользователь в основном интерфейсе.
	//Побочный эффект: строки на создание/отправку INVOIC в основном интерфейсе могут задвоиться, но при этом создать/отправить несколько INVOIC не получится.
	//Артефакт будет исправлен в следующих релизах.
	
	//Сериализация исходящих сообщений продублирована с использованием механизма XDTO. Включается общей настройкой "ИспользоватьXDTOСериализацию".
	//При этом становятся доступны 2 новых события в подключаемом модуле:
	//"ПослеЗаполнения_EdiMessage_XDTO";
	//"ПослеЗаполнения_LineItem_XDTO".
	
	//Добавлено новое событие в ПМ - "ПослеПроверкиСообщенияEDI".
	//Позволяет принудительно передать какую-либо произвольную ошибку в исходящее сообщение
	// (например, для запрета отправки DESADV до выполнения каких-либо дополнительных условий).
	
	//Добавлена настройка торговой сети "Синхронизировать товары только по коду партнера (ТОЛЬКО ПОСТАВЩИК)".
	//Обновлена требуемая версия компоненты Диадок до Diadoc_EDI_5_4_0_67.dll
	//Добавлена возможность вести логи ответов API в отдельном каталоге: метод "API_ЗаписатьЛогОтветов".
	//Объединение с 8.1.
	//Добавлено действие "Провести заказ" по короткой цепочке (ORDERS-INVOIC, например). Включается флагом "Проводить заказ всегда" в настройках партнера.
	//Добавлена возможность автоматически отправлять сообщения ORDRSP,DESADV,INVOIC на стороне поставщика. Задается в общих настройках.
	//Добавлена возможность работать с ИСФ/КСФ на внешнем хранилище.
	
	//Поддержка нового релиза ТКПТ.
	//Поддержка ERP релиза 2.1.3.66.
	//В шаблон ПМ добавлены заполнения алко сведений для конфигураций на УФ.
	
	//Исправление выявленных ошибок.
	
	
	
	//4.03.007.01
	//Добавлена поддержка конфигурации Комплексная автоматизация 2.0 (управляемые формы)
	//Добавлены поля ЕГАИС для DESADV и плагин заполнения полей ЕГАИС в DESADV.
	//Доработана форма отправки прайс-листа (период действия цен).
	//Реализована отправка прайс-листа для конфигураций в режиме управляемого приложения.
	//В отчет "Сверка документов" добавлена колонка "Создано", которая показывает, как созданы документы: через сервис EDI или вручную.
	//В форме точки доставки (ОФ и УФ) добавлены поясняющие надписи. Теперь стало проще сориентироваться в логике заполнения реквизитов.
	//Доработан механизм указания врат времени в режиме управляемого приложения.
	//Убрано отображение цен/сумм в обработке RECADV при снятом флаге "Сверять цены и ставки в RECADV" в настройках партнера.
	//В режиме управляемого приложения реализована функция проверки новых юр лиц сети (в карточке партнера).
	//Отключена модальность окна "Просмотр расхождений заказа и документа 1С" (ОФ и УФ).
	//Добавлен вызов события ПМ "ПриОткрытииОсновнойФормы" для УФ.
	//Событие ПМ "ПослеОбновленияСпискаЗадач" добавлено в управляемую форму по аналогии с обычной формой.
	//Добавлен механизм маппинга полей документов/сообщений. По умолчанию отключен, тестировать можно на самописных конфигурациях.
	//Исправлена ошибка при загрузке входящего сообщения из ORDERS: ранее при некоторых комбинациях цен/сумм/ставок НДС сумма НДС могла быть рассчитана некорректно.
	//Оптимизировано построение списков документов в части счетов-фактур. Ранее соединение в одном из запросов «через ссылку» могло отрабатывать медленно.
	//Интерфейсные улучшения.
	//Исправление выявленных ошибок.
	
	
	//4.03.006.01
	
	//Добавлен отчет "Анализ заказов" (обычные и управляемые формы).
	//Частичная оптимизация работы в режиме управляемых форм (ускорено открытие формы сообщения). 
	//Добавлена управляемая форма "Новое в релизе".
	//Добавлена единица MTQ в пересчетах.
	//Работа с ЕГАИС в ALCRPT. Ключ поиска "ЕГАИС", Шаблон ПМ на алко дополнен.
	//Поддержка УТ 11.2 и ERP 2.1 (реализация не окончательная, возможны дополнения).
	//Доступна привязка/отвязка документов в форме "Сервис_СвязанныеСообщенияУправляемая". Так же, как в обычных формах.
	//Рефакторинг: работа с внешним хранилищем, инициализация модуля, инициализация подключаемого модуля.
	
	//Исправление выявленных ошибок:
	// - конвертация Грузополучателя на УТ11;
	// - конвертации товаров EDI в 1С (если у нас в регистре заполнены ШК а сеть заказала с пустым ШК);
	// - привязки в форме Сообщения и Данные переключателя местонахождения ПМ в форме настроек (все в обычных формах);
	// - нулевое количество в COINVOIC;
	// - убрана доступность кнопки Сохранить в карточке входящего заказа при открытии через форму связанные на УФ;
	// - платформенный баг кнопки "Еще" на УФ;
	// - повторное открытие формы точки доставки (ОФ);
	// - запуск модуля на УФ с переходом со старого модуля в режиме отказа от модальности.
	
////////////////////////////////	

	//4.03.005.08
	//Исправление ошибки конвертации сообщений при переходе со старых модулей (до 4.02.005)
	
	//4.03.005.07
	//Исправление ошибки в настройке подключаемого модуля
    	
	//4.03.005.06
	//Исправление ошибки уничтожения ТЧ после отвязки документа на УФ.
	
	//4.03.005.05
	//Исправление ошибки отправки ORDRSP на внешнем хранилище.
	
	//4.03.005.04
	//Исправление выявленных ошибок в форме настройки пользователя.
	
	//4.03.005.03
	//Исправление ошибки открытия карточки сообщения INVOIC старых версий.
	//Исправление ошибки открытия формы настроек при пропуске стартового помощника.
	
	//4.03.005.02
	//Исправление ошибки открытия карточки сообщения из "Связанных сообщений".
	//При массовой отправке нескольких ORDRSP, связанных с одним ORDERS, больше не блокируется интерфейс.
	
	//4.03.005.01
	//Добавлены новые типы исходящих сообщений на стороне поставщика: PRICELIST и COINVOIC.
	//Тег receivingAdviceIdentificatorInBuyerSystem протянут из RECADV в INVOIC.
	//Добавлена сторона торговой сети на УТ11.x.
	//Добавлена обработка orders в ответ на porders на управляемых формах.
	//Интерфейсные улучшения, исправление выявленных ошибок.
	
	
	//4.03.004.01
	
	//Добавлена поддержка со стороны поставщика и ТС следующих конфигураций 
	//	- ДАЛИОН: Управление магазином, ред. 1.2;
	//	- Трактиръ: Head-Office БИЗНЕС, ред. 1.0.
	
	//Интерфейсные доработки в управляемых формах: 
	//	- В Обработке RECADV реализована корректировка реализации для УТ11 и БП 30 и возврат от клиента для УТ11;
	//	- Введен анализатор долгого перестроения списка с предложением перейти на режим зачеркивания строк (порог срабатывания установлен в 10 секунд);
	//	- Доделаны карточки пользователей EDI;
	//	- Отбор по своим организациям;
	//	- Доп действия основной формы (в т.ч. переотправка по реестру, подписание, переотправка итд.).
	
	//В шаблоне ПМ добавлен пример для события "ПослеСравненияТаблицыТоваров":
	//	Если входящий RECADV не отличается от документа в 1С по количеству в каждой строке товаров, а общая сумма документа отличается от приемки не более чем на 1 рубль,
	//	то не будем считать такой RECADV отличающимся от документа.
	
	//На стороне торговой сети в форме сообщения PORDERS добавлена кнопка "Прекратить обработку заказа" по аналогии с ORDERS у поставщика.
	
	//Обновление информации о организациях/транспортных ящиках усовершенствовано:
	//	- если одна из доступных организаций работает по FTP, пользователю выдается сообщение, какая именно организация
	//	- в режиме торговой сети автоматически отключаются транспортные ящики для тех GLN, которые не указаны на закладке "Точки доставки" в форме "Структура компании"
	//	- автоматически отключаются ящики с признаком "Istest"
	//	- в уже существующих ящиках дописываются поля GLN и IsTest.
	
	// В стартовом помощнике добавлена кнопка выбора протокола обмена FTP/API.
	
	//Рефакторинг механизмов чтения, сохранения, отправки, изменения статусов сообщений.
	//	ВНИМАНИЕ: при повторной отправке существующего сообщения теперь необходимо в структуре сообщения указать элемент "ПереотправляемоеСообщениеСсылка".
	
	//Добавлена функция "ЭтоТестовыйAPI()", позволяет переключаться на test-edi-api. Только для тестирования.
	//Добавлен функционал для самотестирования (запрос тестовых сообщений от виртуальной торговой сети через расширение).
	//История старше 4.03.001 очищена.
	
	//4.03.003.01
	
	// Доработки по SSCC:
	// - Возможность сохранять распределение товаров по упаковкам в DESADV
	// - Возможность напечатать паллетный лист по сохраненному сообщению
	// - Возможность редактировать SSCC-код вручную (+ валидации SSCC-кода, введенного вручную)
	// - Запрос пользователя о сохранении сообщения при закрытии (пока для DESADV с SSCC)
	
	// Обновлен формат и состав данных о торговых сетях. Добавлена возможность хранить настройки по умолчанию для торговых сетей на сервере.
	// XSD схема для парсинга XML с описанием сетей лежит в макете "СхемыPARTIN".
	// При добавлении новой торговой сети ее настройки частично будут браться с сервера.
	
	// Поддержка обновленного метода GetBoxesInfo - теперь по кнопке "Обновить с сервера" для новых ящиков будут прогружаться GLN и IsTest (актуально для торговых сетей с маршрутизацией, отличной от "Party").
	
	// Исправлен и оптимизирован механизм пересчета е.и. (в модуле и ПМ)
	
	// Параметризован справочник Номенклатура в форме Партнера и Номенклатуры (обычных) - для самописных конфигураций.
	// Новое событие ПМ - "ПроверитьНеобходимостьЗагрузкиСохраненияСообщения". Пример в шаблоне добавлен.
	// Новое событие ПМ - "ПередВыборомТочкиДоставкиСвойСправочник". Вывести в него плагин для УТ 10.3.
	
	// В настройках удален не используемый больше параметр "Ограничение количества дней для вывода в списках". Флаг "Обновлять список целиком" перенесен в "Прочие настройки".
	// Параметризован КаталогВременныхФайлов(). Теперь можно задать отдельное расположение временных файлов модуля.
	// Доработки для конфигурации Рарус:ТКПТ в режиме поставщика.
	// В форме описания обновлений кнопка "Не показывать больше" переименована в "Не показывать до следующего релиза".
	
	// Исправление выявленных ошибок.
	
	//4.03.002.01
	
	//Отчет "Сверка счетов-фактур" переименован в "Сверка документов" и стал более функциональным.
	//Добавлен отбор по организациям, возможность для пользователей настраивать доступ к партнерам\организациям.
	//Расширение функционала в управляемых формах.
	//Конвертации товаров EDI<>1C приведены в порядок, меняющаяся часть запросов (по регистру штрихкодов) вынесена в макет СКД с возможностью переопределения в ПМ.
	
	//4.03.001.01
	
	//Изменения в функционале:
	// Старый интерфейс удален окончательно, в связи с чем повышен номер релиза.
	// Добавлен функционал агентской схемы.
	// Добавлен плагин для агентской схемы в ПМ.
	// Доработки функционала управляемых форм (в том числе БП30 - загрузка заказа в счет, УНФ - загрузка заказа в Расходную накладную).
	
	//Изменения в коде:
	// Запросы на получение товаров документов в режиме поставщика вынесены запросами в СКД с возможностью их переопределения в подключаемом модуле.
	// В функции ОпределитьПартнераСообщения добавлен поиск партнера по контрагенту точки доставки.
	// Большая часть методов, непосредственно обращающихся к текущей конфигурации, сгруппирована в области "20_Конфигурация".
	// Добавлено новое событие подключаемого модуля "ЗаполнитьВходящийДокументПоСообщению_ORDERS".
	// Общий код из форм "ОбработкаРасхожденийПриемки" (управляемой и обычной) частично вынесен в модуль объекта.
	// Обновлен cf-файл обновления для ВХ.
	
	//Исправление ошибок:
	//	- с задвоением входящего сообщения.
	//	- двойного построения списка при открытии модуля.
	//	- установки даты документа создаваемого на основании текущей датой при массовом действии.
	//	- работы с SSCC в управляемой форме сообщения.
	//	- в отчете "Сверка СФ" - слетали привязки колонок к табличной части.
	//	- в плагине пересчета единиц измерения.
	
КонецФункции

//}#КонецОбласти //99_Релизы

