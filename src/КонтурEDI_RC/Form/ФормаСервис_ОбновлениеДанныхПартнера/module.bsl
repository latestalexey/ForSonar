
//обработчики---------------------------------------------------------------------------------

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		
	ЗаполнитьДеревоТочекДоставкиСФильтром();
	
КонецПроцедуры

Процедура ЗаполнитьДеревоТочекДоставкиСФильтром(Фильтр = "все")
	
	ТочкиДоставки.Строки.Очистить();
	_ТочкиДоставки = ПолучитьДеревоТочекДоставки(Параметры.КодСети, Фильтр);
	Если _ТочкиДоставки=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьДеревоРекурсивно(_ТочкиДоставки.Строки, ТочкиДоставки.Строки);	
	УстановитьЗначениеВсехСтрок("Обновить", 1);
	
КонецПроцедуры

Процедура ТочкиДоставкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	//оформляем табличное поле
	
	//скрываем поля шапки
	ОформлениеСтроки.Ячейки["ТекущиеДанные"].Видимость 				= Ложь;
	ОформлениеСтроки.Ячейки["ДанныеТС"].Видимость 					= Ложь;
	ОформлениеСтроки.Ячейки["НовыеДанные"].Видимость 				= Ложь;
			
	//общие настройки
	Для Каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
		Ячейка.ТолькоПросмотр = Истина;
	КонецЦикла;
	ОформлениеСтроки.Ячейки["Обновить"].ТолькоПросмотр 	= Ложь;
	ОформлениеСтроки.Ячейки["Обновить"].ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки["Обновить"].Выравнивание 	= ГоризонтальноеПоложение.Центр;
	ОформлениеСтроки.Ячейки.GLN.Выравнивание = ГоризонтальноеПоложение.Право;
	                                                                                                                                
	//настройка группировки
	Если ОформлениеСтроки.ДанныеСтроки.Родитель = Неопределено Тогда
		ОформлениеСтроки.ЦветФона 			= WebЦвета.АкварельноСиний;
		КоличествоНовыхСтрока               = СтрЗаменить(Строка(ОформлениеСтроки.ДанныеСтроки.Строки.Итог("НоваяТД")), Символы.НПП, "");
		КоличествоИзменилисьСтрока			= СтрЗаменить(Строка(ОформлениеСтроки.ДанныеСтроки.Строки.Итог("ИзмениласьТД")), Символы.НПП, "");
		КоличествоВсегоСтрока				= СтрЗаменить(Строка(ОформлениеСтроки.ДанныеСтроки.Строки.Количество()), Символы.НПП, "");
		СтрокаИтоговОбновления				= ПолучитьСтрокуИтоговОбновления(ОформлениеСтроки.ДанныеСтроки);
		ОформлениеСтроки.Ячейки.GLN.Текст						= "Всего: " + КоличествоВсегоСтрока;
		ОформлениеСтроки.Ячейки.АдресТочкиДоставкиТС.Текст		= "Новых: " + КоличествоНовыхСтрока + "; изменившихся: " + КоличествоИзменилисьСтрока;
        ОформлениеСтроки.Ячейки.НоваяТД.Текст					= Число(КоличествоНовыхСтрока);
		ОформлениеСтроки.Ячейки.ИзмениласьТД.Текст				= Число(КоличествоИзменилисьСтрока);
		ОформлениеСтроки.Ячейки.АдресТочкиДоставкиНовый.Текст	= СтрокаИтоговОбновления;
		
		ОформлениеСтроки.Ячейки.АдресТочкиДоставкиТекущий.Выравнивание 	= ГоризонтальноеПоложение.Право;
		ОформлениеСтроки.Ячейки.АдресТочкиДоставкиТС.Выравнивание 		= ГоризонтальноеПоложение.Право;
		ОформлениеСтроки.Ячейки.АдресТочкиДоставкиНовый.Выравнивание 	= ГоризонтальноеПоложение.Право;
		
		ОформлениеСтроки.Ячейки.АдресТочкиДоставкиТС.Выравнивание 		= ГоризонтальноеПоложение.Лево;
				
	//настройка данных
	Иначе
		
		ОформлениеСтроки.Ячейки.Регион.Текст	= "";
		ОформлениеСтроки.Ячейки["НаименованиеНовое"].ТолькоПросмотр 		= Ложь;
		ОформлениеСтроки.Ячейки["АдресТочкиДоставкиНовый"].ТолькоПросмотр 	= Ложь;
		
		//выделяем изменения жирным шрифтом
		Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , истина);
		Если ОформлениеСтроки.ДанныеСтроки.Обновить = 1 Тогда
			//использовать данные ТС
			Если Не ОформлениеСтроки.ДанныеСтроки.НаименованиеНовое = ОформлениеСтроки.ДанныеСтроки.НаименованиеТС Тогда
				ОформлениеСтроки.Ячейки["НаименованиеНовое"].Шрифт 			= Шрифт;
			КонецЕсли;
			Если Не ОформлениеСтроки.ДанныеСтроки.АдресТочкиДоставкиНовый = ОформлениеСтроки.ДанныеСтроки.АдресТочкиДоставкиТС Тогда
				ОформлениеСтроки.Ячейки["АдресТочкиДоставкиНовый"].Шрифт 	= Шрифт;
			КонецЕсли;
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Обновить = 0 Тогда
			//использовать текущие данные
			Если Не ОформлениеСтроки.ДанныеСтроки.НаименованиеТекущее = ОформлениеСтроки.ДанныеСтроки.НаименованиеНовое Тогда
				ОформлениеСтроки.Ячейки["НаименованиеНовое"].Шрифт 			= Шрифт;
			КонецЕсли;
			Если Не ОформлениеСтроки.ДанныеСтроки.АдресТочкиДоставкиТекущий = ОформлениеСтроки.ДанныеСтроки.АдресТочкиДоставкиНовый Тогда
				ОформлениеСтроки.Ячейки["АдресТочкиДоставкиНовый"].Шрифт 		= Шрифт;
			КонецЕсли;
		КонецЕсли;
		
		//выделяем цветами новые (зеленый), обновившиеся (желтым)
		Если ОформлениеСтроки.ДанныеСтроки.НоваяТД = 1 Тогда
			ОформлениеСтроки.Ячейки["АдресТочкиДоставкиНовый"].ЦветФона = WebЦвета.НейтральноЗеленый;
			ОформлениеСтроки.Ячейки["НаименованиеНовое"].ЦветФона 		= WebЦвета.НейтральноЗеленый;
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.ИзмениласьТД = 1 Тогда
			ОформлениеСтроки.Ячейки["АдресТочкиДоставкиНовый"].ЦветФона = WebЦвета.Лимонный;
			ОформлениеСтроки.Ячейки["НаименованиеНовое"].ЦветФона 		= WebЦвета.Лимонный;
		КонецЕсли;
		                                 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТочкиДоставкиПриИзмененииФлажка(Элемент, Колонка)
	
	//изменяем значения подчиненных флажков и флажок родителя
	
	Если Элемент.ТекущиеДанные.Обновить = 2 Тогда
		Элемент.ТекущиеДанные.Обновить = 0;
	КонецЕсли;
	
	УстановитьСвойствоПодчиненным(Элемент.ТекущиеДанные, "Обновить", Элемент.ТекущиеДанные.Обновить);
		
	ОбновитьФлажокРодителя(Элемент.ТекущиеДанные);
	
КонецПроцедуры

Процедура ТочкиДоставкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	//устанавливает/снимает признак отредактированности точки доставки вручную
	
	УстановитьПризнакОтредактированаТД(Элемент);
	
КонецПроцедуры
 
Процедура ТочкиДоставкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	//закрываем интерактивное добавление строк
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТочкиДоставкиПередУдалением(Элемент, Отказ)
	
	//закрываем интерактивное удаление строк
	
	Отказ = Истина;
	
КонецПроцедуры
  
Процедура ВсеНажатие(Элемент)
	
	//выбрать все
	
	УстановитьЗначениеВсехСтрок("Обновить", 1);		
	
КонецПроцедуры

Процедура НичегоНажатие(Элемент)
	
	//выбрать ничего
	
	УстановитьЗначениеВсехСтрок("Обновить", 0);
	
КонецПроцедуры

Процедура НовыеНажатие(Элемент)
	
	//выбрать новые
	
	Для Каждого СтрокаРегион Из ТочкиДоставки.Строки Цикл
		Для Каждого Строка Из СтрокаРегион.Строки Цикл	
			Если Строка.НоваяТД = 1 Тогда 
				УстановитьСвойствоПодчиненным(Строка, "Обновить", 1);
			Иначе
				УстановитьСвойствоПодчиненным(Строка, "Обновить", 0);
			КонецЕсли;
		КонецЦикла;
		ОбновитьФлажокРодителя(Строка);
	КонецЦикла;	
	
КонецПроцедуры

Процедура НеактуальныеНажатие(Элемент)
	
	//выбрать неактуальные
	
	Для Каждого СтрокаРегион Из ТочкиДоставки.Строки Цикл
		Для Каждого Строка Из СтрокаРегион.Строки Цикл	
			Если Строка.ИзмениласьТД = 1 Тогда 
				УстановитьСвойствоПодчиненным(Строка, "Обновить", 1);
			Иначе
				УстановитьСвойствоПодчиненным(Строка, "Обновить", 0);
			КонецЕсли;
		КонецЦикла;
		ОбновитьФлажокРодителя(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельТочкиДоставкиПоказатьВсе(Кнопка)
	
	//отбор все
	
	ЗаполнитьДеревоТочекДоставкиСФильтром();
	
КонецПроцедуры

Процедура КоманднаяПанельТочкиДоставкиПоказатьНовые(Кнопка)
	
	//отбор новые
	
	ЗаполнитьДеревоТочекДоставкиСФильтром("новые");
	
КонецПроцедуры

Процедура КоманднаяПанельТочкиДоставкиПоказатьНеактуальные(Кнопка)
	
	//отбор неактуальные (изменившиеся)
	
	ЗаполнитьДеревоТочекДоставкиСФильтром("изменившиеся");		
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОбновитьИЗакрыть(Кнопка)
	
	ЗаписатьДанные();
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействие(Кнопка)
	
	//закрываем форму
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры


//сохранение данных ---------------------------------------------------------------------------------

Процедура ЗаписатьДанные()
		
	РезультатЗаписи = ЗаписатьДанныеТочекДоставки(Параметры.КодСети, ТочкиДоставки);
	
	Для Каждого Строка Из РезультатЗаписи.ТаблицаУведомлений Цикл
		Сообщить(Строка.Текст);
	КонецЦикла;
	
КонецПроцедуры


//подготовка и установка данных дерева ---------------------------------------------------------------

Процедура УстановитьСвойствоПодчиненным(Строка, Колонка, Значение)
	
	//процедура рекурсивно устанавливает значения дочерним строкам
	
	//устанавливаем значение для текущей строки
	Строка[Колонка] = Значение;
	
	//заполняем новые данные на основании текущих данных/данных ТС
	Если Не Строка.Родитель = Неопределено Тогда
		Если Строка.Обновить = 1 Тогда
			Строка.НаименованиеНовое		= Строка.НаименованиеТС;
			Строка.АдресТочкиДоставкиНовый 	= Строка.АдресТочкиДоставкиТС;
		ИначеЕсли Строка.Обновить = 0 Тогда
			Строка.НаименованиеНовое		= Строка.НаименованиеТекущее;
			Строка.АдресТочкиДоставкиНовый 	= Строка.АдресТочкиДоставкиТекущий;
		КонецЕсли;
	КонецЕсли;
	
	//обновим признак отредактирована ТД
	УстановитьПризнакОтредактированаТД(ЭлементыФормы.ТочкиДоставки);
		
	//рекурсивно устанавливаем значения на более низком уровне
	Для Каждого Подстрока Из Строка.Строки Цикл
		Подстрока[Колонка] = Значение;
		УстановитьСвойствоПодчиненным(Подстрока, Колонка, Значение);
	КонецЦикла;
	
КонецПроцедуры
  
Процедура УстановитьЗначениеВсехСтрок(Колонка, Значение)
	
	//устанавливает в выбранной колонке переданное значение
	
	Для Каждого Строка Из ТочкиДоставки.Строки Цикл
		УстановитьСвойствоПодчиненным(Строка, Колонка, Значение);	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьФлажокРодителя(Строка)
	
	//обновляет значение флажка родительской строки (регион) в зависимости от
	//комбинации значений дочерних строк (для установки единого/смешанного значения)
	
	Если Не Строка.Родитель = Неопределено Тогда
		//Если Не Строка.Родитель.Строки.Найти(Не Строка.Обновить, "Обновить") = Неопределено Тогда
		Если Не Строка.Родитель.Строки.Найти(?(Строка.Обновить=1,0,1), "Обновить") = Неопределено Тогда
			ЭлементыФормы.ТочкиДоставки.ОформлениеСтроки(Строка.Родитель).ДанныеСтроки.Обновить = 2;
		Иначе
			ЭлементыФормы.ТочкиДоставки.ОформлениеСтроки(Строка.Родитель).ДанныеСтроки.Обновить = Строка.Обновить;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьПризнакОтредактированаТД(Элемент)
	
	//определяет отличаются ли новые значения относительно текущих значений и
	//устанавливает/снимает признак "отредактированности" точки доставки вручную	
	
	Если Не (Элемент.ТекущаяКолонка = Неопределено) и
		 Не (Элемент.ТекущиеДанные  = Неопределено) Тогда
		Если Элемент.ТекущаяКолонка.Имя = "Обновить" 				или
			 Элемент.ТекущаяКолонка.Имя = "НаименованиеНовое" 		или
			 Элемент.ТекущаяКолонка.Имя = "АдресТочкиДоставкиНовый" Тогда
			Если Элемент.ТекущиеДанные.Обновить = 0 Тогда 
					Если Не СокрЛП(Элемент.ТекущиеДанные.НаименованиеТекущее) 		= СокрЛП(Элемент.ТекущиеДанные.НаименованиеНовое)		или
						 Не СокрЛП(Элемент.ТекущиеДанные.АдресТочкиДоставкиТекущий) = СокрЛП(Элемент.ТекущиеДанные.АдресТочкиДоставкиНовый) Тогда
						Элемент.ТекущиеДанные.ОтредактированаТД = 1;
					Иначе
						Элемент.ТекущиеДанные.ОтредактированаТД = 0;
					КонецЕсли;
			ИначеЕсли Элемент.ТекущиеДанные.Обновить = 1 Тогда
				Если Не СокрЛП(Элемент.ТекущиеДанные.НаименованиеТС) 		= СокрЛП(Элемент.ТекущиеДанные.НаименованиеНовое)		или
					 Не СокрЛП(Элемент.ТекущиеДанные.АдресТочкиДоставкиТС) 	= СокрЛП(Элемент.ТекущиеДанные.АдресТочкиДоставкиНовый) Тогда
					Элемент.ТекущиеДанные.ОтредактированаТД = 1;
				Иначе
					Элемент.ТекущиеДанные.ОтредактированаТД = 0;
				КонецЕсли;		
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция  ПолучитьСтрокуИтоговОбновления(СтрокаРегион)

	//возвращает строку с количествами точек доставки, которые будут добавлены и обновлены
	//при текущих настройках, для переданной родительской строки региона
	
	СтрокаРезультат = "";
	КоличествоБудетДобавлено = 0;
	КоличествоБудетОбновлено = 0;
		
	Для Каждого Строка Из СтрокаРегион.Строки Цикл
		Обновить				= Строка.Обновить = 1;
		ЭтоНоваяТД 				= Строка.НоваяТД = 1;
		ЭтоИзменившаясяТД 		= Строка.ИзмениласьТД = 1;
		ЭтоОтредактированнаяТД 	= Строка.ОтредактированаТД = 1;
		Если Обновить и ЭтоНоваяТД Тогда
			КоличествоБудетДобавлено = КоличествоБудетДобавлено + 1;
		КонецЕсли;
		Если (Обновить 	  и ЭтоИзменившаясяТД) 		или
			 (Обновить    и ЭтоОтредактированнаяТД) или
			 (Не Обновить и ЭтоОтредактированнаяТД) Тогда
			КоличествоБудетОбновлено = КоличествоБудетОбновлено + 1; 
		КонецЕсли;				 
	КонецЦикла;
	
	СтрокаРезультат = "Добавятся: " + СтрЗаменить(Строка(КоличествоБудетДобавлено), Символы.НПП, "") + "; обновятся: " + СтрЗаменить(Строка(КоличествоБудетОбновлено), Символы.НПП, "");
	
	Возврат СтрокаРезультат;
	
КонецФункции

Процедура ЗаполнитьДеревоРекурсивно(_Строки, Строки)
	
	Для Каждого _Строка Из _Строки Цикл
		Строка = Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, _Строка);
		ЗаполнитьДеревоРекурсивно(_Строка.Строки, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры


//настройка интерфейса ------------------------------------------------------------------------------

Процедура НастроитьВидТабличногоПоля()
	
	//настраиваем табличное поле
	
	//скрываем шапки колонок
	ЭлементыФормы.ТочкиДоставки.Колонки.НаименованиеТекущее.ОтображатьВШапке 			= Ложь;
	ЭлементыФормы.ТочкиДоставки.Колонки.НаименованиеТС.ОтображатьВШапке 				= Ложь;
	ЭлементыФормы.ТочкиДоставки.Колонки.НаименованиеНовое.ОтображатьВШапке 				= Ложь;
	ЭлементыФормы.ТочкиДоставки.Колонки.АдресТочкиДоставкиТекущий.ОтображатьВШапке 		= Ложь;
	ЭлементыФормы.ТочкиДоставки.Колонки.АдресТочкиДоставкиТС.ОтображатьВШапке 			= Ложь;
	ЭлементыФормы.ТочкиДоставки.Колонки.АдресТочкиДоставкиНовый.ОтображатьВШапке 		= Ложь;
	
	//редактируем положения заголовков шапок
	ЭлементыФормы.ТочкиДоставки.Колонки.Регион.ГоризонтальноеПоложениеВШапке			= ГоризонтальноеПоложение.Лево;
	ЭлементыФормы.ТочкиДоставки.Колонки.GLN.ГоризонтальноеПоложениеВШапке				= ГоризонтальноеПоложение.Право;
	ЭлементыФормы.ТочкиДоставки.Колонки.Обновить.ГоризонтальноеПоложениеВШапке			= ГоризонтальноеПоложение.Центр;
	
КонецПроцедуры

