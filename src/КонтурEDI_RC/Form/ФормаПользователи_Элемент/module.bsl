Перем СписокВариантовОбмена;

Функция ПолучитьПраваДоступаСтрокой(Список)
	
	ПраваДоступаСтрокой = "";
	
	МассивНедоступных = Новый Массив();
	Для Каждого Зн Из Список Цикл
		Если НЕ Зн.Пометка Тогда
			МассивНедоступных.Добавить(Зн.Значение);
		КонецЕсли;
	КонецЦикла;

	Если МассивНедоступных.Количество() = 0 Тогда
		ПраваДоступаСтрокой = "";
	Иначе
		ПраваДоступаСтрокой = ЗначениеВСтрокуВнутр(МассивНедоступных);
	КонецЕсли;
	
	Возврат ПраваДоступаСтрокой;
	
КонецФункции

// Варианты обмена:
//	Автоматическая отправка\получение сообщений
//	Ручная отправка\получение сообщений
//  Работа без прямого подключения к серверу EDI

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Пользователь", 		Пользователь);
	СтруктураПолей.Вставить("РольПользователяEDI",	РольПользователяEDI);
	СтруктураПолей.Вставить("УчетнаяЗапись",		УчетнаяЗапись);
	
	Если ВариантОбмена = "Обмен по кнопке ""Выполнить обмен""" Тогда
		ТекВариантОбмена = "Ручной";
	ИначеЕсли ВариантОбмена = "Работа в offline" Тогда
		ТекВариантОбмена = "БезОбмена";
	ИначеЕсли ВариантОбмена = "Автоматический обмен" Тогда
		ТекВариантОбмена = "Автоматический";
	Иначе//по умолчанию
		ТекВариантОбмена = "Ручной";
	КонецЕсли;
	
	СтруктураПолей.Вставить("ВариантОбмена", ТекВариантОбмена);
	
	СтруктураПолей.Вставить("СлужебныйПользовательАвтообмен", СлужебныйПользовательАвтообмен);
	
	Если СлужебныйПользовательАвтообмен Тогда 
		СброситьНастройкуПодтвержденияЗакрытия1С();
	КонецЕсли;
	
	СписокПравКСпискам = Новый СписокЗначений;
	
	НастройкиСписков = ПолучитьНастройкиСписков();
	
	ПраваДоступаКСпискам = "\";
	
	Для Каждого Стр Из НастройкиСписков Цикл
		Если Стр.Вид = "Кнопка" Тогда
			
			НайденноеЗначение = СписокНастроекДокументов.НайтиПоЗначению(Стр.Имя);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				Если НЕ НайденноеЗначение.Пометка Тогда
					ПраваДоступаКСпискам = ПраваДоступаКСпискам+СокрЛП(Стр.Код)+"\";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ПраваДоступаКСпискам = "\" Тогда
		ПраваДоступаКСпискам = "";
	КонецЕсли;
	
	ПраваДоступаКСообщениям = "";
	
	Для Каждого Зн Из СписокНастроекСообщений Цикл
		
		Если Зн.Пометка Тогда
			ПраваДоступаКСообщениям = ПраваДоступаКСообщениям + "1";
		Иначе
			ПраваДоступаКСообщениям = ПраваДоступаКСообщениям + "0";
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПолей.Вставить("ПраваДоступаКСпискам", 		ПраваДоступаКСпискам);
	СтруктураПолей.Вставить("ПраваДоступаКСообщениям",		ПраваДоступаКСообщениям);
	СтруктураПолей.Вставить("ПраваДоступаКПартнерам",		ПолучитьПраваДоступаСтрокой(СписокНастроекПартнеров));
	СтруктураПолей.Вставить("ПраваДоступаКОрганизациям",	ПолучитьПраваДоступаСтрокой(СписокНастроекОрганизаций));

	СохранитьЭлементСправочника("Пользователи", Пользователь, СтруктураПолей);
	
   	ПараметрыПользователяEDI = ПолучитьПараметрыТекущегоПользователяEDI();	

	Если ПолучитьТекущегоПользователя1С() = Пользователь Тогда
		Оповестить("КонтурEDI_НастроитьФорму");
	КонецЕсли;
	
	Оповестить("КонтурEDI_ОбновитьСписокПользователей");
	
	ЭтаФорма.Закрыть(Истина);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПраваДоступаКСпискам = "";
	СписокПравДоступаКСообщениям = Новый СписокЗначений;
	МассивНедоступныхПартнеров = Новый Массив;
	МассивНедоступныхОрганизаций = Новый Массив;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		СтруктураЭлемента = ПолучитьЭлементСправочника("Пользователи", Пользователь);
		
		Если НЕ СтруктураЭлемента = Неопределено Тогда
		
			УчетнаяЗапись			= СтруктураЭлемента.УчетнаяЗапись;

			РольПользователяEDI		= СтруктураЭлемента.РольПользователяEDI;
			
            ПраваДоступаКСпискам	= СтруктураЭлемента.ПраваДоступаКСпискам;
			
			СлужебныйПользовательАвтообмен = СтруктураЭлемента.СлужебныйПользовательАвтообмен;
			
			СписокПравДоступаКСообщениям	= ПолучитьНедоступныеСообщения(СтруктураЭлемента.ПраваДоступаКСообщениям);
			
			Если ЗначениеЗаполнено(СтруктураЭлемента.ПраваДоступаКПартнерам) Тогда
				МассивНедоступныхПартнеров = СтруктураЭлемента.ПраваДоступаКПартнерам;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураЭлемента.ПраваДоступаКОрганизациям) Тогда
				МассивНедоступныхОрганизаций = СтруктураЭлемента.ПраваДоступаКОрганизациям;
			КонецЕсли;
				
			ТекВариантОбмена	= СтруктураЭлемента.ВариантОбмена;
			НайденноеЗначение	= СписокВариантовОбмена.НайтиПоЗначению(ТекВариантОбмена);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ВариантОбмена = НайденноеЗначение.Представление;
				
			КонецЕсли;

		КонецЕсли;
		
	Иначе
		
		ТекВариантОбмена = "Обмен по кнопке ""Выполнить обмен""";//по умолчанию
		
	КонецЕсли;
	
	НастройкиСписков = ПолучитьНастройкиСписков();
	
	Для Каждого Стр Из НастройкиСписков Цикл
		Если Стр.Вид = "Кнопка" Тогда
			
			ПодстрокаПоиска = "\"+СокрЛП(Стр.Код)+"\";
			Если Найти(ПраваДоступаКСпискам,ПодстрокаПоиска)>0 Тогда
				Пометка = Ложь;
			Иначе
				Пометка = Истина;
			КонецЕсли;
			
			СписокНастроекДокументов.Добавить(Стр.Имя,Стр.Представление, Пометка);
			
		КонецЕсли;
	КонецЦикла;
	
	СписокНастроекСообщений.Добавить("ORDERS","ORDERS (заказ)", 					?(СписокПравДоступаКСообщениям.НайтиПоЗначению("ORDERS") = Неопределено, Истина, Ложь));
	СписокНастроекСообщений.Добавить("ORDRSP","ORDRSP (ответ на заказ)", 			?(СписокПравДоступаКСообщениям.НайтиПоЗначению("ORDRSP") = Неопределено, Истина, Ложь));
	СписокНастроекСообщений.Добавить("DESADV","DESADV (уведомление об отгрузке)", 	?(СписокПравДоступаКСообщениям.НайтиПоЗначению("DESADV") = Неопределено, Истина, Ложь));
	СписокНастроекСообщений.Добавить("RECADV","RECADV (уведомление о приемке)", 	?(СписокПравДоступаКСообщениям.НайтиПоЗначению("RECADV") = Неопределено, Истина, Ложь));
	СписокНастроекСообщений.Добавить("INVOIC","INVOIC (счет-фактура)", 				?(СписокПравДоступаКСообщениям.НайтиПоЗначению("INVOIC") = Неопределено, Истина, Ложь));
	
	Партнеры = ПолучитьСписокЭлементовСправочника("Партнеры");
	
	Для каждого Стр Из Партнеры Цикл
		Если МассивНедоступныхПартнеров.Найти(Стр.Ссылка) = Неопределено Тогда
			СписокНастроекПартнеров.Добавить(Стр.Ссылка,Стр.Наименование,Истина);
		Иначе
			СписокНастроекПартнеров.Добавить(Стр.Ссылка,Стр.Наименование,Ложь);
		КонецЕсли;
	КонецЦикла;
	
	СписокЮрЛиц = ПолучитьСписокЭлементовСправочника("ЮрФизЛицаСвои");
	
	Для каждого Стр ИЗ СписокЮрЛиц Цикл
		Если МассивНедоступныхОрганизаций.Найти(Стр.ЮрФизЛицо) = Неопределено Тогда
			СписокНастроекОрганизаций.Добавить(Стр.ЮрФизЛицо,,Истина);
		Иначе
			СписокНастроекОрганизаций.Добавить(Стр.ЮрФизЛицо,,Ложь);
		КонецЕсли;
	КонецЦикла;
		
	ПриОткрытииФормы(ЭтаФорма);
	
	УстановитьТипПоля1С("Пользователь",	"Пользователь");
	// + Внешнее хранилище. kns 2014.09.10
	Если НЕ ВнешнееХранилище Тогда
	// - Внешнее хранилище. kns 2014.09.10	
		УстановитьТипПоля1С("УчетнаяЗапись","УчетнаяЗапись");
	КонецЕсли;
	
	Если НЕ РольПользователяEDI = "ПолныеПрава" И НЕ РольПользователяEDI = "Пользователь" Тогда
		РольПользователяEDI = "ПолныеПрава";
	КонецЕсли;
	
	УстановкаДоступностиПрав();
	
	СтрокаСИБ = СтрокаСоединенияИнформационнойБазы();
	Если Лев(СтрокаСИБ, 4) = "File" Тогда
		АвтообменВариантБазыДанных = "ФайловыйВариант";
		АвтообменПутьКБазе = НСтр(СтрокаСоединенияИнформационнойБазы(), "File");
	ИначеЕсли Лев(СтрокаСИБ, 4) = "Srvr" Тогда
		АвтообменВариантБазыДанных = "СерверныйВариант";
		АвтообменСервер = НСтр(СтрокаСоединенияИнформационнойБазы(), "Srvr");
		АвтообменИмяБазы = НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref");
	КонецЕсли;
	АвтообменНастроитьВидимостьЭлементов();
	Если ЗначениеЗаполнено(Пользователь) Тогда 
		
	    ПользовательИБ = Неопределено;
		Попытка
			Если Пользователь.Метаданные().Реквизиты.Найти("ИдентификаторПользователяИБ")<>Неопределено Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
			Иначе 
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь.Наименование);
			КонецЕсли;	
		Исключение
		КонецПопытки; 
		
		Если Не ПользовательИБ = Неопределено Тогда
			АвтообменПользователь = ПользовательИБ.Имя;
		КонецЕсли;
		
		//Попытка
		//	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		//	Если Не ПользовательИБ = Неопределено Тогда
		//		АвтообменПользователь = ПользовательИБ.Имя;
		//	КонецЕсли;
		//Исключение
		//	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь.Наименование);
		//	Если Не ПользовательИБ = Неопределено Тогда
		//		АвтообменПользователь = ПользовательИБ.Имя;
		//	КонецЕсли;
		//КонецПопытки;
	КонецЕсли;
	ИмяФайлаМодуля = "";
	Попытка
		ИмяФайлаМодуля = ЭтотОбъект.ИспользуемоеИмяФайла;
		Если Прав(СокрЛП(ИмяФайлаМодуля),3) = "tmp" Тогда
			ИмяФайлаМодуля = "";		
		КонецЕсли;
	Исключение
	КонецПопытки;
	АвтообменПутьКМодулю = ИмяФайлаМодуля;
	
	УчетнаяЗаписьПредставление = ПолучитьПредставлениеЭлементаСправочника(УчетнаяЗапись);
	
КонецПроцедуры

Процедура ВариантОбменаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВариантовОбмена,Элемент);
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ВариантОбмена = ВыбранноеЗначение.Представление;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура УстановитьТипПоля1С(ИмяНаФорме,Тип1С)
	
	ПолеФормы	= ЭлементыФормы[ИмяНаФорме];
	ТипПоля		= ПолучитьТипЗначенияОбъекта(Тип1С);
			
	Если ТипПоля = Неопределено Тогда
		
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
		
	Иначе	
		
		ЭлементыФормы[ИмяНаФорме].ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма[ИмяНаФорме]) Тогда
			
			ЭтаФорма[ИмяНаФорме] = ПолучитьПустуюСсылкуОбъекта(Тип1С);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановкаДоступностиПрав()
	
	Если РольПользователяEDI = "ПолныеПрава" Тогда
		
		ЭлементыФормы.ПанельНастроекПрав.Доступность = Ложь;
		
	Иначе
		
		ЭлементыФормы.ПанельНастроекПрав.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УчетнаяЗаписьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыбратьЭлементСправочника(УчетнаяЗапись,"УчетнаяЗапись",,СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РольПолныеПраваПриИзменении(Элемент)
	
	УстановкаДоступностиПрав();
	
	Если РольПользователяEDI = "ПолныеПрава" Тогда
		Для Каждого НастройкаДокумента Из СписокНастроекДокументов Цикл
			НастройкаДокумента.Пометка = Истина;
		КонецЦикла;
		Для Каждого НастройкаСообщения Из СписокНастроекСообщений Цикл
			НастройкаСообщения.Пометка = Истина;
		КонецЦикла;
		СписокНастроекПартнеров.ЗаполнитьПометки(Истина);
		СписокНастроекОрганизаций.ЗаполнитьПометки(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СброситьНастройкуПодтвержденияЗакрытия1С();
	
	Попытка
		ЗаписьПодтверждения=РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		ЗаписьПодтверждения.Пользователь=Пользователь;
		ЗаписьПодтверждения.Настройка=ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии;
		ЗаписьПодтверждения.Прочитать();
		
		Если не ЗаписьПодтверждения.Выбран() или ЗаписьПодтверждения.Значение=истина Тогда 
			ЗаписьПодтверждения.Пользователь=Пользователь;
			ЗаписьПодтверждения.Настройка=ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии;
			ЗаписьПодтверждения.Значение=Ложь;
			ЗаписьПодтверждения.Записать();
		КонецЕсли;
	Исключение
		Сообщить("Не удалось скинуть настройку ""Запрашивать подтверждение программы перед закрытием""! Попробуйте скинуть эту настройку вручную.");
	КонецПопытки;
	
КонецПроцедуры

Процедура АвтообменФайловыйВариантПриИзменении(Элемент)
	
	АвтообменНастроитьВидимостьЭлементов();
	
КонецПроцедуры

Процедура АвтообменСерверныйВариантПриИзменении(Элемент)
	
	АвтообменНастроитьВидимостьЭлементов();
	
КонецПроцедуры

Процедура АвтообменПутьКБазеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(Режим);
	ДиалогВыбораКаталога.Каталог = Элемент.Значение;
	ДиалогВыбораКаталога.Заголовок = "Укажите расположение базы данных...";
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораКаталога.Каталог;
	Иначе
	    ВывестиПредупреждение_КонтурEDI("Каталог базы данных не выбран!");	    
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтообменПользовательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Если МассивПользователейИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПользователейИБ = Новый СписокЗначений;
	Для Каждого Элемент Из МассивПользователейИБ Цикл
		СписокПользователейИБ.Добавить(Элемент.Имя);
	КонецЦикла;
		
	Результат = СписокПользователейИБ.ВыбратьЭлемент("Выберите пользователя ...");
	Если Не Результат = Неопределено Тогда
		АвтообменПользователь = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтообменПутьКМодулюНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка 		= Ложь;
	МодульСохраненВСправочнике 	= Ложь;
	ВыбиратьМодульНаДиске		= Истина;
	
	ИмяФайла = Элемент.Значение;
	
	Попытка
		Если Прав(СокрЛП(ЭтотОбъект.ИспользуемоеИмяФайла),3) = "tmp" Тогда 
			МодульСохраненВСправочнике = Истина;		
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ИмяФайла) И МодульСохраненВСправочнике Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, 	"Да, хочу сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет,	"Нет, выберу файл модуля");
		Ответ = Вопрос("Запущенная версия модуля сохранена в справочнике ""Внешние обработки""." + Символы.ПС + "Хотите сохранить модуль на диск и использовать его автообмена?", Кнопки, , КодВозвратаДиалога.Нет, "Сохранение модуля...");
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
           	|	ВнешниеОбработки.Ссылка
           	|ИЗ
           	|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
           	|ГДЕ
           	|	ВнешниеОбработки.ВидОбработки = &ВидОбработки
           	|    И НЕ ВнешниеОбработки.ПометкаУдаления
           	|УПОРЯДОЧИТЬ ПО
           	|	ВнешниеОбработки.Наименование";					   
			Запрос.УстановитьПараметр("ВидОбработки",Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка);	
			ТЗ = Запрос.Выполнить().Выгрузить();
			
			ВыбраннаяСтрока = ТЗ.ВыбратьСтроку("Выберите обработку с модулем Контур.EDI");
			Если НЕ ВыбраннаяСтрока = Неопределено Тогда
				
				МодульОбъект 	= ВыбраннаяСтрока.Ссылка.ПолучитьОбъект();
							
				Режим = РежимДиалогаВыбораФайла.Сохранение;
				ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
				ДиалогСохраненияФайла.ПолноеИмяФайла = "Контур.EDI";
				Фильтр = "Внешняя обработка 1С:Предприятия 8 " + "(*.epf)|*.epf";
				ДиалогСохраненияФайла.Фильтр = Фильтр;
				ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
				ДиалогСохраненияФайла.Заголовок = "Выберите место сохранения файла ...";
				Если ДиалогСохраненияФайла.Выбрать() Тогда
					МассивФайлов = ДиалогСохраненияФайла.ВыбранныеФайлы;
					ИмяФайла = МассивФайлов[0];
				Иначе
					ВывестиПредупреждение_КонтурEDI("Файл автозапуска не сохранен!");
					Возврат;
				КонецЕсли;
								
				ДвоичныеДанные 	= МодульОбъект.ХранилищеВнешнейОбработки.Получить();
				ДвоичныеДанные.Записать(ИмяФайла);
				
				ВыбиратьМодульНаДиске = Ложь;
				
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВыбиратьМодульНаДиске Тогда
	
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = "Внешняя обработка 1С:Предприятия 8 " + "(*.epf)|*.epf";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = "Укажите расположение файла модуля ""Контур.EDI""...";
		Если ДиалогОткрытияФайла.Выбрать() Тогда
		    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			ИмяФайла = МассивФайлов[0];
		Иначе
		    ВывестиПредупреждение_КонтурEDI("Файл модуля ""Контур.EDI"" не выбран!");	    
		КонецЕсли;
		
	КонецЕсли;
 
    Элемент.Значение = ИмяФайла;
	
КонецПроцедуры

Процедура АвтообменНастроитьВидимостьЭлементов()
	
	Если АвтообменВариантБазыДанных = "ФайловыйВариант" Тогда
		ЭлементыФормы.НадписьАвтообменПутьКБазе.Видимость 		= Истина;
		ЭлементыФормы.АвтообменПутьКБазе.Видимость				= Истина;
		ЭлементыФормы.НадписьАвтообменСерверИмяБазы.Видимость 	= Ложь;
		ЭлементыФормы.НадписьАвтообменРазделитель.Видимость 	= Ложь;
		ЭлементыФормы.АвтообменСервер.Видимость 				= Ложь;
		ЭлементыФормы.АвтообменИмяБазы.Видимость 				= Ложь;
	ИначеЕсли АвтообменВариантБазыДанных = "СерверныйВариант" Тогда
		ЭлементыФормы.НадписьАвтообменСерверИмяБазы.Видимость 	= Истина;
		ЭлементыФормы.НадписьАвтообменРазделитель.Видимость 	= Истина;
		ЭлементыФормы.АвтообменСервер.Видимость 				= Истина;
		ЭлементыФормы.АвтообменИмяБазы.Видимость 				= Истина;
		ЭлементыФормы.НадписьАвтообменПутьКБазе.Видимость 		= Ложь;
		ЭлементыФормы.АвтообменПутьКБазе.Видимость				= Ложь;
	КонецЕсли;			
	
КонецПроцедуры

Процедура АвтообменСохранитьБатФайлНажатие(Элемент)
	
	ЕстьОшибки = Ложь;
	
	Если АвтообменВариантБазыДанных = "ФайловыйВариант" Тогда
		Если Не ЗначениеЗаполнено(АвтообменПутьКБазе) Тогда
			Сообщить("Не заполнено обязательное поле ""Путь к базе""");
			ЕстьОшибки = Истина;
		КонецЕсли;
	ИначеЕсли АвтообменВариантБазыДанных = "СерверныйВариант" Тогда
		Если Не ЗначениеЗаполнено(АвтообменСервер) Тогда
			Сообщить("Не заполнено обязательное поле ""Сервер""");
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(АвтообменИмяБазы) Тогда
			Сообщить("Не заполнено обязательное поле ""Имя базы""");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(АвтообменПользователь) Тогда
		Сообщить("Не заполнено необязательное поле ""Пользователь""");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(АвтообменПутьКМодулю) Тогда
		Сообщить("Не заполнено обязательное поле ""Путь к модулю""");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ВывестиПредупреждение_КонтурEDI("Не заполнены одно или несколько обязательных полей!");
		Возврат;
	КонецЕсли;		
	
	ПакетнаяКоманда = "";
	
	ПакетнаяКоманда = ПакетнаяКоманда + """" + КаталогПрограммы() + "1cv8.exe" + """ ";
	ПакетнаяКоманда = ПакетнаяКоманда + "enterprise ";
	Если АвтообменВариантБазыДанных = "ФайловыйВариант" Тогда
		ПакетнаяКоманда = ПакетнаяКоманда + "/F" + " " + """" + АвтообменПутьКБазе + """ ";
	ИначеЕсли АвтообменВариантБазыДанных = "СерверныйВариант" Тогда
		ПакетнаяКоманда = ПакетнаяКоманда + "/S" + " " + """" + АвтообменСервер + "\" + АвтообменИмяБазы + """ ";	
	КонецЕсли;
	ПакетнаяКоманда = ПакетнаяКоманда + "/N" + " " + """" + АвтообменПользователь + """" + " " + "/P" + " " + """" + АвтообменПароль + """ ";
	ПакетнаяКоманда = ПакетнаяКоманда + "/Execute" + " " + """" + АвтообменПутьКМодулю + """";
	
	ИмяБатФайла = "";
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогСохраненияФайла.ПолноеИмяФайла = "Автообмен Контур.EDI";
	Фильтр = "Пакетный файл Windows" + "(*.bat)|*.bat";
	ДиалогСохраненияФайла.Фильтр = Фильтр;
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = "Выберите место сохранения файла ...";
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогСохраненияФайла.ВыбранныеФайлы;
		ИмяБатФайла = МассивФайлов[0];
	Иначе
		ВывестиПредупреждение_КонтурEDI("Файл автозапуска не сохранен!");	    
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяБатФайла) Тогда
		Попытка
			БатФайл = Новый ЗаписьТекста(ИмяБатФайла, КодировкаТекста.OEM);
			БатФайл.ЗаписатьСтроку(ПакетнаяКоманда);
			БатФайл.Закрыть();
			ВывестиПредупреждение_КонтурEDI("Файл автозапуска успешно сохранен!");
		Исключение
			Сообщить("Не удалось записать файл: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура УчетнаяЗаписьПриИзменении(Элемент)
	УчетнаяЗаписьПредставление = ПолучитьПредставлениеЭлементаСправочника(УчетнаяЗапись);
КонецПроцедуры

Процедура ПроверитьДоступностьНастроек(Элемент)
	
	Если НЕ ЕстьМетаданныеХраненияОрганизации Тогда
		ПредложитьОбновитьОбъектыМетаданныхКонтурEDI(,"Для возможности настраивать доступ необходимо обновить объекты Контур.EDI. Сохранить файл обновления?");
		СтандартнаяОбработка = Ложь;
		Элемент.Значение.ЗаполнитьПометки(Истина);
	КонецЕсли;
	
КонецПроцедуры

СписокВариантовОбмена = Новый СписокЗначений;

СписокВариантовОбмена.Добавить("Автоматический",	"Автоматический обмен");
СписокВариантовОбмена.Добавить("Ручной",			"Обмен по кнопке ""Выполнить обмен""");
СписокВариантовОбмена.Добавить("БезОбмена",			"Работа в offline");
