
Перем ЦенаВключаетНДС;
Перем ОбязателенGTIN;

//обработчики формы и элементов шапки -----------------------------------------------------

Процедура ПриОткрытии()
	
	ИнициализироватьЗначения();
		
	ПриОткрытииФормы(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		
		Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") 
			И Сообщение.СодержитОшибки = Истина Тогда
			Сообщение = ПрочитатьСообщение(Сообщение.ПереотправляемоеСообщениеСсылка, , "PRICELIST", "Исходящее");
			Сообщение.Вставить("ПереотправляемоеСообщениеСсылка", Сообщение.СообщениеСсылка);
		КонецЕсли;
					
		ЗаполнитьКарточкуСообщения();
		ОбновитьНомераСтрок();
			
	Иначе
			
		Если Не ЗначениеЗаполнено(Отправитель) Тогда
			ТипОрганизации = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое",,Истина);
			Отправитель = Справочники[ТипОрганизации].ПустаяСсылка();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТипЦен) Тогда
			ИмяСправочникаТипыЦен = ПолучитьТипЗначенияОбъекта("ТипыЦен",,Истина);
			ТипЦен = Справочники[ИмяСправочникаТипыЦен].ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеПолучателя = ПолучитьПредставлениеЭлементаСправочника(Получатель);
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		ЗаполнитьСписокПокупателей();
	КонецЕсли;
	
	СписокСтавокНДС = Новый СписокЗначений;
	СписокСтавокНДС.Добавить("NOT_APPLICABLE", 	"Без НДС");
	СписокСтавокНДС.Добавить("18", 				"18%");
	СписокСтавокНДС.Добавить("10", 				"10%");
	СписокСтавокНДС.Добавить("0", 				"0%");
	ЭлементыФормы.Товары.Колонки.СтавкаНДСEDI.ЭлементУправления.СписокВыбора = СписокСтавокНДС;

	СписокЕдиницИзмерения = ПолучитьСписокЕдиницEDI();
	ЭлементыФормы.Товары.Колонки.КодЕдиницыИзмеренияEDI.ЭлементУправления.СписокВыбора = СписокЕдиницИзмерения;	
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить("Added", 	"Товар добавлен (Added)");
	СписокСтатусов.Добавить("Changed", 	"Данные изменены (Changed)");
	СписокСтатусов.Добавить("No Action", "Нет изменений (No Action)");
	СписокСтатусов.Добавить("Deleted", 	"Товар удален (Deleted)");
	
	ЭлементыФормы.Товары.Колонки.Статус.ЭлементУправления.СписокВыбора = СписокСтатусов;
	
	ЭлементыФормы.СтатусТовараПоУмолчанию.СписокВыбора = СписокСтатусов;
	
	СписокЕдИзмСрокаГодности = Новый СписокЗначений;
	СписокЕдИзмСрокаГодности.Добавить("Month", 	"Месяц");
	СписокЕдИзмСрокаГодности.Добавить("Week", 	"Неделя");
	СписокЕдИзмСрокаГодности.Добавить("Day", 	"День");
	СписокЕдИзмСрокаГодности.Добавить("Hour", 	"Час");
	
	ЭлементыФормы.Товары.Колонки.ЕдИзмСрокаГодности.ЭлементУправления.СписокВыбора = СписокЕдИзмСрокаГодности;
			
	Если ЗначениеЗаполнено(СтатусТовараПоУмолчанию) Тогда
		ЭлементыФормы.СтатусТовараПоУмолчанию.Значение = ЭлементыФормы.СтатусТовараПоУмолчанию.СписокВыбора.НайтиПоЗначению(СтатусТовараПоУмолчанию).Значение; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Покупатель) Тогда
		ЗначениеСписка = ЭлементыФормы.Покупатель.СписокВыбора.НайтиПоЗначению(Покупатель);
		Если Не ЗначениеСписка = Неопределено Тогда
			ЭлементыФормы.Покупатель.Значение = ЗначениеСписка.Значение;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОграничениеТипов();
	УстановитьДоступностьВидимостьЭлементов();
	
	//ТипЦенОбработкаВыбора(ЭлементыФормы.ТипЦен, ТипЦен, Истина);
		
КонецПроцедуры

Процедура ПолучательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыбратьЭлементСправочника(Получатель,"Партнер",,СтандартнаяОбработка);
	СтандартнаяОбработка = Ложь;
	
	ПредставлениеПолучателя = ПолучитьПредставлениеЭлементаСправочника(Получатель);
	
	ЗаполнитьСписокПокупателей();
	
	ВыбратьПокупателяПоУмолчанию();
	
	ИнициализироватьЗначения();//сменились условия валидации	
КонецПроцедуры

Процедура ОтправительОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Отправитель) Тогда
		ТипОрганизации = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое",,Истина);
		Отправитель = Справочники[ТипОрганизации].ПустаяСсылка();
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ТипЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И Не ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Если ВыбранноеЗначение.Метаданные().Реквизиты.Найти("ЦенаВключаетНДС")<>Неопределено Тогда
			ЦенаВключаетНДС = ВыбранноеЗначение.ЦенаВключаетНДС;					
		КонецЕсли;		
	КонецЕсли;
	
	Если ЦенаВключаетНДС = Истина Тогда
		ЭлементыФормы.Товары.Колонки.ЦенаБезНДС.Видимость	= Ложь;
		ЭлементыФормы.Товары.Колонки.ЦенаСНДС.Видимость 	= Истина;
	ИначеЕсли ЦенаВключаетНДС = Ложь Тогда 
		ЭлементыФормы.Товары.Колонки.ЦенаБезНДС.Видимость	= Истина;
		ЭлементыФормы.Товары.Колонки.ЦенаСНДС.Видимость 	= Ложь;
	Иначе
		ЭлементыФормы.Товары.Колонки.ЦенаБезНДС.Видимость	= Истина;
		ЭлементыФормы.Товары.Колонки.ЦенаСНДС.Видимость 	= Истина;			
	КонецЕсли;
		
КонецПроцедуры

//обработчики табличной части -------------------------------------------------------------

Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыборПоВладельцу = ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура;

КонецПроцедуры

Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЭлементТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементТекущиеДанные.КодЕдиницыИзмеренияEDI = КонвертироватьЗначение1СвEDI(Элемент.Значение,"КодЕдиницы",Неопределено);
	
КонецПроцедуры

Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьНомераСтрок();
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерСтроки = Товары.Количество();
		ПроверитьСтрокуТаблицыТоваров(Элемент.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
	
КонецПроцедуры

//кнопки верхней командной панели ---------------------------------------------------------

Процедура КоманднаяПанельДобавитьНоменклатуру(Кнопка)
	
	Если Не (ПроверитьЗаполнениеШапки().Успешно И ПроверитьЗаполнениеТипаЦен().Успешно) Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	
	Если Кнопка.Имя = "КнопкаДобавитьЭлемент" Тогда
		ФормаВыбора  = Справочники[ПолучитьТипЗначенияОбъекта("Номенклатура",,Истина)].ПолучитьФормуВыбора();
	ИначеЕсли Кнопка.Имя = "КнопкаДобавитьГруппу" Тогда
		ФормаВыбора  = Справочники[ПолучитьТипЗначенияОбъекта("Номенклатура",,Истина)].ПолучитьФормуВыбораГруппы();
	КонецЕсли;
	
	Номенклатура = ФормаВыбора.ОткрытьМодально();
	
	Если ТипЗнч(Номенклатура) = Тип(ПолучитьТипЗначенияОбъекта("Номенклатура",,)) Тогда
		ПараметрыЗаполнения=Новый Структура;
		ПараметрыЗаполнения.Вставить("ТипЦен",ТипЦен);
		ПараметрыЗаполнения.Вставить("СтатусТовараПоУмолчанию",СтатусТовараПоУмолчанию);
		ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС",ЦенаВключаетНДС);
		ПараметрыЗаполнения.Вставить("Получатель",Получатель);

		Выборка = ПолучитьВыборкуДанныхПоНоменклатуре(Номенклатура,ПараметрыЗаполнения);
		ЗаполнитьТаблицуТовары(Товары,Выборка,ПараметрыЗаполнения);	
	КонецЕсли;
	
	ОбновитьНомераСтрок();
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельСоставТоваровЗаполнитьАвтоматически(Кнопка)
	
	Если Не (ПроверитьЗаполнениеШапки().Успешно И ПроверитьЗаполнениеТипаЦен().Успешно) Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() <> 0 Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, 		"Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, 	"Отмена");
		Ответ = Вопрос("Данные таблицы товаров будут очищены. Продолжить?", СписокКнопок, , КодВозвратаДиалога.Отмена, "Заполнение данных");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина; //в результате обработки должны получить заполненную таблицу значений "Товары"
	РезультатОбработки = ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьДанныеПрайсЛиста",СтандартнаяОбработка,
												 			 Новый Структура("Отправитель,Получатель,ТипЦен,Товары",
												 			 				  Отправитель,Получатель,ТипЦен,Товары));
	Если Не СтандартнаяОбработка = Истина Тогда
		Если ТипЗнч(РезультатОбработки) = Тип("ТаблицаЗначений") Тогда
			Товары.Очистить();
			Товары = РезультатОбработки.Скопировать();
			
			ОбновитьНомераСтрок();
			РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
			Если Не РезультатПроверки.Успешно Тогда
				ОткрытьПанельОшибок();
			Иначе
				ЗакрытьПанельОшибок();
			КонецЕсли;
			Возврат;

		КонецЕсли;
	КонецЕсли;
			
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ТипЦен",ТипЦен);
	ПараметрыЗаполнения.Вставить("СтатусТовараПоУмолчанию",СтатусТовараПоУмолчанию);
	ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС",ЦенаВключаетНДС);
	ПараметрыЗаполнения.Вставить("Получатель",Получатель);
	
	Выборка = ПолучитьВыборкуДанныхПоНоменклатуре(Неопределено,ПараметрыЗаполнения);
	
	Товары.Очистить();
	
	ЗаполнитьТаблицуТовары(Товары,Выборка,ПараметрыЗаполнения);
	
	ОбновитьНомераСтрок();
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСоставТоваровОчиститьТаблицуТовары(Кнопка)
	
	Если Товары.Количество() <> 0 Тогда
	
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, 		"Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, 	"Отмена");
		Ответ = Вопрос("Данные таблицы товаров будут очищены. Продолжить?", СписокКнопок, , КодВозвратаДиалога.Отмена, "Очистка данных");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
		Товары.Очистить();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьКакиеТоварыНеПопадутВТаблицуНажатие(Элемент)
	
	ТекстПодсказки = "При стандартном заполнении не будут добавлены товары:" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + " - которые помечены на удаление;" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + " - с нулевой ценой для выбранного типа цен;" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + " - учет которых ведется в разрезе характеристик;" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + " - которые по виду номенклатуры относятся к услугам." + Символы.ПС + Символы.ПС;
	
	ТекстПодсказки = ТекстПодсказки + "Для разработки своего алгоритма заполнения товаров можно" + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + "воспользоваться механизмами подключаемого модуля и расширений," + Символы.ПС;
	ТекстПодсказки = ТекстПодсказки + "используя событие ""ЗаполнитьДанныеПрайсЛиста""." + Символы.ПС;
	
	ВывестиПредупреждение_КонтурEDI(ТекстПодсказки,,"Какие товары не попадут в таблицу? ");
	
КонецПроцедуры

//кнопки нижней командной панели ----------------------------------------------------------

Процедура КнопкаОтправитьНажатие(Кнопка)
	
	РезультатПроверки = ПроверитьЗаполнениеШапки();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	РезультатПроверки = ПроверитьЗаполнениеТаблицыТоваров();
	Если Не РезультатПроверки.Успешно Тогда
		ОткрытьПанельОшибок();
		Возврат;
	КонецЕсли;
	
	//сохраним сообщение в справочнике, покажем в интерфейсе
	
	//Внимание, вопрос!
	//Как будем сохранять сообщение? в Структуру, как везде, или еще как?
	
	СообщениеСтруктура = ПолучитьСтруктуруСообщения("PRICELIST","Исходящее");
	
	СообщениеСтруктура.Отправитель1С = Отправитель;
	СообщениеСтруктура.Получатель1С = Получатель;
	
	СообщениеСтруктура.Покупатель1С = Покупатель;
	СообщениеСтруктура.Продавец1С = Отправитель;
	
	СообщениеСтруктура.Партнер = Получатель;
	
	СообщениеСтруктура.ДатаНачалаДействияЦен 	= ДатаНачалаДействияЦен;
	СообщениеСтруктура.ДатаОкончанияДействияЦен = ДатаОкончанияДействияЦен;
	
	СообщениеСтруктура.Статус = "Ожидает отправки";
	
	СообщениеСтруктура.ID = Строка(Новый УникальныйИдентификатор());
	
	СообщениеСтруктура.ТипЦен = ТипЦен;

	НомерPriceList=Формат(ТекущаяДата(),"ДФ=ггггММддЧЧммсс");
	Если ЗначениеЗаполнено(ТипЦен) Тогда  //E1C_in-30790
		Если ЗначениеЗаполнено(ТипЦен.Код) Тогда
			НомерPriceList = ТипЦен.Код;
		Иначе
			НомерPriceList = ТипЦен.Наименование;
		КонецЕсли;
	КонецЕсли;

	СообщениеСтруктура.ДокументEDI.Номер = НомерPriceList; 
	СообщениеСтруктура.ДокументEDI.Дата = ТекущаяДата();
	
	Если ЗначениеЗаполнено(НомерДоговора) Тогда 
		СообщениеСтруктура.Контракт.Дата = ДатаДоговора;
		СообщениеСтруктура.Контракт.Номер = СокрЛП(НомерДоговора);
	КонецЕсли;
	
	Для Каждого Стр Из Товары Цикл
		НовСтрока = СообщениеСтруктура.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,Стр);
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Стр.Страна)) Тогда
			НовСтрока.Страна1С = Стр.Страна;
		ИначеЕсли ТипЗнч(Стр.Страна) = Тип("Строка") Тогда
			НовСтрока.СтранаEDI = Стр.Страна;
		КонецЕсли;
	КонецЦикла;
	
	СообщениеСтруктура.Документ1С = "";
	
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") Тогда
		СообщениеСтруктура.Вставить("ПереотправляемоеСообщениеСсылка",Сообщение.ПереотправляемоеСообщениеСсылка);
	КонецЕсли;
	
	СохранитьСообщение(СообщениеСтруктура);
	
	Закрыть();	
	
КонецПроцедуры

//получение и вывод данных ----------------------------------------------------------------

Процедура ЗаполнитьКарточкуСообщения()
	
	//заголовок
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " №" + Сообщение.ДокументEDI.Номер + " от " + Формат(Сообщение.ДокументEDI.Дата, "ДЛФ=Д");
	
	//шапка
	Отправитель = Сообщение.Отправитель1С;
	Получатель  = Сообщение.Получатель1С;
	ЗаполнитьСписокПокупателей();
	Если ЗначениеЗаполнено(Сообщение.Покупатель1С) Тогда
		Покупатель  = ЭлементыФормы.Покупатель.СписокВыбора.НайтиПоЗначению(Сообщение.Покупатель1С).Значение;
	КонецЕсли;
		
	ДатаНачалаДействияЦен=Сообщение.ДатаНачалаДействияЦен;
	ДатаОкончанияДействияЦен=Сообщение.ДатаОкончанияДействияЦен;
	
	Если ЗначениеЗаполнено(Сообщение.Контракт) и Сообщение.Контракт.Свойство("Номер") Тогда 
		НомерДоговора 	= Сообщение.Контракт.Номер;
		ДатаДоговора 	= Сообщение.Контракт.Дата;
	КонецЕсли;	
	
	Если Сообщение.Свойство("ТипЦен") Тогда //для совместимости со старыми сообщениями
		ТипЦен = Сообщение.ТипЦен;
	КонецЕсли;
	
	//товары
	Для Каждого Строка Из Сообщение.Товары Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Каталог = ПолучитьПредставлениеКаталога(НоваяСтрока.Номенклатура);
		Если ЗначениеЗаполнено(Строка.Страна1С) Тогда
			НоваяСтрока.Страна = Строка.Страна1С;
		Иначе
			НоваяСтрока.Страна = Строка.СтранаEDI;
		КонецЕсли;

	КонецЦикла;
	
	//описание ошибки
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") 
		И ЗначениеЗаполнено(Сообщение.СообщениеСсылка.ОписаниеОшибки) Тогда
		СообщениеСсылка = Сообщение.СообщениеСсылка;
		Если ВнешнееХранилище Тогда
			СообщениеСсылка = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(СообщениеСсылка);
		КонецЕсли;
		ОписаниеОшибки = СообщениеСсылка.ОписаниеОшибки;
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;

КонецПроцедуры

//валидация значений полей ----------------------------------------------------------------

Функция ПроверитьЗаполнениеТипаЦен()
	
	Успешно = Истина;
	РезультатПроверки = Новый Структура("Успешно",Успешно);

	Если Не ЗначениеЗаполнено(ТипЦен) Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, 	"Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, 	"Нет");
		Ответ = Вопрос("Не выбран тип цен. Заполнить товар(ы) без цен?",СписокКнопок,,КодВозвратаДиалога.Да, "EDI.Контур. Заполнение типа цен");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ИмяСправочникаТипыЦен = ПолучитьТипЗначенияОбъекта("ТипыЦен",,Истина);
			Если Не ЗначениеЗаполнено(ИмяСправочникаТипыЦен) Тогда
				//Не смогли определить тип справочника
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.ОписаниеОшибки = "Для заполнения цены товара(ов) необходимо выбрать тип цен."
				+Символы.ПС+"Не определено имя справочника ""Типы цен"" в таблице типов";
				Успешно = Ложь;
			Иначе	
				ВыбранныйТипЦен = Справочники[ИмяСправочникаТипыЦен].ПолучитьФормуВыбора().ОткрытьМодально();
				Если ЗначениеЗаполнено(ВыбранныйТипЦен) Тогда
					ТипЦен = ВыбранныйТипЦен;
				Иначе
					//Пользователь не выбрал элемент справочника или не смогли определить имя справочника типа цен
					НоваяСтрока = ТаблицаОшибок.Добавить();
					НоваяСтрока.ОписаниеОшибки = "Для заполнения цены товара(ов) необходимо выбрать тип цен";
					Успешно = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	РезультатПроверки.Успешно = Успешно;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьЗаполнениеШапки()
	
	ТаблицаОшибок.Очистить();
	
	Успешно 		  = Истина;
	РезультатПроверки = Новый Структура("Успешно",Успешно);
		
	Если Не ЗначениеЗаполнено(Отправитель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не выбран ""Отправитель"" прайс-листа!";
		Успешно = Ложь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не выбран ""Получатель"" прайс-листа!";
		Успешно = Ложь;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Покупатель) Тогда
	//	НоваяСтрока = ТаблицаОшибок.Добавить();
	//	НоваяСтрока.ОписаниеОшибки = "Не выбран ""Покупатель""!";
	//	Успешно = Ложь;
	//КонецЕсли;
	
	РезультатПроверки.Успешно = Успешно;

	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьЗаполнениеТаблицыТоваров()
	
	ТаблицаОшибок.Очистить();
	
	Успешно = Истина;
	РезультатПроверки = Новый Структура("Успешно",Успешно);

	Если Товары.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Нет данных для отправки! Таблица товаров пуста.";
		Успешно = Ложь;
	КонецЕсли;
	
	Для Каждого Стр Из Товары Цикл
		Успешно = ?(ПроверитьСтрокуТаблицыТоваров(Стр), Успешно, Ложь);	
	КонецЦикла;
	РезультатПроверки.Успешно = Успешно;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьСтрокуТаблицыТоваров(СтрокаТовара)
	
	Успешно = Истина;
	
	Если ОбязателенGTIN 
		И Не ЗначениеЗаполнено(СтрокаТовара.GTIN) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не заполнено обязательное поле ""GTIN"" в строке № " + СтрокаТовара.НомерСтроки;
		Успешно = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаТовара.СтавкаНДСEDI) Тогда
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.ОписаниеОшибки = "Не заполнено обязательное поле ""Ставка НДС"" в строке № " + СтрокаТовара.НомерСтроки;
		Успешно = Ложь;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

//управление доступностью полей формы -----------------------------------------------------

Процедура УстановитьОграничениеТипов()
	
	ИмяСправочникаТипыЦен = ПолучитьТипЗначенияОбъекта("ТипыЦен");
	ИмяСправочникаОрганизации = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое");

	Если ЗначениеЗаполнено(ИмяСправочникаТипыЦен) Тогда
		ЭлементыФормы.ТипЦен.ОграничениеТипа	= Новый ОписаниеТипов(ИмяСправочникаТипыЦен);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяСправочникаОрганизации) Тогда
		ЭлементыФормы.Отправитель.ОграничениеТипа = Новый ОписаниеТипов(ИмяСправочникаОрганизации);
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьДоступностьВидимостьЭлементов()
	
	//доступность
	
	ЭлементыФормы.Отправитель.ТолькоПросмотр 				= ТолькоПросмотрСообщения;
	ЭлементыФормы.ПредставлениеПолучателя.ТолькоПросмотр  	= ТолькоПросмотрСообщения;
	ЭлементыФормы.Покупатель.ТолькоПросмотр  				= ТолькоПросмотрСообщения;
	ЭлементыФормы.ТипЦен.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	ЭлементыФормы.СтатусТовараПоУмолчанию.ТолькоПросмотр	= ТолькоПросмотрСообщения;
	ЭлементыФормы.Товары.ТолькоПросмотр		 				= ТолькоПросмотрСообщения;
	ЭлементыФормы.ДатаНачалаДействияЦен.ТолькоПросмотр      = ТолькоПросмотрСообщения;
	ЭлементыФормы.ДатаОкончанияДействияЦен.ТолькоПросмотр   = ТолькоПросмотрСообщения;
	ЭлементыФормы.НомерДоговора.ТолькоПросмотр              = ТолькоПросмотрСообщения;
	ЭлементыФормы.ДатаДоговора.ТолькоПросмотр               = ТолькоПросмотрСообщения;
	
	Если ТолькоПросмотрСообщения = Истина Тогда
		
		ЭлементыФормы.СтатусТовараПоУмолчанию.Видимость	= ложь;
		ЭлементыФормы.НадписьСтатусТовараПоУмолчанию.Видимость	= ложь;
		
		КнопкиОсновныеДействияФормы = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
		КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.ОсновныеДействияФормыОтправить);
		КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.РазделительОтправить);
		КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.ВосстановитьЗначения);
		КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.СохранитьЗначения);
		КнопкиОсновныеДействияФормы.Удалить(КнопкиОсновныеДействияФормы.РазделительЗакрыть);
		
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельСоставТоваров.Доступность = Не ТолькоПросмотрСообщения;
	ЭлементыФормы.НадписьКакиеТоварыНеПопадутВТаблицу.Видимость = Не ТолькоПросмотрСообщения;
	
	//видимость
	
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") 
		И ЗначениеЗаполнено(Сообщение.СообщениеСсылка.ОписаниеОшибки) Тогда
		ОткрытьПанельОшибок();
	Иначе
		ЗакрытьПанельОшибок();
	КонецЕсли;
		
КонецПроцедуры

Процедура ОткрытьПанельОшибок()
	
	ЭлементыФормы.ТаблицаОшибок.Свертка = РежимСверткиЭлементаУправления.Нет;
	
КонецПроцедуры

Процедура ЗакрытьПанельОшибок()
	
	ЭлементыФормы.ТаблицаОшибок.Свертка = РежимСверткиЭлементаУправления.Право;
	
КонецПроцедуры

//инициализация ---------------------------------------------------------------------------

Процедура ИнициализироватьЗначения()
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		Сообщение = Новый Структура; //заглушка
	ИначеЕсли Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель=Сообщение.Партнер;
	КонецЕсли;
	
	ЦенаВключаетНДС = Истина;
	
	НЕОбязателенGTIN=
		 (ЗначениеЗаполнено(Получатель)
		И (ПолучитьЗначениеСвойстваОбъектаEDI(Получатель,"РазрешитьПустыеКодыGTINВИсходящихСообщениях")=Истина)); //только в этом случае можно говорить о том можно отправить без GTIN
		
	ОбязателенGTIN = Не НЕОбязателенGTIN;

	Если ЗначениеЗаполнено(ТипЦен) И Не ТипЗнч(ТипЦен) = Тип("Тип") Тогда
		Если ТипЦен.Метаданные().Реквизиты.Найти("ЦенаВключаетНДС")<>Неопределено Тогда
			ЦенаВключаетНДС = ТипЦен.ЦенаВключаетНДС;					
		КонецЕсли;		
	КонецЕсли;
	
	ТолькоПросмотрСообщения = (ТолькоПросмотрСообщения = Истина);
	
	Если Сообщение.Свойство("ПереотправляемоеСообщениеСсылка") Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОтправить.Текст = "Переотправить прайс-лист"; 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьСписокПокупателей()
		
	СписокПокупателей = Новый СписокЗначений;
	ДанныеПартнера = ТаблицаКэшПартнеровКонтрагентов.НайтиСтроки(Новый Структура("Партнер",Получатель));
	Для Каждого Элемент Из ДанныеПартнера Цикл
		СписокПокупателей.Добавить(Элемент.Контрагент);		
	КонецЦикла;
	
	ЭлементыФормы.Покупатель.СписокВыбора = СписокПокупателей;
	
КонецПроцедуры

Процедура ВыбратьПокупателяПоУмолчанию()
	
	ТипКонтрагент = ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСтороннее",,Истина);
		
	Если ЭлементыФормы.Покупатель.СписокВыбора.Количество() <> 1 Тогда
		ЭлементыФормы.Покупатель.Значение = Неопределено;
		Покупатель = Справочники[ТипКонтрагент].ПустаяСсылка();
	Иначе
		Покупатель = ЭлементыФормы.Покупатель.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьНомераСтрок()
	
	НомСтр = 1;
	
	Для Каждого Стр Из Товары Цикл
		Стр.НомерСтроки = НомСтр;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
КонецПроцедуры
	
	





