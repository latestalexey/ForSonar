
//открытие и настройка -----------------------------------------------------------------------

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ УстановитьСоединениеСДиадокомПоУмолчанию() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ВнешнееХранилище Тогда
		
	Иначе
		ТипПоля		= ПолучитьТипЗначенияОбъекта("Партнер");
		ЭлементыФормы.Партнер.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
	КонецЕсли;	
	
	ЭлементыФормы.Организация.ОграничениеТипа = Новый ОписаниеТипов(ПолучитьТипЗначенияОбъекта("ЮрФизЛицоСвое"));
	Организация = ПолучитьПустуюСсылкуОбъекта("ЮрФизЛицоСвое");
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		Партнеры = ПолучитьСписокЭлементовСправочника("Партнеры");
		Если Партнеры.Количество() = 1 Тогда
			Партнер = Партнеры[0].Ссылка;
			Если ВнешнееХранилище Тогда
				ПредставлениеПартнера = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Партнер).Наименование;
			Иначе	
				ПредставлениеПартнера	= Партнеры[0].Ссылка.Наименование;
			КонецЕсли;
		Иначе
			Партнер = ПолучитьПустуюСсылкуОбъекта("Партнер");	
		КонецЕсли;
	КонецЕсли;				
	
	ОтчетСверкаСФ.Очистить();
	
	ПриОткрытииФормы(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания 	= ТекущаяДата();	
	КонецЕсли;
	
	ЗаполнитьВариантыСоставовЭДО();
	НастроитьФорму();
	
КонецПроцедуры

Процедура ЗаполнитьВариантыСоставовЭДО()
	
	СписокТиповДокументов = Новый СписокЗначений;
	СписокТиповДокументов.Добавить("ТОРГ12", 		"ТОРГ-12");
	СписокТиповДокументов.Добавить("ТОРГ12+ЭСФ", 	"ТОРГ-12 и СФ");
	СписокТиповДокументов.Добавить("ЭСФ", 			"СФ");
	
	ЭлементыФормы.ПолеВыбораТипыДокументов.СписокВыбора = СписокТиповДокументов;
	ЭлементыФормы.ПолеВыбораТипыДокументов.Значение 	= ЭлементыФормы.ПолеВыбораТипыДокументов.СписокВыбора[1].Значение;
	
КонецПроцедуры

Процедура НастроитьФорму()
	
	Если СоставЭДО = "ТОРГ12" Тогда
		
		ЭлементыФормы.ОтчетСверкаСФ.Колонки.Документы.ТекстШапки = "Накладная";
                              		
	ИначеЕсли СоставЭДО = "ТОРГ12+ЭСФ" Тогда
		
		ЭлементыФормы.ОтчетСверкаСФ.Колонки.Документы.ТекстШапки = "Документы";
		
	ИначеЕсли СоставЭДО = "ЭСФ" Тогда
		
		ЭлементыФормы.ОтчетСверкаСФ.Колонки.Документы.ТекстШапки = "Счет-фактура";
	
	КонецЕсли;
	
КонецПроцедуры

//обработчики --------------------------------------------------------------------------------

//командная панель
Процедура КоманднаяПанельСверкиСФУстановитьВсеФлажки(Кнопка)
	
	УстановитьЗначениеПометки(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельСверкиСФСнятьВсеФлажки(Кнопка)
	
	УстановитьЗначениеПометки(Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельСверкиСФНайтиСвязанные(Кнопка)

	ТекСтрока = ЭлементыФормы.ОтчетСверкаСФ.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Накладная) Тогда
				
			ФормаСвязанныхСообщений = ПолучитьФорму("ФормаСервис_СвязанныеСообщения");
			ФормаСвязанныхСообщений.ДокументСсылка = ТекСтрока.СчетФактура;
			ФормаСвязанныхСообщений.ОткрытьМодально();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСверкиСФОткрытьПриемку(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ОтчетСверкаСФ.ТекущиеДанные;
			
	Если НЕ ТекСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Накладная) Тогда
			СообщениеСсылка = НайтиСообщениеДокумента(ТекСтрока.Накладная,"RECADV");
			Если Не СообщениеСсылка = Неопределено Тогда
				ОткрытьКарточкуСообщения(СообщениеСсылка,ТекСтрока.Накладная,"RECADV","Входящее");
			Иначе
				ВывестиПредупреждение_КонтурEDI("Приёмка не найдена.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Процедура КоманднаяПанельСверкиСФПоказатьРасхождения(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ОтчетСверкаСФ.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		
		СообщениеОтгрузкаСсылка = НайтиСообщениеДокумента(ТекСтрока.Накладная,"DESADV");
		Если СообщениеОтгрузкаСсылка = Неопределено Тогда
			ВывестиПредупреждение_КонтурEDI("Отгрузка не найдена.");
			Возврат;
		КонецЕсли;
		
		СообщениеПриемкаСсылка	= НайтиСообщениеДокумента(ТекСтрока.Накладная,"RECADV");
		Если СообщениеПриемкаСсылка = Неопределено Тогда
			ВывестиПредупреждение_КонтурEDI("Приёмка не найдена.");
			Возврат;
		КонецЕсли;
		
		СравниваемыеПоля = Новый СписокЗначений;
		СравниваемыеПоля.Добавить("Количество");
		СравниваемыеПоля.Добавить("ЦенаБезНДС");
		СравниваемыеПоля.Добавить("ЦенаСНДС");
		Параметры = Новый Структура;
		Параметры.Вставить("ВидРасхождения", 	"РасхожденияПриемки");
		Параметры.Вставить("Накладная",			ТекСтрока.Накладная);
		Параметры.Вставить("Параметры",			Неопределено);
		Параметры.Вставить("СравниваемыеПоля",	СравниваемыеПоля);
		ФормаПросмотра = ПолучитьФорму("ФормаСервис_ПросмотрРасхождений");
		ФормаПросмотра.Параметры = Параметры;
		ФормаПросмотра.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСверкиСФОтправитьОтмеченные(Кнопка)

	ФормаГрупповойОтправки = ПолучитьФорму("ФормаСервис_ГрупповаяОтправкаСообщений");
	ФормаГрупповойОтправки.ТипСообщения = "INVOIC";
	ФормаГрупповойОтправки.НеПроверятьОтправкуСообщения = Истина;
	
	Для каждого Стр Из ОтчетСверкаСФ Цикл
		Если Стр.Пометка Тогда
			Если ЗначениеЗаполнено(Стр.СчетФактура) Тогда
				НоваяСтрока = ФормаГрупповойОтправки.ТаблицаСообщений.Добавить();
				НоваяСтрока.НомерЗаказа 	= Стр.НомерЗаказа;
				НоваяСтрока.ДатаЗаказа 		= Стр.ДатаЗаказа;
				НоваяСтрока.Документ 	   = Стр.СчетФактура;
				НоваяСтрока.СуммаДокумента = Стр.СуммаСФВ1С;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ФормаГрупповойОтправки.ОткрытьМодально();

КонецПроцедуры

Процедура КоманднаяПанельСверкиСФВывестиСписок(Кнопка)
	
	//ВывестиДанныеНаПечать();	
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КонтурEDI_ОбновитьЖурналСообщений" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") и Параметр.Свойство("ИмяФормы") И 
			 Параметр.ИмяФормы = "ФормаСервис_ГрупповаяОтправкаСообщений" 		 Тогда
			ВывестиПредупреждение_КонтурEDI("Для переотправки счетов-фактур выполните обмен с сервером.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//интерактив
Процедура ОтчетСверкаСФВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "СчетФактура" Тогда
		ВыбраннаяСтрока.СчетФактура.ПолучитьФорму().Открыть();
	ИначеЕсли Колонка.Имя = "Накладная" Тогда
		ВыбраннаяСтрока.Накладная.ПолучитьФорму().Открыть();
	ИначеЕсли Колонка.Имя = "Комментарий" Тогда
		ВывестиПредупреждение_КонтурEDI(ВыбраннаяСтрока.Комментарий);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПартнерНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыбратьЭлементСправочника(Партнер,"Партнер",,СтандартнаяОбработка);
	
	СтруктураЭлемента = ПолучитьЭлементСправочника("Партнеры", Партнер);
	
	Если СтруктураЭлемента <> Неопределено Тогда
	
		Если ВнешнееХранилище Тогда
			ПредставлениеПартнера = СоединениеСХранилищем.ЗначениеИзСтрокиВнутр(Партнер).Наименование;
		Иначе
			ПредставлениеПартнера = СокрЛП(Партнер);
		КонецЕсли;
		
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПолеВыбораТипыДокументовПриИзменении(Элемент)
	
	ОтчетСверкаСФ.Очистить();
	НастроитьФорму();	
	
КонецПроцедуры

Процедура ОтчетСверкаСФПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	//настройки видимости ------------------------------------------------------
	
	ОбщиеКолонки		= "Документы,СтатусВДД,СуммаВ1С,СуммаВДД,Комментарий";
	КолонкиТОРГ12		= "Накладная,СтатусТорг12ВДД,СуммаНакладнойВ1С,СуммаТорг12ВДД,КомментарийТорг12ВДД";
	КолонкиСФ			= "СчетФактура,СтатусЭСФВДД,СуммаСФВ1С,СуммаЭСФВДД,КомментарийЭСФВДД";
	
	Если СоставЭДО = "ТОРГ12" Тогда
		
		ВидимыеКолонки		= КолонкиТОРГ12;
		НевидимыеКолонки	= КолонкиСФ;
		
	ИначеЕсли СоставЭДО = "ТОРГ12+ЭСФ" Тогда
		
		ВидимыеКолонки		= КолонкиТОРГ12+","+КолонкиСФ;
		НевидимыеКолонки	= "";
		
	ИначеЕсли СоставЭДО = "ЭСФ" Тогда 
		
		ВидимыеКолонки		= КолонкиСФ;
		НевидимыеКолонки	= КолонкиТОРГ12;
		
	КонецЕсли;
	
	НевидимыеКолонки = НевидимыеКолонки+","+ОбщиеКолонки;//скроем общие заголовки
	
	Для Каждого ИмяКолонки Из EDI_РазложитьСтрокуВМассивСлов(НевидимыеКолонки,",") Цикл
		ОформлениеСтроки.Ячейки[ИмяКолонки].Видимость 		= Ложь;
	КонецЦикла;	
	
	Для Каждого ИмяКолонки Из EDI_РазложитьСтрокуВМассивСлов(ВидимыеКолонки,",") Цикл
		ОформлениеСтроки.Ячейки[ИмяКолонки].Видимость 		= Истина;
	КонецЦикла;	
	
	//настройки заливки ------------------------------------------------------
	
	//суммы 1С и ДД различаются
	Если Найти(ДанныеСтроки.СоставЭДО,"ТОРГ12") > 0 И НЕ ДанныеСтроки.СуммаНакладнойВ1С = ДанныеСтроки.СуммаТорг12ВДД Тогда
		ОформлениеСтроки.Ячейки.СуммаТорг12ВДД.ЦветФона = WebЦвета.СветлоРозовый;
	КонецЕсли;
	Если Найти(ДанныеСтроки.СоставЭДО,"ЭСФ") > 0 И НЕ ДанныеСтроки.СуммаСФВ1С = ДанныеСтроки.СуммаЭСФВДД Тогда
		ОформлениеСтроки.Ячейки.СуммаЭСФВДД.ЦветФона = WebЦвета.СветлоРозовый;
	КонецЕсли;
	
	//комментарий к документу в ДД
	Если ЗначениеЗаполнено(ДанныеСтроки.КомментарийТорг12ВДД) Тогда
		ОформлениеСтроки.Ячейки.КомментарийТорг12ВДД.ЦветФона = WebЦвета.СветлоРозовый;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.КомментарийЭСФВДД) Тогда
		ОформлениеСтроки.Ячейки.КомментарийЭСФВДД.ЦветФона = WebЦвета.СветлоРозовый;
	КонецЕсли;
	
	//выделяем красным статус "Нет доступа в Диадок"
	Если ДанныеСтроки.СтатусТорг12ВДД = "Нет доступа в Диадок" Тогда
		ОформлениеСтроки.Ячейки.СтатусТорг12ВДД.ЦветФона = WebЦвета.СветлоРозовый;
	КонецЕсли;
	Если ДанныеСтроки.СтатусЭСФВДД = "Нет доступа в Диадок" Тогда
		ОформлениеСтроки.Ячейки.СтатусЭСФВДД.ЦветФона = WebЦвета.СветлоРозовый;
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаСформироватьНажатие(Элемент)
	
	ПроверитьПолнотуНастроек();
	
	Сформировать();
		
КонецПроцедуры

Процедура ОтчетСверкаСФПриАктивизацииСтроки(Элемент)
	
	ОбъединенныйКомментарий = "";
	
	Если Не Элемент.ТекущаяСтрока = Неопределено Тогда		
		
		КомментарийТорг12ВДД 	= Элемент.ТекущаяСтрока.КомментарийТорг12ВДД;
		КомментарийЭСФВДД		= Элемент.ТекущаяСтрока.КомментарийЭСФВДД;
		
		Если ЗначениеЗаполнено(КомментарийТорг12ВДД) или ЗначениеЗаполнено(КомментарийЭСФВДД) Тогда
				
			Если ЗначениеЗаполнено(КомментарийТорг12ВДД) Тогда
				ОбъединенныйКомментарий = ОбъединенныйКомментарий + "Комментарий ТОРГ12 в ДД: ";
				ОбъединенныйКомментарий = ОбъединенныйКомментарий + КомментарийТорг12ВДД;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КомментарийЭСФВДД) Тогда
				Если ЗначениеЗаполнено(ОбъединенныйКомментарий) Тогда
					ОбъединенныйКомментарий = ОбъединенныйКомментарий + Символы.ПС;		
				КонецЕсли;
				ОбъединенныйКомментарий = ОбъединенныйКомментарий + "Комментарий ЭСФ в ДД: ";
				ОбъединенныйКомментарий = ОбъединенныйКомментарий + КомментарийЭСФВДД;
			КонецЕсли;
		
		КонецЕсли;
					
	КонецЕсли;
	
	ЭлементыФормы.ПолеОбъединенныйКомментарий.Значение = ОбъединенныйКомментарий;
		
КонецПроцедуры

//ограничения на добавление/изменение/удаление ------------------------------------------------

Процедура ОтчетСверкаСФПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ОтчетСверкаСФПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ОтчетСверкаСФПередНачаломИзменения(Элемент, Отказ)
	
	Если Не Элемент.ТекущаяКолонка.Имя = "Пометка" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

//вспомогательные методы ----------------------------------------------------------------------

Процедура ПроверитьПолнотуНастроек()
	
	//проверка заполнения начальных условий
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		ВывестиПредупреждение_КонтурEDI("Не указан партнер!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ВывестиПредупреждение_КонтурEDI("Не указана дата начала!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ВывестиПредупреждение_КонтурEDI("Не указана дата окончания!");
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

Процедура Сформировать()
	
	Данные = ПолучитьДанные();
	
	ВывестиДанные(Данные);
	
КонецПроцедуры

Функция ПолучитьДанные()
	
	СтрокиКонтрагентов = ТаблицаКэшПартнеровКонтрагентов.НайтиСтроки(Новый Структура("Партнер",Партнер));
	МассивКонтрагентов = Новый Массив;
	Для Каждого Стр Из СтрокиКонтрагентов Цикл
		МассивКонтрагентов.Добавить(Стр.Контрагент);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Партнер",		Партнер);
	Запрос.УстановитьПараметр("ДатаНачала",		НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Контрагенты",	МассивКонтрагентов);
	Запрос.УстановитьПараметр("Организация",	Организация);
		
	//часть запроса по документам в базе
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Контрагент,
	|	СчетФактураВыданный.СуммаДокумента,
	|	СчетФактураВыданный.Дата
	|ПОМЕСТИТЬ ВремТабСФ
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Контрагент В(&Контрагенты)
	|	И (СчетФактураВыданный.Организация = &Организация
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Накладная,
	|	ВремТабСФ.Контрагент,
	|	ВремТабСФ.СуммаДокумента,
	|	ВремТабСФ.Дата,
	|	ВремТабСФ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТабСФ
	|ИЗ
	|	ВремТабСФ КАК ВремТабСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ВремТабСФ.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
	|ГДЕ
	|	ВЫРАЗИТЬ(СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Документ.РеализацияТоваровУслуг) ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Накладная";
	
	Если ИмяКонфигурации1С = "УТ_10_2" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Документ.СчетФактураВыданный.ДокументыОснования","Документ.СчетФактураВыданный");
	КонецЕсли;
	
	ШаблонЦепочкиДокументов = ПолучитьКонстантуEDI("ШаблонЦепочкиДокументов_Поставщик");
	InvoicНеИзСФ 			= Найти(ШаблонЦепочкиДокументов,"СФ") = 0;
	
	Если InvoicНеИзСФ Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Контрагент,
		|	РеализацияТоваровУслуг.СуммаДокумента,
		|	РеализацияТоваровУслуг.Дата
		|ПОМЕСТИТЬ ВремТабСФ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РеализацияТоваровУслуг.Проведен
		|	И РеализацияТоваровУслуг.Контрагент В(&Контрагенты)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВремТабСФ.Ссылка КАК Накладная,
		|	ВремТабСФ.Контрагент,
		|	ВремТабСФ.СуммаДокумента,
		|	ВремТабСФ.Дата,
		|	ВремТабСФ.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТабСФ
		|ИЗ
		|	ВремТабСФ КАК ВремТабСФ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Накладная";			
		
	КонецЕсли;	
		
	//теперь часть запроса по сообщениям
	ТекстЗапросаПоСообщениям = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сообщения.Документ,
	|	Количество(Сообщения.Ссылка) КАК Количество
	|ПОМЕСТИТЬ СчетчикСообщений
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения КАК Сообщения
	|ГДЕ
	|	Сообщения.Документ В (	ВЫБРАТЬ 
	|								ТабСФ.Накладная КАК Документ 
	|							ИЗ 
	|								ТабСФ 
	|							ОБЪЕДИНИТЬ 
	|							ВЫБРАТЬ 
	|								ТабСФ.Ссылка 
	|							ИЗ 
	|								ТабСФ)
	|СГРУППИРОВАТЬ ПО
	|	Сообщения.Документ						
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабСФ.Накладная КАК Накладная,
	|	ТабСФ.Ссылка КАК СчетФактура,
	|	ТабСФ.Контрагент,
	|	ТабСФ.Дата КАК Дата,
	|	ТабСФ.СуммаДокумента,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаЯщикДД.Значение КАК СТРОКА(36)), """") КАК boxId,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаСообщениеДД.Значение КАК СТРОКА(36)), """") КАК messageId,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ОтчетСверкаСФДД.Значение КАК СТРОКА(36)), """") КАК invoiceId,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаТорг12ДД.Значение КАК СТРОКА(36)), """") КАК torg12Id,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтурEDI_СтатусыДокументов.Статус КАК СТРОКА(36)), """") КАК СтатусНакладной,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтурEDI_Сообщения.Статус КАК СТРОКА(36)), """") КАК СтатусСФ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтурEDI_Сообщения.НомерЗаказа КАК СТРОКА(35)), """") КАК НомерЗаказа,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтурEDI_Сообщения.ДатаЗаказа КАК ДАТА), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗаказа,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаСообщениеДД.Значение КАК СТРОКА(36)), """") = """"
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаТорг12ДД.Значение КАК СТРОКА(36)), """") = """"
	|							И ЕСТЬNULL(ВЫРАЗИТЬ(ОтчетСверкаСФДД.Значение КАК СТРОКА(36)), """") = """"
	|						ТОГДА ""ТОРГ12""
	|					КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаТорг12ДД.Значение КАК СТРОКА(36)), """") = """"
	|							И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ОтчетСверкаСФДД.Значение КАК СТРОКА(36)), """") = """"
	|						ТОГДА ""ЭСФ""
	|					КОГДА НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаТорг12ДД.Значение КАК СТРОКА(36)), """") = """"
	|							И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ОтчетСверкаСФДД.Значение КАК СТРОКА(36)), """") = """"
	|						ТОГДА ""ТОРГ12+ЭСФ""
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СоставЭДО,
	|	ВЫБОР
	|	КОГДА ЕСТЬNULL(КоличествоНакладных.Количество,0)+ЕСТЬNULL(КоличествоСФ.Количество,0) > 0
	|		ТОГДА ""EDI""
	|		ИНАЧЕ ""Вручную""
	|	КОНЕЦ КАК Создано
	|ИЗ
	|	ТабСФ КАК ТабСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаЯщикДД
	|		ПО ТабСФ.Ссылка = ТаблицаЯщикДД.Объект
	|			И (ТаблицаЯщикДД.Свойство = ""boxId"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаСообщениеДД
	|		ПО ТабСФ.Ссылка = ТаблицаСообщениеДД.Объект
	|			И (ТаблицаСообщениеДД.Свойство = ""messageId"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ОтчетСверкаСФДД
	|		ПО ТабСФ.Ссылка = ОтчетСверкаСФДД.Объект
	|			И (ОтчетСверкаСФДД.Свойство = ""invoiceId"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК ТаблицаТорг12ДД
	|		ПО ТабСФ.Ссылка = ТаблицаТорг12ДД.Объект
	|			И (ТаблицаТорг12ДД.Свойство = ""torg12Id"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СтатусыДокументов КАК КонтурEDI_СтатусыДокументов
	|		ПО ТабСФ.Накладная = КонтурEDI_СтатусыДокументов.Документ
	|			И (КонтурEDI_СтатусыДокументов.ИмяСтатуса = ""Приемка"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	|		ПО ТабСФ.Ссылка = КонтурEDI_Сообщения.Документ
	|			И (КонтурEDI_Сообщения.ТипСообщения = ""INVOIC"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетчикСообщений  КАК КоличествоНакладных
	|		ПО ТабСФ.Накладная = КоличествоНакладных.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетчикСообщений  КАК КоличествоСФ
	|		ПО ТабСФ.Ссылка = КоличествоСФ.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабСФ.Дата УБЫВ";
	
	Запрос.Выполнить();//закинем результат первой части запроса во временные таблицы
	
	Если ВнешнееХранилище Тогда
		
		Запрос.Текст = "Выбрать * Из ТабСФ";
		ТабСФ = Запрос.Выполнить().Выгрузить();
		
		Запрос = ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
		Запрос.Текст = "Выбрать * Поместить ТабСФ Из &ТабСФ как _ТабСФ Индексировать По Ссылка,Накладная";
		Запрос.УстановитьПараметр("ТабСФ",ПоместитьТаблицуВоВнешнююБазу(ТабСФ));
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапросаПоСообщениям;
		ТЗ = Запрос.Выполнить().Выгрузить();
		СтруктураКолонокПреобразуемыхВСсылки = Новый Структура("Накладная,СчетФактура,Контрагент"
		,Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг")
		,?(InvoicНеИзСФ, Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"), Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"))
		,Новый ОписаниеТипов("СправочникСсылка.Контрагенты")
		);
		ТЗ = ПолучитьТаблицуИзВнешнейБазы(ТЗ,СтруктураКолонокПреобразуемыхВСсылки);
		
	Иначе
		
		Запрос.Текст = ТекстЗапросаПоСообщениям;
		ТЗ = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
		
	Возврат ТЗ;
	
КонецФункции

Процедура ВывестиДанные(Данные)
	
	ЦепочкаСодержитRECADV = (ПолучитьЗначениеСвойстваОбъектаEDI(Партнер,"RECADV")=Истина);
	
	ОтчетСверкаСФ.Очистить();
		
	Всего = СокрЛП(Данные.Количество());
	
	сч = 0;
	
	Для каждого Стр Из Данные Цикл
		
		ОбработкаПрерыванияПользователя();
		
		сч = сч + 1;
		
		Состояние("Обрабатывается "+СокрЛП(сч)+" документ из "+Всего+". Для остановки нажмите Ctrl+Break");
		
		_ДобавитьСтрокуДанных(Стр,ЦепочкаСодержитRECADV);
		
		
	КонецЦикла;
     	
КонецПроцедуры

Процедура _ДобавитьСтрокуДанных(Стр,ЦепочкаСодержитRECADV)
	
	НоваяСтрока 					= ОтчетСверкаСФ.Добавить();
	
	//накладная, сф и контрагент
	НоваяСтрока.Накладная 			= Стр.Накладная;
	НоваяСтрока.СчетФактура 		= Стр.СчетФактура;
	НоваяСтрока.Контрагент 			= Стр.Контрагент;
	
	//дата и номер заказа (для заполнения данных при переотправке СФ)
	НоваяСтрока.НомерЗаказа			= Стр.НомерЗаказа;
	НоваяСтрока.ДатаЗаказа			= Стр.ДатаЗаказа;
	
	//состав ЭДО
	НоваяСтрока.СоставЭДО = Стр.СоставЭДО;
	
	//статус отправки (сообщения INVOIC)
	НоваяСтрока.СтатусОтправки = "Не отправлен";
	Если ЗначениеЗаполнено(Стр.СтатусСФ) Тогда
		СчетФактура = ПрочитатьСообщение(,Стр.СчетФактура,"INVOIC","Исходящее");                 		   
		Если Не ЗначениеЗаполнено(СчетФактура) Тогда
			Возврат;
		КонецЕсли;
		СтатусОтправки = "";
		Если Стр.СтатусСФ = "Отправлен" Тогда                                                                         
			СтатусОтправки = "Отправлен";
		ИначеЕсли Стр.СтатусСФ = "Доставлен" Тогда
			СтатусОтправки = "";
		ИначеЕсли Стр.СтатусСФ = "Ожидает исправления ошибок" Тогда
			СтатусОтправки = "Ожидает исправления ошибок";
		ИначеЕсли Стр.СтатусСФ = "Ожидает подписания" Тогда	
			СтатусОтправки = "Ожидает подписания";
		ИначеЕсли Стр.СтатусСФ = "Подписан и отправлен" Тогда	
			СтатусОтправки = "Подписан и отправлен";
		КонецЕсли;
		НоваяСтрока.СтатусОтправки = СтатусОтправки;
	КонецЕсли;
	
	//статус приемки
	СтатусПриемки = "";
	Если ЦепочкаСодержитRECADV Тогда
		СтатусПриемки = "Не получена приемка";
		Если Стр.СтатусНакладной = "Обработан" Тогда                                                                         
			СтатусПриемки = "Приемка обработана";
		ИначеЕсли Стр.СтатусНакладной = "Принят частично (обработан)" Тогда
			СтатусПриемки = "Приемка обработана";
		ИначеЕсли Стр.СтатусНакладной = "Принят полностью" Тогда
			СтатусПриемки = "Приемка обработана";
		ИначеЕсли Стр.СтатусНакладной = "Принят частично" Тогда	
			СтатусПриемки = "Не обработана приемка";
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.СтатусПриемки = СтатусПриемки;
	
	//сумма приемки		
	Если ЗначениеЗаполнено(Стр.СтатусНакладной) Тогда
		Приемка = ПрочитатьСообщение(,Стр.Накладная,"RECADV","Входящее");                 		   
		Если ЗначениеЗаполнено(Приемка) Тогда
			СуммаПриемки = Приемка.СуммаВсего;
			Если Не ЗначениеЗаполнено(СуммаПриемки) Тогда
				СуммаПриемки = Приемка.Товары.Итог("СуммаСНДС");
			КонецЕсли;
			НоваяСтрока.СуммаПриемки = СуммаПриемки;
		КонецЕсли;
	КонецЕсли;
	
	//сумма накладной 1С
	Если ЗначениеЗаполнено(Стр.Накладная) Тогда
		НоваяСтрока.СуммаНакладнойВ1С = Стр.Накладная.СуммаДокумента;
	КонецЕсли;
	
	//сумма СФ 1С
	Если ЗначениеЗаполнено(Стр.СчетФактура) Тогда
		НоваяСтрока.СуммаСФВ1С = Стр.СчетФактура.СуммаДокумента;
	КонецЕсли;
	
	//статусы ДД, суммы ДД, комментарии ДД
	Если НЕ ЗначениеЗаполнено(Стр.boxId) Тогда
		Возврат;//нечего заполнять
	Иначе
		
		Попытка
			ИДОрганизации = СтрЗаменить(Стр.boxId,"-","")+"@diadoc.ru";
			ОрганизацияДД = РаботаССерверомДиадок.Соединение.GetOrganizationById(ИДОрганизации);//Диадок сам кэширует, но хорошо бы и самим
		Исключение
			НоваяСтрока.СтатусТорг12ВДД	= "Нет доступа в Диадок";
			НоваяСтрока.СтатусЭСФВДД 	= "Нет доступа в Диадок";
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	//накладная в ДД
	Если ЗначениеЗаполнено(Стр.messageId) И ЗначениеЗаполнено(Стр.torg12Id) Тогда
		
		ДокументПолучен = Ложь;
		Попытка
			ДокументДД 		= ОрганизацияДД.GetDocumentById(Стр.messageId+Стр.torg12Id);
			ДокументПолучен = Истина;
		Исключение
		КонецПопытки;
		
		Если ДокументПолучен Тогда
			
			Сумма		= 0;
			Статус		= "";
			Комментарий = "";
			
			Сумма = ДокументДД.total;
			Статус = "Проверьте статус в Диадоке";
			СтатусСтрокой = ДокументДД.status;
			
			Если ДокументДД.RoamingNotificationStatus = "RoamingNotificationStatusError" Тогда
				//http://api-docs.diadoc.ru/ru/latest/proto/Document.html
				Статус 		= "Ошибки роуминга";
				Комментарий = ДокументДД.RoamingNotificationStatusDescription;
			ИначеЕсли СтатусСтрокой = "OutboundWithRecipientSignature" ИЛИ 
				СтатусСтрокой = "InboundWithRecipientSignature" ИЛИ 
				СтатусСтрокой = "InboundWithRecipientSignature"  Тогда   
				Статус	= "Документооборот завершен";
			ИначеЕсли СтатусСтрокой = "OutboundWaitingForSenderSignature" Тогда
				Статус	= "Ожидается подпись отправителя";	
			ИначеЕсли СтатусСтрокой = "OutboundWaitingForRecipientSignature" Тогда
				Статус	= "Ожидается подпись покупателя";
			ИначеЕсли СтатусСтрокой = "OutboundRecipientSignatureRequestRejected" ИЛИ 
				СтатусСтрокой = "InboundRecipientSignatureRequestRejected"  Тогда
				Статус 		= "Отказано в подписи";
				Комментарий = ДокументДД.GetRejectionComment();
			КонецЕсли;
			
			НоваяСтрока.СуммаТорг12ВДД 			= Сумма;
			НоваяСтрока.СтатусТорг12ВДД			= Статус;         
			НоваяСтрока.КомментарийТорг12ВДД	= Комментарий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//СФ в ДД
	Если ЗначениеЗаполнено(Стр.messageId) И ЗначениеЗаполнено(Стр.invoiceId) Тогда
		
		ДокументПолучен = Ложь;
		Попытка
			ДокументДД = ОрганизацияДД.GetDocumentById(Стр.messageId+Стр.invoiceId);
			ДокументПолучен = Истина;
		Исключение
		КонецПопытки;
		
		Если ДокументПолучен Тогда
			
			Сумма		= 0;
			Статус		= "";
			Комментарий = "";
			
			Сумма = ДокументДД.total;
			СтатусСтрокой = ДокументДД.status;
			Если ДокументДД.RoamingNotificationStatus = "RoamingNotificationStatusError" Тогда
				//http://api-docs.diadoc.ru/ru/latest/proto/Document.html
				Статус 		= "Ошибки роуминга";
				Комментарий = ДокументДД.RoamingNotificationStatusDescription;
			ИначеЕсли СтатусСтрокой = "OutboundWaitingForSenderSignature" Тогда   
				Статус = "Ожидается подпись отправителя";
			ИначеЕсли СтатусСтрокой = "OutboundFinished" Тогда
				Статус = "Документооборот завершен";
			ИначеЕсли СтатусСтрокой = "OutboundInvalidSenderSignature" Тогда
				Статус = "Не отправлен, подпись некорректная";
			ИначеЕсли СтатусСтрокой = "OutboundNotFinished" Тогда
				Статус = "Документооборот не завершён";
			ИначеЕсли СтатусСтрокой = "OutboundWaitingForInvoiceReceipt" Тогда
				Статус = "Ожидается извещение о получении СФ";
			КонецЕсли;			
			//запрос уточнения
			Если ДокументДД.AmendmentRequested = Истина Тогда
				Статус = Статус + " (уточнение)";
				Комментарий = ДокументДД.GetAmendmentRequestedComment();
			КонецЕсли;
			
			НоваяСтрока.СуммаЭСФВДД 		= Сумма;
			НоваяСтрока.СтатусЭСФВДД		= Статус;         
			НоваяСтрока.КомментарийЭСФВДД	= Комментарий;
			
			//на будущее
			//запрос аннулирования (статус аннулирования доступен в компоненте версии 4)
			//СтатусАннулированияСтрокой = "";
			//Попытка
			//	СтатусАннулированияСтрокой = ДокументДД.RevocationStatus;
			//Исключение
			//КонецПопытки;
			//Если ЗначениеЗаполнено(СтатусАннулированияСтрокой) Тогда
			//	Если СтатусАннулированияСтрокой = "RevocationIsRequestedByMe" Тогда
			//		НоваяСтрока.СтатусДокументаДД = НоваяСтрока.СтатусДокументаДД + ", отправлен запрос аннулирования";		
			//	ИначеЕсли СтатусАннулированияСтрокой = "RequestsMyRevocation" Тогда
			//		НоваяСтрока.СтатусДокументаДД = НоваяСтрока.СтатусДокументаДД + ", получен запрос аннулирования";
			//	ИначеЕсли СтатусАннулированияСтрокой = "RevocationAccepted" Тогда
			//		НоваяСтрока.СтатусДокументаДД = НоваяСтрока.СтатусДокументаДД + ", документ аннулирован";
			//	ИначеЕсли СтатусАннулированияСтрокой = "RevocationRejected" Тогда
			//		НоваяСтрока.СтатусДокументаДД = НоваяСтрока.СтатусДокументаДД + ", отказ по запросу аннулирования";
			//	КонецЕсли;
			//КонецЕсли;
			////корректировка
			//Если ДокументДД.Corrected = Истина Тогда
			//	НоваяСтрока.СтатусДокументаДД = НоваяСтрока.СтатусДокументаДД + ", создана корректировка";	
			//КонецЕсли;
			////исправление
			//Если ДокументДД.Revised = Истина Тогда
			//	НоваяСтрока.СтатусДокументаДД = НоваяСтрока.СтатусДокументаДД + ", создано исправление";	
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//создано (EDI или вручную)
	НоваяСтрока.Создано = Стр.Создано;
		
КонецПроцедуры


Процедура УстановитьЗначениеПометки(Значение)
	
	Для Каждого Строка Из ОтчетСверкаСФ Цикл
		Строка.Пометка = Значение;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиДанныеНаПечать()
	
	//Таблица = ЭлементыФормы.ОтчетСверкаСФ.Значение.Выгрузить();
	//Таблица.Колонки.Удалить("Пометка");
	//Таблица.Колонки.Удалить("НомерСтроки");
	//Таблица.Колонки.Удалить("НомерЗаказа");
	//Таблица.Колонки.Удалить("ДатаЗаказа");
	//
	//Построитель = Новый ПостроительОтчета;
	//Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(Таблица);
	//Построитель.ЗаполнитьНастройки();
	//ТабличныйДокумент = Новый ТабличныйДокумент; 
	//Построитель.Вывести(ТабличныйДокумент);
	//ТабличныйДокумент.АвтоМасштаб = Истина;
	//ТабличныйДокумент.Показать();
	
КонецПроцедуры
